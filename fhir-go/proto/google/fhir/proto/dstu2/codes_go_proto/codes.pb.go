//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/dstu2/codes.proto

package codes_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/dstu2/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Primitive value for code.
type ActionListCode_Value int32

const (
	ActionListCode_INVALID_UNINITIALIZED ActionListCode_Value = 0
	ActionListCode_CANCEL                ActionListCode_Value = 1
	ActionListCode_POLL                  ActionListCode_Value = 2
	ActionListCode_REPROCESS             ActionListCode_Value = 3
	ActionListCode_STATUS                ActionListCode_Value = 4
)

// Enum value maps for ActionListCode_Value.
var (
	ActionListCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CANCEL",
		2: "POLL",
		3: "REPROCESS",
		4: "STATUS",
	}
	ActionListCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CANCEL":                1,
		"POLL":                  2,
		"REPROCESS":             3,
		"STATUS":                4,
	}
)

func (x ActionListCode_Value) Enum() *ActionListCode_Value {
	p := new(ActionListCode_Value)
	*p = x
	return p
}

func (x ActionListCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionListCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[0].Descriptor()
}

func (ActionListCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[0]
}

func (x ActionListCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionListCode_Value.Descriptor instead.
func (ActionListCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{0, 0}
}

// Primitive value for code.
type AdjudicationErrorCode_Value int32

const (
	AdjudicationErrorCode_INVALID_UNINITIALIZED AdjudicationErrorCode_Value = 0
	AdjudicationErrorCode_A001                  AdjudicationErrorCode_Value = 1
	AdjudicationErrorCode_A002                  AdjudicationErrorCode_Value = 2
)

// Enum value maps for AdjudicationErrorCode_Value.
var (
	AdjudicationErrorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "A001",
		2: "A002",
	}
	AdjudicationErrorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"A001":                  1,
		"A002":                  2,
	}
)

func (x AdjudicationErrorCode_Value) Enum() *AdjudicationErrorCode_Value {
	p := new(AdjudicationErrorCode_Value)
	*p = x
	return p
}

func (x AdjudicationErrorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdjudicationErrorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[1].Descriptor()
}

func (AdjudicationErrorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[1]
}

func (x AdjudicationErrorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdjudicationErrorCode_Value.Descriptor instead.
func (AdjudicationErrorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{1, 0}
}

// Primitive value for code.
type AdministrativeGenderCode_Value int32

const (
	AdministrativeGenderCode_INVALID_UNINITIALIZED AdministrativeGenderCode_Value = 0
	AdministrativeGenderCode_MALE                  AdministrativeGenderCode_Value = 1
	AdministrativeGenderCode_FEMALE                AdministrativeGenderCode_Value = 2
	AdministrativeGenderCode_OTHER                 AdministrativeGenderCode_Value = 3
	AdministrativeGenderCode_UNKNOWN               AdministrativeGenderCode_Value = 4
)

// Enum value maps for AdministrativeGenderCode_Value.
var (
	AdministrativeGenderCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MALE",
		2: "FEMALE",
		3: "OTHER",
		4: "UNKNOWN",
	}
	AdministrativeGenderCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MALE":                  1,
		"FEMALE":                2,
		"OTHER":                 3,
		"UNKNOWN":               4,
	}
)

func (x AdministrativeGenderCode_Value) Enum() *AdministrativeGenderCode_Value {
	p := new(AdministrativeGenderCode_Value)
	*p = x
	return p
}

func (x AdministrativeGenderCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdministrativeGenderCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[2].Descriptor()
}

func (AdministrativeGenderCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[2]
}

func (x AdministrativeGenderCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdministrativeGenderCode_Value.Descriptor instead.
func (AdministrativeGenderCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{2, 0}
}

// Primitive value for code.
type AllergyIntoleranceCategoryCode_Value int32

const (
	AllergyIntoleranceCategoryCode_INVALID_UNINITIALIZED AllergyIntoleranceCategoryCode_Value = 0
	AllergyIntoleranceCategoryCode_FOOD                  AllergyIntoleranceCategoryCode_Value = 1
	AllergyIntoleranceCategoryCode_MEDICATION            AllergyIntoleranceCategoryCode_Value = 2
	AllergyIntoleranceCategoryCode_ENVIRONMENT           AllergyIntoleranceCategoryCode_Value = 3
	AllergyIntoleranceCategoryCode_OTHER                 AllergyIntoleranceCategoryCode_Value = 4
)

// Enum value maps for AllergyIntoleranceCategoryCode_Value.
var (
	AllergyIntoleranceCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FOOD",
		2: "MEDICATION",
		3: "ENVIRONMENT",
		4: "OTHER",
	}
	AllergyIntoleranceCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FOOD":                  1,
		"MEDICATION":            2,
		"ENVIRONMENT":           3,
		"OTHER":                 4,
	}
)

func (x AllergyIntoleranceCategoryCode_Value) Enum() *AllergyIntoleranceCategoryCode_Value {
	p := new(AllergyIntoleranceCategoryCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[3].Descriptor()
}

func (AllergyIntoleranceCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[3]
}

func (x AllergyIntoleranceCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCategoryCode_Value.Descriptor instead.
func (AllergyIntoleranceCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{3, 0}
}

// Primitive value for code.
type AllergyIntoleranceCriticalityCode_Value int32

const (
	AllergyIntoleranceCriticalityCode_INVALID_UNINITIALIZED AllergyIntoleranceCriticalityCode_Value = 0
	AllergyIntoleranceCriticalityCode_CRITL                 AllergyIntoleranceCriticalityCode_Value = 1
	AllergyIntoleranceCriticalityCode_CRITH                 AllergyIntoleranceCriticalityCode_Value = 2
	AllergyIntoleranceCriticalityCode_CRITU                 AllergyIntoleranceCriticalityCode_Value = 3
)

// Enum value maps for AllergyIntoleranceCriticalityCode_Value.
var (
	AllergyIntoleranceCriticalityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CRITL",
		2: "CRITH",
		3: "CRITU",
	}
	AllergyIntoleranceCriticalityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CRITL":                 1,
		"CRITH":                 2,
		"CRITU":                 3,
	}
)

func (x AllergyIntoleranceCriticalityCode_Value) Enum() *AllergyIntoleranceCriticalityCode_Value {
	p := new(AllergyIntoleranceCriticalityCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCriticalityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCriticalityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[4].Descriptor()
}

func (AllergyIntoleranceCriticalityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[4]
}

func (x AllergyIntoleranceCriticalityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCriticalityCode_Value.Descriptor instead.
func (AllergyIntoleranceCriticalityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{4, 0}
}

// Primitive value for code.
type AllergyIntoleranceStatusCode_Value int32

const (
	AllergyIntoleranceStatusCode_INVALID_UNINITIALIZED AllergyIntoleranceStatusCode_Value = 0
	AllergyIntoleranceStatusCode_ACTIVE                AllergyIntoleranceStatusCode_Value = 1
	AllergyIntoleranceStatusCode_UNCONFIRMED           AllergyIntoleranceStatusCode_Value = 2
	AllergyIntoleranceStatusCode_CONFIRMED             AllergyIntoleranceStatusCode_Value = 3
	AllergyIntoleranceStatusCode_INACTIVE              AllergyIntoleranceStatusCode_Value = 4
	AllergyIntoleranceStatusCode_RESOLVED              AllergyIntoleranceStatusCode_Value = 5
	AllergyIntoleranceStatusCode_REFUTED               AllergyIntoleranceStatusCode_Value = 6
	AllergyIntoleranceStatusCode_ENTERED_IN_ERROR      AllergyIntoleranceStatusCode_Value = 7
)

// Enum value maps for AllergyIntoleranceStatusCode_Value.
var (
	AllergyIntoleranceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "UNCONFIRMED",
		3: "CONFIRMED",
		4: "INACTIVE",
		5: "RESOLVED",
		6: "REFUTED",
		7: "ENTERED_IN_ERROR",
	}
	AllergyIntoleranceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"UNCONFIRMED":           2,
		"CONFIRMED":             3,
		"INACTIVE":              4,
		"RESOLVED":              5,
		"REFUTED":               6,
		"ENTERED_IN_ERROR":      7,
	}
)

func (x AllergyIntoleranceStatusCode_Value) Enum() *AllergyIntoleranceStatusCode_Value {
	p := new(AllergyIntoleranceStatusCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[5].Descriptor()
}

func (AllergyIntoleranceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[5]
}

func (x AllergyIntoleranceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceStatusCode_Value.Descriptor instead.
func (AllergyIntoleranceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{5, 0}
}

// Primitive value for code.
type AllergyIntoleranceTypeCode_Value int32

const (
	AllergyIntoleranceTypeCode_INVALID_UNINITIALIZED AllergyIntoleranceTypeCode_Value = 0
	AllergyIntoleranceTypeCode_ALLERGY               AllergyIntoleranceTypeCode_Value = 1
	AllergyIntoleranceTypeCode_INTOLERANCE           AllergyIntoleranceTypeCode_Value = 2
)

// Enum value maps for AllergyIntoleranceTypeCode_Value.
var (
	AllergyIntoleranceTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALLERGY",
		2: "INTOLERANCE",
	}
	AllergyIntoleranceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALLERGY":               1,
		"INTOLERANCE":           2,
	}
)

func (x AllergyIntoleranceTypeCode_Value) Enum() *AllergyIntoleranceTypeCode_Value {
	p := new(AllergyIntoleranceTypeCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[6].Descriptor()
}

func (AllergyIntoleranceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[6]
}

func (x AllergyIntoleranceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceTypeCode_Value.Descriptor instead.
func (AllergyIntoleranceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{6, 0}
}

// Primitive value for code.
type AnswerFormatCode_Value int32

const (
	AnswerFormatCode_INVALID_UNINITIALIZED AnswerFormatCode_Value = 0
	AnswerFormatCode_BOOLEAN               AnswerFormatCode_Value = 1
	AnswerFormatCode_DECIMAL               AnswerFormatCode_Value = 2
	AnswerFormatCode_INTEGER               AnswerFormatCode_Value = 3
	AnswerFormatCode_DATE                  AnswerFormatCode_Value = 4
	AnswerFormatCode_DATETIME              AnswerFormatCode_Value = 5
	AnswerFormatCode_INSTANT               AnswerFormatCode_Value = 6
	AnswerFormatCode_TIME                  AnswerFormatCode_Value = 7
	AnswerFormatCode_STRING                AnswerFormatCode_Value = 8
	AnswerFormatCode_TEXT                  AnswerFormatCode_Value = 9
	AnswerFormatCode_URL                   AnswerFormatCode_Value = 10
	AnswerFormatCode_CHOICE                AnswerFormatCode_Value = 11
	AnswerFormatCode_OPEN_CHOICE           AnswerFormatCode_Value = 12
	AnswerFormatCode_ATTACHMENT            AnswerFormatCode_Value = 13
	AnswerFormatCode_REFERENCE             AnswerFormatCode_Value = 14
	AnswerFormatCode_QUANTITY              AnswerFormatCode_Value = 15
)

// Enum value maps for AnswerFormatCode_Value.
var (
	AnswerFormatCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "BOOLEAN",
		2:  "DECIMAL",
		3:  "INTEGER",
		4:  "DATE",
		5:  "DATETIME",
		6:  "INSTANT",
		7:  "TIME",
		8:  "STRING",
		9:  "TEXT",
		10: "URL",
		11: "CHOICE",
		12: "OPEN_CHOICE",
		13: "ATTACHMENT",
		14: "REFERENCE",
		15: "QUANTITY",
	}
	AnswerFormatCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BOOLEAN":               1,
		"DECIMAL":               2,
		"INTEGER":               3,
		"DATE":                  4,
		"DATETIME":              5,
		"INSTANT":               6,
		"TIME":                  7,
		"STRING":                8,
		"TEXT":                  9,
		"URL":                   10,
		"CHOICE":                11,
		"OPEN_CHOICE":           12,
		"ATTACHMENT":            13,
		"REFERENCE":             14,
		"QUANTITY":              15,
	}
)

func (x AnswerFormatCode_Value) Enum() *AnswerFormatCode_Value {
	p := new(AnswerFormatCode_Value)
	*p = x
	return p
}

func (x AnswerFormatCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnswerFormatCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[7].Descriptor()
}

func (AnswerFormatCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[7]
}

func (x AnswerFormatCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnswerFormatCode_Value.Descriptor instead.
func (AnswerFormatCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{7, 0}
}

// Primitive value for code.
type AppointmentStatusCode_Value int32

const (
	AppointmentStatusCode_INVALID_UNINITIALIZED AppointmentStatusCode_Value = 0
	AppointmentStatusCode_PROPOSED              AppointmentStatusCode_Value = 1
	AppointmentStatusCode_PENDING               AppointmentStatusCode_Value = 2
	AppointmentStatusCode_BOOKED                AppointmentStatusCode_Value = 3
	AppointmentStatusCode_ARRIVED               AppointmentStatusCode_Value = 4
	AppointmentStatusCode_FULFILLED             AppointmentStatusCode_Value = 5
	AppointmentStatusCode_CANCELLED             AppointmentStatusCode_Value = 6
	AppointmentStatusCode_NOSHOW                AppointmentStatusCode_Value = 7
)

// Enum value maps for AppointmentStatusCode_Value.
var (
	AppointmentStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "PENDING",
		3: "BOOKED",
		4: "ARRIVED",
		5: "FULFILLED",
		6: "CANCELLED",
		7: "NOSHOW",
	}
	AppointmentStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"PENDING":               2,
		"BOOKED":                3,
		"ARRIVED":               4,
		"FULFILLED":             5,
		"CANCELLED":             6,
		"NOSHOW":                7,
	}
)

func (x AppointmentStatusCode_Value) Enum() *AppointmentStatusCode_Value {
	p := new(AppointmentStatusCode_Value)
	*p = x
	return p
}

func (x AppointmentStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppointmentStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[8].Descriptor()
}

func (AppointmentStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[8]
}

func (x AppointmentStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppointmentStatusCode_Value.Descriptor instead.
func (AppointmentStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{8, 0}
}

// Primitive value for code.
type AssertionDirectionTypeCode_Value int32

const (
	AssertionDirectionTypeCode_INVALID_UNINITIALIZED AssertionDirectionTypeCode_Value = 0
	AssertionDirectionTypeCode_RESPONSE              AssertionDirectionTypeCode_Value = 1
	AssertionDirectionTypeCode_REQUEST               AssertionDirectionTypeCode_Value = 2
)

// Enum value maps for AssertionDirectionTypeCode_Value.
var (
	AssertionDirectionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RESPONSE",
		2: "REQUEST",
	}
	AssertionDirectionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RESPONSE":              1,
		"REQUEST":               2,
	}
)

func (x AssertionDirectionTypeCode_Value) Enum() *AssertionDirectionTypeCode_Value {
	p := new(AssertionDirectionTypeCode_Value)
	*p = x
	return p
}

func (x AssertionDirectionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionDirectionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[9].Descriptor()
}

func (AssertionDirectionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[9]
}

func (x AssertionDirectionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionDirectionTypeCode_Value.Descriptor instead.
func (AssertionDirectionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{9, 0}
}

// Primitive value for code.
type AssertionOperatorTypeCode_Value int32

const (
	AssertionOperatorTypeCode_INVALID_UNINITIALIZED AssertionOperatorTypeCode_Value = 0
	AssertionOperatorTypeCode_EQUALS                AssertionOperatorTypeCode_Value = 1
	AssertionOperatorTypeCode_NOTEQUALS             AssertionOperatorTypeCode_Value = 2
	AssertionOperatorTypeCode_IN                    AssertionOperatorTypeCode_Value = 3
	AssertionOperatorTypeCode_NOTIN                 AssertionOperatorTypeCode_Value = 4
	AssertionOperatorTypeCode_GREATERTHAN           AssertionOperatorTypeCode_Value = 5
	AssertionOperatorTypeCode_LESSTHAN              AssertionOperatorTypeCode_Value = 6
	AssertionOperatorTypeCode_EMPTY                 AssertionOperatorTypeCode_Value = 7
	AssertionOperatorTypeCode_NOTEMPTY              AssertionOperatorTypeCode_Value = 8
	AssertionOperatorTypeCode_CONTAINS              AssertionOperatorTypeCode_Value = 9
	AssertionOperatorTypeCode_NOTCONTAINS           AssertionOperatorTypeCode_Value = 10
)

// Enum value maps for AssertionOperatorTypeCode_Value.
var (
	AssertionOperatorTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "EQUALS",
		2:  "NOTEQUALS",
		3:  "IN",
		4:  "NOTIN",
		5:  "GREATERTHAN",
		6:  "LESSTHAN",
		7:  "EMPTY",
		8:  "NOTEMPTY",
		9:  "CONTAINS",
		10: "NOTCONTAINS",
	}
	AssertionOperatorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQUALS":                1,
		"NOTEQUALS":             2,
		"IN":                    3,
		"NOTIN":                 4,
		"GREATERTHAN":           5,
		"LESSTHAN":              6,
		"EMPTY":                 7,
		"NOTEMPTY":              8,
		"CONTAINS":              9,
		"NOTCONTAINS":           10,
	}
)

func (x AssertionOperatorTypeCode_Value) Enum() *AssertionOperatorTypeCode_Value {
	p := new(AssertionOperatorTypeCode_Value)
	*p = x
	return p
}

func (x AssertionOperatorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionOperatorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[10].Descriptor()
}

func (AssertionOperatorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[10]
}

func (x AssertionOperatorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionOperatorTypeCode_Value.Descriptor instead.
func (AssertionOperatorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{10, 0}
}

// Primitive value for code.
type AssertionResponseTypesCode_Value int32

const (
	AssertionResponseTypesCode_INVALID_UNINITIALIZED AssertionResponseTypesCode_Value = 0
	AssertionResponseTypesCode_OKAY                  AssertionResponseTypesCode_Value = 1
	AssertionResponseTypesCode_CREATED               AssertionResponseTypesCode_Value = 2
	AssertionResponseTypesCode_NOCONTENT             AssertionResponseTypesCode_Value = 3
	AssertionResponseTypesCode_NOTMODIFIED           AssertionResponseTypesCode_Value = 4
	AssertionResponseTypesCode_BAD                   AssertionResponseTypesCode_Value = 5
	AssertionResponseTypesCode_FORBIDDEN             AssertionResponseTypesCode_Value = 6
	AssertionResponseTypesCode_NOTFOUND              AssertionResponseTypesCode_Value = 7
	AssertionResponseTypesCode_METHODNOTALLOWED      AssertionResponseTypesCode_Value = 8
	AssertionResponseTypesCode_CONFLICT              AssertionResponseTypesCode_Value = 9
	AssertionResponseTypesCode_GONE                  AssertionResponseTypesCode_Value = 10
	AssertionResponseTypesCode_PRECONDITIONFAILED    AssertionResponseTypesCode_Value = 11
	AssertionResponseTypesCode_UNPROCESSABLE         AssertionResponseTypesCode_Value = 12
)

// Enum value maps for AssertionResponseTypesCode_Value.
var (
	AssertionResponseTypesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "OKAY",
		2:  "CREATED",
		3:  "NOCONTENT",
		4:  "NOTMODIFIED",
		5:  "BAD",
		6:  "FORBIDDEN",
		7:  "NOTFOUND",
		8:  "METHODNOTALLOWED",
		9:  "CONFLICT",
		10: "GONE",
		11: "PRECONDITIONFAILED",
		12: "UNPROCESSABLE",
	}
	AssertionResponseTypesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OKAY":                  1,
		"CREATED":               2,
		"NOCONTENT":             3,
		"NOTMODIFIED":           4,
		"BAD":                   5,
		"FORBIDDEN":             6,
		"NOTFOUND":              7,
		"METHODNOTALLOWED":      8,
		"CONFLICT":              9,
		"GONE":                  10,
		"PRECONDITIONFAILED":    11,
		"UNPROCESSABLE":         12,
	}
)

func (x AssertionResponseTypesCode_Value) Enum() *AssertionResponseTypesCode_Value {
	p := new(AssertionResponseTypesCode_Value)
	*p = x
	return p
}

func (x AssertionResponseTypesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionResponseTypesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[11].Descriptor()
}

func (AssertionResponseTypesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[11]
}

func (x AssertionResponseTypesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionResponseTypesCode_Value.Descriptor instead.
func (AssertionResponseTypesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{11, 0}
}

// Primitive value for code.
type AuditEventActionCode_Value int32

const (
	AuditEventActionCode_INVALID_UNINITIALIZED AuditEventActionCode_Value = 0
	AuditEventActionCode_C                     AuditEventActionCode_Value = 1
	AuditEventActionCode_R                     AuditEventActionCode_Value = 2
	AuditEventActionCode_U                     AuditEventActionCode_Value = 3
	AuditEventActionCode_D                     AuditEventActionCode_Value = 4
	AuditEventActionCode_E                     AuditEventActionCode_Value = 5
)

// Enum value maps for AuditEventActionCode_Value.
var (
	AuditEventActionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "C",
		2: "R",
		3: "U",
		4: "D",
		5: "E",
	}
	AuditEventActionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"C":                     1,
		"R":                     2,
		"U":                     3,
		"D":                     4,
		"E":                     5,
	}
)

func (x AuditEventActionCode_Value) Enum() *AuditEventActionCode_Value {
	p := new(AuditEventActionCode_Value)
	*p = x
	return p
}

func (x AuditEventActionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventActionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[12].Descriptor()
}

func (AuditEventActionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[12]
}

func (x AuditEventActionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventActionCode_Value.Descriptor instead.
func (AuditEventActionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{12, 0}
}

// Primitive value for code.
type AuditEventOutcomeCode_Value int32

const (
	AuditEventOutcomeCode_INVALID_UNINITIALIZED AuditEventOutcomeCode_Value = 0
	AuditEventOutcomeCode_SUCCESS               AuditEventOutcomeCode_Value = 1
	AuditEventOutcomeCode_MINOR_FAILURE         AuditEventOutcomeCode_Value = 2
	AuditEventOutcomeCode_SERIOUS_FAILURE       AuditEventOutcomeCode_Value = 3
	AuditEventOutcomeCode_MAJOR_FAILURE         AuditEventOutcomeCode_Value = 4
)

// Enum value maps for AuditEventOutcomeCode_Value.
var (
	AuditEventOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SUCCESS",
		2: "MINOR_FAILURE",
		3: "SERIOUS_FAILURE",
		4: "MAJOR_FAILURE",
	}
	AuditEventOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SUCCESS":               1,
		"MINOR_FAILURE":         2,
		"SERIOUS_FAILURE":       3,
		"MAJOR_FAILURE":         4,
	}
)

func (x AuditEventOutcomeCode_Value) Enum() *AuditEventOutcomeCode_Value {
	p := new(AuditEventOutcomeCode_Value)
	*p = x
	return p
}

func (x AuditEventOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[13].Descriptor()
}

func (AuditEventOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[13]
}

func (x AuditEventOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventOutcomeCode_Value.Descriptor instead.
func (AuditEventOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{13, 0}
}

// Primitive value for code.
type BindingStrengthCode_Value int32

const (
	BindingStrengthCode_INVALID_UNINITIALIZED BindingStrengthCode_Value = 0
	BindingStrengthCode_REQUIRED              BindingStrengthCode_Value = 1
	BindingStrengthCode_EXTENSIBLE            BindingStrengthCode_Value = 2
	BindingStrengthCode_PREFERRED             BindingStrengthCode_Value = 3
	BindingStrengthCode_EXAMPLE               BindingStrengthCode_Value = 4
)

// Enum value maps for BindingStrengthCode_Value.
var (
	BindingStrengthCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUIRED",
		2: "EXTENSIBLE",
		3: "PREFERRED",
		4: "EXAMPLE",
	}
	BindingStrengthCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUIRED":              1,
		"EXTENSIBLE":            2,
		"PREFERRED":             3,
		"EXAMPLE":               4,
	}
)

func (x BindingStrengthCode_Value) Enum() *BindingStrengthCode_Value {
	p := new(BindingStrengthCode_Value)
	*p = x
	return p
}

func (x BindingStrengthCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BindingStrengthCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[14].Descriptor()
}

func (BindingStrengthCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[14]
}

func (x BindingStrengthCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BindingStrengthCode_Value.Descriptor instead.
func (BindingStrengthCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{14, 0}
}

// Primitive value for code.
type BundleTypeCode_Value int32

const (
	BundleTypeCode_INVALID_UNINITIALIZED BundleTypeCode_Value = 0
	BundleTypeCode_DOCUMENT              BundleTypeCode_Value = 1
	BundleTypeCode_MESSAGE               BundleTypeCode_Value = 2
	BundleTypeCode_TRANSACTION           BundleTypeCode_Value = 3
	BundleTypeCode_TRANSACTION_RESPONSE  BundleTypeCode_Value = 4
	BundleTypeCode_BATCH                 BundleTypeCode_Value = 5
	BundleTypeCode_BATCH_RESPONSE        BundleTypeCode_Value = 6
	BundleTypeCode_HISTORY               BundleTypeCode_Value = 7
	BundleTypeCode_SEARCHSET             BundleTypeCode_Value = 8
	BundleTypeCode_COLLECTION            BundleTypeCode_Value = 9
)

// Enum value maps for BundleTypeCode_Value.
var (
	BundleTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DOCUMENT",
		2: "MESSAGE",
		3: "TRANSACTION",
		4: "TRANSACTION_RESPONSE",
		5: "BATCH",
		6: "BATCH_RESPONSE",
		7: "HISTORY",
		8: "SEARCHSET",
		9: "COLLECTION",
	}
	BundleTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DOCUMENT":              1,
		"MESSAGE":               2,
		"TRANSACTION":           3,
		"TRANSACTION_RESPONSE":  4,
		"BATCH":                 5,
		"BATCH_RESPONSE":        6,
		"HISTORY":               7,
		"SEARCHSET":             8,
		"COLLECTION":            9,
	}
)

func (x BundleTypeCode_Value) Enum() *BundleTypeCode_Value {
	p := new(BundleTypeCode_Value)
	*p = x
	return p
}

func (x BundleTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BundleTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[15].Descriptor()
}

func (BundleTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[15]
}

func (x BundleTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BundleTypeCode_Value.Descriptor instead.
func (BundleTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{15, 0}
}

// Primitive value for code.
type CarePlanActivityStatusCode_Value int32

const (
	CarePlanActivityStatusCode_INVALID_UNINITIALIZED CarePlanActivityStatusCode_Value = 0
	CarePlanActivityStatusCode_NOT_STARTED           CarePlanActivityStatusCode_Value = 1
	CarePlanActivityStatusCode_SCHEDULED             CarePlanActivityStatusCode_Value = 2
	CarePlanActivityStatusCode_IN_PROGRESS           CarePlanActivityStatusCode_Value = 3
	CarePlanActivityStatusCode_ON_HOLD               CarePlanActivityStatusCode_Value = 4
	CarePlanActivityStatusCode_COMPLETED             CarePlanActivityStatusCode_Value = 5
	CarePlanActivityStatusCode_CANCELLED             CarePlanActivityStatusCode_Value = 6
)

// Enum value maps for CarePlanActivityStatusCode_Value.
var (
	CarePlanActivityStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_STARTED",
		2: "SCHEDULED",
		3: "IN_PROGRESS",
		4: "ON_HOLD",
		5: "COMPLETED",
		6: "CANCELLED",
	}
	CarePlanActivityStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_STARTED":           1,
		"SCHEDULED":             2,
		"IN_PROGRESS":           3,
		"ON_HOLD":               4,
		"COMPLETED":             5,
		"CANCELLED":             6,
	}
)

func (x CarePlanActivityStatusCode_Value) Enum() *CarePlanActivityStatusCode_Value {
	p := new(CarePlanActivityStatusCode_Value)
	*p = x
	return p
}

func (x CarePlanActivityStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanActivityStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[16].Descriptor()
}

func (CarePlanActivityStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[16]
}

func (x CarePlanActivityStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanActivityStatusCode_Value.Descriptor instead.
func (CarePlanActivityStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{16, 0}
}

// Primitive value for code.
type CarePlanRelationshipCode_Value int32

const (
	CarePlanRelationshipCode_INVALID_UNINITIALIZED CarePlanRelationshipCode_Value = 0
	CarePlanRelationshipCode_INCLUDES              CarePlanRelationshipCode_Value = 1
	CarePlanRelationshipCode_REPLACES              CarePlanRelationshipCode_Value = 2
	CarePlanRelationshipCode_FULFILLS              CarePlanRelationshipCode_Value = 3
)

// Enum value maps for CarePlanRelationshipCode_Value.
var (
	CarePlanRelationshipCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INCLUDES",
		2: "REPLACES",
		3: "FULFILLS",
	}
	CarePlanRelationshipCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INCLUDES":              1,
		"REPLACES":              2,
		"FULFILLS":              3,
	}
)

func (x CarePlanRelationshipCode_Value) Enum() *CarePlanRelationshipCode_Value {
	p := new(CarePlanRelationshipCode_Value)
	*p = x
	return p
}

func (x CarePlanRelationshipCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanRelationshipCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[17].Descriptor()
}

func (CarePlanRelationshipCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[17]
}

func (x CarePlanRelationshipCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanRelationshipCode_Value.Descriptor instead.
func (CarePlanRelationshipCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{17, 0}
}

// Primitive value for code.
type CarePlanStatusCode_Value int32

const (
	CarePlanStatusCode_INVALID_UNINITIALIZED CarePlanStatusCode_Value = 0
	CarePlanStatusCode_PROPOSED              CarePlanStatusCode_Value = 1
	CarePlanStatusCode_DRAFT                 CarePlanStatusCode_Value = 2
	CarePlanStatusCode_ACTIVE                CarePlanStatusCode_Value = 3
	CarePlanStatusCode_COMPLETED             CarePlanStatusCode_Value = 4
	CarePlanStatusCode_CANCELLED             CarePlanStatusCode_Value = 5
)

// Enum value maps for CarePlanStatusCode_Value.
var (
	CarePlanStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "DRAFT",
		3: "ACTIVE",
		4: "COMPLETED",
		5: "CANCELLED",
	}
	CarePlanStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"DRAFT":                 2,
		"ACTIVE":                3,
		"COMPLETED":             4,
		"CANCELLED":             5,
	}
)

func (x CarePlanStatusCode_Value) Enum() *CarePlanStatusCode_Value {
	p := new(CarePlanStatusCode_Value)
	*p = x
	return p
}

func (x CarePlanStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[18].Descriptor()
}

func (CarePlanStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[18]
}

func (x CarePlanStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanStatusCode_Value.Descriptor instead.
func (CarePlanStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{18, 0}
}

// Primitive value for code.
type ClaimTypeCode_Value int32

const (
	ClaimTypeCode_INVALID_UNINITIALIZED ClaimTypeCode_Value = 0
	ClaimTypeCode_INSTITUTIONAL         ClaimTypeCode_Value = 1
	ClaimTypeCode_ORAL                  ClaimTypeCode_Value = 2
	ClaimTypeCode_PHARMACY              ClaimTypeCode_Value = 3
	ClaimTypeCode_PROFESSIONAL          ClaimTypeCode_Value = 4
	ClaimTypeCode_VISION                ClaimTypeCode_Value = 5
)

// Enum value maps for ClaimTypeCode_Value.
var (
	ClaimTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTITUTIONAL",
		2: "ORAL",
		3: "PHARMACY",
		4: "PROFESSIONAL",
		5: "VISION",
	}
	ClaimTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTITUTIONAL":         1,
		"ORAL":                  2,
		"PHARMACY":              3,
		"PROFESSIONAL":          4,
		"VISION":                5,
	}
)

func (x ClaimTypeCode_Value) Enum() *ClaimTypeCode_Value {
	p := new(ClaimTypeCode_Value)
	*p = x
	return p
}

func (x ClaimTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[19].Descriptor()
}

func (ClaimTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[19]
}

func (x ClaimTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimTypeCode_Value.Descriptor instead.
func (ClaimTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{19, 0}
}

// Primitive value for code.
type UseCode_Value int32

const (
	UseCode_INVALID_UNINITIALIZED UseCode_Value = 0
	UseCode_COMPLETE              UseCode_Value = 1
	UseCode_PROPOSED              UseCode_Value = 2
	UseCode_EXPLORATORY           UseCode_Value = 3
	UseCode_OTHER                 UseCode_Value = 4
)

// Enum value maps for UseCode_Value.
var (
	UseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETE",
		2: "PROPOSED",
		3: "EXPLORATORY",
		4: "OTHER",
	}
	UseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETE":              1,
		"PROPOSED":              2,
		"EXPLORATORY":           3,
		"OTHER":                 4,
	}
)

func (x UseCode_Value) Enum() *UseCode_Value {
	p := new(UseCode_Value)
	*p = x
	return p
}

func (x UseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[20].Descriptor()
}

func (UseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[20]
}

func (x UseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseCode_Value.Descriptor instead.
func (UseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{20, 0}
}

// Primitive value for code.
type ClinicalImpressionStatusCode_Value int32

const (
	ClinicalImpressionStatusCode_INVALID_UNINITIALIZED ClinicalImpressionStatusCode_Value = 0
	ClinicalImpressionStatusCode_IN_PROGRESS           ClinicalImpressionStatusCode_Value = 1
	ClinicalImpressionStatusCode_COMPLETED             ClinicalImpressionStatusCode_Value = 2
	ClinicalImpressionStatusCode_ENTERED_IN_ERROR      ClinicalImpressionStatusCode_Value = 3
)

// Enum value maps for ClinicalImpressionStatusCode_Value.
var (
	ClinicalImpressionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
	}
	ClinicalImpressionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x ClinicalImpressionStatusCode_Value) Enum() *ClinicalImpressionStatusCode_Value {
	p := new(ClinicalImpressionStatusCode_Value)
	*p = x
	return p
}

func (x ClinicalImpressionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClinicalImpressionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[21].Descriptor()
}

func (ClinicalImpressionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[21]
}

func (x ClinicalImpressionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClinicalImpressionStatusCode_Value.Descriptor instead.
func (ClinicalImpressionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{21, 0}
}

// Primitive value for code.
type CommunicationRequestStatusCode_Value int32

const (
	CommunicationRequestStatusCode_INVALID_UNINITIALIZED CommunicationRequestStatusCode_Value = 0
	CommunicationRequestStatusCode_PROPOSED              CommunicationRequestStatusCode_Value = 1
	CommunicationRequestStatusCode_PLANNED               CommunicationRequestStatusCode_Value = 2
	CommunicationRequestStatusCode_REQUESTED             CommunicationRequestStatusCode_Value = 3
	CommunicationRequestStatusCode_RECEIVED              CommunicationRequestStatusCode_Value = 4
	CommunicationRequestStatusCode_ACCEPTED              CommunicationRequestStatusCode_Value = 5
	CommunicationRequestStatusCode_IN_PROGRESS           CommunicationRequestStatusCode_Value = 6
	CommunicationRequestStatusCode_COMPLETED             CommunicationRequestStatusCode_Value = 7
	CommunicationRequestStatusCode_SUSPENDED             CommunicationRequestStatusCode_Value = 8
	CommunicationRequestStatusCode_REJECTED              CommunicationRequestStatusCode_Value = 9
	CommunicationRequestStatusCode_FAILED                CommunicationRequestStatusCode_Value = 10
)

// Enum value maps for CommunicationRequestStatusCode_Value.
var (
	CommunicationRequestStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PROPOSED",
		2:  "PLANNED",
		3:  "REQUESTED",
		4:  "RECEIVED",
		5:  "ACCEPTED",
		6:  "IN_PROGRESS",
		7:  "COMPLETED",
		8:  "SUSPENDED",
		9:  "REJECTED",
		10: "FAILED",
	}
	CommunicationRequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"PLANNED":               2,
		"REQUESTED":             3,
		"RECEIVED":              4,
		"ACCEPTED":              5,
		"IN_PROGRESS":           6,
		"COMPLETED":             7,
		"SUSPENDED":             8,
		"REJECTED":              9,
		"FAILED":                10,
	}
)

func (x CommunicationRequestStatusCode_Value) Enum() *CommunicationRequestStatusCode_Value {
	p := new(CommunicationRequestStatusCode_Value)
	*p = x
	return p
}

func (x CommunicationRequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationRequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[22].Descriptor()
}

func (CommunicationRequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[22]
}

func (x CommunicationRequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationRequestStatusCode_Value.Descriptor instead.
func (CommunicationRequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{22, 0}
}

// Primitive value for code.
type CommunicationStatusCode_Value int32

const (
	CommunicationStatusCode_INVALID_UNINITIALIZED CommunicationStatusCode_Value = 0
	CommunicationStatusCode_IN_PROGRESS           CommunicationStatusCode_Value = 1
	CommunicationStatusCode_COMPLETED             CommunicationStatusCode_Value = 2
	CommunicationStatusCode_SUSPENDED             CommunicationStatusCode_Value = 3
	CommunicationStatusCode_REJECTED              CommunicationStatusCode_Value = 4
	CommunicationStatusCode_FAILED                CommunicationStatusCode_Value = 5
)

// Enum value maps for CommunicationStatusCode_Value.
var (
	CommunicationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "SUSPENDED",
		4: "REJECTED",
		5: "FAILED",
	}
	CommunicationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"SUSPENDED":             3,
		"REJECTED":              4,
		"FAILED":                5,
	}
)

func (x CommunicationStatusCode_Value) Enum() *CommunicationStatusCode_Value {
	p := new(CommunicationStatusCode_Value)
	*p = x
	return p
}

func (x CommunicationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[23].Descriptor()
}

func (CommunicationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[23]
}

func (x CommunicationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationStatusCode_Value.Descriptor instead.
func (CommunicationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{23, 0}
}

// Primitive value for code.
type CompositionAttestationModeCode_Value int32

const (
	CompositionAttestationModeCode_INVALID_UNINITIALIZED CompositionAttestationModeCode_Value = 0
	CompositionAttestationModeCode_PERSONAL              CompositionAttestationModeCode_Value = 1
	CompositionAttestationModeCode_PROFESSIONAL          CompositionAttestationModeCode_Value = 2
	CompositionAttestationModeCode_LEGAL                 CompositionAttestationModeCode_Value = 3
	CompositionAttestationModeCode_OFFICIAL              CompositionAttestationModeCode_Value = 4
)

// Enum value maps for CompositionAttestationModeCode_Value.
var (
	CompositionAttestationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PERSONAL",
		2: "PROFESSIONAL",
		3: "LEGAL",
		4: "OFFICIAL",
	}
	CompositionAttestationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERSONAL":              1,
		"PROFESSIONAL":          2,
		"LEGAL":                 3,
		"OFFICIAL":              4,
	}
)

func (x CompositionAttestationModeCode_Value) Enum() *CompositionAttestationModeCode_Value {
	p := new(CompositionAttestationModeCode_Value)
	*p = x
	return p
}

func (x CompositionAttestationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositionAttestationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[24].Descriptor()
}

func (CompositionAttestationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[24]
}

func (x CompositionAttestationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositionAttestationModeCode_Value.Descriptor instead.
func (CompositionAttestationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{24, 0}
}

// Primitive value for code.
type CompositionStatusCode_Value int32

const (
	CompositionStatusCode_INVALID_UNINITIALIZED CompositionStatusCode_Value = 0
	CompositionStatusCode_PRELIMINARY           CompositionStatusCode_Value = 1
	CompositionStatusCode_FINAL                 CompositionStatusCode_Value = 2
	CompositionStatusCode_AMENDED               CompositionStatusCode_Value = 3
	CompositionStatusCode_ENTERED_IN_ERROR      CompositionStatusCode_Value = 4
)

// Enum value maps for CompositionStatusCode_Value.
var (
	CompositionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRELIMINARY",
		2: "FINAL",
		3: "AMENDED",
		4: "ENTERED_IN_ERROR",
	}
	CompositionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRELIMINARY":           1,
		"FINAL":                 2,
		"AMENDED":               3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x CompositionStatusCode_Value) Enum() *CompositionStatusCode_Value {
	p := new(CompositionStatusCode_Value)
	*p = x
	return p
}

func (x CompositionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[25].Descriptor()
}

func (CompositionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[25]
}

func (x CompositionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositionStatusCode_Value.Descriptor instead.
func (CompositionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{25, 0}
}

// Primitive value for code.
type ConceptMapEquivalenceCode_Value int32

const (
	ConceptMapEquivalenceCode_INVALID_UNINITIALIZED ConceptMapEquivalenceCode_Value = 0
	ConceptMapEquivalenceCode_EQUIVALENT            ConceptMapEquivalenceCode_Value = 1
	ConceptMapEquivalenceCode_EQUAL                 ConceptMapEquivalenceCode_Value = 2
	ConceptMapEquivalenceCode_WIDER                 ConceptMapEquivalenceCode_Value = 3
	ConceptMapEquivalenceCode_SUBSUMES              ConceptMapEquivalenceCode_Value = 4
	ConceptMapEquivalenceCode_NARROWER              ConceptMapEquivalenceCode_Value = 5
	ConceptMapEquivalenceCode_SPECIALIZES           ConceptMapEquivalenceCode_Value = 6
	ConceptMapEquivalenceCode_INEXACT               ConceptMapEquivalenceCode_Value = 7
	ConceptMapEquivalenceCode_UNMATCHED             ConceptMapEquivalenceCode_Value = 8
	ConceptMapEquivalenceCode_DISJOINT              ConceptMapEquivalenceCode_Value = 9
)

// Enum value maps for ConceptMapEquivalenceCode_Value.
var (
	ConceptMapEquivalenceCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EQUIVALENT",
		2: "EQUAL",
		3: "WIDER",
		4: "SUBSUMES",
		5: "NARROWER",
		6: "SPECIALIZES",
		7: "INEXACT",
		8: "UNMATCHED",
		9: "DISJOINT",
	}
	ConceptMapEquivalenceCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQUIVALENT":            1,
		"EQUAL":                 2,
		"WIDER":                 3,
		"SUBSUMES":              4,
		"NARROWER":              5,
		"SPECIALIZES":           6,
		"INEXACT":               7,
		"UNMATCHED":             8,
		"DISJOINT":              9,
	}
)

func (x ConceptMapEquivalenceCode_Value) Enum() *ConceptMapEquivalenceCode_Value {
	p := new(ConceptMapEquivalenceCode_Value)
	*p = x
	return p
}

func (x ConceptMapEquivalenceCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConceptMapEquivalenceCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[26].Descriptor()
}

func (ConceptMapEquivalenceCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[26]
}

func (x ConceptMapEquivalenceCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConceptMapEquivalenceCode_Value.Descriptor instead.
func (ConceptMapEquivalenceCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{26, 0}
}

// Primitive value for code.
type ConditionVerificationStatusCode_Value int32

const (
	ConditionVerificationStatusCode_INVALID_UNINITIALIZED ConditionVerificationStatusCode_Value = 0
	ConditionVerificationStatusCode_PROVISIONAL           ConditionVerificationStatusCode_Value = 1
	ConditionVerificationStatusCode_DIFFERENTIAL          ConditionVerificationStatusCode_Value = 2
	ConditionVerificationStatusCode_CONFIRMED             ConditionVerificationStatusCode_Value = 3
	ConditionVerificationStatusCode_REFUTED               ConditionVerificationStatusCode_Value = 4
	ConditionVerificationStatusCode_ENTERED_IN_ERROR      ConditionVerificationStatusCode_Value = 5
	ConditionVerificationStatusCode_UNKNOWN               ConditionVerificationStatusCode_Value = 6
)

// Enum value maps for ConditionVerificationStatusCode_Value.
var (
	ConditionVerificationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROVISIONAL",
		2: "DIFFERENTIAL",
		3: "CONFIRMED",
		4: "REFUTED",
		5: "ENTERED_IN_ERROR",
		6: "UNKNOWN",
	}
	ConditionVerificationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROVISIONAL":           1,
		"DIFFERENTIAL":          2,
		"CONFIRMED":             3,
		"REFUTED":               4,
		"ENTERED_IN_ERROR":      5,
		"UNKNOWN":               6,
	}
)

func (x ConditionVerificationStatusCode_Value) Enum() *ConditionVerificationStatusCode_Value {
	p := new(ConditionVerificationStatusCode_Value)
	*p = x
	return p
}

func (x ConditionVerificationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionVerificationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[27].Descriptor()
}

func (ConditionVerificationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[27]
}

func (x ConditionVerificationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionVerificationStatusCode_Value.Descriptor instead.
func (ConditionVerificationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{27, 0}
}

// Primitive value for code.
type ConditionalDeleteStatusCode_Value int32

const (
	ConditionalDeleteStatusCode_INVALID_UNINITIALIZED ConditionalDeleteStatusCode_Value = 0
	ConditionalDeleteStatusCode_NOT_SUPPORTED         ConditionalDeleteStatusCode_Value = 1
	ConditionalDeleteStatusCode_SINGLE                ConditionalDeleteStatusCode_Value = 2
	ConditionalDeleteStatusCode_MULTIPLE              ConditionalDeleteStatusCode_Value = 3
)

// Enum value maps for ConditionalDeleteStatusCode_Value.
var (
	ConditionalDeleteStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_SUPPORTED",
		2: "SINGLE",
		3: "MULTIPLE",
	}
	ConditionalDeleteStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_SUPPORTED":         1,
		"SINGLE":                2,
		"MULTIPLE":              3,
	}
)

func (x ConditionalDeleteStatusCode_Value) Enum() *ConditionalDeleteStatusCode_Value {
	p := new(ConditionalDeleteStatusCode_Value)
	*p = x
	return p
}

func (x ConditionalDeleteStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionalDeleteStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[28].Descriptor()
}

func (ConditionalDeleteStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[28]
}

func (x ConditionalDeleteStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionalDeleteStatusCode_Value.Descriptor instead.
func (ConditionalDeleteStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{28, 0}
}

// Primitive value for code.
type ConformanceResourceStatusCode_Value int32

const (
	ConformanceResourceStatusCode_INVALID_UNINITIALIZED ConformanceResourceStatusCode_Value = 0
	ConformanceResourceStatusCode_DRAFT                 ConformanceResourceStatusCode_Value = 1
	ConformanceResourceStatusCode_ACTIVE                ConformanceResourceStatusCode_Value = 2
	ConformanceResourceStatusCode_RETIRED               ConformanceResourceStatusCode_Value = 3
)

// Enum value maps for ConformanceResourceStatusCode_Value.
var (
	ConformanceResourceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "RETIRED",
	}
	ConformanceResourceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"RETIRED":               3,
	}
)

func (x ConformanceResourceStatusCode_Value) Enum() *ConformanceResourceStatusCode_Value {
	p := new(ConformanceResourceStatusCode_Value)
	*p = x
	return p
}

func (x ConformanceResourceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConformanceResourceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[29].Descriptor()
}

func (ConformanceResourceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[29]
}

func (x ConformanceResourceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConformanceResourceStatusCode_Value.Descriptor instead.
func (ConformanceResourceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{29, 0}
}

// Primitive value for code.
type ConformanceStatementKindCode_Value int32

const (
	ConformanceStatementKindCode_INVALID_UNINITIALIZED ConformanceStatementKindCode_Value = 0
	ConformanceStatementKindCode_INSTANCE              ConformanceStatementKindCode_Value = 1
	ConformanceStatementKindCode_CAPABILITY            ConformanceStatementKindCode_Value = 2
	ConformanceStatementKindCode_REQUIREMENTS          ConformanceStatementKindCode_Value = 3
)

// Enum value maps for ConformanceStatementKindCode_Value.
var (
	ConformanceStatementKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "CAPABILITY",
		3: "REQUIREMENTS",
	}
	ConformanceStatementKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"CAPABILITY":            2,
		"REQUIREMENTS":          3,
	}
)

func (x ConformanceStatementKindCode_Value) Enum() *ConformanceStatementKindCode_Value {
	p := new(ConformanceStatementKindCode_Value)
	*p = x
	return p
}

func (x ConformanceStatementKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConformanceStatementKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[30].Descriptor()
}

func (ConformanceStatementKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[30]
}

func (x ConformanceStatementKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConformanceStatementKindCode_Value.Descriptor instead.
func (ConformanceStatementKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{30, 0}
}

// Primitive value for code.
type ConstraintSeverityCode_Value int32

const (
	ConstraintSeverityCode_INVALID_UNINITIALIZED ConstraintSeverityCode_Value = 0
	ConstraintSeverityCode_ERROR                 ConstraintSeverityCode_Value = 1
	ConstraintSeverityCode_WARNING               ConstraintSeverityCode_Value = 2
)

// Enum value maps for ConstraintSeverityCode_Value.
var (
	ConstraintSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ERROR",
		2: "WARNING",
	}
	ConstraintSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ERROR":                 1,
		"WARNING":               2,
	}
)

func (x ConstraintSeverityCode_Value) Enum() *ConstraintSeverityCode_Value {
	p := new(ConstraintSeverityCode_Value)
	*p = x
	return p
}

func (x ConstraintSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[31].Descriptor()
}

func (ConstraintSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[31]
}

func (x ConstraintSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintSeverityCode_Value.Descriptor instead.
func (ConstraintSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{31, 0}
}

// Primitive value for code.
type ContentTypeCode_Value int32

const (
	ContentTypeCode_INVALID_UNINITIALIZED ContentTypeCode_Value = 0
	ContentTypeCode_XML                   ContentTypeCode_Value = 1
	ContentTypeCode_JSON                  ContentTypeCode_Value = 2
)

// Enum value maps for ContentTypeCode_Value.
var (
	ContentTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "XML",
		2: "JSON",
	}
	ContentTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"XML":                   1,
		"JSON":                  2,
	}
)

func (x ContentTypeCode_Value) Enum() *ContentTypeCode_Value {
	p := new(ContentTypeCode_Value)
	*p = x
	return p
}

func (x ContentTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[32].Descriptor()
}

func (ContentTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[32]
}

func (x ContentTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentTypeCode_Value.Descriptor instead.
func (ContentTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{32, 0}
}

// Primitive value for code.
type DataElementStringencyCode_Value int32

const (
	DataElementStringencyCode_INVALID_UNINITIALIZED DataElementStringencyCode_Value = 0
	DataElementStringencyCode_COMPARABLE            DataElementStringencyCode_Value = 1
	DataElementStringencyCode_FULLY_SPECIFIED       DataElementStringencyCode_Value = 2
	DataElementStringencyCode_EQUIVALENT            DataElementStringencyCode_Value = 3
	DataElementStringencyCode_CONVERTABLE           DataElementStringencyCode_Value = 4
	DataElementStringencyCode_SCALEABLE             DataElementStringencyCode_Value = 5
	DataElementStringencyCode_FLEXIBLE              DataElementStringencyCode_Value = 6
)

// Enum value maps for DataElementStringencyCode_Value.
var (
	DataElementStringencyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPARABLE",
		2: "FULLY_SPECIFIED",
		3: "EQUIVALENT",
		4: "CONVERTABLE",
		5: "SCALEABLE",
		6: "FLEXIBLE",
	}
	DataElementStringencyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPARABLE":            1,
		"FULLY_SPECIFIED":       2,
		"EQUIVALENT":            3,
		"CONVERTABLE":           4,
		"SCALEABLE":             5,
		"FLEXIBLE":              6,
	}
)

func (x DataElementStringencyCode_Value) Enum() *DataElementStringencyCode_Value {
	p := new(DataElementStringencyCode_Value)
	*p = x
	return p
}

func (x DataElementStringencyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataElementStringencyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[33].Descriptor()
}

func (DataElementStringencyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[33]
}

func (x DataElementStringencyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataElementStringencyCode_Value.Descriptor instead.
func (DataElementStringencyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{33, 0}
}

// Primitive value for code.
type DaysOfWeekCode_Value int32

const (
	DaysOfWeekCode_INVALID_UNINITIALIZED DaysOfWeekCode_Value = 0
	DaysOfWeekCode_MON                   DaysOfWeekCode_Value = 1
	DaysOfWeekCode_TUE                   DaysOfWeekCode_Value = 2
	DaysOfWeekCode_WED                   DaysOfWeekCode_Value = 3
	DaysOfWeekCode_THU                   DaysOfWeekCode_Value = 4
	DaysOfWeekCode_FRI                   DaysOfWeekCode_Value = 5
	DaysOfWeekCode_SAT                   DaysOfWeekCode_Value = 6
	DaysOfWeekCode_SUN                   DaysOfWeekCode_Value = 7
)

// Enum value maps for DaysOfWeekCode_Value.
var (
	DaysOfWeekCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MON",
		2: "TUE",
		3: "WED",
		4: "THU",
		5: "FRI",
		6: "SAT",
		7: "SUN",
	}
	DaysOfWeekCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MON":                   1,
		"TUE":                   2,
		"WED":                   3,
		"THU":                   4,
		"FRI":                   5,
		"SAT":                   6,
		"SUN":                   7,
	}
)

func (x DaysOfWeekCode_Value) Enum() *DaysOfWeekCode_Value {
	p := new(DaysOfWeekCode_Value)
	*p = x
	return p
}

func (x DaysOfWeekCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaysOfWeekCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[34].Descriptor()
}

func (DaysOfWeekCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[34]
}

func (x DaysOfWeekCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaysOfWeekCode_Value.Descriptor instead.
func (DaysOfWeekCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{34, 0}
}

// Primitive value for code.
type DetectedIssueSeverityCode_Value int32

const (
	DetectedIssueSeverityCode_INVALID_UNINITIALIZED DetectedIssueSeverityCode_Value = 0
	DetectedIssueSeverityCode_HIGH                  DetectedIssueSeverityCode_Value = 1
	DetectedIssueSeverityCode_MODERATE              DetectedIssueSeverityCode_Value = 2
	DetectedIssueSeverityCode_LOW                   DetectedIssueSeverityCode_Value = 3
)

// Enum value maps for DetectedIssueSeverityCode_Value.
var (
	DetectedIssueSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HIGH",
		2: "MODERATE",
		3: "LOW",
	}
	DetectedIssueSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HIGH":                  1,
		"MODERATE":              2,
		"LOW":                   3,
	}
)

func (x DetectedIssueSeverityCode_Value) Enum() *DetectedIssueSeverityCode_Value {
	p := new(DetectedIssueSeverityCode_Value)
	*p = x
	return p
}

func (x DetectedIssueSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetectedIssueSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[35].Descriptor()
}

func (DetectedIssueSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[35]
}

func (x DetectedIssueSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetectedIssueSeverityCode_Value.Descriptor instead.
func (DetectedIssueSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{35, 0}
}

// Primitive value for code.
type DeviceActionCode_Value int32

const (
	DeviceActionCode_INVALID_UNINITIALIZED DeviceActionCode_Value = 0
	DeviceActionCode_IMPLANTED             DeviceActionCode_Value = 1
	DeviceActionCode_EXPLANTED             DeviceActionCode_Value = 2
	DeviceActionCode_MANIPULATED           DeviceActionCode_Value = 3
)

// Enum value maps for DeviceActionCode_Value.
var (
	DeviceActionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IMPLANTED",
		2: "EXPLANTED",
		3: "MANIPULATED",
	}
	DeviceActionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IMPLANTED":             1,
		"EXPLANTED":             2,
		"MANIPULATED":           3,
	}
)

func (x DeviceActionCode_Value) Enum() *DeviceActionCode_Value {
	p := new(DeviceActionCode_Value)
	*p = x
	return p
}

func (x DeviceActionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceActionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[36].Descriptor()
}

func (DeviceActionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[36]
}

func (x DeviceActionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceActionCode_Value.Descriptor instead.
func (DeviceActionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{36, 0}
}

// Primitive value for code.
type DeviceUseRequestPriorityCode_Value int32

const (
	DeviceUseRequestPriorityCode_INVALID_UNINITIALIZED DeviceUseRequestPriorityCode_Value = 0
	DeviceUseRequestPriorityCode_ROUTINE               DeviceUseRequestPriorityCode_Value = 1
	DeviceUseRequestPriorityCode_URGENT                DeviceUseRequestPriorityCode_Value = 2
	DeviceUseRequestPriorityCode_STAT                  DeviceUseRequestPriorityCode_Value = 3
	DeviceUseRequestPriorityCode_ASAP                  DeviceUseRequestPriorityCode_Value = 4
)

// Enum value maps for DeviceUseRequestPriorityCode_Value.
var (
	DeviceUseRequestPriorityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ROUTINE",
		2: "URGENT",
		3: "STAT",
		4: "ASAP",
	}
	DeviceUseRequestPriorityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ROUTINE":               1,
		"URGENT":                2,
		"STAT":                  3,
		"ASAP":                  4,
	}
)

func (x DeviceUseRequestPriorityCode_Value) Enum() *DeviceUseRequestPriorityCode_Value {
	p := new(DeviceUseRequestPriorityCode_Value)
	*p = x
	return p
}

func (x DeviceUseRequestPriorityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceUseRequestPriorityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[37].Descriptor()
}

func (DeviceUseRequestPriorityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[37]
}

func (x DeviceUseRequestPriorityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceUseRequestPriorityCode_Value.Descriptor instead.
func (DeviceUseRequestPriorityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{37, 0}
}

// Primitive value for code.
type DeviceUseRequestStatusCode_Value int32

const (
	DeviceUseRequestStatusCode_INVALID_UNINITIALIZED DeviceUseRequestStatusCode_Value = 0
	DeviceUseRequestStatusCode_PROPOSED              DeviceUseRequestStatusCode_Value = 1
	DeviceUseRequestStatusCode_PLANNED               DeviceUseRequestStatusCode_Value = 2
	DeviceUseRequestStatusCode_REQUESTED             DeviceUseRequestStatusCode_Value = 3
	DeviceUseRequestStatusCode_RECEIVED              DeviceUseRequestStatusCode_Value = 4
	DeviceUseRequestStatusCode_ACCEPTED              DeviceUseRequestStatusCode_Value = 5
	DeviceUseRequestStatusCode_IN_PROGRESS           DeviceUseRequestStatusCode_Value = 6
	DeviceUseRequestStatusCode_COMPLETED             DeviceUseRequestStatusCode_Value = 7
	DeviceUseRequestStatusCode_SUSPENDED             DeviceUseRequestStatusCode_Value = 8
	DeviceUseRequestStatusCode_REJECTED              DeviceUseRequestStatusCode_Value = 9
	DeviceUseRequestStatusCode_ABORTED               DeviceUseRequestStatusCode_Value = 10
)

// Enum value maps for DeviceUseRequestStatusCode_Value.
var (
	DeviceUseRequestStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PROPOSED",
		2:  "PLANNED",
		3:  "REQUESTED",
		4:  "RECEIVED",
		5:  "ACCEPTED",
		6:  "IN_PROGRESS",
		7:  "COMPLETED",
		8:  "SUSPENDED",
		9:  "REJECTED",
		10: "ABORTED",
	}
	DeviceUseRequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"PLANNED":               2,
		"REQUESTED":             3,
		"RECEIVED":              4,
		"ACCEPTED":              5,
		"IN_PROGRESS":           6,
		"COMPLETED":             7,
		"SUSPENDED":             8,
		"REJECTED":              9,
		"ABORTED":               10,
	}
)

func (x DeviceUseRequestStatusCode_Value) Enum() *DeviceUseRequestStatusCode_Value {
	p := new(DeviceUseRequestStatusCode_Value)
	*p = x
	return p
}

func (x DeviceUseRequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceUseRequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[38].Descriptor()
}

func (DeviceUseRequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[38]
}

func (x DeviceUseRequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceUseRequestStatusCode_Value.Descriptor instead.
func (DeviceUseRequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{38, 0}
}

// Primitive value for code.
type DeviceStatusCode_Value int32

const (
	DeviceStatusCode_INVALID_UNINITIALIZED DeviceStatusCode_Value = 0
	DeviceStatusCode_AVAILABLE             DeviceStatusCode_Value = 1
	DeviceStatusCode_NOT_AVAILABLE         DeviceStatusCode_Value = 2
	DeviceStatusCode_ENTERED_IN_ERROR      DeviceStatusCode_Value = 3
)

// Enum value maps for DeviceStatusCode_Value.
var (
	DeviceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AVAILABLE",
		2: "NOT_AVAILABLE",
		3: "ENTERED_IN_ERROR",
	}
	DeviceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AVAILABLE":             1,
		"NOT_AVAILABLE":         2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x DeviceStatusCode_Value) Enum() *DeviceStatusCode_Value {
	p := new(DeviceStatusCode_Value)
	*p = x
	return p
}

func (x DeviceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[39].Descriptor()
}

func (DeviceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[39]
}

func (x DeviceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStatusCode_Value.Descriptor instead.
func (DeviceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{39, 0}
}

// Primitive value for code.
type DiagnosticOrderPriorityCode_Value int32

const (
	DiagnosticOrderPriorityCode_INVALID_UNINITIALIZED DiagnosticOrderPriorityCode_Value = 0
	DiagnosticOrderPriorityCode_ROUTINE               DiagnosticOrderPriorityCode_Value = 1
	DiagnosticOrderPriorityCode_URGENT                DiagnosticOrderPriorityCode_Value = 2
	DiagnosticOrderPriorityCode_STAT                  DiagnosticOrderPriorityCode_Value = 3
	DiagnosticOrderPriorityCode_ASAP                  DiagnosticOrderPriorityCode_Value = 4
)

// Enum value maps for DiagnosticOrderPriorityCode_Value.
var (
	DiagnosticOrderPriorityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ROUTINE",
		2: "URGENT",
		3: "STAT",
		4: "ASAP",
	}
	DiagnosticOrderPriorityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ROUTINE":               1,
		"URGENT":                2,
		"STAT":                  3,
		"ASAP":                  4,
	}
)

func (x DiagnosticOrderPriorityCode_Value) Enum() *DiagnosticOrderPriorityCode_Value {
	p := new(DiagnosticOrderPriorityCode_Value)
	*p = x
	return p
}

func (x DiagnosticOrderPriorityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticOrderPriorityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[40].Descriptor()
}

func (DiagnosticOrderPriorityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[40]
}

func (x DiagnosticOrderPriorityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticOrderPriorityCode_Value.Descriptor instead.
func (DiagnosticOrderPriorityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{40, 0}
}

// Primitive value for code.
type DiagnosticOrderStatusCode_Value int32

const (
	DiagnosticOrderStatusCode_INVALID_UNINITIALIZED DiagnosticOrderStatusCode_Value = 0
	DiagnosticOrderStatusCode_PROPOSED              DiagnosticOrderStatusCode_Value = 1
	DiagnosticOrderStatusCode_DRAFT                 DiagnosticOrderStatusCode_Value = 2
	DiagnosticOrderStatusCode_PLANNED               DiagnosticOrderStatusCode_Value = 3
	DiagnosticOrderStatusCode_REQUESTED             DiagnosticOrderStatusCode_Value = 4
	DiagnosticOrderStatusCode_RECEIVED              DiagnosticOrderStatusCode_Value = 5
	DiagnosticOrderStatusCode_ACCEPTED              DiagnosticOrderStatusCode_Value = 6
	DiagnosticOrderStatusCode_IN_PROGRESS           DiagnosticOrderStatusCode_Value = 7
	DiagnosticOrderStatusCode_REVIEW                DiagnosticOrderStatusCode_Value = 8
	DiagnosticOrderStatusCode_COMPLETED             DiagnosticOrderStatusCode_Value = 9
	DiagnosticOrderStatusCode_CANCELLED             DiagnosticOrderStatusCode_Value = 10
	DiagnosticOrderStatusCode_SUSPENDED             DiagnosticOrderStatusCode_Value = 11
	DiagnosticOrderStatusCode_REJECTED              DiagnosticOrderStatusCode_Value = 12
	DiagnosticOrderStatusCode_FAILED                DiagnosticOrderStatusCode_Value = 13
)

// Enum value maps for DiagnosticOrderStatusCode_Value.
var (
	DiagnosticOrderStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PROPOSED",
		2:  "DRAFT",
		3:  "PLANNED",
		4:  "REQUESTED",
		5:  "RECEIVED",
		6:  "ACCEPTED",
		7:  "IN_PROGRESS",
		8:  "REVIEW",
		9:  "COMPLETED",
		10: "CANCELLED",
		11: "SUSPENDED",
		12: "REJECTED",
		13: "FAILED",
	}
	DiagnosticOrderStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"DRAFT":                 2,
		"PLANNED":               3,
		"REQUESTED":             4,
		"RECEIVED":              5,
		"ACCEPTED":              6,
		"IN_PROGRESS":           7,
		"REVIEW":                8,
		"COMPLETED":             9,
		"CANCELLED":             10,
		"SUSPENDED":             11,
		"REJECTED":              12,
		"FAILED":                13,
	}
)

func (x DiagnosticOrderStatusCode_Value) Enum() *DiagnosticOrderStatusCode_Value {
	p := new(DiagnosticOrderStatusCode_Value)
	*p = x
	return p
}

func (x DiagnosticOrderStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticOrderStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[41].Descriptor()
}

func (DiagnosticOrderStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[41]
}

func (x DiagnosticOrderStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticOrderStatusCode_Value.Descriptor instead.
func (DiagnosticOrderStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{41, 0}
}

// Primitive value for code.
type DiagnosticReportStatusCode_Value int32

const (
	DiagnosticReportStatusCode_INVALID_UNINITIALIZED DiagnosticReportStatusCode_Value = 0
	DiagnosticReportStatusCode_REGISTERED            DiagnosticReportStatusCode_Value = 1
	DiagnosticReportStatusCode_PARTIAL               DiagnosticReportStatusCode_Value = 2
	DiagnosticReportStatusCode_FINAL                 DiagnosticReportStatusCode_Value = 3
	DiagnosticReportStatusCode_CORRECTED             DiagnosticReportStatusCode_Value = 4
	DiagnosticReportStatusCode_APPENDED              DiagnosticReportStatusCode_Value = 5
	DiagnosticReportStatusCode_CANCELLED             DiagnosticReportStatusCode_Value = 6
	DiagnosticReportStatusCode_ENTERED_IN_ERROR      DiagnosticReportStatusCode_Value = 7
)

// Enum value maps for DiagnosticReportStatusCode_Value.
var (
	DiagnosticReportStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REGISTERED",
		2: "PARTIAL",
		3: "FINAL",
		4: "CORRECTED",
		5: "APPENDED",
		6: "CANCELLED",
		7: "ENTERED_IN_ERROR",
	}
	DiagnosticReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"PARTIAL":               2,
		"FINAL":                 3,
		"CORRECTED":             4,
		"APPENDED":              5,
		"CANCELLED":             6,
		"ENTERED_IN_ERROR":      7,
	}
)

func (x DiagnosticReportStatusCode_Value) Enum() *DiagnosticReportStatusCode_Value {
	p := new(DiagnosticReportStatusCode_Value)
	*p = x
	return p
}

func (x DiagnosticReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[42].Descriptor()
}

func (DiagnosticReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[42]
}

func (x DiagnosticReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticReportStatusCode_Value.Descriptor instead.
func (DiagnosticReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{42, 0}
}

// Primitive value for code.
type DigitalMediaTypeCode_Value int32

const (
	DigitalMediaTypeCode_INVALID_UNINITIALIZED DigitalMediaTypeCode_Value = 0
	DigitalMediaTypeCode_PHOTO                 DigitalMediaTypeCode_Value = 1
	DigitalMediaTypeCode_VIDEO                 DigitalMediaTypeCode_Value = 2
	DigitalMediaTypeCode_AUDIO                 DigitalMediaTypeCode_Value = 3
)

// Enum value maps for DigitalMediaTypeCode_Value.
var (
	DigitalMediaTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PHOTO",
		2: "VIDEO",
		3: "AUDIO",
	}
	DigitalMediaTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PHOTO":                 1,
		"VIDEO":                 2,
		"AUDIO":                 3,
	}
)

func (x DigitalMediaTypeCode_Value) Enum() *DigitalMediaTypeCode_Value {
	p := new(DigitalMediaTypeCode_Value)
	*p = x
	return p
}

func (x DigitalMediaTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalMediaTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[43].Descriptor()
}

func (DigitalMediaTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[43]
}

func (x DigitalMediaTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalMediaTypeCode_Value.Descriptor instead.
func (DigitalMediaTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{43, 0}
}

// Primitive value for code.
type DocumentModeCode_Value int32

const (
	DocumentModeCode_INVALID_UNINITIALIZED DocumentModeCode_Value = 0
	DocumentModeCode_PRODUCER              DocumentModeCode_Value = 1
	DocumentModeCode_CONSUMER              DocumentModeCode_Value = 2
)

// Enum value maps for DocumentModeCode_Value.
var (
	DocumentModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRODUCER",
		2: "CONSUMER",
	}
	DocumentModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRODUCER":              1,
		"CONSUMER":              2,
	}
)

func (x DocumentModeCode_Value) Enum() *DocumentModeCode_Value {
	p := new(DocumentModeCode_Value)
	*p = x
	return p
}

func (x DocumentModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[44].Descriptor()
}

func (DocumentModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[44]
}

func (x DocumentModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentModeCode_Value.Descriptor instead.
func (DocumentModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{44, 0}
}

// Primitive value for code.
type DocumentReferenceStatusCode_Value int32

const (
	DocumentReferenceStatusCode_INVALID_UNINITIALIZED DocumentReferenceStatusCode_Value = 0
	DocumentReferenceStatusCode_CURRENT               DocumentReferenceStatusCode_Value = 1
	DocumentReferenceStatusCode_SUPERSEDED            DocumentReferenceStatusCode_Value = 2
	DocumentReferenceStatusCode_ENTERED_IN_ERROR      DocumentReferenceStatusCode_Value = 3
)

// Enum value maps for DocumentReferenceStatusCode_Value.
var (
	DocumentReferenceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CURRENT",
		2: "SUPERSEDED",
		3: "ENTERED_IN_ERROR",
	}
	DocumentReferenceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CURRENT":               1,
		"SUPERSEDED":            2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x DocumentReferenceStatusCode_Value) Enum() *DocumentReferenceStatusCode_Value {
	p := new(DocumentReferenceStatusCode_Value)
	*p = x
	return p
}

func (x DocumentReferenceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentReferenceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[45].Descriptor()
}

func (DocumentReferenceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[45]
}

func (x DocumentReferenceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentReferenceStatusCode_Value.Descriptor instead.
func (DocumentReferenceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{45, 0}
}

// Primitive value for code.
type DocumentRelationshipTypeCode_Value int32

const (
	DocumentRelationshipTypeCode_INVALID_UNINITIALIZED DocumentRelationshipTypeCode_Value = 0
	DocumentRelationshipTypeCode_REPLACES              DocumentRelationshipTypeCode_Value = 1
	DocumentRelationshipTypeCode_TRANSFORMS            DocumentRelationshipTypeCode_Value = 2
	DocumentRelationshipTypeCode_SIGNS                 DocumentRelationshipTypeCode_Value = 3
	DocumentRelationshipTypeCode_APPENDS               DocumentRelationshipTypeCode_Value = 4
)

// Enum value maps for DocumentRelationshipTypeCode_Value.
var (
	DocumentRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REPLACES",
		2: "TRANSFORMS",
		3: "SIGNS",
		4: "APPENDS",
	}
	DocumentRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REPLACES":              1,
		"TRANSFORMS":            2,
		"SIGNS":                 3,
		"APPENDS":               4,
	}
)

func (x DocumentRelationshipTypeCode_Value) Enum() *DocumentRelationshipTypeCode_Value {
	p := new(DocumentRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x DocumentRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[46].Descriptor()
}

func (DocumentRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[46]
}

func (x DocumentRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentRelationshipTypeCode_Value.Descriptor instead.
func (DocumentRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{46, 0}
}

// Primitive value for code.
type EncounterClassCode_Value int32

const (
	EncounterClassCode_INVALID_UNINITIALIZED EncounterClassCode_Value = 0
	EncounterClassCode_INPATIENT             EncounterClassCode_Value = 1
	EncounterClassCode_OUTPATIENT            EncounterClassCode_Value = 2
	EncounterClassCode_AMBULATORY            EncounterClassCode_Value = 3
	EncounterClassCode_EMERGENCY             EncounterClassCode_Value = 4
	EncounterClassCode_HOME                  EncounterClassCode_Value = 5
	EncounterClassCode_FIELD                 EncounterClassCode_Value = 6
	EncounterClassCode_DAYTIME               EncounterClassCode_Value = 7
	EncounterClassCode_VIRTUAL               EncounterClassCode_Value = 8
	EncounterClassCode_OTHER                 EncounterClassCode_Value = 9
)

// Enum value maps for EncounterClassCode_Value.
var (
	EncounterClassCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INPATIENT",
		2: "OUTPATIENT",
		3: "AMBULATORY",
		4: "EMERGENCY",
		5: "HOME",
		6: "FIELD",
		7: "DAYTIME",
		8: "VIRTUAL",
		9: "OTHER",
	}
	EncounterClassCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INPATIENT":             1,
		"OUTPATIENT":            2,
		"AMBULATORY":            3,
		"EMERGENCY":             4,
		"HOME":                  5,
		"FIELD":                 6,
		"DAYTIME":               7,
		"VIRTUAL":               8,
		"OTHER":                 9,
	}
)

func (x EncounterClassCode_Value) Enum() *EncounterClassCode_Value {
	p := new(EncounterClassCode_Value)
	*p = x
	return p
}

func (x EncounterClassCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterClassCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[47].Descriptor()
}

func (EncounterClassCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[47]
}

func (x EncounterClassCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterClassCode_Value.Descriptor instead.
func (EncounterClassCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{47, 0}
}

// Primitive value for code.
type EncounterLocationStatusCode_Value int32

const (
	EncounterLocationStatusCode_INVALID_UNINITIALIZED EncounterLocationStatusCode_Value = 0
	EncounterLocationStatusCode_PLANNED               EncounterLocationStatusCode_Value = 1
	EncounterLocationStatusCode_ACTIVE                EncounterLocationStatusCode_Value = 2
	EncounterLocationStatusCode_RESERVED              EncounterLocationStatusCode_Value = 3
	EncounterLocationStatusCode_COMPLETED             EncounterLocationStatusCode_Value = 4
)

// Enum value maps for EncounterLocationStatusCode_Value.
var (
	EncounterLocationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "ACTIVE",
		3: "RESERVED",
		4: "COMPLETED",
	}
	EncounterLocationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"ACTIVE":                2,
		"RESERVED":              3,
		"COMPLETED":             4,
	}
)

func (x EncounterLocationStatusCode_Value) Enum() *EncounterLocationStatusCode_Value {
	p := new(EncounterLocationStatusCode_Value)
	*p = x
	return p
}

func (x EncounterLocationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterLocationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[48].Descriptor()
}

func (EncounterLocationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[48]
}

func (x EncounterLocationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterLocationStatusCode_Value.Descriptor instead.
func (EncounterLocationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{48, 0}
}

// Primitive value for code.
type ParticipantTypeCode_Value int32

const (
	ParticipantTypeCode_INVALID_UNINITIALIZED ParticipantTypeCode_Value = 0
	ParticipantTypeCode_TRANSLATOR            ParticipantTypeCode_Value = 1
	ParticipantTypeCode_EMERGENCY             ParticipantTypeCode_Value = 2
)

// Enum value maps for ParticipantTypeCode_Value.
var (
	ParticipantTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TRANSLATOR",
		2: "EMERGENCY",
	}
	ParticipantTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TRANSLATOR":            1,
		"EMERGENCY":             2,
	}
)

func (x ParticipantTypeCode_Value) Enum() *ParticipantTypeCode_Value {
	p := new(ParticipantTypeCode_Value)
	*p = x
	return p
}

func (x ParticipantTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[49].Descriptor()
}

func (ParticipantTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[49]
}

func (x ParticipantTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantTypeCode_Value.Descriptor instead.
func (ParticipantTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{49, 0}
}

// Primitive value for code.
type EncounterStateCode_Value int32

const (
	EncounterStateCode_INVALID_UNINITIALIZED EncounterStateCode_Value = 0
	EncounterStateCode_PLANNED               EncounterStateCode_Value = 1
	EncounterStateCode_ARRIVED               EncounterStateCode_Value = 2
	EncounterStateCode_IN_PROGRESS           EncounterStateCode_Value = 3
	EncounterStateCode_ONLEAVE               EncounterStateCode_Value = 4
	EncounterStateCode_FINISHED              EncounterStateCode_Value = 5
	EncounterStateCode_CANCELLED             EncounterStateCode_Value = 6
)

// Enum value maps for EncounterStateCode_Value.
var (
	EncounterStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "ARRIVED",
		3: "IN_PROGRESS",
		4: "ONLEAVE",
		5: "FINISHED",
		6: "CANCELLED",
	}
	EncounterStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"ARRIVED":               2,
		"IN_PROGRESS":           3,
		"ONLEAVE":               4,
		"FINISHED":              5,
		"CANCELLED":             6,
	}
)

func (x EncounterStateCode_Value) Enum() *EncounterStateCode_Value {
	p := new(EncounterStateCode_Value)
	*p = x
	return p
}

func (x EncounterStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[50].Descriptor()
}

func (EncounterStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[50]
}

func (x EncounterStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterStateCode_Value.Descriptor instead.
func (EncounterStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{50, 0}
}

// Primitive value for code.
type EpisodeOfCareStatusCode_Value int32

const (
	EpisodeOfCareStatusCode_INVALID_UNINITIALIZED EpisodeOfCareStatusCode_Value = 0
	EpisodeOfCareStatusCode_PLANNED               EpisodeOfCareStatusCode_Value = 1
	EpisodeOfCareStatusCode_WAITLIST              EpisodeOfCareStatusCode_Value = 2
	EpisodeOfCareStatusCode_ACTIVE                EpisodeOfCareStatusCode_Value = 3
	EpisodeOfCareStatusCode_ONHOLD                EpisodeOfCareStatusCode_Value = 4
	EpisodeOfCareStatusCode_FINISHED              EpisodeOfCareStatusCode_Value = 5
	EpisodeOfCareStatusCode_CANCELLED             EpisodeOfCareStatusCode_Value = 6
)

// Enum value maps for EpisodeOfCareStatusCode_Value.
var (
	EpisodeOfCareStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "WAITLIST",
		3: "ACTIVE",
		4: "ONHOLD",
		5: "FINISHED",
		6: "CANCELLED",
	}
	EpisodeOfCareStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"WAITLIST":              2,
		"ACTIVE":                3,
		"ONHOLD":                4,
		"FINISHED":              5,
		"CANCELLED":             6,
	}
)

func (x EpisodeOfCareStatusCode_Value) Enum() *EpisodeOfCareStatusCode_Value {
	p := new(EpisodeOfCareStatusCode_Value)
	*p = x
	return p
}

func (x EpisodeOfCareStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EpisodeOfCareStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[51].Descriptor()
}

func (EpisodeOfCareStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[51]
}

func (x EpisodeOfCareStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EpisodeOfCareStatusCode_Value.Descriptor instead.
func (EpisodeOfCareStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{51, 0}
}

// Primitive value for code.
type ExtensionContextCode_Value int32

const (
	ExtensionContextCode_INVALID_UNINITIALIZED ExtensionContextCode_Value = 0
	ExtensionContextCode_RESOURCE              ExtensionContextCode_Value = 1
	ExtensionContextCode_DATATYPE              ExtensionContextCode_Value = 2
	ExtensionContextCode_MAPPING               ExtensionContextCode_Value = 3
	ExtensionContextCode_EXTENSION             ExtensionContextCode_Value = 4
)

// Enum value maps for ExtensionContextCode_Value.
var (
	ExtensionContextCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RESOURCE",
		2: "DATATYPE",
		3: "MAPPING",
		4: "EXTENSION",
	}
	ExtensionContextCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RESOURCE":              1,
		"DATATYPE":              2,
		"MAPPING":               3,
		"EXTENSION":             4,
	}
)

func (x ExtensionContextCode_Value) Enum() *ExtensionContextCode_Value {
	p := new(ExtensionContextCode_Value)
	*p = x
	return p
}

func (x ExtensionContextCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionContextCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[52].Descriptor()
}

func (ExtensionContextCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[52]
}

func (x ExtensionContextCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionContextCode_Value.Descriptor instead.
func (ExtensionContextCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{52, 0}
}

// Primitive value for code.
type FilterOperatorCode_Value int32

const (
	FilterOperatorCode_INVALID_UNINITIALIZED FilterOperatorCode_Value = 0
	FilterOperatorCode_EUQALS                FilterOperatorCode_Value = 1
	FilterOperatorCode_IS_A                  FilterOperatorCode_Value = 2
	FilterOperatorCode_IS_NOT_A              FilterOperatorCode_Value = 3
	FilterOperatorCode_REGEX                 FilterOperatorCode_Value = 4
	FilterOperatorCode_IN                    FilterOperatorCode_Value = 5
	FilterOperatorCode_NOT_IN                FilterOperatorCode_Value = 6
)

// Enum value maps for FilterOperatorCode_Value.
var (
	FilterOperatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EUQALS",
		2: "IS_A",
		3: "IS_NOT_A",
		4: "REGEX",
		5: "IN",
		6: "NOT_IN",
	}
	FilterOperatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EUQALS":                1,
		"IS_A":                  2,
		"IS_NOT_A":              3,
		"REGEX":                 4,
		"IN":                    5,
		"NOT_IN":                6,
	}
)

func (x FilterOperatorCode_Value) Enum() *FilterOperatorCode_Value {
	p := new(FilterOperatorCode_Value)
	*p = x
	return p
}

func (x FilterOperatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[53].Descriptor()
}

func (FilterOperatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[53]
}

func (x FilterOperatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOperatorCode_Value.Descriptor instead.
func (FilterOperatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{53, 0}
}

// Primitive value for code.
type FlagStatusCode_Value int32

const (
	FlagStatusCode_INVALID_UNINITIALIZED FlagStatusCode_Value = 0
	FlagStatusCode_ACTIVE                FlagStatusCode_Value = 1
	FlagStatusCode_INACTIVE              FlagStatusCode_Value = 2
	FlagStatusCode_ENTERED_IN_ERROR      FlagStatusCode_Value = 3
)

// Enum value maps for FlagStatusCode_Value.
var (
	FlagStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	FlagStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x FlagStatusCode_Value) Enum() *FlagStatusCode_Value {
	p := new(FlagStatusCode_Value)
	*p = x
	return p
}

func (x FlagStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[54].Descriptor()
}

func (FlagStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[54]
}

func (x FlagStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagStatusCode_Value.Descriptor instead.
func (FlagStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{54, 0}
}

// Primitive value for code.
type FormsCode_Value int32

const (
	FormsCode_INVALID_UNINITIALIZED FormsCode_Value = 0
	FormsCode_ONE                   FormsCode_Value = 1
	FormsCode_TWO                   FormsCode_Value = 2
)

// Enum value maps for FormsCode_Value.
var (
	FormsCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ONE",
		2: "TWO",
	}
	FormsCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ONE":                   1,
		"TWO":                   2,
	}
)

func (x FormsCode_Value) Enum() *FormsCode_Value {
	p := new(FormsCode_Value)
	*p = x
	return p
}

func (x FormsCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormsCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[55].Descriptor()
}

func (FormsCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[55]
}

func (x FormsCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormsCode_Value.Descriptor instead.
func (FormsCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{55, 0}
}

// Primitive value for code.
type GoalStatusCode_Value int32

const (
	GoalStatusCode_INVALID_UNINITIALIZED GoalStatusCode_Value = 0
	GoalStatusCode_PROPOSED              GoalStatusCode_Value = 1
	GoalStatusCode_PLANNED               GoalStatusCode_Value = 2
	GoalStatusCode_ACCEPTED              GoalStatusCode_Value = 3
	GoalStatusCode_REJECTED              GoalStatusCode_Value = 4
	GoalStatusCode_IN_PROGRESS           GoalStatusCode_Value = 5
	GoalStatusCode_ACHIEVED              GoalStatusCode_Value = 6
	GoalStatusCode_SUSTAINING            GoalStatusCode_Value = 7
	GoalStatusCode_ON_HOLD               GoalStatusCode_Value = 8
	GoalStatusCode_CANCELLED             GoalStatusCode_Value = 9
)

// Enum value maps for GoalStatusCode_Value.
var (
	GoalStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "PLANNED",
		3: "ACCEPTED",
		4: "REJECTED",
		5: "IN_PROGRESS",
		6: "ACHIEVED",
		7: "SUSTAINING",
		8: "ON_HOLD",
		9: "CANCELLED",
	}
	GoalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"PLANNED":               2,
		"ACCEPTED":              3,
		"REJECTED":              4,
		"IN_PROGRESS":           5,
		"ACHIEVED":              6,
		"SUSTAINING":            7,
		"ON_HOLD":               8,
		"CANCELLED":             9,
	}
)

func (x GoalStatusCode_Value) Enum() *GoalStatusCode_Value {
	p := new(GoalStatusCode_Value)
	*p = x
	return p
}

func (x GoalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[56].Descriptor()
}

func (GoalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[56]
}

func (x GoalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalStatusCode_Value.Descriptor instead.
func (GoalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{56, 0}
}

// Primitive value for code.
type GroupTypeCode_Value int32

const (
	GroupTypeCode_INVALID_UNINITIALIZED GroupTypeCode_Value = 0
	GroupTypeCode_PERSON                GroupTypeCode_Value = 1
	GroupTypeCode_ANIMAL                GroupTypeCode_Value = 2
	GroupTypeCode_PRACTITIONER          GroupTypeCode_Value = 3
	GroupTypeCode_DEVICE                GroupTypeCode_Value = 4
	GroupTypeCode_MEDICATION            GroupTypeCode_Value = 5
	GroupTypeCode_SUBSTANCE             GroupTypeCode_Value = 6
)

// Enum value maps for GroupTypeCode_Value.
var (
	GroupTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PERSON",
		2: "ANIMAL",
		3: "PRACTITIONER",
		4: "DEVICE",
		5: "MEDICATION",
		6: "SUBSTANCE",
	}
	GroupTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERSON":                1,
		"ANIMAL":                2,
		"PRACTITIONER":          3,
		"DEVICE":                4,
		"MEDICATION":            5,
		"SUBSTANCE":             6,
	}
)

func (x GroupTypeCode_Value) Enum() *GroupTypeCode_Value {
	p := new(GroupTypeCode_Value)
	*p = x
	return p
}

func (x GroupTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[57].Descriptor()
}

func (GroupTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[57]
}

func (x GroupTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupTypeCode_Value.Descriptor instead.
func (GroupTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{57, 0}
}

// Primitive value for code.
type GuideDependencyTypeCode_Value int32

const (
	GuideDependencyTypeCode_INVALID_UNINITIALIZED GuideDependencyTypeCode_Value = 0
	GuideDependencyTypeCode_REFERENCE             GuideDependencyTypeCode_Value = 1
	GuideDependencyTypeCode_INCLUSION             GuideDependencyTypeCode_Value = 2
)

// Enum value maps for GuideDependencyTypeCode_Value.
var (
	GuideDependencyTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REFERENCE",
		2: "INCLUSION",
	}
	GuideDependencyTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REFERENCE":             1,
		"INCLUSION":             2,
	}
)

func (x GuideDependencyTypeCode_Value) Enum() *GuideDependencyTypeCode_Value {
	p := new(GuideDependencyTypeCode_Value)
	*p = x
	return p
}

func (x GuideDependencyTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuideDependencyTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[58].Descriptor()
}

func (GuideDependencyTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[58]
}

func (x GuideDependencyTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuideDependencyTypeCode_Value.Descriptor instead.
func (GuideDependencyTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{58, 0}
}

// Primitive value for code.
type GuidePageKindCode_Value int32

const (
	GuidePageKindCode_INVALID_UNINITIALIZED GuidePageKindCode_Value = 0
	GuidePageKindCode_PAGE                  GuidePageKindCode_Value = 1
	GuidePageKindCode_EXAMPLE               GuidePageKindCode_Value = 2
	GuidePageKindCode_LIST                  GuidePageKindCode_Value = 3
	GuidePageKindCode_INCLUDE               GuidePageKindCode_Value = 4
	GuidePageKindCode_DIRECTORY             GuidePageKindCode_Value = 5
	GuidePageKindCode_DICTIONARY            GuidePageKindCode_Value = 6
	GuidePageKindCode_TOC                   GuidePageKindCode_Value = 7
	GuidePageKindCode_RESOURCE              GuidePageKindCode_Value = 8
)

// Enum value maps for GuidePageKindCode_Value.
var (
	GuidePageKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PAGE",
		2: "EXAMPLE",
		3: "LIST",
		4: "INCLUDE",
		5: "DIRECTORY",
		6: "DICTIONARY",
		7: "TOC",
		8: "RESOURCE",
	}
	GuidePageKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PAGE":                  1,
		"EXAMPLE":               2,
		"LIST":                  3,
		"INCLUDE":               4,
		"DIRECTORY":             5,
		"DICTIONARY":            6,
		"TOC":                   7,
		"RESOURCE":              8,
	}
)

func (x GuidePageKindCode_Value) Enum() *GuidePageKindCode_Value {
	p := new(GuidePageKindCode_Value)
	*p = x
	return p
}

func (x GuidePageKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidePageKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[59].Descriptor()
}

func (GuidePageKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[59]
}

func (x GuidePageKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidePageKindCode_Value.Descriptor instead.
func (GuidePageKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{59, 0}
}

// Primitive value for code.
type GuideResourcePurposeCode_Value int32

const (
	GuideResourcePurposeCode_INVALID_UNINITIALIZED GuideResourcePurposeCode_Value = 0
	GuideResourcePurposeCode_EXAMPLE               GuideResourcePurposeCode_Value = 1
	GuideResourcePurposeCode_TERMINOLOGY           GuideResourcePurposeCode_Value = 2
	GuideResourcePurposeCode_PROFILE               GuideResourcePurposeCode_Value = 3
	GuideResourcePurposeCode_EXTENSION             GuideResourcePurposeCode_Value = 4
	GuideResourcePurposeCode_DICTIONARY            GuideResourcePurposeCode_Value = 5
	GuideResourcePurposeCode_LOGICAL               GuideResourcePurposeCode_Value = 6
)

// Enum value maps for GuideResourcePurposeCode_Value.
var (
	GuideResourcePurposeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EXAMPLE",
		2: "TERMINOLOGY",
		3: "PROFILE",
		4: "EXTENSION",
		5: "DICTIONARY",
		6: "LOGICAL",
	}
	GuideResourcePurposeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EXAMPLE":               1,
		"TERMINOLOGY":           2,
		"PROFILE":               3,
		"EXTENSION":             4,
		"DICTIONARY":            5,
		"LOGICAL":               6,
	}
)

func (x GuideResourcePurposeCode_Value) Enum() *GuideResourcePurposeCode_Value {
	p := new(GuideResourcePurposeCode_Value)
	*p = x
	return p
}

func (x GuideResourcePurposeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuideResourcePurposeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[60].Descriptor()
}

func (GuideResourcePurposeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[60]
}

func (x GuideResourcePurposeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuideResourcePurposeCode_Value.Descriptor instead.
func (GuideResourcePurposeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{60, 0}
}

// Primitive value for code.
type FamilyHistoryStatusCode_Value int32

const (
	FamilyHistoryStatusCode_INVALID_UNINITIALIZED FamilyHistoryStatusCode_Value = 0
	FamilyHistoryStatusCode_PARTIAL               FamilyHistoryStatusCode_Value = 1
	FamilyHistoryStatusCode_COMPLETED             FamilyHistoryStatusCode_Value = 2
	FamilyHistoryStatusCode_ENTERED_IN_ERROR      FamilyHistoryStatusCode_Value = 3
	FamilyHistoryStatusCode_HEALTH_UNKNOWN        FamilyHistoryStatusCode_Value = 4
)

// Enum value maps for FamilyHistoryStatusCode_Value.
var (
	FamilyHistoryStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PARTIAL",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
		4: "HEALTH_UNKNOWN",
	}
	FamilyHistoryStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PARTIAL":               1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
		"HEALTH_UNKNOWN":        4,
	}
)

func (x FamilyHistoryStatusCode_Value) Enum() *FamilyHistoryStatusCode_Value {
	p := new(FamilyHistoryStatusCode_Value)
	*p = x
	return p
}

func (x FamilyHistoryStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FamilyHistoryStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[61].Descriptor()
}

func (FamilyHistoryStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[61]
}

func (x FamilyHistoryStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FamilyHistoryStatusCode_Value.Descriptor instead.
func (FamilyHistoryStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{61, 0}
}

// Primitive value for code.
type HTTPVerbCode_Value int32

const (
	HTTPVerbCode_INVALID_UNINITIALIZED HTTPVerbCode_Value = 0
	HTTPVerbCode_GET                   HTTPVerbCode_Value = 1
	HTTPVerbCode_POST                  HTTPVerbCode_Value = 2
	HTTPVerbCode_PUT                   HTTPVerbCode_Value = 3
	HTTPVerbCode_DELETE                HTTPVerbCode_Value = 4
)

// Enum value maps for HTTPVerbCode_Value.
var (
	HTTPVerbCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GET",
		2: "POST",
		3: "PUT",
		4: "DELETE",
	}
	HTTPVerbCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GET":                   1,
		"POST":                  2,
		"PUT":                   3,
		"DELETE":                4,
	}
)

func (x HTTPVerbCode_Value) Enum() *HTTPVerbCode_Value {
	p := new(HTTPVerbCode_Value)
	*p = x
	return p
}

func (x HTTPVerbCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPVerbCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[62].Descriptor()
}

func (HTTPVerbCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[62]
}

func (x HTTPVerbCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPVerbCode_Value.Descriptor instead.
func (HTTPVerbCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{62, 0}
}

// Primitive value for code.
type IdentityAssuranceLevelCode_Value int32

const (
	IdentityAssuranceLevelCode_INVALID_UNINITIALIZED IdentityAssuranceLevelCode_Value = 0
	IdentityAssuranceLevelCode_LEVEL1                IdentityAssuranceLevelCode_Value = 1
	IdentityAssuranceLevelCode_LEVEL2                IdentityAssuranceLevelCode_Value = 2
	IdentityAssuranceLevelCode_LEVEL3                IdentityAssuranceLevelCode_Value = 3
	IdentityAssuranceLevelCode_LEVEL4                IdentityAssuranceLevelCode_Value = 4
)

// Enum value maps for IdentityAssuranceLevelCode_Value.
var (
	IdentityAssuranceLevelCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LEVEL1",
		2: "LEVEL2",
		3: "LEVEL3",
		4: "LEVEL4",
	}
	IdentityAssuranceLevelCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LEVEL1":                1,
		"LEVEL2":                2,
		"LEVEL3":                3,
		"LEVEL4":                4,
	}
)

func (x IdentityAssuranceLevelCode_Value) Enum() *IdentityAssuranceLevelCode_Value {
	p := new(IdentityAssuranceLevelCode_Value)
	*p = x
	return p
}

func (x IdentityAssuranceLevelCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityAssuranceLevelCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[63].Descriptor()
}

func (IdentityAssuranceLevelCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[63]
}

func (x IdentityAssuranceLevelCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityAssuranceLevelCode_Value.Descriptor instead.
func (IdentityAssuranceLevelCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{63, 0}
}

// Primitive value for code.
type IssueSeverityCode_Value int32

const (
	IssueSeverityCode_INVALID_UNINITIALIZED IssueSeverityCode_Value = 0
	IssueSeverityCode_FATAL                 IssueSeverityCode_Value = 1
	IssueSeverityCode_ERROR                 IssueSeverityCode_Value = 2
	IssueSeverityCode_WARNING               IssueSeverityCode_Value = 3
	IssueSeverityCode_INFORMATION           IssueSeverityCode_Value = 4
)

// Enum value maps for IssueSeverityCode_Value.
var (
	IssueSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FATAL",
		2: "ERROR",
		3: "WARNING",
		4: "INFORMATION",
	}
	IssueSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FATAL":                 1,
		"ERROR":                 2,
		"WARNING":               3,
		"INFORMATION":           4,
	}
)

func (x IssueSeverityCode_Value) Enum() *IssueSeverityCode_Value {
	p := new(IssueSeverityCode_Value)
	*p = x
	return p
}

func (x IssueSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[64].Descriptor()
}

func (IssueSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[64]
}

func (x IssueSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueSeverityCode_Value.Descriptor instead.
func (IssueSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{64, 0}
}

// Primitive value for code.
type IssueTypeCode_Value int32

const (
	IssueTypeCode_INVALID_UNINITIALIZED IssueTypeCode_Value = 0
	IssueTypeCode_INVALID               IssueTypeCode_Value = 1
	IssueTypeCode_STRUCTURE             IssueTypeCode_Value = 2
	IssueTypeCode_REQUIRED              IssueTypeCode_Value = 3
	IssueTypeCode_VALUE                 IssueTypeCode_Value = 4
	IssueTypeCode_INVARIANT             IssueTypeCode_Value = 5
	IssueTypeCode_SECURITY              IssueTypeCode_Value = 6
	IssueTypeCode_LOGIN                 IssueTypeCode_Value = 7
	IssueTypeCode_UNKNOWN               IssueTypeCode_Value = 8
	IssueTypeCode_EXPIRED               IssueTypeCode_Value = 9
	IssueTypeCode_FORBIDDEN             IssueTypeCode_Value = 10
	IssueTypeCode_SUPPRESSED            IssueTypeCode_Value = 11
	IssueTypeCode_PROCESSING            IssueTypeCode_Value = 12
	IssueTypeCode_NOT_SUPPORTED         IssueTypeCode_Value = 13
	IssueTypeCode_DUPLICATE             IssueTypeCode_Value = 14
	IssueTypeCode_NOT_FOUND             IssueTypeCode_Value = 15
	IssueTypeCode_TOO_LONG              IssueTypeCode_Value = 16
	IssueTypeCode_CODE_INVALID          IssueTypeCode_Value = 17
	IssueTypeCode_EXTENSION             IssueTypeCode_Value = 18
	IssueTypeCode_TOO_COSTLY            IssueTypeCode_Value = 19
	IssueTypeCode_BUSINESS_RULE         IssueTypeCode_Value = 20
	IssueTypeCode_CONFLICT              IssueTypeCode_Value = 21
	IssueTypeCode_INCOMPLETE            IssueTypeCode_Value = 22
	IssueTypeCode_TRANSIENT             IssueTypeCode_Value = 23
	IssueTypeCode_LOCK_ERROR            IssueTypeCode_Value = 24
	IssueTypeCode_NO_STORE              IssueTypeCode_Value = 25
	IssueTypeCode_EXCEPTION             IssueTypeCode_Value = 26
	IssueTypeCode_TIMEOUT               IssueTypeCode_Value = 27
	IssueTypeCode_THROTTLED             IssueTypeCode_Value = 28
	IssueTypeCode_INFORMATIONAL         IssueTypeCode_Value = 29
)

// Enum value maps for IssueTypeCode_Value.
var (
	IssueTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "INVALID",
		2:  "STRUCTURE",
		3:  "REQUIRED",
		4:  "VALUE",
		5:  "INVARIANT",
		6:  "SECURITY",
		7:  "LOGIN",
		8:  "UNKNOWN",
		9:  "EXPIRED",
		10: "FORBIDDEN",
		11: "SUPPRESSED",
		12: "PROCESSING",
		13: "NOT_SUPPORTED",
		14: "DUPLICATE",
		15: "NOT_FOUND",
		16: "TOO_LONG",
		17: "CODE_INVALID",
		18: "EXTENSION",
		19: "TOO_COSTLY",
		20: "BUSINESS_RULE",
		21: "CONFLICT",
		22: "INCOMPLETE",
		23: "TRANSIENT",
		24: "LOCK_ERROR",
		25: "NO_STORE",
		26: "EXCEPTION",
		27: "TIMEOUT",
		28: "THROTTLED",
		29: "INFORMATIONAL",
	}
	IssueTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INVALID":               1,
		"STRUCTURE":             2,
		"REQUIRED":              3,
		"VALUE":                 4,
		"INVARIANT":             5,
		"SECURITY":              6,
		"LOGIN":                 7,
		"UNKNOWN":               8,
		"EXPIRED":               9,
		"FORBIDDEN":             10,
		"SUPPRESSED":            11,
		"PROCESSING":            12,
		"NOT_SUPPORTED":         13,
		"DUPLICATE":             14,
		"NOT_FOUND":             15,
		"TOO_LONG":              16,
		"CODE_INVALID":          17,
		"EXTENSION":             18,
		"TOO_COSTLY":            19,
		"BUSINESS_RULE":         20,
		"CONFLICT":              21,
		"INCOMPLETE":            22,
		"TRANSIENT":             23,
		"LOCK_ERROR":            24,
		"NO_STORE":              25,
		"EXCEPTION":             26,
		"TIMEOUT":               27,
		"THROTTLED":             28,
		"INFORMATIONAL":         29,
	}
)

func (x IssueTypeCode_Value) Enum() *IssueTypeCode_Value {
	p := new(IssueTypeCode_Value)
	*p = x
	return p
}

func (x IssueTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[65].Descriptor()
}

func (IssueTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[65]
}

func (x IssueTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueTypeCode_Value.Descriptor instead.
func (IssueTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{65, 0}
}

// Primitive value for code.
type LinkTypeCode_Value int32

const (
	LinkTypeCode_INVALID_UNINITIALIZED LinkTypeCode_Value = 0
	LinkTypeCode_REPLACE               LinkTypeCode_Value = 1
	LinkTypeCode_REFER                 LinkTypeCode_Value = 2
	LinkTypeCode_SEEALSO               LinkTypeCode_Value = 3
)

// Enum value maps for LinkTypeCode_Value.
var (
	LinkTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REPLACE",
		2: "REFER",
		3: "SEEALSO",
	}
	LinkTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REPLACE":               1,
		"REFER":                 2,
		"SEEALSO":               3,
	}
)

func (x LinkTypeCode_Value) Enum() *LinkTypeCode_Value {
	p := new(LinkTypeCode_Value)
	*p = x
	return p
}

func (x LinkTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[66].Descriptor()
}

func (LinkTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[66]
}

func (x LinkTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkTypeCode_Value.Descriptor instead.
func (LinkTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{66, 0}
}

// Primitive value for code.
type ListModeCode_Value int32

const (
	ListModeCode_INVALID_UNINITIALIZED ListModeCode_Value = 0
	ListModeCode_WORKING               ListModeCode_Value = 1
	ListModeCode_SNAPSHOT              ListModeCode_Value = 2
	ListModeCode_CHANGES               ListModeCode_Value = 3
)

// Enum value maps for ListModeCode_Value.
var (
	ListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "WORKING",
		2: "SNAPSHOT",
		3: "CHANGES",
	}
	ListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"WORKING":               1,
		"SNAPSHOT":              2,
		"CHANGES":               3,
	}
)

func (x ListModeCode_Value) Enum() *ListModeCode_Value {
	p := new(ListModeCode_Value)
	*p = x
	return p
}

func (x ListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[67].Descriptor()
}

func (ListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[67]
}

func (x ListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListModeCode_Value.Descriptor instead.
func (ListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{67, 0}
}

// Primitive value for code.
type ListStatusCode_Value int32

const (
	ListStatusCode_INVALID_UNINITIALIZED ListStatusCode_Value = 0
	ListStatusCode_CURRENT               ListStatusCode_Value = 1
	ListStatusCode_RETIRED               ListStatusCode_Value = 2
	ListStatusCode_ENTERED_IN_ERROR      ListStatusCode_Value = 3
)

// Enum value maps for ListStatusCode_Value.
var (
	ListStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CURRENT",
		2: "RETIRED",
		3: "ENTERED_IN_ERROR",
	}
	ListStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CURRENT":               1,
		"RETIRED":               2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x ListStatusCode_Value) Enum() *ListStatusCode_Value {
	p := new(ListStatusCode_Value)
	*p = x
	return p
}

func (x ListStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[68].Descriptor()
}

func (ListStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[68]
}

func (x ListStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListStatusCode_Value.Descriptor instead.
func (ListStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{68, 0}
}

// Primitive value for code.
type LocationModeCode_Value int32

const (
	LocationModeCode_INVALID_UNINITIALIZED LocationModeCode_Value = 0
	LocationModeCode_INSTANCE              LocationModeCode_Value = 1
	LocationModeCode_KIND                  LocationModeCode_Value = 2
)

// Enum value maps for LocationModeCode_Value.
var (
	LocationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "KIND",
	}
	LocationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"KIND":                  2,
	}
)

func (x LocationModeCode_Value) Enum() *LocationModeCode_Value {
	p := new(LocationModeCode_Value)
	*p = x
	return p
}

func (x LocationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[69].Descriptor()
}

func (LocationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[69]
}

func (x LocationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationModeCode_Value.Descriptor instead.
func (LocationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{69, 0}
}

// Primitive value for code.
type LocationStatusCode_Value int32

const (
	LocationStatusCode_INVALID_UNINITIALIZED LocationStatusCode_Value = 0
	LocationStatusCode_ACTIVE                LocationStatusCode_Value = 1
	LocationStatusCode_SUSPENDED             LocationStatusCode_Value = 2
	LocationStatusCode_INACTIVE              LocationStatusCode_Value = 3
)

// Enum value maps for LocationStatusCode_Value.
var (
	LocationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "SUSPENDED",
		3: "INACTIVE",
	}
	LocationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"SUSPENDED":             2,
		"INACTIVE":              3,
	}
)

func (x LocationStatusCode_Value) Enum() *LocationStatusCode_Value {
	p := new(LocationStatusCode_Value)
	*p = x
	return p
}

func (x LocationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[70].Descriptor()
}

func (LocationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[70]
}

func (x LocationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationStatusCode_Value.Descriptor instead.
func (LocationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{70, 0}
}

// Primitive value for code.
type MaritalStatusCode_Value int32

const (
	MaritalStatusCode_INVALID_UNINITIALIZED MaritalStatusCode_Value = 0
	MaritalStatusCode_U                     MaritalStatusCode_Value = 1
	MaritalStatusCode_A                     MaritalStatusCode_Value = 2
	MaritalStatusCode_D                     MaritalStatusCode_Value = 3
	MaritalStatusCode_I                     MaritalStatusCode_Value = 4
	MaritalStatusCode_L                     MaritalStatusCode_Value = 5
	MaritalStatusCode_M                     MaritalStatusCode_Value = 6
	MaritalStatusCode_P                     MaritalStatusCode_Value = 7
	MaritalStatusCode_S                     MaritalStatusCode_Value = 8
	MaritalStatusCode_T                     MaritalStatusCode_Value = 9
	MaritalStatusCode_W                     MaritalStatusCode_Value = 10
	MaritalStatusCode_UNK                   MaritalStatusCode_Value = 11
)

// Enum value maps for MaritalStatusCode_Value.
var (
	MaritalStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "U",
		2:  "A",
		3:  "D",
		4:  "I",
		5:  "L",
		6:  "M",
		7:  "P",
		8:  "S",
		9:  "T",
		10: "W",
		11: "UNK",
	}
	MaritalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"U":                     1,
		"A":                     2,
		"D":                     3,
		"I":                     4,
		"L":                     5,
		"M":                     6,
		"P":                     7,
		"S":                     8,
		"T":                     9,
		"W":                     10,
		"UNK":                   11,
	}
)

func (x MaritalStatusCode_Value) Enum() *MaritalStatusCode_Value {
	p := new(MaritalStatusCode_Value)
	*p = x
	return p
}

func (x MaritalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaritalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[71].Descriptor()
}

func (MaritalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[71]
}

func (x MaritalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaritalStatusCode_Value.Descriptor instead.
func (MaritalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{71, 0}
}

// Primitive value for code.
type MeasmntPrincipleCode_Value int32

const (
	MeasmntPrincipleCode_INVALID_UNINITIALIZED MeasmntPrincipleCode_Value = 0
	MeasmntPrincipleCode_OTHER                 MeasmntPrincipleCode_Value = 1
	MeasmntPrincipleCode_CHEMICAL              MeasmntPrincipleCode_Value = 2
	MeasmntPrincipleCode_ELECTRICAL            MeasmntPrincipleCode_Value = 3
	MeasmntPrincipleCode_IMPEDANCE             MeasmntPrincipleCode_Value = 4
	MeasmntPrincipleCode_NUCLEAR               MeasmntPrincipleCode_Value = 5
	MeasmntPrincipleCode_OPTICAL               MeasmntPrincipleCode_Value = 6
	MeasmntPrincipleCode_THERMAL               MeasmntPrincipleCode_Value = 7
	MeasmntPrincipleCode_BIOLOGICAL            MeasmntPrincipleCode_Value = 8
	MeasmntPrincipleCode_MECHANICAL            MeasmntPrincipleCode_Value = 9
	MeasmntPrincipleCode_ACOUSTICAL            MeasmntPrincipleCode_Value = 10
	MeasmntPrincipleCode_MANUAL                MeasmntPrincipleCode_Value = 11
)

// Enum value maps for MeasmntPrincipleCode_Value.
var (
	MeasmntPrincipleCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "OTHER",
		2:  "CHEMICAL",
		3:  "ELECTRICAL",
		4:  "IMPEDANCE",
		5:  "NUCLEAR",
		6:  "OPTICAL",
		7:  "THERMAL",
		8:  "BIOLOGICAL",
		9:  "MECHANICAL",
		10: "ACOUSTICAL",
		11: "MANUAL",
	}
	MeasmntPrincipleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OTHER":                 1,
		"CHEMICAL":              2,
		"ELECTRICAL":            3,
		"IMPEDANCE":             4,
		"NUCLEAR":               5,
		"OPTICAL":               6,
		"THERMAL":               7,
		"BIOLOGICAL":            8,
		"MECHANICAL":            9,
		"ACOUSTICAL":            10,
		"MANUAL":                11,
	}
)

func (x MeasmntPrincipleCode_Value) Enum() *MeasmntPrincipleCode_Value {
	p := new(MeasmntPrincipleCode_Value)
	*p = x
	return p
}

func (x MeasmntPrincipleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasmntPrincipleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[72].Descriptor()
}

func (MeasmntPrincipleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[72]
}

func (x MeasmntPrincipleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasmntPrincipleCode_Value.Descriptor instead.
func (MeasmntPrincipleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{72, 0}
}

// Primitive value for code.
type MedicationAdministrationStatusCode_Value int32

const (
	MedicationAdministrationStatusCode_INVALID_UNINITIALIZED MedicationAdministrationStatusCode_Value = 0
	MedicationAdministrationStatusCode_IN_PROGRESS           MedicationAdministrationStatusCode_Value = 1
	MedicationAdministrationStatusCode_ON_HOLD               MedicationAdministrationStatusCode_Value = 2
	MedicationAdministrationStatusCode_COMPLETED             MedicationAdministrationStatusCode_Value = 3
	MedicationAdministrationStatusCode_ENTERED_IN_ERROR      MedicationAdministrationStatusCode_Value = 4
	MedicationAdministrationStatusCode_STOPPED               MedicationAdministrationStatusCode_Value = 5
)

// Enum value maps for MedicationAdministrationStatusCode_Value.
var (
	MedicationAdministrationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "ON_HOLD",
		3: "COMPLETED",
		4: "ENTERED_IN_ERROR",
		5: "STOPPED",
	}
	MedicationAdministrationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"ON_HOLD":               2,
		"COMPLETED":             3,
		"ENTERED_IN_ERROR":      4,
		"STOPPED":               5,
	}
)

func (x MedicationAdministrationStatusCode_Value) Enum() *MedicationAdministrationStatusCode_Value {
	p := new(MedicationAdministrationStatusCode_Value)
	*p = x
	return p
}

func (x MedicationAdministrationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationAdministrationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[73].Descriptor()
}

func (MedicationAdministrationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[73]
}

func (x MedicationAdministrationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationAdministrationStatusCode_Value.Descriptor instead.
func (MedicationAdministrationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{73, 0}
}

// Primitive value for code.
type MedicationDispenseStatusCode_Value int32

const (
	MedicationDispenseStatusCode_INVALID_UNINITIALIZED MedicationDispenseStatusCode_Value = 0
	MedicationDispenseStatusCode_IN_PROGRESS           MedicationDispenseStatusCode_Value = 1
	MedicationDispenseStatusCode_ON_HOLD               MedicationDispenseStatusCode_Value = 2
	MedicationDispenseStatusCode_COMPLETED             MedicationDispenseStatusCode_Value = 3
	MedicationDispenseStatusCode_ENTERED_IN_ERROR      MedicationDispenseStatusCode_Value = 4
	MedicationDispenseStatusCode_STOPPED               MedicationDispenseStatusCode_Value = 5
)

// Enum value maps for MedicationDispenseStatusCode_Value.
var (
	MedicationDispenseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "ON_HOLD",
		3: "COMPLETED",
		4: "ENTERED_IN_ERROR",
		5: "STOPPED",
	}
	MedicationDispenseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"ON_HOLD":               2,
		"COMPLETED":             3,
		"ENTERED_IN_ERROR":      4,
		"STOPPED":               5,
	}
)

func (x MedicationDispenseStatusCode_Value) Enum() *MedicationDispenseStatusCode_Value {
	p := new(MedicationDispenseStatusCode_Value)
	*p = x
	return p
}

func (x MedicationDispenseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationDispenseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[74].Descriptor()
}

func (MedicationDispenseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[74]
}

func (x MedicationDispenseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationDispenseStatusCode_Value.Descriptor instead.
func (MedicationDispenseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{74, 0}
}

// Primitive value for code.
type MedicationOrderStatusCode_Value int32

const (
	MedicationOrderStatusCode_INVALID_UNINITIALIZED MedicationOrderStatusCode_Value = 0
	MedicationOrderStatusCode_ACTIVE                MedicationOrderStatusCode_Value = 1
	MedicationOrderStatusCode_ON_HOLD               MedicationOrderStatusCode_Value = 2
	MedicationOrderStatusCode_COMPLETED             MedicationOrderStatusCode_Value = 3
	MedicationOrderStatusCode_ENTERED_IN_ERROR      MedicationOrderStatusCode_Value = 4
	MedicationOrderStatusCode_STOPPED               MedicationOrderStatusCode_Value = 5
	MedicationOrderStatusCode_DRAFT                 MedicationOrderStatusCode_Value = 6
)

// Enum value maps for MedicationOrderStatusCode_Value.
var (
	MedicationOrderStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "ON_HOLD",
		3: "COMPLETED",
		4: "ENTERED_IN_ERROR",
		5: "STOPPED",
		6: "DRAFT",
	}
	MedicationOrderStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"ON_HOLD":               2,
		"COMPLETED":             3,
		"ENTERED_IN_ERROR":      4,
		"STOPPED":               5,
		"DRAFT":                 6,
	}
)

func (x MedicationOrderStatusCode_Value) Enum() *MedicationOrderStatusCode_Value {
	p := new(MedicationOrderStatusCode_Value)
	*p = x
	return p
}

func (x MedicationOrderStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationOrderStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[75].Descriptor()
}

func (MedicationOrderStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[75]
}

func (x MedicationOrderStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationOrderStatusCode_Value.Descriptor instead.
func (MedicationOrderStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{75, 0}
}

// Primitive value for code.
type MedicationStatementStatusCode_Value int32

const (
	MedicationStatementStatusCode_INVALID_UNINITIALIZED MedicationStatementStatusCode_Value = 0
	MedicationStatementStatusCode_ACTIVE                MedicationStatementStatusCode_Value = 1
	MedicationStatementStatusCode_COMPLETED             MedicationStatementStatusCode_Value = 2
	MedicationStatementStatusCode_ENTERED_IN_ERROR      MedicationStatementStatusCode_Value = 3
	MedicationStatementStatusCode_INTENDED              MedicationStatementStatusCode_Value = 4
)

// Enum value maps for MedicationStatementStatusCode_Value.
var (
	MedicationStatementStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
		4: "INTENDED",
	}
	MedicationStatementStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
		"INTENDED":              4,
	}
)

func (x MedicationStatementStatusCode_Value) Enum() *MedicationStatementStatusCode_Value {
	p := new(MedicationStatementStatusCode_Value)
	*p = x
	return p
}

func (x MedicationStatementStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationStatementStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[76].Descriptor()
}

func (MedicationStatementStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[76]
}

func (x MedicationStatementStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationStatementStatusCode_Value.Descriptor instead.
func (MedicationStatementStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{76, 0}
}

// Primitive value for code.
type ConformanceEventModeCode_Value int32

const (
	ConformanceEventModeCode_INVALID_UNINITIALIZED ConformanceEventModeCode_Value = 0
	ConformanceEventModeCode_SENDER                ConformanceEventModeCode_Value = 1
	ConformanceEventModeCode_RECEIVER              ConformanceEventModeCode_Value = 2
)

// Enum value maps for ConformanceEventModeCode_Value.
var (
	ConformanceEventModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SENDER",
		2: "RECEIVER",
	}
	ConformanceEventModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SENDER":                1,
		"RECEIVER":              2,
	}
)

func (x ConformanceEventModeCode_Value) Enum() *ConformanceEventModeCode_Value {
	p := new(ConformanceEventModeCode_Value)
	*p = x
	return p
}

func (x ConformanceEventModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConformanceEventModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[77].Descriptor()
}

func (ConformanceEventModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[77]
}

func (x ConformanceEventModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConformanceEventModeCode_Value.Descriptor instead.
func (ConformanceEventModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{77, 0}
}

// Primitive value for code.
type MessageSignificanceCategoryCode_Value int32

const (
	MessageSignificanceCategoryCode_INVALID_UNINITIALIZED MessageSignificanceCategoryCode_Value = 0
	MessageSignificanceCategoryCode_CONSEQUENCE           MessageSignificanceCategoryCode_Value = 1
	MessageSignificanceCategoryCode_CURRENCY              MessageSignificanceCategoryCode_Value = 2
	MessageSignificanceCategoryCode_NOTIFICATION          MessageSignificanceCategoryCode_Value = 3
)

// Enum value maps for MessageSignificanceCategoryCode_Value.
var (
	MessageSignificanceCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONSEQUENCE",
		2: "CURRENCY",
		3: "NOTIFICATION",
	}
	MessageSignificanceCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONSEQUENCE":           1,
		"CURRENCY":              2,
		"NOTIFICATION":          3,
	}
)

func (x MessageSignificanceCategoryCode_Value) Enum() *MessageSignificanceCategoryCode_Value {
	p := new(MessageSignificanceCategoryCode_Value)
	*p = x
	return p
}

func (x MessageSignificanceCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageSignificanceCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[78].Descriptor()
}

func (MessageSignificanceCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[78]
}

func (x MessageSignificanceCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageSignificanceCategoryCode_Value.Descriptor instead.
func (MessageSignificanceCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{78, 0}
}

// Primitive value for code.
type DeviceMetricCalibrationStateCode_Value int32

const (
	DeviceMetricCalibrationStateCode_INVALID_UNINITIALIZED DeviceMetricCalibrationStateCode_Value = 0
	DeviceMetricCalibrationStateCode_NOT_CALIBRATED        DeviceMetricCalibrationStateCode_Value = 1
	DeviceMetricCalibrationStateCode_CALIBRATION_REQUIRED  DeviceMetricCalibrationStateCode_Value = 2
	DeviceMetricCalibrationStateCode_CALIBRATED            DeviceMetricCalibrationStateCode_Value = 3
	DeviceMetricCalibrationStateCode_UNSPECIFIED           DeviceMetricCalibrationStateCode_Value = 4
)

// Enum value maps for DeviceMetricCalibrationStateCode_Value.
var (
	DeviceMetricCalibrationStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_CALIBRATED",
		2: "CALIBRATION_REQUIRED",
		3: "CALIBRATED",
		4: "UNSPECIFIED",
	}
	DeviceMetricCalibrationStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_CALIBRATED":        1,
		"CALIBRATION_REQUIRED":  2,
		"CALIBRATED":            3,
		"UNSPECIFIED":           4,
	}
)

func (x DeviceMetricCalibrationStateCode_Value) Enum() *DeviceMetricCalibrationStateCode_Value {
	p := new(DeviceMetricCalibrationStateCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCalibrationStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCalibrationStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[79].Descriptor()
}

func (DeviceMetricCalibrationStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[79]
}

func (x DeviceMetricCalibrationStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCalibrationStateCode_Value.Descriptor instead.
func (DeviceMetricCalibrationStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{79, 0}
}

// Primitive value for code.
type DeviceMetricCalibrationTypeCode_Value int32

const (
	DeviceMetricCalibrationTypeCode_INVALID_UNINITIALIZED DeviceMetricCalibrationTypeCode_Value = 0
	DeviceMetricCalibrationTypeCode_UNSPECIFIED           DeviceMetricCalibrationTypeCode_Value = 1
	DeviceMetricCalibrationTypeCode_OFFSET                DeviceMetricCalibrationTypeCode_Value = 2
	DeviceMetricCalibrationTypeCode_GAIN                  DeviceMetricCalibrationTypeCode_Value = 3
	DeviceMetricCalibrationTypeCode_TWO_POINT             DeviceMetricCalibrationTypeCode_Value = 4
)

// Enum value maps for DeviceMetricCalibrationTypeCode_Value.
var (
	DeviceMetricCalibrationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNSPECIFIED",
		2: "OFFSET",
		3: "GAIN",
		4: "TWO_POINT",
	}
	DeviceMetricCalibrationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNSPECIFIED":           1,
		"OFFSET":                2,
		"GAIN":                  3,
		"TWO_POINT":             4,
	}
)

func (x DeviceMetricCalibrationTypeCode_Value) Enum() *DeviceMetricCalibrationTypeCode_Value {
	p := new(DeviceMetricCalibrationTypeCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCalibrationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCalibrationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[80].Descriptor()
}

func (DeviceMetricCalibrationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[80]
}

func (x DeviceMetricCalibrationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCalibrationTypeCode_Value.Descriptor instead.
func (DeviceMetricCalibrationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{80, 0}
}

// Primitive value for code.
type DeviceMetricCategoryCode_Value int32

const (
	DeviceMetricCategoryCode_INVALID_UNINITIALIZED DeviceMetricCategoryCode_Value = 0
	DeviceMetricCategoryCode_MEASUREMENT           DeviceMetricCategoryCode_Value = 1
	DeviceMetricCategoryCode_SETTING               DeviceMetricCategoryCode_Value = 2
	DeviceMetricCategoryCode_CALCULATION           DeviceMetricCategoryCode_Value = 3
	DeviceMetricCategoryCode_UNSPECIFIED           DeviceMetricCategoryCode_Value = 4
)

// Enum value maps for DeviceMetricCategoryCode_Value.
var (
	DeviceMetricCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MEASUREMENT",
		2: "SETTING",
		3: "CALCULATION",
		4: "UNSPECIFIED",
	}
	DeviceMetricCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MEASUREMENT":           1,
		"SETTING":               2,
		"CALCULATION":           3,
		"UNSPECIFIED":           4,
	}
)

func (x DeviceMetricCategoryCode_Value) Enum() *DeviceMetricCategoryCode_Value {
	p := new(DeviceMetricCategoryCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[81].Descriptor()
}

func (DeviceMetricCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[81]
}

func (x DeviceMetricCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCategoryCode_Value.Descriptor instead.
func (DeviceMetricCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{81, 0}
}

// Primitive value for code.
type DeviceMetricColorCode_Value int32

const (
	DeviceMetricColorCode_INVALID_UNINITIALIZED DeviceMetricColorCode_Value = 0
	DeviceMetricColorCode_BLACK                 DeviceMetricColorCode_Value = 1
	DeviceMetricColorCode_RED                   DeviceMetricColorCode_Value = 2
	DeviceMetricColorCode_GREEN                 DeviceMetricColorCode_Value = 3
	DeviceMetricColorCode_YELLOW                DeviceMetricColorCode_Value = 4
	DeviceMetricColorCode_BLUE                  DeviceMetricColorCode_Value = 5
	DeviceMetricColorCode_MAGENTA               DeviceMetricColorCode_Value = 6
	DeviceMetricColorCode_CYAN                  DeviceMetricColorCode_Value = 7
	DeviceMetricColorCode_WHITE                 DeviceMetricColorCode_Value = 8
)

// Enum value maps for DeviceMetricColorCode_Value.
var (
	DeviceMetricColorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BLACK",
		2: "RED",
		3: "GREEN",
		4: "YELLOW",
		5: "BLUE",
		6: "MAGENTA",
		7: "CYAN",
		8: "WHITE",
	}
	DeviceMetricColorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BLACK":                 1,
		"RED":                   2,
		"GREEN":                 3,
		"YELLOW":                4,
		"BLUE":                  5,
		"MAGENTA":               6,
		"CYAN":                  7,
		"WHITE":                 8,
	}
)

func (x DeviceMetricColorCode_Value) Enum() *DeviceMetricColorCode_Value {
	p := new(DeviceMetricColorCode_Value)
	*p = x
	return p
}

func (x DeviceMetricColorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricColorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[82].Descriptor()
}

func (DeviceMetricColorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[82]
}

func (x DeviceMetricColorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricColorCode_Value.Descriptor instead.
func (DeviceMetricColorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{82, 0}
}

// Primitive value for code.
type DeviceMetricOperationalStatusCode_Value int32

const (
	DeviceMetricOperationalStatusCode_INVALID_UNINITIALIZED DeviceMetricOperationalStatusCode_Value = 0
	DeviceMetricOperationalStatusCode_ON                    DeviceMetricOperationalStatusCode_Value = 1
	DeviceMetricOperationalStatusCode_OFF                   DeviceMetricOperationalStatusCode_Value = 2
	DeviceMetricOperationalStatusCode_STANDBY               DeviceMetricOperationalStatusCode_Value = 3
)

// Enum value maps for DeviceMetricOperationalStatusCode_Value.
var (
	DeviceMetricOperationalStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ON",
		2: "OFF",
		3: "STANDBY",
	}
	DeviceMetricOperationalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ON":                    1,
		"OFF":                   2,
		"STANDBY":               3,
	}
)

func (x DeviceMetricOperationalStatusCode_Value) Enum() *DeviceMetricOperationalStatusCode_Value {
	p := new(DeviceMetricOperationalStatusCode_Value)
	*p = x
	return p
}

func (x DeviceMetricOperationalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricOperationalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[83].Descriptor()
}

func (DeviceMetricOperationalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[83]
}

func (x DeviceMetricOperationalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricOperationalStatusCode_Value.Descriptor instead.
func (DeviceMetricOperationalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{83, 0}
}

// Primitive value for code.
type NamingSystemIdentifierTypeCode_Value int32

const (
	NamingSystemIdentifierTypeCode_INVALID_UNINITIALIZED NamingSystemIdentifierTypeCode_Value = 0
	NamingSystemIdentifierTypeCode_OID                   NamingSystemIdentifierTypeCode_Value = 1
	NamingSystemIdentifierTypeCode_UUID                  NamingSystemIdentifierTypeCode_Value = 2
	NamingSystemIdentifierTypeCode_URI                   NamingSystemIdentifierTypeCode_Value = 3
	NamingSystemIdentifierTypeCode_OTHER                 NamingSystemIdentifierTypeCode_Value = 4
)

// Enum value maps for NamingSystemIdentifierTypeCode_Value.
var (
	NamingSystemIdentifierTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OID",
		2: "UUID",
		3: "URI",
		4: "OTHER",
	}
	NamingSystemIdentifierTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OID":                   1,
		"UUID":                  2,
		"URI":                   3,
		"OTHER":                 4,
	}
)

func (x NamingSystemIdentifierTypeCode_Value) Enum() *NamingSystemIdentifierTypeCode_Value {
	p := new(NamingSystemIdentifierTypeCode_Value)
	*p = x
	return p
}

func (x NamingSystemIdentifierTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamingSystemIdentifierTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[84].Descriptor()
}

func (NamingSystemIdentifierTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[84]
}

func (x NamingSystemIdentifierTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamingSystemIdentifierTypeCode_Value.Descriptor instead.
func (NamingSystemIdentifierTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{84, 0}
}

// Primitive value for code.
type NamingSystemTypeCode_Value int32

const (
	NamingSystemTypeCode_INVALID_UNINITIALIZED NamingSystemTypeCode_Value = 0
	NamingSystemTypeCode_CODESYSTEM            NamingSystemTypeCode_Value = 1
	NamingSystemTypeCode_IDENTIFIER            NamingSystemTypeCode_Value = 2
	NamingSystemTypeCode_ROOT                  NamingSystemTypeCode_Value = 3
)

// Enum value maps for NamingSystemTypeCode_Value.
var (
	NamingSystemTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CODESYSTEM",
		2: "IDENTIFIER",
		3: "ROOT",
	}
	NamingSystemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CODESYSTEM":            1,
		"IDENTIFIER":            2,
		"ROOT":                  3,
	}
)

func (x NamingSystemTypeCode_Value) Enum() *NamingSystemTypeCode_Value {
	p := new(NamingSystemTypeCode_Value)
	*p = x
	return p
}

func (x NamingSystemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamingSystemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[85].Descriptor()
}

func (NamingSystemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[85]
}

func (x NamingSystemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamingSystemTypeCode_Value.Descriptor instead.
func (NamingSystemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{85, 0}
}

// Primitive value for code.
type NarrativeStatusCode_Value int32

const (
	NarrativeStatusCode_INVALID_UNINITIALIZED NarrativeStatusCode_Value = 0
	NarrativeStatusCode_GENERATED             NarrativeStatusCode_Value = 1
	NarrativeStatusCode_EXTENSIONS            NarrativeStatusCode_Value = 2
	NarrativeStatusCode_ADDITIONAL            NarrativeStatusCode_Value = 3
	NarrativeStatusCode_EMPTY                 NarrativeStatusCode_Value = 4
)

// Enum value maps for NarrativeStatusCode_Value.
var (
	NarrativeStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GENERATED",
		2: "EXTENSIONS",
		3: "ADDITIONAL",
		4: "EMPTY",
	}
	NarrativeStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GENERATED":             1,
		"EXTENSIONS":            2,
		"ADDITIONAL":            3,
		"EMPTY":                 4,
	}
)

func (x NarrativeStatusCode_Value) Enum() *NarrativeStatusCode_Value {
	p := new(NarrativeStatusCode_Value)
	*p = x
	return p
}

func (x NarrativeStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NarrativeStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[86].Descriptor()
}

func (NarrativeStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[86]
}

func (x NarrativeStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NarrativeStatusCode_Value.Descriptor instead.
func (NarrativeStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{86, 0}
}

// Primitive value for code.
type AuditEventAgentNetworkTypeCode_Value int32

const (
	AuditEventAgentNetworkTypeCode_INVALID_UNINITIALIZED AuditEventAgentNetworkTypeCode_Value = 0
	AuditEventAgentNetworkTypeCode_MACHINE_NAME          AuditEventAgentNetworkTypeCode_Value = 1
	AuditEventAgentNetworkTypeCode_IP_ADDRESS            AuditEventAgentNetworkTypeCode_Value = 2
	AuditEventAgentNetworkTypeCode_TELEPHONE_NUMBER      AuditEventAgentNetworkTypeCode_Value = 3
	AuditEventAgentNetworkTypeCode_EMAIL_ADDRESS         AuditEventAgentNetworkTypeCode_Value = 4
	AuditEventAgentNetworkTypeCode_URI                   AuditEventAgentNetworkTypeCode_Value = 5
)

// Enum value maps for AuditEventAgentNetworkTypeCode_Value.
var (
	AuditEventAgentNetworkTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MACHINE_NAME",
		2: "IP_ADDRESS",
		3: "TELEPHONE_NUMBER",
		4: "EMAIL_ADDRESS",
		5: "URI",
	}
	AuditEventAgentNetworkTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MACHINE_NAME":          1,
		"IP_ADDRESS":            2,
		"TELEPHONE_NUMBER":      3,
		"EMAIL_ADDRESS":         4,
		"URI":                   5,
	}
)

func (x AuditEventAgentNetworkTypeCode_Value) Enum() *AuditEventAgentNetworkTypeCode_Value {
	p := new(AuditEventAgentNetworkTypeCode_Value)
	*p = x
	return p
}

func (x AuditEventAgentNetworkTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventAgentNetworkTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[87].Descriptor()
}

func (AuditEventAgentNetworkTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[87]
}

func (x AuditEventAgentNetworkTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventAgentNetworkTypeCode_Value.Descriptor instead.
func (AuditEventAgentNetworkTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{87, 0}
}

// Primitive value for code.
type NoteTypeCode_Value int32

const (
	NoteTypeCode_INVALID_UNINITIALIZED NoteTypeCode_Value = 0
	NoteTypeCode_DISPLAY               NoteTypeCode_Value = 1
	NoteTypeCode_PRINT                 NoteTypeCode_Value = 2
	NoteTypeCode_PRINTOPER             NoteTypeCode_Value = 3
)

// Enum value maps for NoteTypeCode_Value.
var (
	NoteTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DISPLAY",
		2: "PRINT",
		3: "PRINTOPER",
	}
	NoteTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DISPLAY":               1,
		"PRINT":                 2,
		"PRINTOPER":             3,
	}
)

func (x NoteTypeCode_Value) Enum() *NoteTypeCode_Value {
	p := new(NoteTypeCode_Value)
	*p = x
	return p
}

func (x NoteTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoteTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[88].Descriptor()
}

func (NoteTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[88]
}

func (x NoteTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NoteTypeCode_Value.Descriptor instead.
func (NoteTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{88, 0}
}

// Primitive value for code.
type NutritionOrderStatusCode_Value int32

const (
	NutritionOrderStatusCode_INVALID_UNINITIALIZED NutritionOrderStatusCode_Value = 0
	NutritionOrderStatusCode_PROPOSED              NutritionOrderStatusCode_Value = 1
	NutritionOrderStatusCode_DRAFT                 NutritionOrderStatusCode_Value = 2
	NutritionOrderStatusCode_PLANNED               NutritionOrderStatusCode_Value = 3
	NutritionOrderStatusCode_REQUESTED             NutritionOrderStatusCode_Value = 4
	NutritionOrderStatusCode_ACTIVE                NutritionOrderStatusCode_Value = 5
	NutritionOrderStatusCode_ON_HOLD               NutritionOrderStatusCode_Value = 6
	NutritionOrderStatusCode_COMPLETED             NutritionOrderStatusCode_Value = 7
	NutritionOrderStatusCode_CANCELLED             NutritionOrderStatusCode_Value = 8
)

// Enum value maps for NutritionOrderStatusCode_Value.
var (
	NutritionOrderStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "DRAFT",
		3: "PLANNED",
		4: "REQUESTED",
		5: "ACTIVE",
		6: "ON_HOLD",
		7: "COMPLETED",
		8: "CANCELLED",
	}
	NutritionOrderStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"DRAFT":                 2,
		"PLANNED":               3,
		"REQUESTED":             4,
		"ACTIVE":                5,
		"ON_HOLD":               6,
		"COMPLETED":             7,
		"CANCELLED":             8,
	}
)

func (x NutritionOrderStatusCode_Value) Enum() *NutritionOrderStatusCode_Value {
	p := new(NutritionOrderStatusCode_Value)
	*p = x
	return p
}

func (x NutritionOrderStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NutritionOrderStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[89].Descriptor()
}

func (NutritionOrderStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[89]
}

func (x NutritionOrderStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NutritionOrderStatusCode_Value.Descriptor instead.
func (NutritionOrderStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{89, 0}
}

// Primitive value for code.
type ObservationRelationshipTypeCode_Value int32

const (
	ObservationRelationshipTypeCode_INVALID_UNINITIALIZED ObservationRelationshipTypeCode_Value = 0
	ObservationRelationshipTypeCode_HAS_MEMBER            ObservationRelationshipTypeCode_Value = 1
	ObservationRelationshipTypeCode_DERIVED_FROM          ObservationRelationshipTypeCode_Value = 2
	ObservationRelationshipTypeCode_SEQUEL_TO             ObservationRelationshipTypeCode_Value = 3
	ObservationRelationshipTypeCode_REPLACES              ObservationRelationshipTypeCode_Value = 4
	ObservationRelationshipTypeCode_QUALIFIED_BY          ObservationRelationshipTypeCode_Value = 5
	ObservationRelationshipTypeCode_INTERFERED_BY         ObservationRelationshipTypeCode_Value = 6
)

// Enum value maps for ObservationRelationshipTypeCode_Value.
var (
	ObservationRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HAS_MEMBER",
		2: "DERIVED_FROM",
		3: "SEQUEL_TO",
		4: "REPLACES",
		5: "QUALIFIED_BY",
		6: "INTERFERED_BY",
	}
	ObservationRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HAS_MEMBER":            1,
		"DERIVED_FROM":          2,
		"SEQUEL_TO":             3,
		"REPLACES":              4,
		"QUALIFIED_BY":          5,
		"INTERFERED_BY":         6,
	}
)

func (x ObservationRelationshipTypeCode_Value) Enum() *ObservationRelationshipTypeCode_Value {
	p := new(ObservationRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x ObservationRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[90].Descriptor()
}

func (ObservationRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[90]
}

func (x ObservationRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationRelationshipTypeCode_Value.Descriptor instead.
func (ObservationRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{90, 0}
}

// Primitive value for code.
type ObservationStatusCode_Value int32

const (
	ObservationStatusCode_INVALID_UNINITIALIZED ObservationStatusCode_Value = 0
	ObservationStatusCode_REGISTERED            ObservationStatusCode_Value = 1
	ObservationStatusCode_PRELIMINARY           ObservationStatusCode_Value = 2
	ObservationStatusCode_FINAL                 ObservationStatusCode_Value = 3
	ObservationStatusCode_AMENDED               ObservationStatusCode_Value = 4
	ObservationStatusCode_CANCELLED             ObservationStatusCode_Value = 5
	ObservationStatusCode_ENTERED_IN_ERROR      ObservationStatusCode_Value = 6
	ObservationStatusCode_UNKNOWN               ObservationStatusCode_Value = 7
)

// Enum value maps for ObservationStatusCode_Value.
var (
	ObservationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REGISTERED",
		2: "PRELIMINARY",
		3: "FINAL",
		4: "AMENDED",
		5: "CANCELLED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	ObservationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"PRELIMINARY":           2,
		"FINAL":                 3,
		"AMENDED":               4,
		"CANCELLED":             5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x ObservationStatusCode_Value) Enum() *ObservationStatusCode_Value {
	p := new(ObservationStatusCode_Value)
	*p = x
	return p
}

func (x ObservationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[91].Descriptor()
}

func (ObservationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[91]
}

func (x ObservationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationStatusCode_Value.Descriptor instead.
func (ObservationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{91, 0}
}

// Primitive value for code.
type OperationKindCode_Value int32

const (
	OperationKindCode_INVALID_UNINITIALIZED OperationKindCode_Value = 0
	OperationKindCode_OPERATION             OperationKindCode_Value = 1
	OperationKindCode_QUERY                 OperationKindCode_Value = 2
)

// Enum value maps for OperationKindCode_Value.
var (
	OperationKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OPERATION",
		2: "QUERY",
	}
	OperationKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OPERATION":             1,
		"QUERY":                 2,
	}
)

func (x OperationKindCode_Value) Enum() *OperationKindCode_Value {
	p := new(OperationKindCode_Value)
	*p = x
	return p
}

func (x OperationKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[92].Descriptor()
}

func (OperationKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[92]
}

func (x OperationKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationKindCode_Value.Descriptor instead.
func (OperationKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{92, 0}
}

// Primitive value for code.
type OperationParameterUseCode_Value int32

const (
	OperationParameterUseCode_INVALID_UNINITIALIZED OperationParameterUseCode_Value = 0
	OperationParameterUseCode_IN                    OperationParameterUseCode_Value = 1
	OperationParameterUseCode_OUT                   OperationParameterUseCode_Value = 2
)

// Enum value maps for OperationParameterUseCode_Value.
var (
	OperationParameterUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN",
		2: "OUT",
	}
	OperationParameterUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN":                    1,
		"OUT":                   2,
	}
)

func (x OperationParameterUseCode_Value) Enum() *OperationParameterUseCode_Value {
	p := new(OperationParameterUseCode_Value)
	*p = x
	return p
}

func (x OperationParameterUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationParameterUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[93].Descriptor()
}

func (OperationParameterUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[93]
}

func (x OperationParameterUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationParameterUseCode_Value.Descriptor instead.
func (OperationParameterUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{93, 0}
}

// Primitive value for code.
type OrderStatusCode_Value int32

const (
	OrderStatusCode_INVALID_UNINITIALIZED OrderStatusCode_Value = 0
	OrderStatusCode_PENDING               OrderStatusCode_Value = 1
	OrderStatusCode_REVIEW                OrderStatusCode_Value = 2
	OrderStatusCode_REJECTED              OrderStatusCode_Value = 3
	OrderStatusCode_ERROR                 OrderStatusCode_Value = 4
	OrderStatusCode_ACCEPTED              OrderStatusCode_Value = 5
	OrderStatusCode_CANCELLED             OrderStatusCode_Value = 6
	OrderStatusCode_REPLACED              OrderStatusCode_Value = 7
	OrderStatusCode_ABORTED               OrderStatusCode_Value = 8
	OrderStatusCode_COMPLETED             OrderStatusCode_Value = 9
)

// Enum value maps for OrderStatusCode_Value.
var (
	OrderStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PENDING",
		2: "REVIEW",
		3: "REJECTED",
		4: "ERROR",
		5: "ACCEPTED",
		6: "CANCELLED",
		7: "REPLACED",
		8: "ABORTED",
		9: "COMPLETED",
	}
	OrderStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PENDING":               1,
		"REVIEW":                2,
		"REJECTED":              3,
		"ERROR":                 4,
		"ACCEPTED":              5,
		"CANCELLED":             6,
		"REPLACED":              7,
		"ABORTED":               8,
		"COMPLETED":             9,
	}
)

func (x OrderStatusCode_Value) Enum() *OrderStatusCode_Value {
	p := new(OrderStatusCode_Value)
	*p = x
	return p
}

func (x OrderStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[94].Descriptor()
}

func (OrderStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[94]
}

func (x OrderStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatusCode_Value.Descriptor instead.
func (OrderStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{94, 0}
}

// Primitive value for code.
type ParticipantRequiredCode_Value int32

const (
	ParticipantRequiredCode_INVALID_UNINITIALIZED ParticipantRequiredCode_Value = 0
	ParticipantRequiredCode_REQUIRED              ParticipantRequiredCode_Value = 1
	ParticipantRequiredCode_OPTIONAL              ParticipantRequiredCode_Value = 2
	ParticipantRequiredCode_INFORMATION_ONLY      ParticipantRequiredCode_Value = 3
)

// Enum value maps for ParticipantRequiredCode_Value.
var (
	ParticipantRequiredCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUIRED",
		2: "OPTIONAL",
		3: "INFORMATION_ONLY",
	}
	ParticipantRequiredCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUIRED":              1,
		"OPTIONAL":              2,
		"INFORMATION_ONLY":      3,
	}
)

func (x ParticipantRequiredCode_Value) Enum() *ParticipantRequiredCode_Value {
	p := new(ParticipantRequiredCode_Value)
	*p = x
	return p
}

func (x ParticipantRequiredCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantRequiredCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[95].Descriptor()
}

func (ParticipantRequiredCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[95]
}

func (x ParticipantRequiredCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantRequiredCode_Value.Descriptor instead.
func (ParticipantRequiredCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{95, 0}
}

// Primitive value for code.
type ParticipantStatusCode_Value int32

const (
	ParticipantStatusCode_INVALID_UNINITIALIZED ParticipantStatusCode_Value = 0
	ParticipantStatusCode_ACCEPTED              ParticipantStatusCode_Value = 1
	ParticipantStatusCode_DECLINED              ParticipantStatusCode_Value = 2
	ParticipantStatusCode_TENTATIVE             ParticipantStatusCode_Value = 3
	ParticipantStatusCode_IN_PROCESS            ParticipantStatusCode_Value = 4
	ParticipantStatusCode_COMPLETED             ParticipantStatusCode_Value = 5
	ParticipantStatusCode_NEEDS_ACTION          ParticipantStatusCode_Value = 6
)

// Enum value maps for ParticipantStatusCode_Value.
var (
	ParticipantStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACCEPTED",
		2: "DECLINED",
		3: "TENTATIVE",
		4: "IN_PROCESS",
		5: "COMPLETED",
		6: "NEEDS_ACTION",
	}
	ParticipantStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACCEPTED":              1,
		"DECLINED":              2,
		"TENTATIVE":             3,
		"IN_PROCESS":            4,
		"COMPLETED":             5,
		"NEEDS_ACTION":          6,
	}
)

func (x ParticipantStatusCode_Value) Enum() *ParticipantStatusCode_Value {
	p := new(ParticipantStatusCode_Value)
	*p = x
	return p
}

func (x ParticipantStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[96].Descriptor()
}

func (ParticipantStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[96]
}

func (x ParticipantStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantStatusCode_Value.Descriptor instead.
func (ParticipantStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{96, 0}
}

// Primitive value for code.
type ParticipationStatusCode_Value int32

const (
	ParticipationStatusCode_INVALID_UNINITIALIZED ParticipationStatusCode_Value = 0
	ParticipationStatusCode_ACCEPTED              ParticipationStatusCode_Value = 1
	ParticipationStatusCode_DECLINED              ParticipationStatusCode_Value = 2
	ParticipationStatusCode_TENTATIVE             ParticipationStatusCode_Value = 3
	ParticipationStatusCode_NEEDS_ACTION          ParticipationStatusCode_Value = 4
)

// Enum value maps for ParticipationStatusCode_Value.
var (
	ParticipationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACCEPTED",
		2: "DECLINED",
		3: "TENTATIVE",
		4: "NEEDS_ACTION",
	}
	ParticipationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACCEPTED":              1,
		"DECLINED":              2,
		"TENTATIVE":             3,
		"NEEDS_ACTION":          4,
	}
)

func (x ParticipationStatusCode_Value) Enum() *ParticipationStatusCode_Value {
	p := new(ParticipationStatusCode_Value)
	*p = x
	return p
}

func (x ParticipationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[97].Descriptor()
}

func (ParticipationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[97]
}

func (x ParticipationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipationStatusCode_Value.Descriptor instead.
func (ParticipationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{97, 0}
}

// Primitive value for code.
type ProcedureRequestPriorityCode_Value int32

const (
	ProcedureRequestPriorityCode_INVALID_UNINITIALIZED ProcedureRequestPriorityCode_Value = 0
	ProcedureRequestPriorityCode_ROUTINE               ProcedureRequestPriorityCode_Value = 1
	ProcedureRequestPriorityCode_URGENT                ProcedureRequestPriorityCode_Value = 2
	ProcedureRequestPriorityCode_STAT                  ProcedureRequestPriorityCode_Value = 3
	ProcedureRequestPriorityCode_ASAP                  ProcedureRequestPriorityCode_Value = 4
)

// Enum value maps for ProcedureRequestPriorityCode_Value.
var (
	ProcedureRequestPriorityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ROUTINE",
		2: "URGENT",
		3: "STAT",
		4: "ASAP",
	}
	ProcedureRequestPriorityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ROUTINE":               1,
		"URGENT":                2,
		"STAT":                  3,
		"ASAP":                  4,
	}
)

func (x ProcedureRequestPriorityCode_Value) Enum() *ProcedureRequestPriorityCode_Value {
	p := new(ProcedureRequestPriorityCode_Value)
	*p = x
	return p
}

func (x ProcedureRequestPriorityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcedureRequestPriorityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[98].Descriptor()
}

func (ProcedureRequestPriorityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[98]
}

func (x ProcedureRequestPriorityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcedureRequestPriorityCode_Value.Descriptor instead.
func (ProcedureRequestPriorityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{98, 0}
}

// Primitive value for code.
type ProcedureRequestStatusCode_Value int32

const (
	ProcedureRequestStatusCode_INVALID_UNINITIALIZED ProcedureRequestStatusCode_Value = 0
	ProcedureRequestStatusCode_PROPOSED              ProcedureRequestStatusCode_Value = 1
	ProcedureRequestStatusCode_DRAFT                 ProcedureRequestStatusCode_Value = 2
	ProcedureRequestStatusCode_REQUESTED             ProcedureRequestStatusCode_Value = 3
	ProcedureRequestStatusCode_RECEIVED              ProcedureRequestStatusCode_Value = 4
	ProcedureRequestStatusCode_ACCEPTED              ProcedureRequestStatusCode_Value = 5
	ProcedureRequestStatusCode_IN_PROGRESS           ProcedureRequestStatusCode_Value = 6
	ProcedureRequestStatusCode_COMPLETED             ProcedureRequestStatusCode_Value = 7
	ProcedureRequestStatusCode_SUSPENDED             ProcedureRequestStatusCode_Value = 8
	ProcedureRequestStatusCode_REJECTED              ProcedureRequestStatusCode_Value = 9
	ProcedureRequestStatusCode_ABORTED               ProcedureRequestStatusCode_Value = 10
)

// Enum value maps for ProcedureRequestStatusCode_Value.
var (
	ProcedureRequestStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PROPOSED",
		2:  "DRAFT",
		3:  "REQUESTED",
		4:  "RECEIVED",
		5:  "ACCEPTED",
		6:  "IN_PROGRESS",
		7:  "COMPLETED",
		8:  "SUSPENDED",
		9:  "REJECTED",
		10: "ABORTED",
	}
	ProcedureRequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"DRAFT":                 2,
		"REQUESTED":             3,
		"RECEIVED":              4,
		"ACCEPTED":              5,
		"IN_PROGRESS":           6,
		"COMPLETED":             7,
		"SUSPENDED":             8,
		"REJECTED":              9,
		"ABORTED":               10,
	}
)

func (x ProcedureRequestStatusCode_Value) Enum() *ProcedureRequestStatusCode_Value {
	p := new(ProcedureRequestStatusCode_Value)
	*p = x
	return p
}

func (x ProcedureRequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcedureRequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[99].Descriptor()
}

func (ProcedureRequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[99]
}

func (x ProcedureRequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcedureRequestStatusCode_Value.Descriptor instead.
func (ProcedureRequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{99, 0}
}

// Primitive value for code.
type ProcedureStatusCode_Value int32

const (
	ProcedureStatusCode_INVALID_UNINITIALIZED ProcedureStatusCode_Value = 0
	ProcedureStatusCode_IN_PROGRESS           ProcedureStatusCode_Value = 1
	ProcedureStatusCode_ABORTED               ProcedureStatusCode_Value = 2
	ProcedureStatusCode_COMPLETED             ProcedureStatusCode_Value = 3
	ProcedureStatusCode_ENTERED_IN_ERROR      ProcedureStatusCode_Value = 4
)

// Enum value maps for ProcedureStatusCode_Value.
var (
	ProcedureStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "ABORTED",
		3: "COMPLETED",
		4: "ENTERED_IN_ERROR",
	}
	ProcedureStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"ABORTED":               2,
		"COMPLETED":             3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x ProcedureStatusCode_Value) Enum() *ProcedureStatusCode_Value {
	p := new(ProcedureStatusCode_Value)
	*p = x
	return p
}

func (x ProcedureStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcedureStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[100].Descriptor()
}

func (ProcedureStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[100]
}

func (x ProcedureStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcedureStatusCode_Value.Descriptor instead.
func (ProcedureStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{100, 0}
}

// Primitive value for code.
type PropertyRepresentationCode_Value int32

const (
	PropertyRepresentationCode_INVALID_UNINITIALIZED PropertyRepresentationCode_Value = 0
	PropertyRepresentationCode_XMLATTR               PropertyRepresentationCode_Value = 1
)

// Enum value maps for PropertyRepresentationCode_Value.
var (
	PropertyRepresentationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "XMLATTR",
	}
	PropertyRepresentationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"XMLATTR":               1,
	}
)

func (x PropertyRepresentationCode_Value) Enum() *PropertyRepresentationCode_Value {
	p := new(PropertyRepresentationCode_Value)
	*p = x
	return p
}

func (x PropertyRepresentationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyRepresentationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[101].Descriptor()
}

func (PropertyRepresentationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[101]
}

func (x PropertyRepresentationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyRepresentationCode_Value.Descriptor instead.
func (PropertyRepresentationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{101, 0}
}

// Primitive value for code.
type ProvenanceEntityRoleCode_Value int32

const (
	ProvenanceEntityRoleCode_INVALID_UNINITIALIZED ProvenanceEntityRoleCode_Value = 0
	ProvenanceEntityRoleCode_DERIVATION            ProvenanceEntityRoleCode_Value = 1
	ProvenanceEntityRoleCode_REVISION              ProvenanceEntityRoleCode_Value = 2
	ProvenanceEntityRoleCode_QUOTATION             ProvenanceEntityRoleCode_Value = 3
	ProvenanceEntityRoleCode_SOURCE                ProvenanceEntityRoleCode_Value = 4
)

// Enum value maps for ProvenanceEntityRoleCode_Value.
var (
	ProvenanceEntityRoleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DERIVATION",
		2: "REVISION",
		3: "QUOTATION",
		4: "SOURCE",
	}
	ProvenanceEntityRoleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DERIVATION":            1,
		"REVISION":              2,
		"QUOTATION":             3,
		"SOURCE":                4,
	}
)

func (x ProvenanceEntityRoleCode_Value) Enum() *ProvenanceEntityRoleCode_Value {
	p := new(ProvenanceEntityRoleCode_Value)
	*p = x
	return p
}

func (x ProvenanceEntityRoleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvenanceEntityRoleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[102].Descriptor()
}

func (ProvenanceEntityRoleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[102]
}

func (x ProvenanceEntityRoleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvenanceEntityRoleCode_Value.Descriptor instead.
func (ProvenanceEntityRoleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{102, 0}
}

// Primitive value for code.
type QuestionnaireResponseStatusCode_Value int32

const (
	QuestionnaireResponseStatusCode_INVALID_UNINITIALIZED QuestionnaireResponseStatusCode_Value = 0
	QuestionnaireResponseStatusCode_IN_PROGRESS           QuestionnaireResponseStatusCode_Value = 1
	QuestionnaireResponseStatusCode_COMPLETED             QuestionnaireResponseStatusCode_Value = 2
	QuestionnaireResponseStatusCode_AMENDED               QuestionnaireResponseStatusCode_Value = 3
)

// Enum value maps for QuestionnaireResponseStatusCode_Value.
var (
	QuestionnaireResponseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "AMENDED",
	}
	QuestionnaireResponseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"AMENDED":               3,
	}
)

func (x QuestionnaireResponseStatusCode_Value) Enum() *QuestionnaireResponseStatusCode_Value {
	p := new(QuestionnaireResponseStatusCode_Value)
	*p = x
	return p
}

func (x QuestionnaireResponseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireResponseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[103].Descriptor()
}

func (QuestionnaireResponseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[103]
}

func (x QuestionnaireResponseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireResponseStatusCode_Value.Descriptor instead.
func (QuestionnaireResponseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{103, 0}
}

// Primitive value for code.
type QuestionnaireStatusCode_Value int32

const (
	QuestionnaireStatusCode_INVALID_UNINITIALIZED QuestionnaireStatusCode_Value = 0
	QuestionnaireStatusCode_DRAFT                 QuestionnaireStatusCode_Value = 1
	QuestionnaireStatusCode_PUBLISHED             QuestionnaireStatusCode_Value = 2
	QuestionnaireStatusCode_RETIRED               QuestionnaireStatusCode_Value = 3
)

// Enum value maps for QuestionnaireStatusCode_Value.
var (
	QuestionnaireStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "PUBLISHED",
		3: "RETIRED",
	}
	QuestionnaireStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"PUBLISHED":             2,
		"RETIRED":               3,
	}
)

func (x QuestionnaireStatusCode_Value) Enum() *QuestionnaireStatusCode_Value {
	p := new(QuestionnaireStatusCode_Value)
	*p = x
	return p
}

func (x QuestionnaireStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[104].Descriptor()
}

func (QuestionnaireStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[104]
}

func (x QuestionnaireStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireStatusCode_Value.Descriptor instead.
func (QuestionnaireStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{104, 0}
}

// Primitive value for code.
type AllergyIntoleranceCertaintyCode_Value int32

const (
	AllergyIntoleranceCertaintyCode_INVALID_UNINITIALIZED AllergyIntoleranceCertaintyCode_Value = 0
	AllergyIntoleranceCertaintyCode_UNLIKELY              AllergyIntoleranceCertaintyCode_Value = 1
	AllergyIntoleranceCertaintyCode_LIKELY                AllergyIntoleranceCertaintyCode_Value = 2
	AllergyIntoleranceCertaintyCode_CONFIRMED             AllergyIntoleranceCertaintyCode_Value = 3
)

// Enum value maps for AllergyIntoleranceCertaintyCode_Value.
var (
	AllergyIntoleranceCertaintyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNLIKELY",
		2: "LIKELY",
		3: "CONFIRMED",
	}
	AllergyIntoleranceCertaintyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNLIKELY":              1,
		"LIKELY":                2,
		"CONFIRMED":             3,
	}
)

func (x AllergyIntoleranceCertaintyCode_Value) Enum() *AllergyIntoleranceCertaintyCode_Value {
	p := new(AllergyIntoleranceCertaintyCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCertaintyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCertaintyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[105].Descriptor()
}

func (AllergyIntoleranceCertaintyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[105]
}

func (x AllergyIntoleranceCertaintyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCertaintyCode_Value.Descriptor instead.
func (AllergyIntoleranceCertaintyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{105, 0}
}

// Primitive value for code.
type AllergyIntoleranceSeverityCode_Value int32

const (
	AllergyIntoleranceSeverityCode_INVALID_UNINITIALIZED AllergyIntoleranceSeverityCode_Value = 0
	AllergyIntoleranceSeverityCode_MILD                  AllergyIntoleranceSeverityCode_Value = 1
	AllergyIntoleranceSeverityCode_MODERATE              AllergyIntoleranceSeverityCode_Value = 2
	AllergyIntoleranceSeverityCode_SEVERE                AllergyIntoleranceSeverityCode_Value = 3
)

// Enum value maps for AllergyIntoleranceSeverityCode_Value.
var (
	AllergyIntoleranceSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MILD",
		2: "MODERATE",
		3: "SEVERE",
	}
	AllergyIntoleranceSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MILD":                  1,
		"MODERATE":              2,
		"SEVERE":                3,
	}
)

func (x AllergyIntoleranceSeverityCode_Value) Enum() *AllergyIntoleranceSeverityCode_Value {
	p := new(AllergyIntoleranceSeverityCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[106].Descriptor()
}

func (AllergyIntoleranceSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[106]
}

func (x AllergyIntoleranceSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceSeverityCode_Value.Descriptor instead.
func (AllergyIntoleranceSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{106, 0}
}

// Primitive value for code.
type ReferralStatusCode_Value int32

const (
	ReferralStatusCode_INVALID_UNINITIALIZED ReferralStatusCode_Value = 0
	ReferralStatusCode_DRAFT                 ReferralStatusCode_Value = 1
	ReferralStatusCode_REQUESTED             ReferralStatusCode_Value = 2
	ReferralStatusCode_ACTIVE                ReferralStatusCode_Value = 3
	ReferralStatusCode_CANCELLED             ReferralStatusCode_Value = 4
	ReferralStatusCode_ACCEPTED              ReferralStatusCode_Value = 5
	ReferralStatusCode_REJECTED              ReferralStatusCode_Value = 6
	ReferralStatusCode_COMPLETED             ReferralStatusCode_Value = 7
)

// Enum value maps for ReferralStatusCode_Value.
var (
	ReferralStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "REQUESTED",
		3: "ACTIVE",
		4: "CANCELLED",
		5: "ACCEPTED",
		6: "REJECTED",
		7: "COMPLETED",
	}
	ReferralStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"REQUESTED":             2,
		"ACTIVE":                3,
		"CANCELLED":             4,
		"ACCEPTED":              5,
		"REJECTED":              6,
		"COMPLETED":             7,
	}
)

func (x ReferralStatusCode_Value) Enum() *ReferralStatusCode_Value {
	p := new(ReferralStatusCode_Value)
	*p = x
	return p
}

func (x ReferralStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferralStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[107].Descriptor()
}

func (ReferralStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[107]
}

func (x ReferralStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferralStatusCode_Value.Descriptor instead.
func (ReferralStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{107, 0}
}

// Primitive value for code.
type RemittanceOutcomeCode_Value int32

const (
	RemittanceOutcomeCode_INVALID_UNINITIALIZED RemittanceOutcomeCode_Value = 0
	RemittanceOutcomeCode_COMPLETE              RemittanceOutcomeCode_Value = 1
	RemittanceOutcomeCode_ERROR                 RemittanceOutcomeCode_Value = 2
)

// Enum value maps for RemittanceOutcomeCode_Value.
var (
	RemittanceOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETE",
		2: "ERROR",
	}
	RemittanceOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETE":              1,
		"ERROR":                 2,
	}
)

func (x RemittanceOutcomeCode_Value) Enum() *RemittanceOutcomeCode_Value {
	p := new(RemittanceOutcomeCode_Value)
	*p = x
	return p
}

func (x RemittanceOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemittanceOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[108].Descriptor()
}

func (RemittanceOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[108]
}

func (x RemittanceOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemittanceOutcomeCode_Value.Descriptor instead.
func (RemittanceOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{108, 0}
}

// Primitive value for code.
type AggregationModeCode_Value int32

const (
	AggregationModeCode_INVALID_UNINITIALIZED AggregationModeCode_Value = 0
	AggregationModeCode_CONTAINED             AggregationModeCode_Value = 1
	AggregationModeCode_REFERENCED            AggregationModeCode_Value = 2
	AggregationModeCode_BUNDLED               AggregationModeCode_Value = 3
)

// Enum value maps for AggregationModeCode_Value.
var (
	AggregationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONTAINED",
		2: "REFERENCED",
		3: "BUNDLED",
	}
	AggregationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONTAINED":             1,
		"REFERENCED":            2,
		"BUNDLED":               3,
	}
)

func (x AggregationModeCode_Value) Enum() *AggregationModeCode_Value {
	p := new(AggregationModeCode_Value)
	*p = x
	return p
}

func (x AggregationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[109].Descriptor()
}

func (AggregationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[109]
}

func (x AggregationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationModeCode_Value.Descriptor instead.
func (AggregationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{109, 0}
}

// Primitive value for code.
type SlicingRulesCode_Value int32

const (
	SlicingRulesCode_INVALID_UNINITIALIZED SlicingRulesCode_Value = 0
	SlicingRulesCode_CLOSED                SlicingRulesCode_Value = 1
	SlicingRulesCode_OPEN                  SlicingRulesCode_Value = 2
	SlicingRulesCode_OPENATEND             SlicingRulesCode_Value = 3
)

// Enum value maps for SlicingRulesCode_Value.
var (
	SlicingRulesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLOSED",
		2: "OPEN",
		3: "OPENATEND",
	}
	SlicingRulesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLOSED":                1,
		"OPEN":                  2,
		"OPENATEND":             3,
	}
)

func (x SlicingRulesCode_Value) Enum() *SlicingRulesCode_Value {
	p := new(SlicingRulesCode_Value)
	*p = x
	return p
}

func (x SlicingRulesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlicingRulesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[110].Descriptor()
}

func (SlicingRulesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[110]
}

func (x SlicingRulesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlicingRulesCode_Value.Descriptor instead.
func (SlicingRulesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{110, 0}
}

// Primitive value for code.
type ResourceTypeCode_Value int32

const (
	ResourceTypeCode_INVALID_UNINITIALIZED       ResourceTypeCode_Value = 0
	ResourceTypeCode_ACCOUNT                     ResourceTypeCode_Value = 1
	ResourceTypeCode_ALLERGY_INTOLERANCE         ResourceTypeCode_Value = 2
	ResourceTypeCode_APPOINTMENT                 ResourceTypeCode_Value = 3
	ResourceTypeCode_APPOINTMENT_RESPONSE        ResourceTypeCode_Value = 4
	ResourceTypeCode_AUDIT_EVENT                 ResourceTypeCode_Value = 5
	ResourceTypeCode_BASIC                       ResourceTypeCode_Value = 6
	ResourceTypeCode_BINARY                      ResourceTypeCode_Value = 7
	ResourceTypeCode_BODY_SITE                   ResourceTypeCode_Value = 8
	ResourceTypeCode_BUNDLE                      ResourceTypeCode_Value = 9
	ResourceTypeCode_CARE_PLAN                   ResourceTypeCode_Value = 10
	ResourceTypeCode_CLAIM                       ResourceTypeCode_Value = 11
	ResourceTypeCode_CLAIM_RESPONSE              ResourceTypeCode_Value = 12
	ResourceTypeCode_CLINICAL_IMPRESSION         ResourceTypeCode_Value = 13
	ResourceTypeCode_COMMUNICATION               ResourceTypeCode_Value = 14
	ResourceTypeCode_COMMUNICATION_REQUEST       ResourceTypeCode_Value = 15
	ResourceTypeCode_COMPOSITION                 ResourceTypeCode_Value = 16
	ResourceTypeCode_CONCEPT_MAP                 ResourceTypeCode_Value = 17
	ResourceTypeCode_CONDITION                   ResourceTypeCode_Value = 18
	ResourceTypeCode_CONFORMANCE                 ResourceTypeCode_Value = 19
	ResourceTypeCode_CONTRACT                    ResourceTypeCode_Value = 20
	ResourceTypeCode_COVERAGE                    ResourceTypeCode_Value = 21
	ResourceTypeCode_DATA_ELEMENT                ResourceTypeCode_Value = 22
	ResourceTypeCode_DETECTED_ISSUE              ResourceTypeCode_Value = 23
	ResourceTypeCode_DEVICE                      ResourceTypeCode_Value = 24
	ResourceTypeCode_DEVICE_COMPONENT            ResourceTypeCode_Value = 25
	ResourceTypeCode_DEVICE_METRIC               ResourceTypeCode_Value = 26
	ResourceTypeCode_DEVICE_USE_REQUEST          ResourceTypeCode_Value = 27
	ResourceTypeCode_DEVICE_USE_STATEMENT        ResourceTypeCode_Value = 28
	ResourceTypeCode_DIAGNOSTIC_ORDER            ResourceTypeCode_Value = 29
	ResourceTypeCode_DIAGNOSTIC_REPORT           ResourceTypeCode_Value = 30
	ResourceTypeCode_DOCUMENT_MANIFEST           ResourceTypeCode_Value = 31
	ResourceTypeCode_DOCUMENT_REFERENCE          ResourceTypeCode_Value = 32
	ResourceTypeCode_DOMAIN_RESOURCE             ResourceTypeCode_Value = 33
	ResourceTypeCode_ELIGIBILITY_REQUEST         ResourceTypeCode_Value = 34
	ResourceTypeCode_ELIGIBILITY_RESPONSE        ResourceTypeCode_Value = 35
	ResourceTypeCode_ENCOUNTER                   ResourceTypeCode_Value = 36
	ResourceTypeCode_ENROLLMENT_REQUEST          ResourceTypeCode_Value = 37
	ResourceTypeCode_ENROLLMENT_RESPONSE         ResourceTypeCode_Value = 38
	ResourceTypeCode_EPISODE_OF_CARE             ResourceTypeCode_Value = 39
	ResourceTypeCode_EXPLANATION_OF_BENEFIT      ResourceTypeCode_Value = 40
	ResourceTypeCode_FAMILY_MEMBER_HISTORY       ResourceTypeCode_Value = 41
	ResourceTypeCode_FLAG                        ResourceTypeCode_Value = 42
	ResourceTypeCode_GOAL                        ResourceTypeCode_Value = 43
	ResourceTypeCode_GROUP                       ResourceTypeCode_Value = 44
	ResourceTypeCode_HEALTHCARE_SERVICE          ResourceTypeCode_Value = 45
	ResourceTypeCode_IMAGING_OBJECT_SELECTION    ResourceTypeCode_Value = 46
	ResourceTypeCode_IMAGINGSTUDY                ResourceTypeCode_Value = 47
	ResourceTypeCode_IMMUNIZATION                ResourceTypeCode_Value = 48
	ResourceTypeCode_IMMUNIZATION_RECOMMENDATION ResourceTypeCode_Value = 49
	ResourceTypeCode_IMPLEMENTATION_GUIDE        ResourceTypeCode_Value = 50
	ResourceTypeCode_LIST                        ResourceTypeCode_Value = 51
	ResourceTypeCode_LOCATION                    ResourceTypeCode_Value = 52
	ResourceTypeCode_MEDIA                       ResourceTypeCode_Value = 53
	ResourceTypeCode_MEDICATION                  ResourceTypeCode_Value = 54
	ResourceTypeCode_MEDICATION_ADMINISTRATION   ResourceTypeCode_Value = 55
	ResourceTypeCode_MEDICATION_DISPENSE         ResourceTypeCode_Value = 56
	ResourceTypeCode_MEDICATION_ORDER            ResourceTypeCode_Value = 57
	ResourceTypeCode_MEDICATION_STATEMENT        ResourceTypeCode_Value = 58
	ResourceTypeCode_MESSAGE_HEADER              ResourceTypeCode_Value = 59
	ResourceTypeCode_NAMING_SYSTEM               ResourceTypeCode_Value = 60
	ResourceTypeCode_NUTRITION_ORDER             ResourceTypeCode_Value = 61
	ResourceTypeCode_OBSERVATION                 ResourceTypeCode_Value = 62
	ResourceTypeCode_OPERATION_DEFINITION        ResourceTypeCode_Value = 63
	ResourceTypeCode_OPERATION_OUTCOME           ResourceTypeCode_Value = 64
	ResourceTypeCode_ORDER                       ResourceTypeCode_Value = 65
	ResourceTypeCode_ORDER_RESPONSE              ResourceTypeCode_Value = 66
	ResourceTypeCode_ORGANIZATION                ResourceTypeCode_Value = 67
	ResourceTypeCode_PARAMETERS                  ResourceTypeCode_Value = 68
	ResourceTypeCode_PATIENT                     ResourceTypeCode_Value = 69
	ResourceTypeCode_PAYMENT_NOTICE              ResourceTypeCode_Value = 70
	ResourceTypeCode_PAYMENT_RECONCILIATION      ResourceTypeCode_Value = 71
	ResourceTypeCode_PERSON                      ResourceTypeCode_Value = 72
	ResourceTypeCode_PRACTITIONER                ResourceTypeCode_Value = 73
	ResourceTypeCode_PROCEDURE                   ResourceTypeCode_Value = 74
	ResourceTypeCode_PROCEDURE_REQUEST           ResourceTypeCode_Value = 75
	ResourceTypeCode_PROCESS_REQUEST             ResourceTypeCode_Value = 76
	ResourceTypeCode_PROCESS_RESPONSE            ResourceTypeCode_Value = 77
	ResourceTypeCode_PROVENANCE                  ResourceTypeCode_Value = 78
	ResourceTypeCode_QUESTIONNAIRE               ResourceTypeCode_Value = 79
	ResourceTypeCode_QUESTIONNAIRE_RESPONSE      ResourceTypeCode_Value = 80
	ResourceTypeCode_REFERRAL_REQUEST            ResourceTypeCode_Value = 81
	ResourceTypeCode_RELATED_PERSON              ResourceTypeCode_Value = 82
	ResourceTypeCode_RESOURCE                    ResourceTypeCode_Value = 83
	ResourceTypeCode_RISK_ASSESSMENT             ResourceTypeCode_Value = 84
	ResourceTypeCode_SCHEDULE                    ResourceTypeCode_Value = 85
	ResourceTypeCode_SEARCH_PARAMETER            ResourceTypeCode_Value = 86
	ResourceTypeCode_SLOT                        ResourceTypeCode_Value = 87
	ResourceTypeCode_SPECIMEN                    ResourceTypeCode_Value = 88
	ResourceTypeCode_STRUCTURE_DEFINITION        ResourceTypeCode_Value = 89
	ResourceTypeCode_SUBSCRIPTION                ResourceTypeCode_Value = 90
	ResourceTypeCode_SUBSTANCE                   ResourceTypeCode_Value = 91
	ResourceTypeCode_SUPPLY_DELIVERY             ResourceTypeCode_Value = 92
	ResourceTypeCode_SUPPLY_REQUEST              ResourceTypeCode_Value = 93
	ResourceTypeCode_TEST_SCRIPT                 ResourceTypeCode_Value = 94
	ResourceTypeCode_VALUE_SET                   ResourceTypeCode_Value = 95
	ResourceTypeCode_VISION_PRESCRIPTION         ResourceTypeCode_Value = 96
)

// Enum value maps for ResourceTypeCode_Value.
var (
	ResourceTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "ACCOUNT",
		2:  "ALLERGY_INTOLERANCE",
		3:  "APPOINTMENT",
		4:  "APPOINTMENT_RESPONSE",
		5:  "AUDIT_EVENT",
		6:  "BASIC",
		7:  "BINARY",
		8:  "BODY_SITE",
		9:  "BUNDLE",
		10: "CARE_PLAN",
		11: "CLAIM",
		12: "CLAIM_RESPONSE",
		13: "CLINICAL_IMPRESSION",
		14: "COMMUNICATION",
		15: "COMMUNICATION_REQUEST",
		16: "COMPOSITION",
		17: "CONCEPT_MAP",
		18: "CONDITION",
		19: "CONFORMANCE",
		20: "CONTRACT",
		21: "COVERAGE",
		22: "DATA_ELEMENT",
		23: "DETECTED_ISSUE",
		24: "DEVICE",
		25: "DEVICE_COMPONENT",
		26: "DEVICE_METRIC",
		27: "DEVICE_USE_REQUEST",
		28: "DEVICE_USE_STATEMENT",
		29: "DIAGNOSTIC_ORDER",
		30: "DIAGNOSTIC_REPORT",
		31: "DOCUMENT_MANIFEST",
		32: "DOCUMENT_REFERENCE",
		33: "DOMAIN_RESOURCE",
		34: "ELIGIBILITY_REQUEST",
		35: "ELIGIBILITY_RESPONSE",
		36: "ENCOUNTER",
		37: "ENROLLMENT_REQUEST",
		38: "ENROLLMENT_RESPONSE",
		39: "EPISODE_OF_CARE",
		40: "EXPLANATION_OF_BENEFIT",
		41: "FAMILY_MEMBER_HISTORY",
		42: "FLAG",
		43: "GOAL",
		44: "GROUP",
		45: "HEALTHCARE_SERVICE",
		46: "IMAGING_OBJECT_SELECTION",
		47: "IMAGINGSTUDY",
		48: "IMMUNIZATION",
		49: "IMMUNIZATION_RECOMMENDATION",
		50: "IMPLEMENTATION_GUIDE",
		51: "LIST",
		52: "LOCATION",
		53: "MEDIA",
		54: "MEDICATION",
		55: "MEDICATION_ADMINISTRATION",
		56: "MEDICATION_DISPENSE",
		57: "MEDICATION_ORDER",
		58: "MEDICATION_STATEMENT",
		59: "MESSAGE_HEADER",
		60: "NAMING_SYSTEM",
		61: "NUTRITION_ORDER",
		62: "OBSERVATION",
		63: "OPERATION_DEFINITION",
		64: "OPERATION_OUTCOME",
		65: "ORDER",
		66: "ORDER_RESPONSE",
		67: "ORGANIZATION",
		68: "PARAMETERS",
		69: "PATIENT",
		70: "PAYMENT_NOTICE",
		71: "PAYMENT_RECONCILIATION",
		72: "PERSON",
		73: "PRACTITIONER",
		74: "PROCEDURE",
		75: "PROCEDURE_REQUEST",
		76: "PROCESS_REQUEST",
		77: "PROCESS_RESPONSE",
		78: "PROVENANCE",
		79: "QUESTIONNAIRE",
		80: "QUESTIONNAIRE_RESPONSE",
		81: "REFERRAL_REQUEST",
		82: "RELATED_PERSON",
		83: "RESOURCE",
		84: "RISK_ASSESSMENT",
		85: "SCHEDULE",
		86: "SEARCH_PARAMETER",
		87: "SLOT",
		88: "SPECIMEN",
		89: "STRUCTURE_DEFINITION",
		90: "SUBSCRIPTION",
		91: "SUBSTANCE",
		92: "SUPPLY_DELIVERY",
		93: "SUPPLY_REQUEST",
		94: "TEST_SCRIPT",
		95: "VALUE_SET",
		96: "VISION_PRESCRIPTION",
	}
	ResourceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":       0,
		"ACCOUNT":                     1,
		"ALLERGY_INTOLERANCE":         2,
		"APPOINTMENT":                 3,
		"APPOINTMENT_RESPONSE":        4,
		"AUDIT_EVENT":                 5,
		"BASIC":                       6,
		"BINARY":                      7,
		"BODY_SITE":                   8,
		"BUNDLE":                      9,
		"CARE_PLAN":                   10,
		"CLAIM":                       11,
		"CLAIM_RESPONSE":              12,
		"CLINICAL_IMPRESSION":         13,
		"COMMUNICATION":               14,
		"COMMUNICATION_REQUEST":       15,
		"COMPOSITION":                 16,
		"CONCEPT_MAP":                 17,
		"CONDITION":                   18,
		"CONFORMANCE":                 19,
		"CONTRACT":                    20,
		"COVERAGE":                    21,
		"DATA_ELEMENT":                22,
		"DETECTED_ISSUE":              23,
		"DEVICE":                      24,
		"DEVICE_COMPONENT":            25,
		"DEVICE_METRIC":               26,
		"DEVICE_USE_REQUEST":          27,
		"DEVICE_USE_STATEMENT":        28,
		"DIAGNOSTIC_ORDER":            29,
		"DIAGNOSTIC_REPORT":           30,
		"DOCUMENT_MANIFEST":           31,
		"DOCUMENT_REFERENCE":          32,
		"DOMAIN_RESOURCE":             33,
		"ELIGIBILITY_REQUEST":         34,
		"ELIGIBILITY_RESPONSE":        35,
		"ENCOUNTER":                   36,
		"ENROLLMENT_REQUEST":          37,
		"ENROLLMENT_RESPONSE":         38,
		"EPISODE_OF_CARE":             39,
		"EXPLANATION_OF_BENEFIT":      40,
		"FAMILY_MEMBER_HISTORY":       41,
		"FLAG":                        42,
		"GOAL":                        43,
		"GROUP":                       44,
		"HEALTHCARE_SERVICE":          45,
		"IMAGING_OBJECT_SELECTION":    46,
		"IMAGINGSTUDY":                47,
		"IMMUNIZATION":                48,
		"IMMUNIZATION_RECOMMENDATION": 49,
		"IMPLEMENTATION_GUIDE":        50,
		"LIST":                        51,
		"LOCATION":                    52,
		"MEDIA":                       53,
		"MEDICATION":                  54,
		"MEDICATION_ADMINISTRATION":   55,
		"MEDICATION_DISPENSE":         56,
		"MEDICATION_ORDER":            57,
		"MEDICATION_STATEMENT":        58,
		"MESSAGE_HEADER":              59,
		"NAMING_SYSTEM":               60,
		"NUTRITION_ORDER":             61,
		"OBSERVATION":                 62,
		"OPERATION_DEFINITION":        63,
		"OPERATION_OUTCOME":           64,
		"ORDER":                       65,
		"ORDER_RESPONSE":              66,
		"ORGANIZATION":                67,
		"PARAMETERS":                  68,
		"PATIENT":                     69,
		"PAYMENT_NOTICE":              70,
		"PAYMENT_RECONCILIATION":      71,
		"PERSON":                      72,
		"PRACTITIONER":                73,
		"PROCEDURE":                   74,
		"PROCEDURE_REQUEST":           75,
		"PROCESS_REQUEST":             76,
		"PROCESS_RESPONSE":            77,
		"PROVENANCE":                  78,
		"QUESTIONNAIRE":               79,
		"QUESTIONNAIRE_RESPONSE":      80,
		"REFERRAL_REQUEST":            81,
		"RELATED_PERSON":              82,
		"RESOURCE":                    83,
		"RISK_ASSESSMENT":             84,
		"SCHEDULE":                    85,
		"SEARCH_PARAMETER":            86,
		"SLOT":                        87,
		"SPECIMEN":                    88,
		"STRUCTURE_DEFINITION":        89,
		"SUBSCRIPTION":                90,
		"SUBSTANCE":                   91,
		"SUPPLY_DELIVERY":             92,
		"SUPPLY_REQUEST":              93,
		"TEST_SCRIPT":                 94,
		"VALUE_SET":                   95,
		"VISION_PRESCRIPTION":         96,
	}
)

func (x ResourceTypeCode_Value) Enum() *ResourceTypeCode_Value {
	p := new(ResourceTypeCode_Value)
	*p = x
	return p
}

func (x ResourceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[111].Descriptor()
}

func (ResourceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[111]
}

func (x ResourceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeCode_Value.Descriptor instead.
func (ResourceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{111, 0}
}

// Primitive value for code.
type ResponseTypeCode_Value int32

const (
	ResponseTypeCode_INVALID_UNINITIALIZED ResponseTypeCode_Value = 0
	ResponseTypeCode_OK                    ResponseTypeCode_Value = 1
	ResponseTypeCode_TRANSIENT_ERROR       ResponseTypeCode_Value = 2
	ResponseTypeCode_FATAL_ERROR           ResponseTypeCode_Value = 3
)

// Enum value maps for ResponseTypeCode_Value.
var (
	ResponseTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OK",
		2: "TRANSIENT_ERROR",
		3: "FATAL_ERROR",
	}
	ResponseTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OK":                    1,
		"TRANSIENT_ERROR":       2,
		"FATAL_ERROR":           3,
	}
)

func (x ResponseTypeCode_Value) Enum() *ResponseTypeCode_Value {
	p := new(ResponseTypeCode_Value)
	*p = x
	return p
}

func (x ResponseTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[112].Descriptor()
}

func (ResponseTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[112]
}

func (x ResponseTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseTypeCode_Value.Descriptor instead.
func (ResponseTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{112, 0}
}

// Primitive value for code.
type RestfulConformanceModeCode_Value int32

const (
	RestfulConformanceModeCode_INVALID_UNINITIALIZED RestfulConformanceModeCode_Value = 0
	RestfulConformanceModeCode_CLIENT                RestfulConformanceModeCode_Value = 1
	RestfulConformanceModeCode_SERVER                RestfulConformanceModeCode_Value = 2
)

// Enum value maps for RestfulConformanceModeCode_Value.
var (
	RestfulConformanceModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLIENT",
		2: "SERVER",
	}
	RestfulConformanceModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLIENT":                1,
		"SERVER":                2,
	}
)

func (x RestfulConformanceModeCode_Value) Enum() *RestfulConformanceModeCode_Value {
	p := new(RestfulConformanceModeCode_Value)
	*p = x
	return p
}

func (x RestfulConformanceModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestfulConformanceModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[113].Descriptor()
}

func (RestfulConformanceModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[113]
}

func (x RestfulConformanceModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestfulConformanceModeCode_Value.Descriptor instead.
func (RestfulConformanceModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{113, 0}
}

// Primitive value for code.
type SearchEntryModeCode_Value int32

const (
	SearchEntryModeCode_INVALID_UNINITIALIZED SearchEntryModeCode_Value = 0
	SearchEntryModeCode_MATCH                 SearchEntryModeCode_Value = 1
	SearchEntryModeCode_INCLUDE               SearchEntryModeCode_Value = 2
	SearchEntryModeCode_OUTCOME               SearchEntryModeCode_Value = 3
)

// Enum value maps for SearchEntryModeCode_Value.
var (
	SearchEntryModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MATCH",
		2: "INCLUDE",
		3: "OUTCOME",
	}
	SearchEntryModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MATCH":                 1,
		"INCLUDE":               2,
		"OUTCOME":               3,
	}
)

func (x SearchEntryModeCode_Value) Enum() *SearchEntryModeCode_Value {
	p := new(SearchEntryModeCode_Value)
	*p = x
	return p
}

func (x SearchEntryModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchEntryModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[114].Descriptor()
}

func (SearchEntryModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[114]
}

func (x SearchEntryModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchEntryModeCode_Value.Descriptor instead.
func (SearchEntryModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{114, 0}
}

// Primitive value for code.
type SearchModifierCodeCode_Value int32

const (
	SearchModifierCodeCode_INVALID_UNINITIALIZED SearchModifierCodeCode_Value = 0
	SearchModifierCodeCode_MISSING               SearchModifierCodeCode_Value = 1
	SearchModifierCodeCode_EXACT                 SearchModifierCodeCode_Value = 2
	SearchModifierCodeCode_CONTAINS              SearchModifierCodeCode_Value = 3
	SearchModifierCodeCode_NOT                   SearchModifierCodeCode_Value = 4
	SearchModifierCodeCode_TEXT                  SearchModifierCodeCode_Value = 5
	SearchModifierCodeCode_IN                    SearchModifierCodeCode_Value = 6
	SearchModifierCodeCode_NOT_IN                SearchModifierCodeCode_Value = 7
	SearchModifierCodeCode_BELOW                 SearchModifierCodeCode_Value = 8
	SearchModifierCodeCode_ABOVE                 SearchModifierCodeCode_Value = 9
	SearchModifierCodeCode_TYPE                  SearchModifierCodeCode_Value = 10
)

// Enum value maps for SearchModifierCodeCode_Value.
var (
	SearchModifierCodeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MISSING",
		2:  "EXACT",
		3:  "CONTAINS",
		4:  "NOT",
		5:  "TEXT",
		6:  "IN",
		7:  "NOT_IN",
		8:  "BELOW",
		9:  "ABOVE",
		10: "TYPE",
	}
	SearchModifierCodeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MISSING":               1,
		"EXACT":                 2,
		"CONTAINS":              3,
		"NOT":                   4,
		"TEXT":                  5,
		"IN":                    6,
		"NOT_IN":                7,
		"BELOW":                 8,
		"ABOVE":                 9,
		"TYPE":                  10,
	}
)

func (x SearchModifierCodeCode_Value) Enum() *SearchModifierCodeCode_Value {
	p := new(SearchModifierCodeCode_Value)
	*p = x
	return p
}

func (x SearchModifierCodeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchModifierCodeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[115].Descriptor()
}

func (SearchModifierCodeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[115]
}

func (x SearchModifierCodeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchModifierCodeCode_Value.Descriptor instead.
func (SearchModifierCodeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{115, 0}
}

// Primitive value for code.
type SearchParamTypeCode_Value int32

const (
	SearchParamTypeCode_INVALID_UNINITIALIZED SearchParamTypeCode_Value = 0
	SearchParamTypeCode_NUMBER                SearchParamTypeCode_Value = 1
	SearchParamTypeCode_DATE                  SearchParamTypeCode_Value = 2
	SearchParamTypeCode_STRING                SearchParamTypeCode_Value = 3
	SearchParamTypeCode_TOKEN                 SearchParamTypeCode_Value = 4
	SearchParamTypeCode_REFERENCE             SearchParamTypeCode_Value = 5
	SearchParamTypeCode_COMPOSITE             SearchParamTypeCode_Value = 6
	SearchParamTypeCode_QUANTITY              SearchParamTypeCode_Value = 7
	SearchParamTypeCode_URI                   SearchParamTypeCode_Value = 8
)

// Enum value maps for SearchParamTypeCode_Value.
var (
	SearchParamTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NUMBER",
		2: "DATE",
		3: "STRING",
		4: "TOKEN",
		5: "REFERENCE",
		6: "COMPOSITE",
		7: "QUANTITY",
		8: "URI",
	}
	SearchParamTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NUMBER":                1,
		"DATE":                  2,
		"STRING":                3,
		"TOKEN":                 4,
		"REFERENCE":             5,
		"COMPOSITE":             6,
		"QUANTITY":              7,
		"URI":                   8,
	}
)

func (x SearchParamTypeCode_Value) Enum() *SearchParamTypeCode_Value {
	p := new(SearchParamTypeCode_Value)
	*p = x
	return p
}

func (x SearchParamTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchParamTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[116].Descriptor()
}

func (SearchParamTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[116]
}

func (x SearchParamTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchParamTypeCode_Value.Descriptor instead.
func (SearchParamTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{116, 0}
}

// Primitive value for code.
type XPathUsageTypeCode_Value int32

const (
	XPathUsageTypeCode_INVALID_UNINITIALIZED XPathUsageTypeCode_Value = 0
	XPathUsageTypeCode_NORMAL                XPathUsageTypeCode_Value = 1
	XPathUsageTypeCode_PHONETIC              XPathUsageTypeCode_Value = 2
	XPathUsageTypeCode_NEARBY                XPathUsageTypeCode_Value = 3
	XPathUsageTypeCode_DISTANCE              XPathUsageTypeCode_Value = 4
	XPathUsageTypeCode_OTHER                 XPathUsageTypeCode_Value = 5
)

// Enum value maps for XPathUsageTypeCode_Value.
var (
	XPathUsageTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NORMAL",
		2: "PHONETIC",
		3: "NEARBY",
		4: "DISTANCE",
		5: "OTHER",
	}
	XPathUsageTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NORMAL":                1,
		"PHONETIC":              2,
		"NEARBY":                3,
		"DISTANCE":              4,
		"OTHER":                 5,
	}
)

func (x XPathUsageTypeCode_Value) Enum() *XPathUsageTypeCode_Value {
	p := new(XPathUsageTypeCode_Value)
	*p = x
	return p
}

func (x XPathUsageTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XPathUsageTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[117].Descriptor()
}

func (XPathUsageTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[117]
}

func (x XPathUsageTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XPathUsageTypeCode_Value.Descriptor instead.
func (XPathUsageTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{117, 0}
}

// Primitive value for code.
type SlotStatusCode_Value int32

const (
	SlotStatusCode_INVALID_UNINITIALIZED SlotStatusCode_Value = 0
	SlotStatusCode_BUSY                  SlotStatusCode_Value = 1
	SlotStatusCode_FREE                  SlotStatusCode_Value = 2
	SlotStatusCode_BUSY_UNAVAILABLE      SlotStatusCode_Value = 3
	SlotStatusCode_BUSY_TENTATIVE        SlotStatusCode_Value = 4
)

// Enum value maps for SlotStatusCode_Value.
var (
	SlotStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BUSY",
		2: "FREE",
		3: "BUSY_UNAVAILABLE",
		4: "BUSY_TENTATIVE",
	}
	SlotStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BUSY":                  1,
		"FREE":                  2,
		"BUSY_UNAVAILABLE":      3,
		"BUSY_TENTATIVE":        4,
	}
)

func (x SlotStatusCode_Value) Enum() *SlotStatusCode_Value {
	p := new(SlotStatusCode_Value)
	*p = x
	return p
}

func (x SlotStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlotStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[118].Descriptor()
}

func (SlotStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[118]
}

func (x SlotStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlotStatusCode_Value.Descriptor instead.
func (SlotStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{118, 0}
}

// Primitive value for code.
type SpecimenStatusCode_Value int32

const (
	SpecimenStatusCode_INVALID_UNINITIALIZED SpecimenStatusCode_Value = 0
	SpecimenStatusCode_AVAILABLE             SpecimenStatusCode_Value = 1
	SpecimenStatusCode_UNAVAILABLE           SpecimenStatusCode_Value = 2
	SpecimenStatusCode_UNSATISFACTORY        SpecimenStatusCode_Value = 3
	SpecimenStatusCode_ENTERED_IN_ERROR      SpecimenStatusCode_Value = 4
)

// Enum value maps for SpecimenStatusCode_Value.
var (
	SpecimenStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AVAILABLE",
		2: "UNAVAILABLE",
		3: "UNSATISFACTORY",
		4: "ENTERED_IN_ERROR",
	}
	SpecimenStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AVAILABLE":             1,
		"UNAVAILABLE":           2,
		"UNSATISFACTORY":        3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x SpecimenStatusCode_Value) Enum() *SpecimenStatusCode_Value {
	p := new(SpecimenStatusCode_Value)
	*p = x
	return p
}

func (x SpecimenStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecimenStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[119].Descriptor()
}

func (SpecimenStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[119]
}

func (x SpecimenStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecimenStatusCode_Value.Descriptor instead.
func (SpecimenStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{119, 0}
}

// Primitive value for code.
type StructureDefinitionKindCode_Value int32

const (
	StructureDefinitionKindCode_INVALID_UNINITIALIZED StructureDefinitionKindCode_Value = 0
	StructureDefinitionKindCode_DATATYPE              StructureDefinitionKindCode_Value = 1
	StructureDefinitionKindCode_RESOURCE              StructureDefinitionKindCode_Value = 2
	StructureDefinitionKindCode_LOGICAL               StructureDefinitionKindCode_Value = 3
)

// Enum value maps for StructureDefinitionKindCode_Value.
var (
	StructureDefinitionKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DATATYPE",
		2: "RESOURCE",
		3: "LOGICAL",
	}
	StructureDefinitionKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DATATYPE":              1,
		"RESOURCE":              2,
		"LOGICAL":               3,
	}
)

func (x StructureDefinitionKindCode_Value) Enum() *StructureDefinitionKindCode_Value {
	p := new(StructureDefinitionKindCode_Value)
	*p = x
	return p
}

func (x StructureDefinitionKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureDefinitionKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[120].Descriptor()
}

func (StructureDefinitionKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[120]
}

func (x StructureDefinitionKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureDefinitionKindCode_Value.Descriptor instead.
func (StructureDefinitionKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{120, 0}
}

// Primitive value for code.
type SubscriptionChannelTypeCode_Value int32

const (
	SubscriptionChannelTypeCode_INVALID_UNINITIALIZED SubscriptionChannelTypeCode_Value = 0
	SubscriptionChannelTypeCode_REST_HOOK             SubscriptionChannelTypeCode_Value = 1
	SubscriptionChannelTypeCode_WEBSOCKET             SubscriptionChannelTypeCode_Value = 2
	SubscriptionChannelTypeCode_EMAIL                 SubscriptionChannelTypeCode_Value = 3
	SubscriptionChannelTypeCode_SMS                   SubscriptionChannelTypeCode_Value = 4
	SubscriptionChannelTypeCode_MESSAGE               SubscriptionChannelTypeCode_Value = 5
)

// Enum value maps for SubscriptionChannelTypeCode_Value.
var (
	SubscriptionChannelTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REST_HOOK",
		2: "WEBSOCKET",
		3: "EMAIL",
		4: "SMS",
		5: "MESSAGE",
	}
	SubscriptionChannelTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REST_HOOK":             1,
		"WEBSOCKET":             2,
		"EMAIL":                 3,
		"SMS":                   4,
		"MESSAGE":               5,
	}
)

func (x SubscriptionChannelTypeCode_Value) Enum() *SubscriptionChannelTypeCode_Value {
	p := new(SubscriptionChannelTypeCode_Value)
	*p = x
	return p
}

func (x SubscriptionChannelTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionChannelTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[121].Descriptor()
}

func (SubscriptionChannelTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[121]
}

func (x SubscriptionChannelTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionChannelTypeCode_Value.Descriptor instead.
func (SubscriptionChannelTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{121, 0}
}

// Primitive value for code.
type SubscriptionStatusCode_Value int32

const (
	SubscriptionStatusCode_INVALID_UNINITIALIZED SubscriptionStatusCode_Value = 0
	SubscriptionStatusCode_REQUESTED             SubscriptionStatusCode_Value = 1
	SubscriptionStatusCode_ACTIVE                SubscriptionStatusCode_Value = 2
	SubscriptionStatusCode_ERROR                 SubscriptionStatusCode_Value = 3
	SubscriptionStatusCode_OFF                   SubscriptionStatusCode_Value = 4
)

// Enum value maps for SubscriptionStatusCode_Value.
var (
	SubscriptionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUESTED",
		2: "ACTIVE",
		3: "ERROR",
		4: "OFF",
	}
	SubscriptionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUESTED":             1,
		"ACTIVE":                2,
		"ERROR":                 3,
		"OFF":                   4,
	}
)

func (x SubscriptionStatusCode_Value) Enum() *SubscriptionStatusCode_Value {
	p := new(SubscriptionStatusCode_Value)
	*p = x
	return p
}

func (x SubscriptionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[122].Descriptor()
}

func (SubscriptionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[122]
}

func (x SubscriptionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionStatusCode_Value.Descriptor instead.
func (SubscriptionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{122, 0}
}

// Primitive value for code.
type SupplyDeliveryStatusCode_Value int32

const (
	SupplyDeliveryStatusCode_INVALID_UNINITIALIZED SupplyDeliveryStatusCode_Value = 0
	SupplyDeliveryStatusCode_IN_PROGRESS           SupplyDeliveryStatusCode_Value = 1
	SupplyDeliveryStatusCode_COMPLETED             SupplyDeliveryStatusCode_Value = 2
	SupplyDeliveryStatusCode_ABANDONED             SupplyDeliveryStatusCode_Value = 3
)

// Enum value maps for SupplyDeliveryStatusCode_Value.
var (
	SupplyDeliveryStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "ABANDONED",
	}
	SupplyDeliveryStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"ABANDONED":             3,
	}
)

func (x SupplyDeliveryStatusCode_Value) Enum() *SupplyDeliveryStatusCode_Value {
	p := new(SupplyDeliveryStatusCode_Value)
	*p = x
	return p
}

func (x SupplyDeliveryStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyDeliveryStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[123].Descriptor()
}

func (SupplyDeliveryStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[123]
}

func (x SupplyDeliveryStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyDeliveryStatusCode_Value.Descriptor instead.
func (SupplyDeliveryStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{123, 0}
}

// Primitive value for code.
type SupplyDeliveryCode_Value int32

const (
	SupplyDeliveryCode_INVALID_UNINITIALIZED SupplyDeliveryCode_Value = 0
	SupplyDeliveryCode_MEDICATION            SupplyDeliveryCode_Value = 1
	SupplyDeliveryCode_DEVICE                SupplyDeliveryCode_Value = 2
)

// Enum value maps for SupplyDeliveryCode_Value.
var (
	SupplyDeliveryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MEDICATION",
		2: "DEVICE",
	}
	SupplyDeliveryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MEDICATION":            1,
		"DEVICE":                2,
	}
)

func (x SupplyDeliveryCode_Value) Enum() *SupplyDeliveryCode_Value {
	p := new(SupplyDeliveryCode_Value)
	*p = x
	return p
}

func (x SupplyDeliveryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyDeliveryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[124].Descriptor()
}

func (SupplyDeliveryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[124]
}

func (x SupplyDeliveryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyDeliveryCode_Value.Descriptor instead.
func (SupplyDeliveryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{124, 0}
}

// Primitive value for code.
type SupplyTypeCode_Value int32

const (
	SupplyTypeCode_INVALID_UNINITIALIZED SupplyTypeCode_Value = 0
	SupplyTypeCode_CENTRAL               SupplyTypeCode_Value = 1
	SupplyTypeCode_NONSTOCK              SupplyTypeCode_Value = 2
)

// Enum value maps for SupplyTypeCode_Value.
var (
	SupplyTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CENTRAL",
		2: "NONSTOCK",
	}
	SupplyTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CENTRAL":               1,
		"NONSTOCK":              2,
	}
)

func (x SupplyTypeCode_Value) Enum() *SupplyTypeCode_Value {
	p := new(SupplyTypeCode_Value)
	*p = x
	return p
}

func (x SupplyTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[125].Descriptor()
}

func (SupplyTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[125]
}

func (x SupplyTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyTypeCode_Value.Descriptor instead.
func (SupplyTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{125, 0}
}

// Primitive value for code.
type SupplyRequestStatusCode_Value int32

const (
	SupplyRequestStatusCode_INVALID_UNINITIALIZED SupplyRequestStatusCode_Value = 0
	SupplyRequestStatusCode_REQUESTED             SupplyRequestStatusCode_Value = 1
	SupplyRequestStatusCode_COMPLETED             SupplyRequestStatusCode_Value = 2
	SupplyRequestStatusCode_FAILED                SupplyRequestStatusCode_Value = 3
	SupplyRequestStatusCode_CANCELLED             SupplyRequestStatusCode_Value = 4
)

// Enum value maps for SupplyRequestStatusCode_Value.
var (
	SupplyRequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUESTED",
		2: "COMPLETED",
		3: "FAILED",
		4: "CANCELLED",
	}
	SupplyRequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUESTED":             1,
		"COMPLETED":             2,
		"FAILED":                3,
		"CANCELLED":             4,
	}
)

func (x SupplyRequestStatusCode_Value) Enum() *SupplyRequestStatusCode_Value {
	p := new(SupplyRequestStatusCode_Value)
	*p = x
	return p
}

func (x SupplyRequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyRequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[126].Descriptor()
}

func (SupplyRequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[126]
}

func (x SupplyRequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyRequestStatusCode_Value.Descriptor instead.
func (SupplyRequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{126, 0}
}

// Primitive value for code.
type TransactionModeCode_Value int32

const (
	TransactionModeCode_INVALID_UNINITIALIZED TransactionModeCode_Value = 0
	TransactionModeCode_NOT_SUPPORTED         TransactionModeCode_Value = 1
	TransactionModeCode_BATCH                 TransactionModeCode_Value = 2
	TransactionModeCode_TRANSACTION           TransactionModeCode_Value = 3
	TransactionModeCode_BOTH                  TransactionModeCode_Value = 4
)

// Enum value maps for TransactionModeCode_Value.
var (
	TransactionModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_SUPPORTED",
		2: "BATCH",
		3: "TRANSACTION",
		4: "BOTH",
	}
	TransactionModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_SUPPORTED":         1,
		"BATCH":                 2,
		"TRANSACTION":           3,
		"BOTH":                  4,
	}
)

func (x TransactionModeCode_Value) Enum() *TransactionModeCode_Value {
	p := new(TransactionModeCode_Value)
	*p = x
	return p
}

func (x TransactionModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[127].Descriptor()
}

func (TransactionModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[127]
}

func (x TransactionModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionModeCode_Value.Descriptor instead.
func (TransactionModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{127, 0}
}

// Primitive value for code.
type UnknownContentCodeCode_Value int32

const (
	UnknownContentCodeCode_INVALID_UNINITIALIZED UnknownContentCodeCode_Value = 0
	UnknownContentCodeCode_NO                    UnknownContentCodeCode_Value = 1
	UnknownContentCodeCode_EXTENSIONS            UnknownContentCodeCode_Value = 2
	UnknownContentCodeCode_ELEMENTS              UnknownContentCodeCode_Value = 3
	UnknownContentCodeCode_BOTH                  UnknownContentCodeCode_Value = 4
)

// Enum value maps for UnknownContentCodeCode_Value.
var (
	UnknownContentCodeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NO",
		2: "EXTENSIONS",
		3: "ELEMENTS",
		4: "BOTH",
	}
	UnknownContentCodeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NO":                    1,
		"EXTENSIONS":            2,
		"ELEMENTS":              3,
		"BOTH":                  4,
	}
)

func (x UnknownContentCodeCode_Value) Enum() *UnknownContentCodeCode_Value {
	p := new(UnknownContentCodeCode_Value)
	*p = x
	return p
}

func (x UnknownContentCodeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnknownContentCodeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[128].Descriptor()
}

func (UnknownContentCodeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[128]
}

func (x UnknownContentCodeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnknownContentCodeCode_Value.Descriptor instead.
func (UnknownContentCodeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{128, 0}
}

// Primitive value for code.
type ConfidentialityClassificationCode_Value int32

const (
	ConfidentialityClassificationCode_INVALID_UNINITIALIZED        ConfidentialityClassificationCode_Value = 0
	ConfidentialityClassificationCode__CONFIDENTIALITY             ConfidentialityClassificationCode_Value = 1
	ConfidentialityClassificationCode_L                            ConfidentialityClassificationCode_Value = 2
	ConfidentialityClassificationCode_M                            ConfidentialityClassificationCode_Value = 3
	ConfidentialityClassificationCode_N                            ConfidentialityClassificationCode_Value = 4
	ConfidentialityClassificationCode_R                            ConfidentialityClassificationCode_Value = 5
	ConfidentialityClassificationCode_U                            ConfidentialityClassificationCode_Value = 6
	ConfidentialityClassificationCode_V                            ConfidentialityClassificationCode_Value = 7
	ConfidentialityClassificationCode__CONFIDENTIALITYBYACCESSKIND ConfidentialityClassificationCode_Value = 8
	ConfidentialityClassificationCode_B                            ConfidentialityClassificationCode_Value = 9
	ConfidentialityClassificationCode_D                            ConfidentialityClassificationCode_Value = 10
	ConfidentialityClassificationCode_I                            ConfidentialityClassificationCode_Value = 11
	ConfidentialityClassificationCode__CONFIDENTIALITYBYINFOTYPE   ConfidentialityClassificationCode_Value = 12
	ConfidentialityClassificationCode_ETH                          ConfidentialityClassificationCode_Value = 13
	ConfidentialityClassificationCode_HIV                          ConfidentialityClassificationCode_Value = 14
	ConfidentialityClassificationCode_PSY                          ConfidentialityClassificationCode_Value = 15
	ConfidentialityClassificationCode_SDV                          ConfidentialityClassificationCode_Value = 16
	ConfidentialityClassificationCode__CONFIDENTIALITYMODIFIERS    ConfidentialityClassificationCode_Value = 17
	ConfidentialityClassificationCode_C                            ConfidentialityClassificationCode_Value = 18
	ConfidentialityClassificationCode_S                            ConfidentialityClassificationCode_Value = 19
	ConfidentialityClassificationCode_T                            ConfidentialityClassificationCode_Value = 20
)

// Enum value maps for ConfidentialityClassificationCode_Value.
var (
	ConfidentialityClassificationCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "_CONFIDENTIALITY",
		2:  "L",
		3:  "M",
		4:  "N",
		5:  "R",
		6:  "U",
		7:  "V",
		8:  "_CONFIDENTIALITYBYACCESSKIND",
		9:  "B",
		10: "D",
		11: "I",
		12: "_CONFIDENTIALITYBYINFOTYPE",
		13: "ETH",
		14: "HIV",
		15: "PSY",
		16: "SDV",
		17: "_CONFIDENTIALITYMODIFIERS",
		18: "C",
		19: "S",
		20: "T",
	}
	ConfidentialityClassificationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":        0,
		"_CONFIDENTIALITY":             1,
		"L":                            2,
		"M":                            3,
		"N":                            4,
		"R":                            5,
		"U":                            6,
		"V":                            7,
		"_CONFIDENTIALITYBYACCESSKIND": 8,
		"B":                            9,
		"D":                            10,
		"I":                            11,
		"_CONFIDENTIALITYBYINFOTYPE":   12,
		"ETH":                          13,
		"HIV":                          14,
		"PSY":                          15,
		"SDV":                          16,
		"_CONFIDENTIALITYMODIFIERS":    17,
		"C":                            18,
		"S":                            19,
		"T":                            20,
	}
)

func (x ConfidentialityClassificationCode_Value) Enum() *ConfidentialityClassificationCode_Value {
	p := new(ConfidentialityClassificationCode_Value)
	*p = x
	return p
}

func (x ConfidentialityClassificationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfidentialityClassificationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[129].Descriptor()
}

func (ConfidentialityClassificationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[129]
}

func (x ConfidentialityClassificationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfidentialityClassificationCode_Value.Descriptor instead.
func (ConfidentialityClassificationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{129, 0}
}

// Primitive value for code.
type ResourceVersionPolicyCode_Value int32

const (
	ResourceVersionPolicyCode_INVALID_UNINITIALIZED ResourceVersionPolicyCode_Value = 0
	ResourceVersionPolicyCode_NO_VERSION            ResourceVersionPolicyCode_Value = 1
	ResourceVersionPolicyCode_VERSIONED             ResourceVersionPolicyCode_Value = 2
	ResourceVersionPolicyCode_VERSIONED_UPDATE      ResourceVersionPolicyCode_Value = 3
)

// Enum value maps for ResourceVersionPolicyCode_Value.
var (
	ResourceVersionPolicyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NO_VERSION",
		2: "VERSIONED",
		3: "VERSIONED_UPDATE",
	}
	ResourceVersionPolicyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NO_VERSION":            1,
		"VERSIONED":             2,
		"VERSIONED_UPDATE":      3,
	}
)

func (x ResourceVersionPolicyCode_Value) Enum() *ResourceVersionPolicyCode_Value {
	p := new(ResourceVersionPolicyCode_Value)
	*p = x
	return p
}

func (x ResourceVersionPolicyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceVersionPolicyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[130].Descriptor()
}

func (ResourceVersionPolicyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[130]
}

func (x ResourceVersionPolicyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceVersionPolicyCode_Value.Descriptor instead.
func (ResourceVersionPolicyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{130, 0}
}

// Primitive value for code.
type VisionBaseCode_Value int32

const (
	VisionBaseCode_INVALID_UNINITIALIZED VisionBaseCode_Value = 0
	VisionBaseCode_UP                    VisionBaseCode_Value = 1
	VisionBaseCode_DOWN                  VisionBaseCode_Value = 2
	VisionBaseCode_IN                    VisionBaseCode_Value = 3
	VisionBaseCode_OUT                   VisionBaseCode_Value = 4
)

// Enum value maps for VisionBaseCode_Value.
var (
	VisionBaseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UP",
		2: "DOWN",
		3: "IN",
		4: "OUT",
	}
	VisionBaseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UP":                    1,
		"DOWN":                  2,
		"IN":                    3,
		"OUT":                   4,
	}
)

func (x VisionBaseCode_Value) Enum() *VisionBaseCode_Value {
	p := new(VisionBaseCode_Value)
	*p = x
	return p
}

func (x VisionBaseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisionBaseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[131].Descriptor()
}

func (VisionBaseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[131]
}

func (x VisionBaseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisionBaseCode_Value.Descriptor instead.
func (VisionBaseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{131, 0}
}

// Primitive value for code.
type VisionEyesCode_Value int32

const (
	VisionEyesCode_INVALID_UNINITIALIZED VisionEyesCode_Value = 0
	VisionEyesCode_RIGHT                 VisionEyesCode_Value = 1
	VisionEyesCode_LEFT                  VisionEyesCode_Value = 2
)

// Enum value maps for VisionEyesCode_Value.
var (
	VisionEyesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RIGHT",
		2: "LEFT",
	}
	VisionEyesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RIGHT":                 1,
		"LEFT":                  2,
	}
)

func (x VisionEyesCode_Value) Enum() *VisionEyesCode_Value {
	p := new(VisionEyesCode_Value)
	*p = x
	return p
}

func (x VisionEyesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisionEyesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[132].Descriptor()
}

func (VisionEyesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[132]
}

func (x VisionEyesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisionEyesCode_Value.Descriptor instead.
func (VisionEyesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{132, 0}
}

// Primitive value for code.
type TypeRestfulInteractionCode_Value int32

const (
	TypeRestfulInteractionCode_INVALID_UNINITIALIZED TypeRestfulInteractionCode_Value = 0
	TypeRestfulInteractionCode_READ                  TypeRestfulInteractionCode_Value = 1
	TypeRestfulInteractionCode_VREAD                 TypeRestfulInteractionCode_Value = 2
	TypeRestfulInteractionCode_UPDATE                TypeRestfulInteractionCode_Value = 3
	TypeRestfulInteractionCode_DELETE                TypeRestfulInteractionCode_Value = 4
	TypeRestfulInteractionCode_HISTORY_INSTANCE      TypeRestfulInteractionCode_Value = 5
	TypeRestfulInteractionCode_VALIDATE              TypeRestfulInteractionCode_Value = 6
	TypeRestfulInteractionCode_HISTORY_TYPE          TypeRestfulInteractionCode_Value = 7
	TypeRestfulInteractionCode_CREATE                TypeRestfulInteractionCode_Value = 8
	TypeRestfulInteractionCode_SEARCH_TYPE           TypeRestfulInteractionCode_Value = 9
)

// Enum value maps for TypeRestfulInteractionCode_Value.
var (
	TypeRestfulInteractionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "READ",
		2: "VREAD",
		3: "UPDATE",
		4: "DELETE",
		5: "HISTORY_INSTANCE",
		6: "VALIDATE",
		7: "HISTORY_TYPE",
		8: "CREATE",
		9: "SEARCH_TYPE",
	}
	TypeRestfulInteractionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"READ":                  1,
		"VREAD":                 2,
		"UPDATE":                3,
		"DELETE":                4,
		"HISTORY_INSTANCE":      5,
		"VALIDATE":              6,
		"HISTORY_TYPE":          7,
		"CREATE":                8,
		"SEARCH_TYPE":           9,
	}
)

func (x TypeRestfulInteractionCode_Value) Enum() *TypeRestfulInteractionCode_Value {
	p := new(TypeRestfulInteractionCode_Value)
	*p = x
	return p
}

func (x TypeRestfulInteractionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeRestfulInteractionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[133].Descriptor()
}

func (TypeRestfulInteractionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[133]
}

func (x TypeRestfulInteractionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeRestfulInteractionCode_Value.Descriptor instead.
func (TypeRestfulInteractionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{133, 0}
}

// Primitive value for code.
type SystemRestfulInteractionCode_Value int32

const (
	SystemRestfulInteractionCode_INVALID_UNINITIALIZED SystemRestfulInteractionCode_Value = 0
	SystemRestfulInteractionCode_TRANSACTION           SystemRestfulInteractionCode_Value = 1
	SystemRestfulInteractionCode_SEARCH_SYSTEM         SystemRestfulInteractionCode_Value = 2
	SystemRestfulInteractionCode_HISTORY_SYSTEM        SystemRestfulInteractionCode_Value = 3
)

// Enum value maps for SystemRestfulInteractionCode_Value.
var (
	SystemRestfulInteractionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TRANSACTION",
		2: "SEARCH_SYSTEM",
		3: "HISTORY_SYSTEM",
	}
	SystemRestfulInteractionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TRANSACTION":           1,
		"SEARCH_SYSTEM":         2,
		"HISTORY_SYSTEM":        3,
	}
)

func (x SystemRestfulInteractionCode_Value) Enum() *SystemRestfulInteractionCode_Value {
	p := new(SystemRestfulInteractionCode_Value)
	*p = x
	return p
}

func (x SystemRestfulInteractionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemRestfulInteractionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[134].Descriptor()
}

func (SystemRestfulInteractionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[134]
}

func (x SystemRestfulInteractionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemRestfulInteractionCode_Value.Descriptor instead.
func (SystemRestfulInteractionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{134, 0}
}

// Primitive value for code
type InstanceAvailabilityCode_Value int32

const (
	InstanceAvailabilityCode_INVALID_UNINITIALIZED InstanceAvailabilityCode_Value = 0
	InstanceAvailabilityCode_ONLINE                InstanceAvailabilityCode_Value = 1
	InstanceAvailabilityCode_OFFLINE               InstanceAvailabilityCode_Value = 2
	InstanceAvailabilityCode_NEARLINE              InstanceAvailabilityCode_Value = 3
	InstanceAvailabilityCode_UNAVAILABLE           InstanceAvailabilityCode_Value = 4
)

// Enum value maps for InstanceAvailabilityCode_Value.
var (
	InstanceAvailabilityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ONLINE",
		2: "OFFLINE",
		3: "NEARLINE",
		4: "UNAVAILABLE",
	}
	InstanceAvailabilityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ONLINE":                1,
		"OFFLINE":               2,
		"NEARLINE":              3,
		"UNAVAILABLE":           4,
	}
)

func (x InstanceAvailabilityCode_Value) Enum() *InstanceAvailabilityCode_Value {
	p := new(InstanceAvailabilityCode_Value)
	*p = x
	return p
}

func (x InstanceAvailabilityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceAvailabilityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[135].Descriptor()
}

func (InstanceAvailabilityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes[135]
}

func (x InstanceAvailabilityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceAvailabilityCode_Value.Descriptor instead.
func (InstanceAvailabilityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{135, 0}
}

// The actionlist.
// See http://hl7.org/fhir/ValueSet/actionlist.
type ActionListCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ActionListCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ActionListCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ActionListCode) Reset() {
	*x = ActionListCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionListCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionListCode) ProtoMessage() {}

func (x *ActionListCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionListCode.ProtoReflect.Descriptor instead.
func (*ActionListCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{0}
}

func (x *ActionListCode) GetValue() ActionListCode_Value {
	if x != nil {
		return x.Value
	}
	return ActionListCode_INVALID_UNINITIALIZED
}

func (x *ActionListCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionListCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The adjudication error.
// See http://hl7.org/fhir/ValueSet/adjudication-error.
type AdjudicationErrorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AdjudicationErrorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AdjudicationErrorCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdjudicationErrorCode) Reset() {
	*x = AdjudicationErrorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjudicationErrorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjudicationErrorCode) ProtoMessage() {}

func (x *AdjudicationErrorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjudicationErrorCode.ProtoReflect.Descriptor instead.
func (*AdjudicationErrorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{1}
}

func (x *AdjudicationErrorCode) GetValue() AdjudicationErrorCode_Value {
	if x != nil {
		return x.Value
	}
	return AdjudicationErrorCode_INVALID_UNINITIALIZED
}

func (x *AdjudicationErrorCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdjudicationErrorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The administrative gender.
// See http://hl7.org/fhir/ValueSet/administrative-gender.
type AdministrativeGenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AdministrativeGenderCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AdministrativeGenderCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AdministrativeGenderCode) Reset() {
	*x = AdministrativeGenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdministrativeGenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdministrativeGenderCode) ProtoMessage() {}

func (x *AdministrativeGenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdministrativeGenderCode.ProtoReflect.Descriptor instead.
func (*AdministrativeGenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{2}
}

func (x *AdministrativeGenderCode) GetValue() AdministrativeGenderCode_Value {
	if x != nil {
		return x.Value
	}
	return AdministrativeGenderCode_INVALID_UNINITIALIZED
}

func (x *AdministrativeGenderCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AdministrativeGenderCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The allergy intolerance category.
// See http://hl7.org/fhir/ValueSet/allergy-intolerance-category.
type AllergyIntoleranceCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AllergyIntoleranceCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AllergyIntoleranceCategoryCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceCategoryCode) Reset() {
	*x = AllergyIntoleranceCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCategoryCode) ProtoMessage() {}

func (x *AllergyIntoleranceCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCategoryCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{3}
}

func (x *AllergyIntoleranceCategoryCode) GetValue() AllergyIntoleranceCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceCategoryCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceCategoryCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The allergy intolerance criticality.
// See http://hl7.org/fhir/ValueSet/allergy-intolerance-criticality.
type AllergyIntoleranceCriticalityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AllergyIntoleranceCriticalityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AllergyIntoleranceCriticalityCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceCriticalityCode) Reset() {
	*x = AllergyIntoleranceCriticalityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCriticalityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCriticalityCode) ProtoMessage() {}

func (x *AllergyIntoleranceCriticalityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCriticalityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCriticalityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{4}
}

func (x *AllergyIntoleranceCriticalityCode) GetValue() AllergyIntoleranceCriticalityCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceCriticalityCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceCriticalityCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceCriticalityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The allergy intolerance status.
// See http://hl7.org/fhir/ValueSet/allergy-intolerance-status.
type AllergyIntoleranceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AllergyIntoleranceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AllergyIntoleranceStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceStatusCode) Reset() {
	*x = AllergyIntoleranceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceStatusCode) ProtoMessage() {}

func (x *AllergyIntoleranceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceStatusCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{5}
}

func (x *AllergyIntoleranceStatusCode) GetValue() AllergyIntoleranceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceStatusCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The allergy intolerance type.
// See http://hl7.org/fhir/ValueSet/allergy-intolerance-type.
type AllergyIntoleranceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AllergyIntoleranceTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AllergyIntoleranceTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceTypeCode) Reset() {
	*x = AllergyIntoleranceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceTypeCode) ProtoMessage() {}

func (x *AllergyIntoleranceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceTypeCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{6}
}

func (x *AllergyIntoleranceTypeCode) GetValue() AllergyIntoleranceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceTypeCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The answer format.
// See http://hl7.org/fhir/ValueSet/answer-format.
type AnswerFormatCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AnswerFormatCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AnswerFormatCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AnswerFormatCode) Reset() {
	*x = AnswerFormatCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerFormatCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerFormatCode) ProtoMessage() {}

func (x *AnswerFormatCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerFormatCode.ProtoReflect.Descriptor instead.
func (*AnswerFormatCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{7}
}

func (x *AnswerFormatCode) GetValue() AnswerFormatCode_Value {
	if x != nil {
		return x.Value
	}
	return AnswerFormatCode_INVALID_UNINITIALIZED
}

func (x *AnswerFormatCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AnswerFormatCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The appointmentstatus.
// See http://hl7.org/fhir/ValueSet/appointmentstatus.
type AppointmentStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AppointmentStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AppointmentStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AppointmentStatusCode) Reset() {
	*x = AppointmentStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentStatusCode) ProtoMessage() {}

func (x *AppointmentStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentStatusCode.ProtoReflect.Descriptor instead.
func (*AppointmentStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{8}
}

func (x *AppointmentStatusCode) GetValue() AppointmentStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return AppointmentStatusCode_INVALID_UNINITIALIZED
}

func (x *AppointmentStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AppointmentStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The assert direction codes.
// See http://hl7.org/fhir/ValueSet/assert-direction-codes.
type AssertionDirectionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AssertionDirectionTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AssertionDirectionTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AssertionDirectionTypeCode) Reset() {
	*x = AssertionDirectionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionDirectionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionDirectionTypeCode) ProtoMessage() {}

func (x *AssertionDirectionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionDirectionTypeCode.ProtoReflect.Descriptor instead.
func (*AssertionDirectionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{9}
}

func (x *AssertionDirectionTypeCode) GetValue() AssertionDirectionTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AssertionDirectionTypeCode_INVALID_UNINITIALIZED
}

func (x *AssertionDirectionTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssertionDirectionTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The assert operator codes.
// See http://hl7.org/fhir/ValueSet/assert-operator-codes.
type AssertionOperatorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AssertionOperatorTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AssertionOperatorTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AssertionOperatorTypeCode) Reset() {
	*x = AssertionOperatorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionOperatorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionOperatorTypeCode) ProtoMessage() {}

func (x *AssertionOperatorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionOperatorTypeCode.ProtoReflect.Descriptor instead.
func (*AssertionOperatorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{10}
}

func (x *AssertionOperatorTypeCode) GetValue() AssertionOperatorTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AssertionOperatorTypeCode_INVALID_UNINITIALIZED
}

func (x *AssertionOperatorTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssertionOperatorTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The assert response code types.
// See http://hl7.org/fhir/ValueSet/assert-response-code-types.
type AssertionResponseTypesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AssertionResponseTypesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AssertionResponseTypesCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AssertionResponseTypesCode) Reset() {
	*x = AssertionResponseTypesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionResponseTypesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionResponseTypesCode) ProtoMessage() {}

func (x *AssertionResponseTypesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionResponseTypesCode.ProtoReflect.Descriptor instead.
func (*AssertionResponseTypesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{11}
}

func (x *AssertionResponseTypesCode) GetValue() AssertionResponseTypesCode_Value {
	if x != nil {
		return x.Value
	}
	return AssertionResponseTypesCode_INVALID_UNINITIALIZED
}

func (x *AssertionResponseTypesCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AssertionResponseTypesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The audit event action.
// See http://hl7.org/fhir/ValueSet/audit-event-action.
type AuditEventActionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AuditEventActionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AuditEventActionCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AuditEventActionCode) Reset() {
	*x = AuditEventActionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventActionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventActionCode) ProtoMessage() {}

func (x *AuditEventActionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventActionCode.ProtoReflect.Descriptor instead.
func (*AuditEventActionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{12}
}

func (x *AuditEventActionCode) GetValue() AuditEventActionCode_Value {
	if x != nil {
		return x.Value
	}
	return AuditEventActionCode_INVALID_UNINITIALIZED
}

func (x *AuditEventActionCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventActionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The audit event outcome.
// See http://hl7.org/fhir/ValueSet/audit-event-outcome.
type AuditEventOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AuditEventOutcomeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AuditEventOutcomeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AuditEventOutcomeCode) Reset() {
	*x = AuditEventOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventOutcomeCode) ProtoMessage() {}

func (x *AuditEventOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventOutcomeCode.ProtoReflect.Descriptor instead.
func (*AuditEventOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{13}
}

func (x *AuditEventOutcomeCode) GetValue() AuditEventOutcomeCode_Value {
	if x != nil {
		return x.Value
	}
	return AuditEventOutcomeCode_INVALID_UNINITIALIZED
}

func (x *AuditEventOutcomeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventOutcomeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The binding strength.
// See http://hl7.org/fhir/ValueSet/binding-strength.
type BindingStrengthCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value BindingStrengthCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.BindingStrengthCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *BindingStrengthCode) Reset() {
	*x = BindingStrengthCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindingStrengthCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingStrengthCode) ProtoMessage() {}

func (x *BindingStrengthCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingStrengthCode.ProtoReflect.Descriptor instead.
func (*BindingStrengthCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{14}
}

func (x *BindingStrengthCode) GetValue() BindingStrengthCode_Value {
	if x != nil {
		return x.Value
	}
	return BindingStrengthCode_INVALID_UNINITIALIZED
}

func (x *BindingStrengthCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BindingStrengthCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The bundle type.
// See http://hl7.org/fhir/ValueSet/bundle-type.
type BundleTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value BundleTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.BundleTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *BundleTypeCode) Reset() {
	*x = BundleTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleTypeCode) ProtoMessage() {}

func (x *BundleTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleTypeCode.ProtoReflect.Descriptor instead.
func (*BundleTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{15}
}

func (x *BundleTypeCode) GetValue() BundleTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return BundleTypeCode_INVALID_UNINITIALIZED
}

func (x *BundleTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BundleTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The care plan activity status.
// See http://hl7.org/fhir/ValueSet/care-plan-activity-status.
type CarePlanActivityStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value CarePlanActivityStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.CarePlanActivityStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CarePlanActivityStatusCode) Reset() {
	*x = CarePlanActivityStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanActivityStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanActivityStatusCode) ProtoMessage() {}

func (x *CarePlanActivityStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanActivityStatusCode.ProtoReflect.Descriptor instead.
func (*CarePlanActivityStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{16}
}

func (x *CarePlanActivityStatusCode) GetValue() CarePlanActivityStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return CarePlanActivityStatusCode_INVALID_UNINITIALIZED
}

func (x *CarePlanActivityStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlanActivityStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The care plan relationship.
// See http://hl7.org/fhir/ValueSet/care-plan-relationship.
type CarePlanRelationshipCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value CarePlanRelationshipCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.CarePlanRelationshipCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CarePlanRelationshipCode) Reset() {
	*x = CarePlanRelationshipCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanRelationshipCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanRelationshipCode) ProtoMessage() {}

func (x *CarePlanRelationshipCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanRelationshipCode.ProtoReflect.Descriptor instead.
func (*CarePlanRelationshipCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{17}
}

func (x *CarePlanRelationshipCode) GetValue() CarePlanRelationshipCode_Value {
	if x != nil {
		return x.Value
	}
	return CarePlanRelationshipCode_INVALID_UNINITIALIZED
}

func (x *CarePlanRelationshipCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlanRelationshipCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The care plan status.
// See http://hl7.org/fhir/ValueSet/care-plan-status.
type CarePlanStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value CarePlanStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.CarePlanStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CarePlanStatusCode) Reset() {
	*x = CarePlanStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanStatusCode) ProtoMessage() {}

func (x *CarePlanStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanStatusCode.ProtoReflect.Descriptor instead.
func (*CarePlanStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{18}
}

func (x *CarePlanStatusCode) GetValue() CarePlanStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return CarePlanStatusCode_INVALID_UNINITIALIZED
}

func (x *CarePlanStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlanStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The claim type link.
// See http://hl7.org/fhir/ValueSet/claim-type-link.
type ClaimTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ClaimTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ClaimTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ClaimTypeCode) Reset() {
	*x = ClaimTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimTypeCode) ProtoMessage() {}

func (x *ClaimTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimTypeCode.ProtoReflect.Descriptor instead.
func (*ClaimTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{19}
}

func (x *ClaimTypeCode) GetValue() ClaimTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ClaimTypeCode_INVALID_UNINITIALIZED
}

func (x *ClaimTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The claim use link.
// See http://hl7.org/fhir/ValueSet/claim-use-link.
type UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value UseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.UseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UseCode) Reset() {
	*x = UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCode) ProtoMessage() {}

func (x *UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCode.ProtoReflect.Descriptor instead.
func (*UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{20}
}

func (x *UseCode) GetValue() UseCode_Value {
	if x != nil {
		return x.Value
	}
	return UseCode_INVALID_UNINITIALIZED
}

func (x *UseCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UseCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The clinical impression status.
// See http://hl7.org/fhir/ValueSet/clinical-impression-status.
type ClinicalImpressionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ClinicalImpressionStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ClinicalImpressionStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ClinicalImpressionStatusCode) Reset() {
	*x = ClinicalImpressionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalImpressionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalImpressionStatusCode) ProtoMessage() {}

func (x *ClinicalImpressionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalImpressionStatusCode.ProtoReflect.Descriptor instead.
func (*ClinicalImpressionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{21}
}

func (x *ClinicalImpressionStatusCode) GetValue() ClinicalImpressionStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ClinicalImpressionStatusCode_INVALID_UNINITIALIZED
}

func (x *ClinicalImpressionStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalImpressionStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The communication request status.
// See http://hl7.org/fhir/ValueSet/communication-request-status.
type CommunicationRequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value CommunicationRequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.CommunicationRequestStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CommunicationRequestStatusCode) Reset() {
	*x = CommunicationRequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequestStatusCode) ProtoMessage() {}

func (x *CommunicationRequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequestStatusCode.ProtoReflect.Descriptor instead.
func (*CommunicationRequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{22}
}

func (x *CommunicationRequestStatusCode) GetValue() CommunicationRequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return CommunicationRequestStatusCode_INVALID_UNINITIALIZED
}

func (x *CommunicationRequestStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationRequestStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The communication status.
// See http://hl7.org/fhir/ValueSet/communication-status.
type CommunicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value CommunicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.CommunicationStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CommunicationStatusCode) Reset() {
	*x = CommunicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationStatusCode) ProtoMessage() {}

func (x *CommunicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationStatusCode.ProtoReflect.Descriptor instead.
func (*CommunicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{23}
}

func (x *CommunicationStatusCode) GetValue() CommunicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return CommunicationStatusCode_INVALID_UNINITIALIZED
}

func (x *CommunicationStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The composition attestation mode.
// See http://hl7.org/fhir/ValueSet/composition-attestation-mode.
type CompositionAttestationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value CompositionAttestationModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.CompositionAttestationModeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CompositionAttestationModeCode) Reset() {
	*x = CompositionAttestationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositionAttestationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionAttestationModeCode) ProtoMessage() {}

func (x *CompositionAttestationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionAttestationModeCode.ProtoReflect.Descriptor instead.
func (*CompositionAttestationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{24}
}

func (x *CompositionAttestationModeCode) GetValue() CompositionAttestationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return CompositionAttestationModeCode_INVALID_UNINITIALIZED
}

func (x *CompositionAttestationModeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CompositionAttestationModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The composition status.
// See http://hl7.org/fhir/ValueSet/composition-status.
type CompositionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value CompositionStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.CompositionStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CompositionStatusCode) Reset() {
	*x = CompositionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionStatusCode) ProtoMessage() {}

func (x *CompositionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionStatusCode.ProtoReflect.Descriptor instead.
func (*CompositionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{25}
}

func (x *CompositionStatusCode) GetValue() CompositionStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return CompositionStatusCode_INVALID_UNINITIALIZED
}

func (x *CompositionStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CompositionStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The concept map equivalence.
// See http://hl7.org/fhir/ValueSet/concept-map-equivalence.
type ConceptMapEquivalenceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ConceptMapEquivalenceCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ConceptMapEquivalenceCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConceptMapEquivalenceCode) Reset() {
	*x = ConceptMapEquivalenceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapEquivalenceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapEquivalenceCode) ProtoMessage() {}

func (x *ConceptMapEquivalenceCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapEquivalenceCode.ProtoReflect.Descriptor instead.
func (*ConceptMapEquivalenceCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{26}
}

func (x *ConceptMapEquivalenceCode) GetValue() ConceptMapEquivalenceCode_Value {
	if x != nil {
		return x.Value
	}
	return ConceptMapEquivalenceCode_INVALID_UNINITIALIZED
}

func (x *ConceptMapEquivalenceCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConceptMapEquivalenceCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The condition ver status.
// See http://hl7.org/fhir/ValueSet/condition-ver-status.
type ConditionVerificationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ConditionVerificationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ConditionVerificationStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConditionVerificationStatusCode) Reset() {
	*x = ConditionVerificationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionVerificationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionVerificationStatusCode) ProtoMessage() {}

func (x *ConditionVerificationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionVerificationStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionVerificationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{27}
}

func (x *ConditionVerificationStatusCode) GetValue() ConditionVerificationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ConditionVerificationStatusCode_INVALID_UNINITIALIZED
}

func (x *ConditionVerificationStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionVerificationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The conditional delete status.
// See http://hl7.org/fhir/ValueSet/conditional-delete-status.
type ConditionalDeleteStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ConditionalDeleteStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ConditionalDeleteStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConditionalDeleteStatusCode) Reset() {
	*x = ConditionalDeleteStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalDeleteStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalDeleteStatusCode) ProtoMessage() {}

func (x *ConditionalDeleteStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalDeleteStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionalDeleteStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{28}
}

func (x *ConditionalDeleteStatusCode) GetValue() ConditionalDeleteStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ConditionalDeleteStatusCode_INVALID_UNINITIALIZED
}

func (x *ConditionalDeleteStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionalDeleteStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The conformance resource status.
// See http://hl7.org/fhir/ValueSet/conformance-resource-status.
type ConformanceResourceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ConformanceResourceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ConformanceResourceStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConformanceResourceStatusCode) Reset() {
	*x = ConformanceResourceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConformanceResourceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConformanceResourceStatusCode) ProtoMessage() {}

func (x *ConformanceResourceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConformanceResourceStatusCode.ProtoReflect.Descriptor instead.
func (*ConformanceResourceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{29}
}

func (x *ConformanceResourceStatusCode) GetValue() ConformanceResourceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ConformanceResourceStatusCode_INVALID_UNINITIALIZED
}

func (x *ConformanceResourceStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConformanceResourceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The conformance statement kind.
// See http://hl7.org/fhir/ValueSet/conformance-statement-kind.
type ConformanceStatementKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ConformanceStatementKindCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ConformanceStatementKindCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConformanceStatementKindCode) Reset() {
	*x = ConformanceStatementKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConformanceStatementKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConformanceStatementKindCode) ProtoMessage() {}

func (x *ConformanceStatementKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConformanceStatementKindCode.ProtoReflect.Descriptor instead.
func (*ConformanceStatementKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{30}
}

func (x *ConformanceStatementKindCode) GetValue() ConformanceStatementKindCode_Value {
	if x != nil {
		return x.Value
	}
	return ConformanceStatementKindCode_INVALID_UNINITIALIZED
}

func (x *ConformanceStatementKindCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConformanceStatementKindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The constraint severity.
// See http://hl7.org/fhir/ValueSet/constraint-severity.
type ConstraintSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ConstraintSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ConstraintSeverityCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConstraintSeverityCode) Reset() {
	*x = ConstraintSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintSeverityCode) ProtoMessage() {}

func (x *ConstraintSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintSeverityCode.ProtoReflect.Descriptor instead.
func (*ConstraintSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{31}
}

func (x *ConstraintSeverityCode) GetValue() ConstraintSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return ConstraintSeverityCode_INVALID_UNINITIALIZED
}

func (x *ConstraintSeverityCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConstraintSeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The content type.
// See http://hl7.org/fhir/ValueSet/content-type.
type ContentTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ContentTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ContentTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContentTypeCode) Reset() {
	*x = ContentTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTypeCode) ProtoMessage() {}

func (x *ContentTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTypeCode.ProtoReflect.Descriptor instead.
func (*ContentTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{32}
}

func (x *ContentTypeCode) GetValue() ContentTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ContentTypeCode_INVALID_UNINITIALIZED
}

func (x *ContentTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContentTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The dataelement stringency.
// See http://hl7.org/fhir/ValueSet/dataelement-stringency.
type DataElementStringencyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DataElementStringencyCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DataElementStringencyCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DataElementStringencyCode) Reset() {
	*x = DataElementStringencyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementStringencyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementStringencyCode) ProtoMessage() {}

func (x *DataElementStringencyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementStringencyCode.ProtoReflect.Descriptor instead.
func (*DataElementStringencyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{33}
}

func (x *DataElementStringencyCode) GetValue() DataElementStringencyCode_Value {
	if x != nil {
		return x.Value
	}
	return DataElementStringencyCode_INVALID_UNINITIALIZED
}

func (x *DataElementStringencyCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementStringencyCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The days of week.
// See http://hl7.org/fhir/ValueSet/days-of-week.
type DaysOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DaysOfWeekCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DaysOfWeekCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DaysOfWeekCode) Reset() {
	*x = DaysOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaysOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaysOfWeekCode) ProtoMessage() {}

func (x *DaysOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaysOfWeekCode.ProtoReflect.Descriptor instead.
func (*DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{34}
}

func (x *DaysOfWeekCode) GetValue() DaysOfWeekCode_Value {
	if x != nil {
		return x.Value
	}
	return DaysOfWeekCode_INVALID_UNINITIALIZED
}

func (x *DaysOfWeekCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DaysOfWeekCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The detectedissue severity.
// See http://hl7.org/fhir/ValueSet/detectedissue-severity.
type DetectedIssueSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DetectedIssueSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DetectedIssueSeverityCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DetectedIssueSeverityCode) Reset() {
	*x = DetectedIssueSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectedIssueSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedIssueSeverityCode) ProtoMessage() {}

func (x *DetectedIssueSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedIssueSeverityCode.ProtoReflect.Descriptor instead.
func (*DetectedIssueSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{35}
}

func (x *DetectedIssueSeverityCode) GetValue() DetectedIssueSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return DetectedIssueSeverityCode_INVALID_UNINITIALIZED
}

func (x *DetectedIssueSeverityCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DetectedIssueSeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The device action.
// See http://hl7.org/fhir/ValueSet/device-action.
type DeviceActionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DeviceActionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DeviceActionCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceActionCode) Reset() {
	*x = DeviceActionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceActionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceActionCode) ProtoMessage() {}

func (x *DeviceActionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceActionCode.ProtoReflect.Descriptor instead.
func (*DeviceActionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{36}
}

func (x *DeviceActionCode) GetValue() DeviceActionCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceActionCode_INVALID_UNINITIALIZED
}

func (x *DeviceActionCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceActionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The device use request priority.
// See http://hl7.org/fhir/ValueSet/device-use-request-priority.
type DeviceUseRequestPriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DeviceUseRequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DeviceUseRequestPriorityCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceUseRequestPriorityCode) Reset() {
	*x = DeviceUseRequestPriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseRequestPriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseRequestPriorityCode) ProtoMessage() {}

func (x *DeviceUseRequestPriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseRequestPriorityCode.ProtoReflect.Descriptor instead.
func (*DeviceUseRequestPriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{37}
}

func (x *DeviceUseRequestPriorityCode) GetValue() DeviceUseRequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceUseRequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *DeviceUseRequestPriorityCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceUseRequestPriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The device use request status.
// See http://hl7.org/fhir/ValueSet/device-use-request-status.
type DeviceUseRequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DeviceUseRequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DeviceUseRequestStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceUseRequestStatusCode) Reset() {
	*x = DeviceUseRequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseRequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseRequestStatusCode) ProtoMessage() {}

func (x *DeviceUseRequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseRequestStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceUseRequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{38}
}

func (x *DeviceUseRequestStatusCode) GetValue() DeviceUseRequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceUseRequestStatusCode_INVALID_UNINITIALIZED
}

func (x *DeviceUseRequestStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceUseRequestStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The devicestatus.
// See http://hl7.org/fhir/ValueSet/devicestatus.
type DeviceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DeviceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DeviceStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceStatusCode) Reset() {
	*x = DeviceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatusCode) ProtoMessage() {}

func (x *DeviceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{39}
}

func (x *DeviceStatusCode) GetValue() DeviceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceStatusCode_INVALID_UNINITIALIZED
}

func (x *DeviceStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The diagnostic order priority.
// See http://hl7.org/fhir/ValueSet/diagnostic-order-priority.
type DiagnosticOrderPriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DiagnosticOrderPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DiagnosticOrderPriorityCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DiagnosticOrderPriorityCode) Reset() {
	*x = DiagnosticOrderPriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticOrderPriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticOrderPriorityCode) ProtoMessage() {}

func (x *DiagnosticOrderPriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticOrderPriorityCode.ProtoReflect.Descriptor instead.
func (*DiagnosticOrderPriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{40}
}

func (x *DiagnosticOrderPriorityCode) GetValue() DiagnosticOrderPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return DiagnosticOrderPriorityCode_INVALID_UNINITIALIZED
}

func (x *DiagnosticOrderPriorityCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticOrderPriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The diagnostic order status.
// See http://hl7.org/fhir/ValueSet/diagnostic-order-status.
type DiagnosticOrderStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DiagnosticOrderStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DiagnosticOrderStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DiagnosticOrderStatusCode) Reset() {
	*x = DiagnosticOrderStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticOrderStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticOrderStatusCode) ProtoMessage() {}

func (x *DiagnosticOrderStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticOrderStatusCode.ProtoReflect.Descriptor instead.
func (*DiagnosticOrderStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{41}
}

func (x *DiagnosticOrderStatusCode) GetValue() DiagnosticOrderStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DiagnosticOrderStatusCode_INVALID_UNINITIALIZED
}

func (x *DiagnosticOrderStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticOrderStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The diagnostic report status.
// See http://hl7.org/fhir/ValueSet/diagnostic-report-status.
type DiagnosticReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DiagnosticReportStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DiagnosticReportStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DiagnosticReportStatusCode) Reset() {
	*x = DiagnosticReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportStatusCode) ProtoMessage() {}

func (x *DiagnosticReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportStatusCode.ProtoReflect.Descriptor instead.
func (*DiagnosticReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{42}
}

func (x *DiagnosticReportStatusCode) GetValue() DiagnosticReportStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DiagnosticReportStatusCode_INVALID_UNINITIALIZED
}

func (x *DiagnosticReportStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The digital media type.
// See http://hl7.org/fhir/ValueSet/digital-media-type.
type DigitalMediaTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DigitalMediaTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DigitalMediaTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DigitalMediaTypeCode) Reset() {
	*x = DigitalMediaTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalMediaTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalMediaTypeCode) ProtoMessage() {}

func (x *DigitalMediaTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalMediaTypeCode.ProtoReflect.Descriptor instead.
func (*DigitalMediaTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{43}
}

func (x *DigitalMediaTypeCode) GetValue() DigitalMediaTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return DigitalMediaTypeCode_INVALID_UNINITIALIZED
}

func (x *DigitalMediaTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DigitalMediaTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The document mode.
// See http://hl7.org/fhir/ValueSet/document-mode.
type DocumentModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DocumentModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DocumentModeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DocumentModeCode) Reset() {
	*x = DocumentModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentModeCode) ProtoMessage() {}

func (x *DocumentModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentModeCode.ProtoReflect.Descriptor instead.
func (*DocumentModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{44}
}

func (x *DocumentModeCode) GetValue() DocumentModeCode_Value {
	if x != nil {
		return x.Value
	}
	return DocumentModeCode_INVALID_UNINITIALIZED
}

func (x *DocumentModeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The document reference status.
// See http://hl7.org/fhir/ValueSet/document-reference-status.
type DocumentReferenceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DocumentReferenceStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DocumentReferenceStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DocumentReferenceStatusCode) Reset() {
	*x = DocumentReferenceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentReferenceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentReferenceStatusCode) ProtoMessage() {}

func (x *DocumentReferenceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentReferenceStatusCode.ProtoReflect.Descriptor instead.
func (*DocumentReferenceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{45}
}

func (x *DocumentReferenceStatusCode) GetValue() DocumentReferenceStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DocumentReferenceStatusCode_INVALID_UNINITIALIZED
}

func (x *DocumentReferenceStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentReferenceStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The document relationship type.
// See http://hl7.org/fhir/ValueSet/document-relationship-type.
type DocumentRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DocumentRelationshipTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DocumentRelationshipTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DocumentRelationshipTypeCode) Reset() {
	*x = DocumentRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRelationshipTypeCode) ProtoMessage() {}

func (x *DocumentRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*DocumentRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{46}
}

func (x *DocumentRelationshipTypeCode) GetValue() DocumentRelationshipTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return DocumentRelationshipTypeCode_INVALID_UNINITIALIZED
}

func (x *DocumentRelationshipTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentRelationshipTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The encounter class.
// See http://hl7.org/fhir/ValueSet/encounter-class.
type EncounterClassCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value EncounterClassCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.EncounterClassCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EncounterClassCode) Reset() {
	*x = EncounterClassCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterClassCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterClassCode) ProtoMessage() {}

func (x *EncounterClassCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterClassCode.ProtoReflect.Descriptor instead.
func (*EncounterClassCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{47}
}

func (x *EncounterClassCode) GetValue() EncounterClassCode_Value {
	if x != nil {
		return x.Value
	}
	return EncounterClassCode_INVALID_UNINITIALIZED
}

func (x *EncounterClassCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterClassCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The encounter location status.
// See http://hl7.org/fhir/ValueSet/encounter-location-status.
type EncounterLocationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value EncounterLocationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.EncounterLocationStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EncounterLocationStatusCode) Reset() {
	*x = EncounterLocationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterLocationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterLocationStatusCode) ProtoMessage() {}

func (x *EncounterLocationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterLocationStatusCode.ProtoReflect.Descriptor instead.
func (*EncounterLocationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{48}
}

func (x *EncounterLocationStatusCode) GetValue() EncounterLocationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return EncounterLocationStatusCode_INVALID_UNINITIALIZED
}

func (x *EncounterLocationStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterLocationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The encounter participant type.
// See http://hl7.org/fhir/ValueSet/encounter-participant-type.
type ParticipantTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ParticipantTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ParticipantTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ParticipantTypeCode) Reset() {
	*x = ParticipantTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantTypeCode) ProtoMessage() {}

func (x *ParticipantTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantTypeCode.ProtoReflect.Descriptor instead.
func (*ParticipantTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{49}
}

func (x *ParticipantTypeCode) GetValue() ParticipantTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ParticipantTypeCode_INVALID_UNINITIALIZED
}

func (x *ParticipantTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParticipantTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The encounter state.
// See http://hl7.org/fhir/ValueSet/encounter-state.
type EncounterStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value EncounterStateCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.EncounterStateCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EncounterStateCode) Reset() {
	*x = EncounterStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterStateCode) ProtoMessage() {}

func (x *EncounterStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterStateCode.ProtoReflect.Descriptor instead.
func (*EncounterStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{50}
}

func (x *EncounterStateCode) GetValue() EncounterStateCode_Value {
	if x != nil {
		return x.Value
	}
	return EncounterStateCode_INVALID_UNINITIALIZED
}

func (x *EncounterStateCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterStateCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The episode of care status.
// See http://hl7.org/fhir/ValueSet/episode-of-care-status.
type EpisodeOfCareStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value EpisodeOfCareStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.EpisodeOfCareStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *EpisodeOfCareStatusCode) Reset() {
	*x = EpisodeOfCareStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOfCareStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOfCareStatusCode) ProtoMessage() {}

func (x *EpisodeOfCareStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOfCareStatusCode.ProtoReflect.Descriptor instead.
func (*EpisodeOfCareStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{51}
}

func (x *EpisodeOfCareStatusCode) GetValue() EpisodeOfCareStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return EpisodeOfCareStatusCode_INVALID_UNINITIALIZED
}

func (x *EpisodeOfCareStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeOfCareStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The extension context.
// See http://hl7.org/fhir/ValueSet/extension-context.
type ExtensionContextCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ExtensionContextCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ExtensionContextCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ExtensionContextCode) Reset() {
	*x = ExtensionContextCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionContextCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionContextCode) ProtoMessage() {}

func (x *ExtensionContextCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionContextCode.ProtoReflect.Descriptor instead.
func (*ExtensionContextCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{52}
}

func (x *ExtensionContextCode) GetValue() ExtensionContextCode_Value {
	if x != nil {
		return x.Value
	}
	return ExtensionContextCode_INVALID_UNINITIALIZED
}

func (x *ExtensionContextCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExtensionContextCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The filter operator.
// See http://hl7.org/fhir/ValueSet/filter-operator.
type FilterOperatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value FilterOperatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.FilterOperatorCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FilterOperatorCode) Reset() {
	*x = FilterOperatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterOperatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOperatorCode) ProtoMessage() {}

func (x *FilterOperatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOperatorCode.ProtoReflect.Descriptor instead.
func (*FilterOperatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{53}
}

func (x *FilterOperatorCode) GetValue() FilterOperatorCode_Value {
	if x != nil {
		return x.Value
	}
	return FilterOperatorCode_INVALID_UNINITIALIZED
}

func (x *FilterOperatorCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FilterOperatorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The flag status.
// See http://hl7.org/fhir/ValueSet/flag-status.
type FlagStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value FlagStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.FlagStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FlagStatusCode) Reset() {
	*x = FlagStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagStatusCode) ProtoMessage() {}

func (x *FlagStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagStatusCode.ProtoReflect.Descriptor instead.
func (*FlagStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{54}
}

func (x *FlagStatusCode) GetValue() FlagStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return FlagStatusCode_INVALID_UNINITIALIZED
}

func (x *FlagStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlagStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The forms.
// See http://hl7.org/fhir/ValueSet/forms.
type FormsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value FormsCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.FormsCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FormsCode) Reset() {
	*x = FormsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormsCode) ProtoMessage() {}

func (x *FormsCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormsCode.ProtoReflect.Descriptor instead.
func (*FormsCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{55}
}

func (x *FormsCode) GetValue() FormsCode_Value {
	if x != nil {
		return x.Value
	}
	return FormsCode_INVALID_UNINITIALIZED
}

func (x *FormsCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FormsCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The goal status.
// See http://hl7.org/fhir/ValueSet/goal-status.
type GoalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value GoalStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.GoalStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GoalStatusCode) Reset() {
	*x = GoalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalStatusCode) ProtoMessage() {}

func (x *GoalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalStatusCode.ProtoReflect.Descriptor instead.
func (*GoalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{56}
}

func (x *GoalStatusCode) GetValue() GoalStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return GoalStatusCode_INVALID_UNINITIALIZED
}

func (x *GoalStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The group type.
// See http://hl7.org/fhir/ValueSet/group-type.
type GroupTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value GroupTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.GroupTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GroupTypeCode) Reset() {
	*x = GroupTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTypeCode) ProtoMessage() {}

func (x *GroupTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTypeCode.ProtoReflect.Descriptor instead.
func (*GroupTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{57}
}

func (x *GroupTypeCode) GetValue() GroupTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return GroupTypeCode_INVALID_UNINITIALIZED
}

func (x *GroupTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GroupTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The guide dependency type.
// See http://hl7.org/fhir/ValueSet/guide-dependency-type.
type GuideDependencyTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value GuideDependencyTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.GuideDependencyTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GuideDependencyTypeCode) Reset() {
	*x = GuideDependencyTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideDependencyTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideDependencyTypeCode) ProtoMessage() {}

func (x *GuideDependencyTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideDependencyTypeCode.ProtoReflect.Descriptor instead.
func (*GuideDependencyTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{58}
}

func (x *GuideDependencyTypeCode) GetValue() GuideDependencyTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return GuideDependencyTypeCode_INVALID_UNINITIALIZED
}

func (x *GuideDependencyTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GuideDependencyTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The guide page kind.
// See http://hl7.org/fhir/ValueSet/guide-page-kind.
type GuidePageKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value GuidePageKindCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.GuidePageKindCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GuidePageKindCode) Reset() {
	*x = GuidePageKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidePageKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidePageKindCode) ProtoMessage() {}

func (x *GuidePageKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidePageKindCode.ProtoReflect.Descriptor instead.
func (*GuidePageKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{59}
}

func (x *GuidePageKindCode) GetValue() GuidePageKindCode_Value {
	if x != nil {
		return x.Value
	}
	return GuidePageKindCode_INVALID_UNINITIALIZED
}

func (x *GuidePageKindCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GuidePageKindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The guide resource purpose.
// See http://hl7.org/fhir/ValueSet/guide-resource-purpose.
type GuideResourcePurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value GuideResourcePurposeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.GuideResourcePurposeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *GuideResourcePurposeCode) Reset() {
	*x = GuideResourcePurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideResourcePurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideResourcePurposeCode) ProtoMessage() {}

func (x *GuideResourcePurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideResourcePurposeCode.ProtoReflect.Descriptor instead.
func (*GuideResourcePurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{60}
}

func (x *GuideResourcePurposeCode) GetValue() GuideResourcePurposeCode_Value {
	if x != nil {
		return x.Value
	}
	return GuideResourcePurposeCode_INVALID_UNINITIALIZED
}

func (x *GuideResourcePurposeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GuideResourcePurposeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The history status.
// See http://hl7.org/fhir/ValueSet/history-status.
type FamilyHistoryStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value FamilyHistoryStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.FamilyHistoryStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FamilyHistoryStatusCode) Reset() {
	*x = FamilyHistoryStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyHistoryStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyHistoryStatusCode) ProtoMessage() {}

func (x *FamilyHistoryStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyHistoryStatusCode.ProtoReflect.Descriptor instead.
func (*FamilyHistoryStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{61}
}

func (x *FamilyHistoryStatusCode) GetValue() FamilyHistoryStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return FamilyHistoryStatusCode_INVALID_UNINITIALIZED
}

func (x *FamilyHistoryStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyHistoryStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The http verb.
// See http://hl7.org/fhir/ValueSet/http-verb.
type HTTPVerbCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value HTTPVerbCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.HTTPVerbCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *HTTPVerbCode) Reset() {
	*x = HTTPVerbCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPVerbCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPVerbCode) ProtoMessage() {}

func (x *HTTPVerbCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPVerbCode.ProtoReflect.Descriptor instead.
func (*HTTPVerbCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{62}
}

func (x *HTTPVerbCode) GetValue() HTTPVerbCode_Value {
	if x != nil {
		return x.Value
	}
	return HTTPVerbCode_INVALID_UNINITIALIZED
}

func (x *HTTPVerbCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HTTPVerbCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The identity assuranceLevel.
// See http://hl7.org/fhir/ValueSet/identity-assuranceLevel.
type IdentityAssuranceLevelCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value IdentityAssuranceLevelCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.IdentityAssuranceLevelCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *IdentityAssuranceLevelCode) Reset() {
	*x = IdentityAssuranceLevelCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityAssuranceLevelCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityAssuranceLevelCode) ProtoMessage() {}

func (x *IdentityAssuranceLevelCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityAssuranceLevelCode.ProtoReflect.Descriptor instead.
func (*IdentityAssuranceLevelCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{63}
}

func (x *IdentityAssuranceLevelCode) GetValue() IdentityAssuranceLevelCode_Value {
	if x != nil {
		return x.Value
	}
	return IdentityAssuranceLevelCode_INVALID_UNINITIALIZED
}

func (x *IdentityAssuranceLevelCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IdentityAssuranceLevelCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The issue severity.
// See http://hl7.org/fhir/ValueSet/issue-severity.
type IssueSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value IssueSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.IssueSeverityCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *IssueSeverityCode) Reset() {
	*x = IssueSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSeverityCode) ProtoMessage() {}

func (x *IssueSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSeverityCode.ProtoReflect.Descriptor instead.
func (*IssueSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{64}
}

func (x *IssueSeverityCode) GetValue() IssueSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return IssueSeverityCode_INVALID_UNINITIALIZED
}

func (x *IssueSeverityCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IssueSeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The issue type.
// See http://hl7.org/fhir/ValueSet/issue-type.
type IssueTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value IssueTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.IssueTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *IssueTypeCode) Reset() {
	*x = IssueTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTypeCode) ProtoMessage() {}

func (x *IssueTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTypeCode.ProtoReflect.Descriptor instead.
func (*IssueTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{65}
}

func (x *IssueTypeCode) GetValue() IssueTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return IssueTypeCode_INVALID_UNINITIALIZED
}

func (x *IssueTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IssueTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The link type.
// See http://hl7.org/fhir/ValueSet/link-type.
type LinkTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value LinkTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.LinkTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LinkTypeCode) Reset() {
	*x = LinkTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkTypeCode) ProtoMessage() {}

func (x *LinkTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkTypeCode.ProtoReflect.Descriptor instead.
func (*LinkTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{66}
}

func (x *LinkTypeCode) GetValue() LinkTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return LinkTypeCode_INVALID_UNINITIALIZED
}

func (x *LinkTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LinkTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The list mode.
// See http://hl7.org/fhir/ValueSet/list-mode.
type ListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ListModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ListModeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ListModeCode) Reset() {
	*x = ListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModeCode) ProtoMessage() {}

func (x *ListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModeCode.ProtoReflect.Descriptor instead.
func (*ListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{67}
}

func (x *ListModeCode) GetValue() ListModeCode_Value {
	if x != nil {
		return x.Value
	}
	return ListModeCode_INVALID_UNINITIALIZED
}

func (x *ListModeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The list status.
// See http://hl7.org/fhir/ValueSet/list-status.
type ListStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ListStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ListStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ListStatusCode) Reset() {
	*x = ListStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusCode) ProtoMessage() {}

func (x *ListStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusCode.ProtoReflect.Descriptor instead.
func (*ListStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{68}
}

func (x *ListStatusCode) GetValue() ListStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ListStatusCode_INVALID_UNINITIALIZED
}

func (x *ListStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The location mode.
// See http://hl7.org/fhir/ValueSet/location-mode.
type LocationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value LocationModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.LocationModeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LocationModeCode) Reset() {
	*x = LocationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationModeCode) ProtoMessage() {}

func (x *LocationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationModeCode.ProtoReflect.Descriptor instead.
func (*LocationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{69}
}

func (x *LocationModeCode) GetValue() LocationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return LocationModeCode_INVALID_UNINITIALIZED
}

func (x *LocationModeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LocationModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The location status.
// See http://hl7.org/fhir/ValueSet/location-status.
type LocationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value LocationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.LocationStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *LocationStatusCode) Reset() {
	*x = LocationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationStatusCode) ProtoMessage() {}

func (x *LocationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationStatusCode.ProtoReflect.Descriptor instead.
func (*LocationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{70}
}

func (x *LocationStatusCode) GetValue() LocationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return LocationStatusCode_INVALID_UNINITIALIZED
}

func (x *LocationStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LocationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The marital status.
// See http://hl7.org/fhir/ValueSet/marital-status.
type MaritalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value MaritalStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.MaritalStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MaritalStatusCode) Reset() {
	*x = MaritalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaritalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaritalStatusCode) ProtoMessage() {}

func (x *MaritalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaritalStatusCode.ProtoReflect.Descriptor instead.
func (*MaritalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{71}
}

func (x *MaritalStatusCode) GetValue() MaritalStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MaritalStatusCode_INVALID_UNINITIALIZED
}

func (x *MaritalStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MaritalStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The measurement principle.
// See http://hl7.org/fhir/ValueSet/measurement-principle.
type MeasmntPrincipleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value MeasmntPrincipleCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.MeasmntPrincipleCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MeasmntPrincipleCode) Reset() {
	*x = MeasmntPrincipleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasmntPrincipleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasmntPrincipleCode) ProtoMessage() {}

func (x *MeasmntPrincipleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasmntPrincipleCode.ProtoReflect.Descriptor instead.
func (*MeasmntPrincipleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{72}
}

func (x *MeasmntPrincipleCode) GetValue() MeasmntPrincipleCode_Value {
	if x != nil {
		return x.Value
	}
	return MeasmntPrincipleCode_INVALID_UNINITIALIZED
}

func (x *MeasmntPrincipleCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasmntPrincipleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The medication admin status.
// See http://hl7.org/fhir/ValueSet/medication-admin-status.
type MedicationAdministrationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value MedicationAdministrationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.MedicationAdministrationStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationAdministrationStatusCode) Reset() {
	*x = MedicationAdministrationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministrationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministrationStatusCode) ProtoMessage() {}

func (x *MedicationAdministrationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministrationStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationAdministrationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{73}
}

func (x *MedicationAdministrationStatusCode) GetValue() MedicationAdministrationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationAdministrationStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationAdministrationStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationAdministrationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The medication dispense status.
// See http://hl7.org/fhir/ValueSet/medication-dispense-status.
type MedicationDispenseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value MedicationDispenseStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.MedicationDispenseStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationDispenseStatusCode) Reset() {
	*x = MedicationDispenseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispenseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispenseStatusCode) ProtoMessage() {}

func (x *MedicationDispenseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispenseStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationDispenseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{74}
}

func (x *MedicationDispenseStatusCode) GetValue() MedicationDispenseStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationDispenseStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationDispenseStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispenseStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The medication order status.
// See http://hl7.org/fhir/ValueSet/medication-order-status.
type MedicationOrderStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value MedicationOrderStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.MedicationOrderStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationOrderStatusCode) Reset() {
	*x = MedicationOrderStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrderStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrderStatusCode) ProtoMessage() {}

func (x *MedicationOrderStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrderStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationOrderStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{75}
}

func (x *MedicationOrderStatusCode) GetValue() MedicationOrderStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationOrderStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationOrderStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationOrderStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The medication statement status.
// See http://hl7.org/fhir/ValueSet/medication-statement-status.
type MedicationStatementStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value MedicationStatementStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.MedicationStatementStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MedicationStatementStatusCode) Reset() {
	*x = MedicationStatementStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatementStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatementStatusCode) ProtoMessage() {}

func (x *MedicationStatementStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatementStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationStatementStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{76}
}

func (x *MedicationStatementStatusCode) GetValue() MedicationStatementStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return MedicationStatementStatusCode_INVALID_UNINITIALIZED
}

func (x *MedicationStatementStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationStatementStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The message conformance event mode.
// See http://hl7.org/fhir/ValueSet/message-conformance-event-mode.
type ConformanceEventModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ConformanceEventModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ConformanceEventModeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConformanceEventModeCode) Reset() {
	*x = ConformanceEventModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConformanceEventModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConformanceEventModeCode) ProtoMessage() {}

func (x *ConformanceEventModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConformanceEventModeCode.ProtoReflect.Descriptor instead.
func (*ConformanceEventModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{77}
}

func (x *ConformanceEventModeCode) GetValue() ConformanceEventModeCode_Value {
	if x != nil {
		return x.Value
	}
	return ConformanceEventModeCode_INVALID_UNINITIALIZED
}

func (x *ConformanceEventModeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConformanceEventModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The message significance category.
// See http://hl7.org/fhir/ValueSet/message-significance-category.
type MessageSignificanceCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value MessageSignificanceCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.MessageSignificanceCategoryCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MessageSignificanceCategoryCode) Reset() {
	*x = MessageSignificanceCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSignificanceCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSignificanceCategoryCode) ProtoMessage() {}

func (x *MessageSignificanceCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSignificanceCategoryCode.ProtoReflect.Descriptor instead.
func (*MessageSignificanceCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{78}
}

func (x *MessageSignificanceCategoryCode) GetValue() MessageSignificanceCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return MessageSignificanceCategoryCode_INVALID_UNINITIALIZED
}

func (x *MessageSignificanceCategoryCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageSignificanceCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The metric calibration state.
// See http://hl7.org/fhir/ValueSet/metric-calibration-state.
type DeviceMetricCalibrationStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DeviceMetricCalibrationStateCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DeviceMetricCalibrationStateCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricCalibrationStateCode) Reset() {
	*x = DeviceMetricCalibrationStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCalibrationStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCalibrationStateCode) ProtoMessage() {}

func (x *DeviceMetricCalibrationStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCalibrationStateCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCalibrationStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{79}
}

func (x *DeviceMetricCalibrationStateCode) GetValue() DeviceMetricCalibrationStateCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricCalibrationStateCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricCalibrationStateCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricCalibrationStateCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The metric calibration type.
// See http://hl7.org/fhir/ValueSet/metric-calibration-type.
type DeviceMetricCalibrationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DeviceMetricCalibrationTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DeviceMetricCalibrationTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricCalibrationTypeCode) Reset() {
	*x = DeviceMetricCalibrationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCalibrationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCalibrationTypeCode) ProtoMessage() {}

func (x *DeviceMetricCalibrationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCalibrationTypeCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCalibrationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{80}
}

func (x *DeviceMetricCalibrationTypeCode) GetValue() DeviceMetricCalibrationTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricCalibrationTypeCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricCalibrationTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricCalibrationTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The metric category.
// See http://hl7.org/fhir/ValueSet/metric-category.
type DeviceMetricCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DeviceMetricCategoryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DeviceMetricCategoryCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricCategoryCode) Reset() {
	*x = DeviceMetricCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCategoryCode) ProtoMessage() {}

func (x *DeviceMetricCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCategoryCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{81}
}

func (x *DeviceMetricCategoryCode) GetValue() DeviceMetricCategoryCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricCategoryCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricCategoryCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricCategoryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The metric color.
// See http://hl7.org/fhir/ValueSet/metric-color.
type DeviceMetricColorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DeviceMetricColorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DeviceMetricColorCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricColorCode) Reset() {
	*x = DeviceMetricColorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricColorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricColorCode) ProtoMessage() {}

func (x *DeviceMetricColorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricColorCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricColorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{82}
}

func (x *DeviceMetricColorCode) GetValue() DeviceMetricColorCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricColorCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricColorCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricColorCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The metric operational status.
// See http://hl7.org/fhir/ValueSet/metric-operational-status.
type DeviceMetricOperationalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DeviceMetricOperationalStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.DeviceMetricOperationalStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DeviceMetricOperationalStatusCode) Reset() {
	*x = DeviceMetricOperationalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricOperationalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricOperationalStatusCode) ProtoMessage() {}

func (x *DeviceMetricOperationalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricOperationalStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricOperationalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{83}
}

func (x *DeviceMetricOperationalStatusCode) GetValue() DeviceMetricOperationalStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return DeviceMetricOperationalStatusCode_INVALID_UNINITIALIZED
}

func (x *DeviceMetricOperationalStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetricOperationalStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The namingsystem identifier type.
// See http://hl7.org/fhir/ValueSet/namingsystem-identifier-type.
type NamingSystemIdentifierTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value NamingSystemIdentifierTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.NamingSystemIdentifierTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NamingSystemIdentifierTypeCode) Reset() {
	*x = NamingSystemIdentifierTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystemIdentifierTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystemIdentifierTypeCode) ProtoMessage() {}

func (x *NamingSystemIdentifierTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystemIdentifierTypeCode.ProtoReflect.Descriptor instead.
func (*NamingSystemIdentifierTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{84}
}

func (x *NamingSystemIdentifierTypeCode) GetValue() NamingSystemIdentifierTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return NamingSystemIdentifierTypeCode_INVALID_UNINITIALIZED
}

func (x *NamingSystemIdentifierTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamingSystemIdentifierTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The namingsystem type.
// See http://hl7.org/fhir/ValueSet/namingsystem-type.
type NamingSystemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value NamingSystemTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.NamingSystemTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NamingSystemTypeCode) Reset() {
	*x = NamingSystemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystemTypeCode) ProtoMessage() {}

func (x *NamingSystemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystemTypeCode.ProtoReflect.Descriptor instead.
func (*NamingSystemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{85}
}

func (x *NamingSystemTypeCode) GetValue() NamingSystemTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return NamingSystemTypeCode_INVALID_UNINITIALIZED
}

func (x *NamingSystemTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamingSystemTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The narrative status.
// See http://hl7.org/fhir/ValueSet/narrative-status.
type NarrativeStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value NarrativeStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.NarrativeStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NarrativeStatusCode) Reset() {
	*x = NarrativeStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NarrativeStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NarrativeStatusCode) ProtoMessage() {}

func (x *NarrativeStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NarrativeStatusCode.ProtoReflect.Descriptor instead.
func (*NarrativeStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{86}
}

func (x *NarrativeStatusCode) GetValue() NarrativeStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return NarrativeStatusCode_INVALID_UNINITIALIZED
}

func (x *NarrativeStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NarrativeStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The network type.
// See http://hl7.org/fhir/ValueSet/network-type.
type AuditEventAgentNetworkTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AuditEventAgentNetworkTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AuditEventAgentNetworkTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AuditEventAgentNetworkTypeCode) Reset() {
	*x = AuditEventAgentNetworkTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventAgentNetworkTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventAgentNetworkTypeCode) ProtoMessage() {}

func (x *AuditEventAgentNetworkTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventAgentNetworkTypeCode.ProtoReflect.Descriptor instead.
func (*AuditEventAgentNetworkTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{87}
}

func (x *AuditEventAgentNetworkTypeCode) GetValue() AuditEventAgentNetworkTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return AuditEventAgentNetworkTypeCode_INVALID_UNINITIALIZED
}

func (x *AuditEventAgentNetworkTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventAgentNetworkTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The note type.
// See http://hl7.org/fhir/ValueSet/note-type.
type NoteTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value NoteTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.NoteTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NoteTypeCode) Reset() {
	*x = NoteTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTypeCode) ProtoMessage() {}

func (x *NoteTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTypeCode.ProtoReflect.Descriptor instead.
func (*NoteTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{88}
}

func (x *NoteTypeCode) GetValue() NoteTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return NoteTypeCode_INVALID_UNINITIALIZED
}

func (x *NoteTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NoteTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The nutrition order status.
// See http://hl7.org/fhir/ValueSet/nutrition-order-status.
type NutritionOrderStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value NutritionOrderStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.NutritionOrderStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *NutritionOrderStatusCode) Reset() {
	*x = NutritionOrderStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrderStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrderStatusCode) ProtoMessage() {}

func (x *NutritionOrderStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrderStatusCode.ProtoReflect.Descriptor instead.
func (*NutritionOrderStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{89}
}

func (x *NutritionOrderStatusCode) GetValue() NutritionOrderStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return NutritionOrderStatusCode_INVALID_UNINITIALIZED
}

func (x *NutritionOrderStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrderStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The observation relationshiptypes.
// See http://hl7.org/fhir/ValueSet/observation-relationshiptypes.
type ObservationRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ObservationRelationshipTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ObservationRelationshipTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ObservationRelationshipTypeCode) Reset() {
	*x = ObservationRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRelationshipTypeCode) ProtoMessage() {}

func (x *ObservationRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*ObservationRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{90}
}

func (x *ObservationRelationshipTypeCode) GetValue() ObservationRelationshipTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ObservationRelationshipTypeCode_INVALID_UNINITIALIZED
}

func (x *ObservationRelationshipTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationRelationshipTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The observation status.
// See http://hl7.org/fhir/ValueSet/observation-status.
type ObservationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ObservationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ObservationStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ObservationStatusCode) Reset() {
	*x = ObservationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationStatusCode) ProtoMessage() {}

func (x *ObservationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationStatusCode.ProtoReflect.Descriptor instead.
func (*ObservationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{91}
}

func (x *ObservationStatusCode) GetValue() ObservationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ObservationStatusCode_INVALID_UNINITIALIZED
}

func (x *ObservationStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The operation kind.
// See http://hl7.org/fhir/ValueSet/operation-kind.
type OperationKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value OperationKindCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.OperationKindCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *OperationKindCode) Reset() {
	*x = OperationKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationKindCode) ProtoMessage() {}

func (x *OperationKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationKindCode.ProtoReflect.Descriptor instead.
func (*OperationKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{92}
}

func (x *OperationKindCode) GetValue() OperationKindCode_Value {
	if x != nil {
		return x.Value
	}
	return OperationKindCode_INVALID_UNINITIALIZED
}

func (x *OperationKindCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationKindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The operation parameter use.
// See http://hl7.org/fhir/ValueSet/operation-parameter-use.
type OperationParameterUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value OperationParameterUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.OperationParameterUseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *OperationParameterUseCode) Reset() {
	*x = OperationParameterUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationParameterUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationParameterUseCode) ProtoMessage() {}

func (x *OperationParameterUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationParameterUseCode.ProtoReflect.Descriptor instead.
func (*OperationParameterUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{93}
}

func (x *OperationParameterUseCode) GetValue() OperationParameterUseCode_Value {
	if x != nil {
		return x.Value
	}
	return OperationParameterUseCode_INVALID_UNINITIALIZED
}

func (x *OperationParameterUseCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationParameterUseCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The order status.
// See http://hl7.org/fhir/ValueSet/order-status.
type OrderStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value OrderStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.OrderStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *OrderStatusCode) Reset() {
	*x = OrderStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusCode) ProtoMessage() {}

func (x *OrderStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusCode.ProtoReflect.Descriptor instead.
func (*OrderStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{94}
}

func (x *OrderStatusCode) GetValue() OrderStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return OrderStatusCode_INVALID_UNINITIALIZED
}

func (x *OrderStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OrderStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The participantrequired.
// See http://hl7.org/fhir/ValueSet/participantrequired.
type ParticipantRequiredCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ParticipantRequiredCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ParticipantRequiredCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ParticipantRequiredCode) Reset() {
	*x = ParticipantRequiredCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantRequiredCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantRequiredCode) ProtoMessage() {}

func (x *ParticipantRequiredCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantRequiredCode.ProtoReflect.Descriptor instead.
func (*ParticipantRequiredCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{95}
}

func (x *ParticipantRequiredCode) GetValue() ParticipantRequiredCode_Value {
	if x != nil {
		return x.Value
	}
	return ParticipantRequiredCode_INVALID_UNINITIALIZED
}

func (x *ParticipantRequiredCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParticipantRequiredCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The participantstatus.
// See http://hl7.org/fhir/ValueSet/participantstatus.
type ParticipantStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ParticipantStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ParticipantStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ParticipantStatusCode) Reset() {
	*x = ParticipantStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantStatusCode) ProtoMessage() {}

func (x *ParticipantStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantStatusCode.ProtoReflect.Descriptor instead.
func (*ParticipantStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{96}
}

func (x *ParticipantStatusCode) GetValue() ParticipantStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ParticipantStatusCode_INVALID_UNINITIALIZED
}

func (x *ParticipantStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParticipantStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The participationstatus.
// See http://hl7.org/fhir/ValueSet/participationstatus.
type ParticipationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ParticipationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ParticipationStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ParticipationStatusCode) Reset() {
	*x = ParticipationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipationStatusCode) ProtoMessage() {}

func (x *ParticipationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipationStatusCode.ProtoReflect.Descriptor instead.
func (*ParticipationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{97}
}

func (x *ParticipationStatusCode) GetValue() ParticipationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ParticipationStatusCode_INVALID_UNINITIALIZED
}

func (x *ParticipationStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParticipationStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The procedure request priority.
// See http://hl7.org/fhir/ValueSet/procedure-request-priority.
type ProcedureRequestPriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ProcedureRequestPriorityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ProcedureRequestPriorityCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProcedureRequestPriorityCode) Reset() {
	*x = ProcedureRequestPriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequestPriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequestPriorityCode) ProtoMessage() {}

func (x *ProcedureRequestPriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequestPriorityCode.ProtoReflect.Descriptor instead.
func (*ProcedureRequestPriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{98}
}

func (x *ProcedureRequestPriorityCode) GetValue() ProcedureRequestPriorityCode_Value {
	if x != nil {
		return x.Value
	}
	return ProcedureRequestPriorityCode_INVALID_UNINITIALIZED
}

func (x *ProcedureRequestPriorityCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequestPriorityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The procedure request status.
// See http://hl7.org/fhir/ValueSet/procedure-request-status.
type ProcedureRequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ProcedureRequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ProcedureRequestStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProcedureRequestStatusCode) Reset() {
	*x = ProcedureRequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequestStatusCode) ProtoMessage() {}

func (x *ProcedureRequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequestStatusCode.ProtoReflect.Descriptor instead.
func (*ProcedureRequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{99}
}

func (x *ProcedureRequestStatusCode) GetValue() ProcedureRequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ProcedureRequestStatusCode_INVALID_UNINITIALIZED
}

func (x *ProcedureRequestStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequestStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The procedure status.
// See http://hl7.org/fhir/ValueSet/procedure-status.
type ProcedureStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ProcedureStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ProcedureStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProcedureStatusCode) Reset() {
	*x = ProcedureStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureStatusCode) ProtoMessage() {}

func (x *ProcedureStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureStatusCode.ProtoReflect.Descriptor instead.
func (*ProcedureStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{100}
}

func (x *ProcedureStatusCode) GetValue() ProcedureStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ProcedureStatusCode_INVALID_UNINITIALIZED
}

func (x *ProcedureStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The property representation.
// See http://hl7.org/fhir/ValueSet/property-representation.
type PropertyRepresentationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value PropertyRepresentationCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.PropertyRepresentationCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PropertyRepresentationCode) Reset() {
	*x = PropertyRepresentationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyRepresentationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyRepresentationCode) ProtoMessage() {}

func (x *PropertyRepresentationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyRepresentationCode.ProtoReflect.Descriptor instead.
func (*PropertyRepresentationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{101}
}

func (x *PropertyRepresentationCode) GetValue() PropertyRepresentationCode_Value {
	if x != nil {
		return x.Value
	}
	return PropertyRepresentationCode_INVALID_UNINITIALIZED
}

func (x *PropertyRepresentationCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PropertyRepresentationCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The provenance entity role.
// See http://hl7.org/fhir/ValueSet/provenance-entity-role.
type ProvenanceEntityRoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ProvenanceEntityRoleCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ProvenanceEntityRoleCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProvenanceEntityRoleCode) Reset() {
	*x = ProvenanceEntityRoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvenanceEntityRoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceEntityRoleCode) ProtoMessage() {}

func (x *ProvenanceEntityRoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceEntityRoleCode.ProtoReflect.Descriptor instead.
func (*ProvenanceEntityRoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{102}
}

func (x *ProvenanceEntityRoleCode) GetValue() ProvenanceEntityRoleCode_Value {
	if x != nil {
		return x.Value
	}
	return ProvenanceEntityRoleCode_INVALID_UNINITIALIZED
}

func (x *ProvenanceEntityRoleCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProvenanceEntityRoleCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The questionnaire answers status.
// See http://hl7.org/fhir/ValueSet/questionnaire-answers-status.
type QuestionnaireResponseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value QuestionnaireResponseStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.QuestionnaireResponseStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QuestionnaireResponseStatusCode) Reset() {
	*x = QuestionnaireResponseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseStatusCode) ProtoMessage() {}

func (x *QuestionnaireResponseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseStatusCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{103}
}

func (x *QuestionnaireResponseStatusCode) GetValue() QuestionnaireResponseStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return QuestionnaireResponseStatusCode_INVALID_UNINITIALIZED
}

func (x *QuestionnaireResponseStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponseStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The questionnaire status.
// See http://hl7.org/fhir/ValueSet/questionnaire-status.
type QuestionnaireStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value QuestionnaireStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.QuestionnaireStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *QuestionnaireStatusCode) Reset() {
	*x = QuestionnaireStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireStatusCode) ProtoMessage() {}

func (x *QuestionnaireStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireStatusCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{104}
}

func (x *QuestionnaireStatusCode) GetValue() QuestionnaireStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return QuestionnaireStatusCode_INVALID_UNINITIALIZED
}

func (x *QuestionnaireStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The reaction event certainty.
// See http://hl7.org/fhir/ValueSet/reaction-event-certainty.
type AllergyIntoleranceCertaintyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AllergyIntoleranceCertaintyCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AllergyIntoleranceCertaintyCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceCertaintyCode) Reset() {
	*x = AllergyIntoleranceCertaintyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCertaintyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCertaintyCode) ProtoMessage() {}

func (x *AllergyIntoleranceCertaintyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCertaintyCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCertaintyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{105}
}

func (x *AllergyIntoleranceCertaintyCode) GetValue() AllergyIntoleranceCertaintyCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceCertaintyCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceCertaintyCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceCertaintyCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The reaction event severity.
// See http://hl7.org/fhir/ValueSet/reaction-event-severity.
type AllergyIntoleranceSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AllergyIntoleranceSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AllergyIntoleranceSeverityCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AllergyIntoleranceSeverityCode) Reset() {
	*x = AllergyIntoleranceSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceSeverityCode) ProtoMessage() {}

func (x *AllergyIntoleranceSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceSeverityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{106}
}

func (x *AllergyIntoleranceSeverityCode) GetValue() AllergyIntoleranceSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return AllergyIntoleranceSeverityCode_INVALID_UNINITIALIZED
}

func (x *AllergyIntoleranceSeverityCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceSeverityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The referralstatus.
// See http://hl7.org/fhir/ValueSet/referralstatus.
type ReferralStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ReferralStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ReferralStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ReferralStatusCode) Reset() {
	*x = ReferralStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralStatusCode) ProtoMessage() {}

func (x *ReferralStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralStatusCode.ProtoReflect.Descriptor instead.
func (*ReferralStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{107}
}

func (x *ReferralStatusCode) GetValue() ReferralStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return ReferralStatusCode_INVALID_UNINITIALIZED
}

func (x *ReferralStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferralStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The remittance outcome.
// See http://hl7.org/fhir/ValueSet/remittance-outcome.
type RemittanceOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value RemittanceOutcomeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.RemittanceOutcomeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RemittanceOutcomeCode) Reset() {
	*x = RemittanceOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemittanceOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemittanceOutcomeCode) ProtoMessage() {}

func (x *RemittanceOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemittanceOutcomeCode.ProtoReflect.Descriptor instead.
func (*RemittanceOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{108}
}

func (x *RemittanceOutcomeCode) GetValue() RemittanceOutcomeCode_Value {
	if x != nil {
		return x.Value
	}
	return RemittanceOutcomeCode_INVALID_UNINITIALIZED
}

func (x *RemittanceOutcomeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RemittanceOutcomeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The resource aggregation mode.
// See http://hl7.org/fhir/ValueSet/resource-aggregation-mode.
type AggregationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AggregationModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.AggregationModeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *AggregationModeCode) Reset() {
	*x = AggregationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationModeCode) ProtoMessage() {}

func (x *AggregationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationModeCode.ProtoReflect.Descriptor instead.
func (*AggregationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{109}
}

func (x *AggregationModeCode) GetValue() AggregationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return AggregationModeCode_INVALID_UNINITIALIZED
}

func (x *AggregationModeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AggregationModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The resource slicing rules.
// See http://hl7.org/fhir/ValueSet/resource-slicing-rules.
type SlicingRulesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SlicingRulesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SlicingRulesCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SlicingRulesCode) Reset() {
	*x = SlicingRulesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlicingRulesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlicingRulesCode) ProtoMessage() {}

func (x *SlicingRulesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlicingRulesCode.ProtoReflect.Descriptor instead.
func (*SlicingRulesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{110}
}

func (x *SlicingRulesCode) GetValue() SlicingRulesCode_Value {
	if x != nil {
		return x.Value
	}
	return SlicingRulesCode_INVALID_UNINITIALIZED
}

func (x *SlicingRulesCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SlicingRulesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The resource types.
// See http://hl7.org/fhir/ValueSet/resource-types.
type ResourceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ResourceTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ResourceTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ResourceTypeCode) Reset() {
	*x = ResourceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypeCode) ProtoMessage() {}

func (x *ResourceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypeCode.ProtoReflect.Descriptor instead.
func (*ResourceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{111}
}

func (x *ResourceTypeCode) GetValue() ResourceTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ResourceTypeCode_INVALID_UNINITIALIZED
}

func (x *ResourceTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The response code.
// See http://hl7.org/fhir/ValueSet/response-code.
type ResponseTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ResponseTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ResponseTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ResponseTypeCode) Reset() {
	*x = ResponseTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTypeCode) ProtoMessage() {}

func (x *ResponseTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTypeCode.ProtoReflect.Descriptor instead.
func (*ResponseTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{112}
}

func (x *ResponseTypeCode) GetValue() ResponseTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return ResponseTypeCode_INVALID_UNINITIALIZED
}

func (x *ResponseTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResponseTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The restful conformance mode.
// See http://hl7.org/fhir/ValueSet/restful-conformance-mode.
type RestfulConformanceModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value RestfulConformanceModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.RestfulConformanceModeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RestfulConformanceModeCode) Reset() {
	*x = RestfulConformanceModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestfulConformanceModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestfulConformanceModeCode) ProtoMessage() {}

func (x *RestfulConformanceModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestfulConformanceModeCode.ProtoReflect.Descriptor instead.
func (*RestfulConformanceModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{113}
}

func (x *RestfulConformanceModeCode) GetValue() RestfulConformanceModeCode_Value {
	if x != nil {
		return x.Value
	}
	return RestfulConformanceModeCode_INVALID_UNINITIALIZED
}

func (x *RestfulConformanceModeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RestfulConformanceModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The search entry mode.
// See http://hl7.org/fhir/ValueSet/search-entry-mode.
type SearchEntryModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SearchEntryModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SearchEntryModeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SearchEntryModeCode) Reset() {
	*x = SearchEntryModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEntryModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEntryModeCode) ProtoMessage() {}

func (x *SearchEntryModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEntryModeCode.ProtoReflect.Descriptor instead.
func (*SearchEntryModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{114}
}

func (x *SearchEntryModeCode) GetValue() SearchEntryModeCode_Value {
	if x != nil {
		return x.Value
	}
	return SearchEntryModeCode_INVALID_UNINITIALIZED
}

func (x *SearchEntryModeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchEntryModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The search modifier code.
// See http://hl7.org/fhir/ValueSet/search-modifier-code.
type SearchModifierCodeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SearchModifierCodeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SearchModifierCodeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SearchModifierCodeCode) Reset() {
	*x = SearchModifierCodeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchModifierCodeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchModifierCodeCode) ProtoMessage() {}

func (x *SearchModifierCodeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchModifierCodeCode.ProtoReflect.Descriptor instead.
func (*SearchModifierCodeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{115}
}

func (x *SearchModifierCodeCode) GetValue() SearchModifierCodeCode_Value {
	if x != nil {
		return x.Value
	}
	return SearchModifierCodeCode_INVALID_UNINITIALIZED
}

func (x *SearchModifierCodeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchModifierCodeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The search param type.
// See http://hl7.org/fhir/ValueSet/search-param-type.
type SearchParamTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SearchParamTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SearchParamTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SearchParamTypeCode) Reset() {
	*x = SearchParamTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParamTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParamTypeCode) ProtoMessage() {}

func (x *SearchParamTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParamTypeCode.ProtoReflect.Descriptor instead.
func (*SearchParamTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{116}
}

func (x *SearchParamTypeCode) GetValue() SearchParamTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return SearchParamTypeCode_INVALID_UNINITIALIZED
}

func (x *SearchParamTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchParamTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The search xpath usage.
// See http://hl7.org/fhir/ValueSet/search-xpath-usage.
type XPathUsageTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value XPathUsageTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.XPathUsageTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *XPathUsageTypeCode) Reset() {
	*x = XPathUsageTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XPathUsageTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XPathUsageTypeCode) ProtoMessage() {}

func (x *XPathUsageTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XPathUsageTypeCode.ProtoReflect.Descriptor instead.
func (*XPathUsageTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{117}
}

func (x *XPathUsageTypeCode) GetValue() XPathUsageTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return XPathUsageTypeCode_INVALID_UNINITIALIZED
}

func (x *XPathUsageTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *XPathUsageTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The slotstatus.
// See http://hl7.org/fhir/ValueSet/slotstatus.
type SlotStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SlotStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SlotStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SlotStatusCode) Reset() {
	*x = SlotStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotStatusCode) ProtoMessage() {}

func (x *SlotStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotStatusCode.ProtoReflect.Descriptor instead.
func (*SlotStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{118}
}

func (x *SlotStatusCode) GetValue() SlotStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SlotStatusCode_INVALID_UNINITIALIZED
}

func (x *SlotStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SlotStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The specimen status.
// See http://hl7.org/fhir/ValueSet/specimen-status.
type SpecimenStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SpecimenStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SpecimenStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SpecimenStatusCode) Reset() {
	*x = SpecimenStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenStatusCode) ProtoMessage() {}

func (x *SpecimenStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenStatusCode.ProtoReflect.Descriptor instead.
func (*SpecimenStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{119}
}

func (x *SpecimenStatusCode) GetValue() SpecimenStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SpecimenStatusCode_INVALID_UNINITIALIZED
}

func (x *SpecimenStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The structure definition kind.
// See http://hl7.org/fhir/ValueSet/structure-definition-kind.
type StructureDefinitionKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value StructureDefinitionKindCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.StructureDefinitionKindCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *StructureDefinitionKindCode) Reset() {
	*x = StructureDefinitionKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionKindCode) ProtoMessage() {}

func (x *StructureDefinitionKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionKindCode.ProtoReflect.Descriptor instead.
func (*StructureDefinitionKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{120}
}

func (x *StructureDefinitionKindCode) GetValue() StructureDefinitionKindCode_Value {
	if x != nil {
		return x.Value
	}
	return StructureDefinitionKindCode_INVALID_UNINITIALIZED
}

func (x *StructureDefinitionKindCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionKindCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The subscription channel type.
// See http://hl7.org/fhir/ValueSet/subscription-channel-type.
type SubscriptionChannelTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SubscriptionChannelTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SubscriptionChannelTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionChannelTypeCode) Reset() {
	*x = SubscriptionChannelTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionChannelTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionChannelTypeCode) ProtoMessage() {}

func (x *SubscriptionChannelTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionChannelTypeCode.ProtoReflect.Descriptor instead.
func (*SubscriptionChannelTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{121}
}

func (x *SubscriptionChannelTypeCode) GetValue() SubscriptionChannelTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return SubscriptionChannelTypeCode_INVALID_UNINITIALIZED
}

func (x *SubscriptionChannelTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionChannelTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The subscription status.
// See http://hl7.org/fhir/ValueSet/subscription-status.
type SubscriptionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SubscriptionStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SubscriptionStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SubscriptionStatusCode) Reset() {
	*x = SubscriptionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionStatusCode) ProtoMessage() {}

func (x *SubscriptionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionStatusCode.ProtoReflect.Descriptor instead.
func (*SubscriptionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{122}
}

func (x *SubscriptionStatusCode) GetValue() SubscriptionStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SubscriptionStatusCode_INVALID_UNINITIALIZED
}

func (x *SubscriptionStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscriptionStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The supplydelivery status.
// See http://hl7.org/fhir/ValueSet/supplydelivery-status.
type SupplyDeliveryStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SupplyDeliveryStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SupplyDeliveryStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SupplyDeliveryStatusCode) Reset() {
	*x = SupplyDeliveryStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyDeliveryStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyDeliveryStatusCode) ProtoMessage() {}

func (x *SupplyDeliveryStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyDeliveryStatusCode.ProtoReflect.Descriptor instead.
func (*SupplyDeliveryStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{123}
}

func (x *SupplyDeliveryStatusCode) GetValue() SupplyDeliveryStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SupplyDeliveryStatusCode_INVALID_UNINITIALIZED
}

func (x *SupplyDeliveryStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyDeliveryStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The supplydelivery type.
// See http://hl7.org/fhir/ValueSet/supplydelivery-type.
type SupplyDeliveryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SupplyDeliveryCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SupplyDeliveryCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SupplyDeliveryCode) Reset() {
	*x = SupplyDeliveryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyDeliveryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyDeliveryCode) ProtoMessage() {}

func (x *SupplyDeliveryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyDeliveryCode.ProtoReflect.Descriptor instead.
func (*SupplyDeliveryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{124}
}

func (x *SupplyDeliveryCode) GetValue() SupplyDeliveryCode_Value {
	if x != nil {
		return x.Value
	}
	return SupplyDeliveryCode_INVALID_UNINITIALIZED
}

func (x *SupplyDeliveryCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyDeliveryCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The supplyrequest kind.
// See http://hl7.org/fhir/ValueSet/supplyrequest-kind.
type SupplyTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SupplyTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SupplyTypeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SupplyTypeCode) Reset() {
	*x = SupplyTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyTypeCode) ProtoMessage() {}

func (x *SupplyTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyTypeCode.ProtoReflect.Descriptor instead.
func (*SupplyTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{125}
}

func (x *SupplyTypeCode) GetValue() SupplyTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return SupplyTypeCode_INVALID_UNINITIALIZED
}

func (x *SupplyTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The supplyrequest status.
// See http://hl7.org/fhir/ValueSet/supplyrequest-status.
type SupplyRequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SupplyRequestStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SupplyRequestStatusCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SupplyRequestStatusCode) Reset() {
	*x = SupplyRequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyRequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyRequestStatusCode) ProtoMessage() {}

func (x *SupplyRequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyRequestStatusCode.ProtoReflect.Descriptor instead.
func (*SupplyRequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{126}
}

func (x *SupplyRequestStatusCode) GetValue() SupplyRequestStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return SupplyRequestStatusCode_INVALID_UNINITIALIZED
}

func (x *SupplyRequestStatusCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyRequestStatusCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The transaction mode.
// See http://hl7.org/fhir/ValueSet/transaction-mode.
type TransactionModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value TransactionModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.TransactionModeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TransactionModeCode) Reset() {
	*x = TransactionModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionModeCode) ProtoMessage() {}

func (x *TransactionModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionModeCode.ProtoReflect.Descriptor instead.
func (*TransactionModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{127}
}

func (x *TransactionModeCode) GetValue() TransactionModeCode_Value {
	if x != nil {
		return x.Value
	}
	return TransactionModeCode_INVALID_UNINITIALIZED
}

func (x *TransactionModeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TransactionModeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The unknown content code.
// See http://hl7.org/fhir/ValueSet/unknown-content-code.
type UnknownContentCodeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value UnknownContentCodeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.UnknownContentCodeCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UnknownContentCodeCode) Reset() {
	*x = UnknownContentCodeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownContentCodeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownContentCodeCode) ProtoMessage() {}

func (x *UnknownContentCodeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownContentCodeCode.ProtoReflect.Descriptor instead.
func (*UnknownContentCodeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{128}
}

func (x *UnknownContentCodeCode) GetValue() UnknownContentCodeCode_Value {
	if x != nil {
		return x.Value
	}
	return UnknownContentCodeCode_INVALID_UNINITIALIZED
}

func (x *UnknownContentCodeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UnknownContentCodeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The v3 Confidentiality.
// See http://hl7.org/fhir/ValueSet/v3-Confidentiality.
type ConfidentialityClassificationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ConfidentialityClassificationCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ConfidentialityClassificationCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ConfidentialityClassificationCode) Reset() {
	*x = ConfidentialityClassificationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfidentialityClassificationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidentialityClassificationCode) ProtoMessage() {}

func (x *ConfidentialityClassificationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidentialityClassificationCode.ProtoReflect.Descriptor instead.
func (*ConfidentialityClassificationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{129}
}

func (x *ConfidentialityClassificationCode) GetValue() ConfidentialityClassificationCode_Value {
	if x != nil {
		return x.Value
	}
	return ConfidentialityClassificationCode_INVALID_UNINITIALIZED
}

func (x *ConfidentialityClassificationCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfidentialityClassificationCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The versioning policy.
// See http://hl7.org/fhir/ValueSet/versioning-policy.
type ResourceVersionPolicyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ResourceVersionPolicyCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.ResourceVersionPolicyCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ResourceVersionPolicyCode) Reset() {
	*x = ResourceVersionPolicyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceVersionPolicyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceVersionPolicyCode) ProtoMessage() {}

func (x *ResourceVersionPolicyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceVersionPolicyCode.ProtoReflect.Descriptor instead.
func (*ResourceVersionPolicyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{130}
}

func (x *ResourceVersionPolicyCode) GetValue() ResourceVersionPolicyCode_Value {
	if x != nil {
		return x.Value
	}
	return ResourceVersionPolicyCode_INVALID_UNINITIALIZED
}

func (x *ResourceVersionPolicyCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceVersionPolicyCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The vision base codes.
// See http://hl7.org/fhir/ValueSet/vision-base-codes.
type VisionBaseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value VisionBaseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.VisionBaseCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *VisionBaseCode) Reset() {
	*x = VisionBaseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionBaseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionBaseCode) ProtoMessage() {}

func (x *VisionBaseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionBaseCode.ProtoReflect.Descriptor instead.
func (*VisionBaseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{131}
}

func (x *VisionBaseCode) GetValue() VisionBaseCode_Value {
	if x != nil {
		return x.Value
	}
	return VisionBaseCode_INVALID_UNINITIALIZED
}

func (x *VisionBaseCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VisionBaseCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The vision eye codes.
// See http://hl7.org/fhir/ValueSet/vision-eye-codes.
type VisionEyesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value VisionEyesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.VisionEyesCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *VisionEyesCode) Reset() {
	*x = VisionEyesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionEyesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionEyesCode) ProtoMessage() {}

func (x *VisionEyesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionEyesCode.ProtoReflect.Descriptor instead.
func (*VisionEyesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{132}
}

func (x *VisionEyesCode) GetValue() VisionEyesCode_Value {
	if x != nil {
		return x.Value
	}
	return VisionEyesCode_INVALID_UNINITIALIZED
}

func (x *VisionEyesCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VisionEyesCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Operations supported by REST at the type or instance level.
// See http://hl7.org/fhir/ValueSet/type-restful-interaction.
type TypeRestfulInteractionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value TypeRestfulInteractionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.TypeRestfulInteractionCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TypeRestfulInteractionCode) Reset() {
	*x = TypeRestfulInteractionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeRestfulInteractionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeRestfulInteractionCode) ProtoMessage() {}

func (x *TypeRestfulInteractionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeRestfulInteractionCode.ProtoReflect.Descriptor instead.
func (*TypeRestfulInteractionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{133}
}

func (x *TypeRestfulInteractionCode) GetValue() TypeRestfulInteractionCode_Value {
	if x != nil {
		return x.Value
	}
	return TypeRestfulInteractionCode_INVALID_UNINITIALIZED
}

func (x *TypeRestfulInteractionCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TypeRestfulInteractionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Operations supported by REST at the system level.
// http://hl7.org/fhir/ValueSet/system-restful-interaction.
type SystemRestfulInteractionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SystemRestfulInteractionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.SystemRestfulInteractionCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON).
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations.
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *SystemRestfulInteractionCode) Reset() {
	*x = SystemRestfulInteractionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemRestfulInteractionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemRestfulInteractionCode) ProtoMessage() {}

func (x *SystemRestfulInteractionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemRestfulInteractionCode.ProtoReflect.Descriptor instead.
func (*SystemRestfulInteractionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{134}
}

func (x *SystemRestfulInteractionCode) GetValue() SystemRestfulInteractionCode_Value {
	if x != nil {
		return x.Value
	}
	return SystemRestfulInteractionCode_INVALID_UNINITIALIZED
}

func (x *SystemRestfulInteractionCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SystemRestfulInteractionCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Availability of the resource.
// See http://hl7.org/fhir/ValueSet/instance-availability.
type InstanceAvailabilityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value InstanceAvailabilityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.dstu2.proto.InstanceAvailabilityCode_Value" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *InstanceAvailabilityCode) Reset() {
	*x = InstanceAvailabilityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAvailabilityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAvailabilityCode) ProtoMessage() {}

func (x *InstanceAvailabilityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAvailabilityCode.ProtoReflect.Descriptor instead.
func (*InstanceAvailabilityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{135}
}

func (x *InstanceAvailabilityCode) GetValue() InstanceAvailabilityCode_Value {
	if x != nil {
		return x.Value
	}
	return InstanceAvailabilityCode_INVALID_UNINITIALIZED
}

func (x *InstanceAvailabilityCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InstanceAvailabilityCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Either a resource or a data type.
// See http://hl7.org/fhir/ValueSet/defined-types
// TODO: List all the types.
type FHIRDefinedTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *FHIRDefinedTypeCode) Reset() {
	*x = FHIRDefinedTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRDefinedTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRDefinedTypeCode) ProtoMessage() {}

func (x *FHIRDefinedTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRDefinedTypeCode.ProtoReflect.Descriptor instead.
func (*FHIRDefinedTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP(), []int{136}
}

func (x *FHIRDefinedTypeCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FHIRDefinedTypeCode) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FHIRDefinedTypeCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

var File_proto_google_fhir_proto_dstu2_codes_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_dstu2_codes_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88,
	0x03, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x50, 0x4f, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x33, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x15, 0x41, 0x64,
	0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6a,
	0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4e,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x41, 0x30, 0x30, 0x31, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x41, 0x30, 0x30, 0x31, 0x12, 0x14, 0x0a, 0x04, 0x41, 0x30, 0x30, 0x32,
	0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x41, 0x30, 0x30, 0x32, 0x3a, 0x3b,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa1, 0x03, 0x0a, 0x18,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x6d, 0x61, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x3a,
	0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22,
	0xc4, 0x03, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x46,
	0x4f, 0x4f, 0x44, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x66, 0x6f, 0x6f,
	0x64, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x3a,
	0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xa0, 0x03, 0x0a, 0x21, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x52, 0x49, 0x54, 0x4c,
	0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x52, 0x49, 0x54, 0x4c, 0x12,
	0x16, 0x0a, 0x05, 0x43, 0x52, 0x49, 0x54, 0x48, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x43, 0x52, 0x49, 0x54, 0x48, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x52, 0x49, 0x54, 0x55,
	0x10, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x52, 0x49, 0x54, 0x55, 0x3a,
	0x48, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xae, 0x04, 0x0a, 0x1c, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x55,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x11, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0b, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x52,
	0x45, 0x46, 0x55, 0x54, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x72, 0x65, 0x66, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x1a, 0x16, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x1a, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x07, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x54,
	0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0b, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x41, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d,
	0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xc1, 0x05, 0x0a, 0x10, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x03, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x07,
	0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x41,
	0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x10, 0x06, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x09, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x10, 0x0a, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18,
	0x0a, 0x06, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x0b, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x0c, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0a,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0d, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0e, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x0f, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x36, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2d, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xec, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x4f, 0x4f, 0x4b,
	0x45, 0x44, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x62, 0x6f, 0x6f, 0x6b,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x09, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x06, 0x4e, 0x4f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x07, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x6e, 0x6f, 0x73, 0x68, 0x6f, 0x77, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xc0, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x1e,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x10,
	0x0a, 0x02, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x05, 0x4e, 0x4f, 0x54, 0x49, 0x4e, 0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x47, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x08,
	0x4c, 0x45, 0x53, 0x53, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x07, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x08,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x09, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x0a, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0xca, 0x05, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xa6, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x4f, 0x4b, 0x41, 0x59, 0x10, 0x01,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x6f, 0x6b, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x07,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x4e, 0x4f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x6e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x03,
	0x42, 0x41, 0x44, 0x10, 0x05, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x62, 0x61, 0x64,
	0x12, 0x1e, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x06, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2c,
	0x0a, 0x10, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x4e, 0x4f, 0x54, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x08, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08,
	0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x09, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x47, 0x4f,
	0x4e, 0x45, 0x10, 0x0a, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x67, 0x6f, 0x6e, 0x65,
	0x12, 0x30, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12,
	0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x0c, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x75, 0x6e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x81, 0x03, 0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x01, 0x43, 0x10, 0x01, 0x1a, 0x07, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x01, 0x43, 0x12, 0x0e, 0x0a, 0x01, 0x52, 0x10, 0x02, 0x1a, 0x07, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x01, 0x52, 0x12, 0x0e, 0x0a, 0x01, 0x55, 0x10, 0x03, 0x1a, 0x07, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x01, 0x55, 0x12, 0x0e, 0x0a, 0x01, 0x44, 0x10, 0x04, 0x1a, 0x07, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x01, 0x44, 0x12, 0x0e, 0x0a, 0x01, 0x45, 0x10, 0x05, 0x1a, 0x07, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x01, 0x45, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x03, 0x0a, 0x15, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x01, 0x30, 0x12, 0x1a, 0x0a, 0x0d, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x34, 0x12,
	0x1c, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x03, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x38, 0x12, 0x1b, 0x0a,
	0x0d, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04,
	0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x31, 0x32, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x13, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x07, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xd3, 0x04, 0x0a, 0x0e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x02, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a,
	0x0e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x06, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x10, 0x07, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x53, 0x45, 0x54,
	0x10, 0x08, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x09, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x34, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x89, 0x04, 0x0a, 0x1a,
	0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x6e, 0x6f, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f,
	0x4c, 0x44, 0x10, 0x04, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6f, 0x6e, 0x2d, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x06, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x72, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x18, 0x43, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44,
	0x45, 0x53, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53,
	0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x53, 0x10, 0x03,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x73,
	0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x22, 0xbc, 0x03, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xb2, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x02, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x63, 0x61, 0x72, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xbd, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x0d, 0x49, 0x4e,
	0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x13, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x4f, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x6f, 0x72, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x48, 0x41, 0x52,
	0x4d, 0x41, 0x43, 0x59, 0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x70, 0x68,
	0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x06,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0x8c, 0x03, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x08,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x45, 0x58,
	0x50, 0x4c, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2d, 0x75, 0x73, 0x65, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x22,
	0xbc, 0x03, 0x0a, 0x1c, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x69, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82,
	0x05, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e,
	0x4e, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44,
	0x10, 0x04, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x05,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x06, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x07, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x08, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x09, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x3a, 0x45, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd6, 0x03, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x3a, 0x3d, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xca, 0x03, 0x0a,
	0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x05,
	0x4c, 0x45, 0x47, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c,
	0x10, 0x04, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa8,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x70, 0x72, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c,
	0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x04, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcd, 0x04, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xae, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x49,
	0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x65, 0x71, 0x75,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x57, 0x49, 0x44, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x77, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x55,
	0x42, 0x53, 0x55, 0x4d, 0x45, 0x53, 0x10, 0x04, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x73, 0x75, 0x62, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x4e, 0x41, 0x52, 0x52,
	0x4f, 0x57, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x53, 0x10, 0x06, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x49, 0x4e,
	0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x07, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x69,
	0x6e, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x75, 0x6e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x09, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x69, 0x73, 0x6a,
	0x6f, 0x69, 0x6e, 0x74, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x9a, 0x04, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xf2, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0c, 0x44, 0x49, 0x46, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x07, 0x52, 0x45, 0x46, 0x55, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x72, 0x65, 0x66, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05,
	0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d,
	0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x06, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x0d, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x13, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x6e, 0x6f, 0x74, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x03,
	0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x52, 0x45, 0x54, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x72, 0x65, 0x74,
	0x69, 0x72, 0x65, 0x64, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x1c, 0x43,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02,
	0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x24, 0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0x03, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xea, 0x02,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x3a, 0x3c, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xcb, 0x02, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x58, 0x4d, 0x4c, 0x10, 0x01,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x78, 0x6d, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x92, 0x04, 0x0a, 0x19, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x0a, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0f,
	0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x02, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2d, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x49,
	0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x11, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x09, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x08, 0x46, 0x4c, 0x45, 0x58, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x3a, 0x3f, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xac, 0x03,
	0x0a, 0x0e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66,
	0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x4d, 0x4f, 0x4e,
	0x10, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x6d, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x03, 0x54, 0x55, 0x45, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x74, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x77, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x54, 0x48, 0x55, 0x10, 0x04, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x74, 0x68, 0x75, 0x12, 0x12, 0x0a, 0x03, 0x46, 0x52, 0x49,
	0x10, 0x05, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x66, 0x72, 0x69, 0x12, 0x12, 0x0a,
	0x03, 0x53, 0x41, 0x54, 0x10, 0x06, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x73, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x55, 0x4e, 0x10, 0x07, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x73, 0x75, 0x6e, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x64, 0x61, 0x79, 0x73, 0x2d, 0x6f, 0x66, 0x2d, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x87, 0x03, 0x0a,
	0x19, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x12, 0x1c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x6c, 0x6f, 0x77, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x89, 0x03, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x86, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x09, 0x49, 0x4d, 0x50, 0x4c, 0x41, 0x4e,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x69, 0x6d, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x55,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x6d,
	0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xad, 0x03, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x55, 0x52, 0x47, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x04, 0x53, 0x54, 0x41, 0x54, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x41, 0x53, 0x41, 0x50, 0x10, 0x04,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x61, 0x73, 0x61, 0x70, 0x3a, 0x44, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x75, 0x73,
	0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0xf9, 0x04, 0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xd6, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10,
	0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x06, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x08, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x09, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x75, 0x73, 0x65, 0x2d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a,
	0x03, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x6e, 0x6f, 0x74, 0x2d, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x16, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x1b,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x07, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x06, 0x55, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x53, 0x54, 0x41, 0x54, 0x10,
	0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a,
	0x04, 0x41, 0x53, 0x41, 0x50, 0x10, 0x04, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x61,
	0x73, 0x61, 0x70, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xc5, 0x05, 0x0a, 0x19, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54,
	0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12,
	0x1a, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x07, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x08, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x09, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x0a, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x0b, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0c, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x3a, 0x40, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xa6, 0x04, 0x0a, 0x1a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84,
	0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x50, 0x50,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x1a, 0x16, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x14, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x16, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x5e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10,
	0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x3a,
	0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xb3, 0x03, 0x0a, 0x1b, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x53, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x65, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbe, 0x03,
	0x0a, 0x1c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x53, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d,
	0x53, 0x10, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x53, 0x49, 0x47, 0x4e, 0x53, 0x10, 0x03,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x07, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x04, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xad,
	0x04, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x02,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x09, 0x49, 0x4e, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x69, 0x6e, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x4f, 0x55, 0x54, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x4d, 0x42, 0x55, 0x4c, 0x41, 0x54, 0x4f,
	0x52, 0x59, 0x10, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x61, 0x6d, 0x62, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x05,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x06, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x44, 0x41, 0x59, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x07, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x64, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x07, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x08, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x05,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x09, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xbb,
	0x03, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10,
	0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf9, 0x02, 0x0a,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59,
	0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe1, 0x03, 0x0a, 0x12, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07,
	0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x52, 0x52, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x4f, 0x4e, 0x4c, 0x45,
	0x41, 0x56, 0x45, 0x10, 0x04, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6f, 0x6e, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x06, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe8, 0x03, 0x0a,
	0x17, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x4c,
	0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x57, 0x41, 0x49, 0x54, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x77, 0x61, 0x69, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18,
	0x0a, 0x06, 0x4f, 0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x6f, 0x6e, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2d, 0x6f, 0x66, 0x2d, 0x63, 0x61, 0x72, 0x65,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x4d,
	0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0xb8, 0x03, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x06, 0x45, 0x55, 0x51, 0x41, 0x4c,
	0x53, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3d, 0x12, 0x14, 0x0a, 0x04,
	0x49, 0x53, 0x5f, 0x41, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x69, 0x73,
	0x2d, 0x61, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x10, 0x03,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x69, 0x73, 0x2d, 0x6e, 0x6f, 0x74, 0x2d, 0x61,
	0x12, 0x16, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x05,
	0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4e, 0x10, 0x06, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6e, 0x6f,
	0x74, 0x2d, 0x69, 0x6e, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x85,
	0x03, 0x0a, 0x0e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x3a, 0x34, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x6d, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x57, 0x4f,
	0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x32, 0x3a, 0x2e, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0xb5, 0x04, 0x0a, 0x0e,
	0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44,
	0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x44, 0x10, 0x06, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0a, 0x53, 0x55, 0x53, 0x54, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x08, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6f, 0x6e, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x1a, 0x0f, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x3a, 0x34, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd2, 0x03, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x4e, 0x49, 0x4d, 0x41,
	0x4c, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45,
	0x52, 0x10, 0x03, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x04, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x05, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x06, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x3a, 0x33, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfa, 0x02, 0x0a, 0x17, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x62, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x04, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xfa, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x50, 0x41, 0x47, 0x45, 0x10,
	0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x07, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x04, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x05, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0a, 0x44,
	0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x06, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x03, 0x54, 0x4f, 0x43, 0x10, 0x07, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x74, 0x6f,
	0x63, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x08, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a,
	0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x2d,
	0x70, 0x61, 0x67, 0x65, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xf8, 0x03, 0x0a, 0x18, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x45, 0x58, 0x41,
	0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x4f,
	0x4c, 0x4f, 0x47, 0x59, 0x10, 0x02, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x52, 0x59, 0x10, 0x05, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x06, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x17, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0e,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04,
	0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2d, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xf0, 0x02, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72, 0x62, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x56, 0x65,
	0x72, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x47, 0x45, 0x54, 0x12, 0x14, 0x0a, 0x04, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x12, 0x12, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x50, 0x55, 0x54, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x3a, 0x32,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x76, 0x65,
	0x72, 0x62, 0x22, 0xab, 0x03, 0x0a, 0x1a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x31,
	0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31,
	0x12, 0x18, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x32, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x33, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x33, 0x12, 0x18, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x34, 0x10, 0x04,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x3a, 0x40,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2d, 0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x98, 0x03, 0x0a, 0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xba, 0x09, 0x0a, 0x0d,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xc0, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x49, 0x4e, 0x56, 0x41, 0x52,
	0x49, 0x41, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x69, 0x6e,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x07,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x09, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44,
	0x45, 0x4e, 0x10, 0x0a, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x45, 0x44, 0x10, 0x0b, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x1a, 0x13, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x6e, 0x6f, 0x74, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x0e,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0f,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x74, 0x2d, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1c, 0x0a, 0x08, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x10, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x74, 0x6f, 0x6f, 0x2d, 0x6c, 0x6f, 0x6e, 0x67, 0x12,
	0x24, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x11, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4f, 0x53,
	0x54, 0x4c, 0x59, 0x10, 0x13, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x74, 0x6f, 0x6f,
	0x2d, 0x63, 0x6f, 0x73, 0x74, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0d, 0x42, 0x55, 0x53, 0x49, 0x4e,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x14, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x15, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x20, 0x0a,
	0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x16, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x17, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0a, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x18, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x19, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x1b, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x54,
	0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x1c, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x1d, 0x1a, 0x13,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x3a, 0x33, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x53, 0x45, 0x45, 0x41, 0x4c, 0x53, 0x4f, 0x10, 0x03,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x73, 0x65, 0x65, 0x61, 0x6c, 0x73, 0x6f, 0x3a,
	0x32, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x57, 0x4f,
	0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48,
	0x4f, 0x54, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x10,
	0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x3a, 0x32, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x07,
	0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x16,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x34, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd8, 0x02, 0x0a,
	0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x4b, 0x49, 0x4e,
	0x44, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x3a,
	0x36, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdc, 0x03, 0x0a,
	0x11, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x69,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x01, 0x55, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x55, 0x12, 0x0e,
	0x0a, 0x01, 0x41, 0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x41, 0x12, 0x0e,
	0x0a, 0x01, 0x44, 0x10, 0x03, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x44, 0x12, 0x0e,
	0x0a, 0x01, 0x49, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x49, 0x12, 0x0e,
	0x0a, 0x01, 0x4c, 0x10, 0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4c, 0x12, 0x0e,
	0x0a, 0x01, 0x4d, 0x10, 0x06, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4d, 0x12, 0x0e,
	0x0a, 0x01, 0x50, 0x10, 0x07, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x50, 0x12, 0x0e,
	0x0a, 0x01, 0x53, 0x10, 0x08, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x53, 0x12, 0x0e,
	0x0a, 0x01, 0x54, 0x10, 0x09, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x54, 0x12, 0x0e,
	0x0a, 0x01, 0x57, 0x10, 0x0a, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x57, 0x12, 0x12,
	0x0a, 0x03, 0x55, 0x4e, 0x4b, 0x10, 0x0b, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x55,
	0x4e, 0x4b, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x72,
	0x69, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x81, 0x05, 0x0a, 0x14,
	0x4d, 0x65, 0x61, 0x73, 0x6d, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x6d, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xee,
	0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x43,
	0x48, 0x45, 0x4d, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x63, 0x68, 0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0a, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x09, 0x49,
	0x4d, 0x50, 0x45, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x69, 0x6d, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x4e,
	0x55, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x05, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x06, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x54, 0x48, 0x45, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x07,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0a, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x08, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x09, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x43, 0x4f, 0x55, 0x53, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x0a, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x61, 0x63, 0x6f, 0x75, 0x73,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x0b, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x3a,
	0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x22,
	0xfd, 0x03, 0x0a, 0x22, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcc,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f,
	0x4c, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6f, 0x6e, 0x2d, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x3a, 0x40, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xf4, 0x03, 0x0a, 0x1c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x4f,
	0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x6f, 0x6e, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x16, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x05, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf9, 0x03, 0x0a, 0x19, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xda, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6f, 0x6e, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x04, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x10, 0x06, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd3, 0x03, 0x0a, 0x1d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x16, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x04, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfd, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x10, 0x02, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x3a,
	0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x1f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x46,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xf6, 0x03, 0x0a, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x41,
	0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0e, 0x6e, 0x6f, 0x74, 0x2d, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x14, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x41, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xc1, 0x03, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x06, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x02, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x47,
	0x41, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x67, 0x61, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x54, 0x57, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x04,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x74, 0x77, 0x6f, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2d, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xbf, 0x03, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x38, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xec, 0x03, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x05, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x47,
	0x52, 0x45, 0x45, 0x4e, 0x10, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a,
	0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x62,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x4d, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x41, 0x10, 0x06,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x04, 0x43, 0x59, 0x41, 0x4e, 0x10, 0x07, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x63, 0x79, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x08,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x77, 0x68, 0x69, 0x74, 0x65, 0x3a, 0x35, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x94, 0x03, 0x0a, 0x21, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x64, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x08, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x02, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x6f, 0x66, 0x66, 0x12, 0x1a, 0x0a, 0x07, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x1e,
	0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x3a, 0x45, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x8a, 0x03, 0x0a, 0x14, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x0a, 0x43, 0x4f,
	0x44, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0a,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x04, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xaa, 0x03, 0x0a, 0x13, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x44, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc1, 0x03,
	0x0a, 0x1e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x0c, 0x4d, 0x41, 0x43,
	0x48, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x01, 0x31, 0x12, 0x17, 0x0a, 0x0a, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x32, 0x12, 0x1d, 0x0a,
	0x10, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x03, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x33, 0x12, 0x1a, 0x0a, 0x0d,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a,
	0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10,
	0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x35, 0x3a, 0x35, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xec, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x09,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x6f, 0x70, 0x65, 0x72, 0x3a, 0x32, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xa6, 0x04, 0x0a, 0x18, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x02, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45,
	0x44, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x07,
	0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x6f, 0x6e, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa7, 0x04, 0x0a, 0x1f, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x0a, 0x48, 0x41, 0x53, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x68,
	0x61, 0x73, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0c, 0x44, 0x45, 0x52,
	0x49, 0x56, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x02, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x1e, 0x0a, 0x09, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x03, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6c, 0x2d, 0x74, 0x6f, 0x12,
	0x1c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53, 0x10, 0x04, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0c, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x05, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x2d, 0x62, 0x79, 0x12, 0x26, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x10, 0x06, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x3a, 0x46, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x98, 0x04, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x41,
	0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x61, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x1a, 0x16, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x2d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x07, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf,
	0x02, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0xe6, 0x02, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x02, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x6f, 0x75, 0x74, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xa6, 0x04, 0x0a, 0x0f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xa6, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x07, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x09, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3a, 0x35, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x10,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x03, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xf7, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x09, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20,
	0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x10,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0c, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x06, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x2d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xbb, 0x03, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09,
	0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x74, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0c,
	0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xac, 0x03, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x52, 0x4f, 0x55, 0x54,
	0x49, 0x4e, 0x45, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x55, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x75, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x04, 0x53, 0x54, 0x41, 0x54, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x41, 0x53, 0x41, 0x50, 0x10, 0x04, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x61, 0x73, 0x61, 0x70, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22,
	0xf4, 0x04, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd2,
	0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x06, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x09, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x0a, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbc, 0x03, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x04, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x58, 0x4d, 0x4c, 0x41,
	0x54, 0x54, 0x52, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x78, 0x6d, 0x6c,
	0x41, 0x74, 0x74, 0x72, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x0a, 0x44, 0x45, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x04, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0xb2, 0x03, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x3a,
	0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x39, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x76, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x52,
	0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x1f, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x7a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x59, 0x10,
	0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x06, 0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x59, 0x10, 0x02, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x3a, 0x41, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x22, 0x98,
	0x03, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x4d, 0x49, 0x4c,
	0x44, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x6d, 0x69, 0x6c, 0x64, 0x12,
	0x1c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x06, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x73, 0x65, 0x76, 0x65, 0x72, 0x65, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xf8, 0x03, 0x0a, 0x12, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3a, 0x37, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x22, 0x95, 0x03, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x80, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x42, 0x55, 0x4e, 0x44,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x10, 0x53, 0x6c, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x4f, 0x50, 0x45, 0x4e, 0x41,
	0x54, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x73, 0x6c, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xad, 0x20, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x1e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x5f,
	0x49, 0x4e, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x18, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x41,
	0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x04, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x05, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x06, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x06, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x07, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53, 0x49,
	0x54, 0x45, 0x10, 0x08, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x42, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x09,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x0a, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a,
	0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x0b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0c, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0e, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x15, 0x43, 0x4f, 0x4d,
	0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x0f, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x10, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x5f,
	0x4d, 0x41, 0x50, 0x10, 0x11, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x13, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x14, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x15, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x16, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0b, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x17,
	0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x18, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2b, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x10, 0x19, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x1a, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x1b, 0x1a, 0x16, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x1a, 0x18, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x49, 0x41, 0x47, 0x4e,
	0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x1d, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54,
	0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x1e, 0x1a, 0x16, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x1f, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x20, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x21, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31,
	0x0a, 0x13, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x22, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x14, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x23, 0x1a, 0x19, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x13, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x24, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x25, 0x1a, 0x17,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x26,
	0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x50,
	0x49, 0x53, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x10, 0x27, 0x1a,
	0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66,
	0x43, 0x61, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x10, 0x28,
	0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x29, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x2a, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x47, 0x4f, 0x41, 0x4c,
	0x10, 0x2b, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x2c, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x43, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x2d, 0x1a, 0x17,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x49, 0x4d, 0x41, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x2e, 0x1a, 0x1c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x16, 0x49, 0x6d, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x53, 0x54,
	0x55, 0x44, 0x59, 0x10, 0x2f, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0c, 0x49, 0x4d, 0x4d,
	0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x30, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x1b, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x31,
	0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x32, 0x1a, 0x19, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x13, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x33, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x34, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x10, 0x35, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x36, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x37, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x38, 0x1a, 0x18, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x39, 0x1a, 0x15, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x3a, 0x1a, 0x19,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x3b, 0x1a, 0x13, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x4e, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x10, 0x3c, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4e, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x0f, 0x4e, 0x55, 0x54,
	0x52, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x3d, 0x1a, 0x14,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x3e, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x3f, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f,
	0x4d, 0x45, 0x10, 0x40, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x41, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x42, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x43, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x53, 0x10, 0x44, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x45, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x43, 0x45, 0x10, 0x46, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x47, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x48, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x49, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45,
	0x10, 0x4a, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x4b, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x4c, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x4d, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x4e, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0d,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x10, 0x4f, 0x1a,
	0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x4e, 0x41, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x50,
	0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x10, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x51, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x52, 0x1a, 0x13,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x53, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x0f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x54, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x52, 0x69,
	0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x55, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x56,
	0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10,
	0x57, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1c, 0x0a,
	0x08, 0x53, 0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x10, 0x58, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x59, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x5a, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x5b, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x5c, 0x1a, 0x14, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x5d, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x5e, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1d, 0x0a,
	0x09, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x5f, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x13,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x60, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x37, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x87, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01,
	0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x6f, 0x6b, 0x12, 0x2a, 0x0a, 0x0f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x1a,
	0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74,
	0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x66,
	0x61, 0x74, 0x61, 0x6c, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x36, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x66,
	0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xfe, 0x02, 0x0a,
	0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x07, 0x49, 0x4e, 0x43,
	0x4c, 0x55, 0x44, 0x45, 0x10, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45,
	0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa6, 0x04,
	0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x02,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x4e,
	0x4f, 0x54, 0x10, 0x04, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x6e, 0x6f, 0x74, 0x12,
	0x14, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x05, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x1a, 0x08, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x02, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x10, 0x07, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6e, 0x6f, 0x74, 0x2d, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x05, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x10, 0x08, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x05, 0x41, 0x42, 0x4f,
	0x56, 0x45, 0x10, 0x09, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x61, 0x62, 0x6f, 0x76,
	0x65, 0x12, 0x14, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x04, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x06,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10,
	0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e,
	0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x06, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x07, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x03,
	0x55, 0x52, 0x49, 0x10, 0x08, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x75, 0x72, 0x69,
	0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x03, 0x0a,
	0x12, 0x58, 0x50, 0x61, 0x74, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x58, 0x50, 0x61,
	0x74, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x54, 0x49, 0x43, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x06, 0x4e, 0x45, 0x41, 0x52,
	0x42, 0x59, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x78, 0x70, 0x61, 0x74, 0x68, 0x2d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x0e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x62, 0x75, 0x73, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45, 0x10,
	0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x2c, 0x0a,
	0x10, 0x42, 0x55, 0x53, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x62, 0x75, 0x73, 0x79, 0x2d,
	0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x42,
	0x55, 0x53, 0x59, 0x5f, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x1a,
	0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x62, 0x75, 0x73, 0x79, 0x2d, 0x74, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x33, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc7, 0x03, 0x0a, 0x12, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x55, 0x4e, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x75, 0x6e,
	0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x04, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x2d, 0x69, 0x6e, 0x2d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x41, 0x54,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x36, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xcf, 0x03, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x09, 0x52,
	0x45, 0x53, 0x54, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x72, 0x65, 0x73, 0x74, 0x2d, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x1e, 0x0a, 0x09, 0x57,
	0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x4d, 0x53, 0x10, 0x04, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x73, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x05, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x6f, 0x66, 0x66, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa1, 0x03, 0x0a, 0x18, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x41,
	0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xea, 0x02, 0x0a, 0x12,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x10,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x0e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x5c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x01,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x08, 0x4e, 0x4f, 0x4e, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x3a, 0x3b, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xb4, 0x03, 0x0a, 0x17, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x04, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xa8, 0x03, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x6e, 0x6f, 0x74, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x42,
	0x4f, 0x54, 0x48, 0x10, 0x04, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x62, 0x6f, 0x74,
	0x68, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x03, 0x0a,
	0x16, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x01,
	0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x6e, 0x6f, 0x12, 0x20, 0x0a, 0x0a, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x08,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x42, 0x4f,
	0x54, 0x48, 0x10, 0x04, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x62, 0x6f, 0x74, 0x68,
	0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xd2, 0x06, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x04, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2c, 0x0a, 0x10, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x5f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x0e, 0x0a, 0x01, 0x4c, 0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4c, 0x12,
	0x0e, 0x0a, 0x01, 0x4d, 0x10, 0x03, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4d, 0x12,
	0x0e, 0x0a, 0x01, 0x4e, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4e, 0x12,
	0x0e, 0x0a, 0x01, 0x52, 0x10, 0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x52, 0x12,
	0x0e, 0x0a, 0x01, 0x55, 0x10, 0x06, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x55, 0x12,
	0x0e, 0x0a, 0x01, 0x56, 0x10, 0x07, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x56, 0x12,
	0x44, 0x0a, 0x1c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x42, 0x59, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4b, 0x49, 0x4e, 0x44, 0x10,
	0x08, 0x1a, 0x22, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1c, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x01, 0x42, 0x10, 0x09, 0x1a, 0x07, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x42, 0x12, 0x0e, 0x0a, 0x01, 0x44, 0x10, 0x0a, 0x1a, 0x07, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x44, 0x12, 0x0e, 0x0a, 0x01, 0x49, 0x10, 0x0b, 0x1a, 0x07, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x49, 0x12, 0x40, 0x0a, 0x1a, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x42, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0c, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x5f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x45, 0x54, 0x48, 0x10, 0x0d,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x45, 0x54, 0x48, 0x12, 0x12, 0x0a, 0x03, 0x48,
	0x49, 0x56, 0x10, 0x0e, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x48, 0x49, 0x56, 0x12,
	0x12, 0x0a, 0x03, 0x50, 0x53, 0x59, 0x10, 0x0f, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x50, 0x53, 0x59, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x44, 0x56, 0x10, 0x10, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x53, 0x44, 0x56, 0x12, 0x3e, 0x0a, 0x19, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x53, 0x10, 0x11, 0x1a, 0x1f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x19, 0x5f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x01, 0x43, 0x10, 0x12, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x43, 0x12, 0x0e, 0x0a, 0x01, 0x53, 0x10, 0x13, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x53, 0x12, 0x0e, 0x0a, 0x01, 0x54, 0x10, 0x14, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x54, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x76, 0x33, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0xab, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x92, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x6e, 0x6f,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x16,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x2d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0xf2, 0x02, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x02, 0x55, 0x50, 0x10, 0x01, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x75, 0x70, 0x12,
	0x14, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x10, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x03, 0x1a, 0x08, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x02, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x04,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x6f, 0x75, 0x74, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x79, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x79, 0x65, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x4c, 0x45,
	0x46, 0x54, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x65, 0x79, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xd6, 0x04, 0x0a, 0x1a,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x02, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x56, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x76, 0x72, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a,
	0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x04, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x10, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x08, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0c, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x08, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0b, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x09, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x35, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2d, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x03, 0x0a, 0x1c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x0b,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x02, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x1a, 0x14, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x02, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x41, 0x52, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x3a, 0x3e,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x32, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xd2,
	0x01, 0x0a, 0x13, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x36, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x42, 0x6d, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5,
	0x07, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_dstu2_codes_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_dstu2_codes_proto_rawDescData = file_proto_google_fhir_proto_dstu2_codes_proto_rawDesc
)

func file_proto_google_fhir_proto_dstu2_codes_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_dstu2_codes_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_dstu2_codes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_dstu2_codes_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_dstu2_codes_proto_rawDescData
}

var file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes = make([]protoimpl.EnumInfo, 136)
var file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes = make([]protoimpl.MessageInfo, 137)
var file_proto_google_fhir_proto_dstu2_codes_proto_goTypes = []interface{}{
	(ActionListCode_Value)(0),                     // 0: google.fhir.dstu2.proto.ActionListCode.Value
	(AdjudicationErrorCode_Value)(0),              // 1: google.fhir.dstu2.proto.AdjudicationErrorCode.Value
	(AdministrativeGenderCode_Value)(0),           // 2: google.fhir.dstu2.proto.AdministrativeGenderCode.Value
	(AllergyIntoleranceCategoryCode_Value)(0),     // 3: google.fhir.dstu2.proto.AllergyIntoleranceCategoryCode.Value
	(AllergyIntoleranceCriticalityCode_Value)(0),  // 4: google.fhir.dstu2.proto.AllergyIntoleranceCriticalityCode.Value
	(AllergyIntoleranceStatusCode_Value)(0),       // 5: google.fhir.dstu2.proto.AllergyIntoleranceStatusCode.Value
	(AllergyIntoleranceTypeCode_Value)(0),         // 6: google.fhir.dstu2.proto.AllergyIntoleranceTypeCode.Value
	(AnswerFormatCode_Value)(0),                   // 7: google.fhir.dstu2.proto.AnswerFormatCode.Value
	(AppointmentStatusCode_Value)(0),              // 8: google.fhir.dstu2.proto.AppointmentStatusCode.Value
	(AssertionDirectionTypeCode_Value)(0),         // 9: google.fhir.dstu2.proto.AssertionDirectionTypeCode.Value
	(AssertionOperatorTypeCode_Value)(0),          // 10: google.fhir.dstu2.proto.AssertionOperatorTypeCode.Value
	(AssertionResponseTypesCode_Value)(0),         // 11: google.fhir.dstu2.proto.AssertionResponseTypesCode.Value
	(AuditEventActionCode_Value)(0),               // 12: google.fhir.dstu2.proto.AuditEventActionCode.Value
	(AuditEventOutcomeCode_Value)(0),              // 13: google.fhir.dstu2.proto.AuditEventOutcomeCode.Value
	(BindingStrengthCode_Value)(0),                // 14: google.fhir.dstu2.proto.BindingStrengthCode.Value
	(BundleTypeCode_Value)(0),                     // 15: google.fhir.dstu2.proto.BundleTypeCode.Value
	(CarePlanActivityStatusCode_Value)(0),         // 16: google.fhir.dstu2.proto.CarePlanActivityStatusCode.Value
	(CarePlanRelationshipCode_Value)(0),           // 17: google.fhir.dstu2.proto.CarePlanRelationshipCode.Value
	(CarePlanStatusCode_Value)(0),                 // 18: google.fhir.dstu2.proto.CarePlanStatusCode.Value
	(ClaimTypeCode_Value)(0),                      // 19: google.fhir.dstu2.proto.ClaimTypeCode.Value
	(UseCode_Value)(0),                            // 20: google.fhir.dstu2.proto.UseCode.Value
	(ClinicalImpressionStatusCode_Value)(0),       // 21: google.fhir.dstu2.proto.ClinicalImpressionStatusCode.Value
	(CommunicationRequestStatusCode_Value)(0),     // 22: google.fhir.dstu2.proto.CommunicationRequestStatusCode.Value
	(CommunicationStatusCode_Value)(0),            // 23: google.fhir.dstu2.proto.CommunicationStatusCode.Value
	(CompositionAttestationModeCode_Value)(0),     // 24: google.fhir.dstu2.proto.CompositionAttestationModeCode.Value
	(CompositionStatusCode_Value)(0),              // 25: google.fhir.dstu2.proto.CompositionStatusCode.Value
	(ConceptMapEquivalenceCode_Value)(0),          // 26: google.fhir.dstu2.proto.ConceptMapEquivalenceCode.Value
	(ConditionVerificationStatusCode_Value)(0),    // 27: google.fhir.dstu2.proto.ConditionVerificationStatusCode.Value
	(ConditionalDeleteStatusCode_Value)(0),        // 28: google.fhir.dstu2.proto.ConditionalDeleteStatusCode.Value
	(ConformanceResourceStatusCode_Value)(0),      // 29: google.fhir.dstu2.proto.ConformanceResourceStatusCode.Value
	(ConformanceStatementKindCode_Value)(0),       // 30: google.fhir.dstu2.proto.ConformanceStatementKindCode.Value
	(ConstraintSeverityCode_Value)(0),             // 31: google.fhir.dstu2.proto.ConstraintSeverityCode.Value
	(ContentTypeCode_Value)(0),                    // 32: google.fhir.dstu2.proto.ContentTypeCode.Value
	(DataElementStringencyCode_Value)(0),          // 33: google.fhir.dstu2.proto.DataElementStringencyCode.Value
	(DaysOfWeekCode_Value)(0),                     // 34: google.fhir.dstu2.proto.DaysOfWeekCode.Value
	(DetectedIssueSeverityCode_Value)(0),          // 35: google.fhir.dstu2.proto.DetectedIssueSeverityCode.Value
	(DeviceActionCode_Value)(0),                   // 36: google.fhir.dstu2.proto.DeviceActionCode.Value
	(DeviceUseRequestPriorityCode_Value)(0),       // 37: google.fhir.dstu2.proto.DeviceUseRequestPriorityCode.Value
	(DeviceUseRequestStatusCode_Value)(0),         // 38: google.fhir.dstu2.proto.DeviceUseRequestStatusCode.Value
	(DeviceStatusCode_Value)(0),                   // 39: google.fhir.dstu2.proto.DeviceStatusCode.Value
	(DiagnosticOrderPriorityCode_Value)(0),        // 40: google.fhir.dstu2.proto.DiagnosticOrderPriorityCode.Value
	(DiagnosticOrderStatusCode_Value)(0),          // 41: google.fhir.dstu2.proto.DiagnosticOrderStatusCode.Value
	(DiagnosticReportStatusCode_Value)(0),         // 42: google.fhir.dstu2.proto.DiagnosticReportStatusCode.Value
	(DigitalMediaTypeCode_Value)(0),               // 43: google.fhir.dstu2.proto.DigitalMediaTypeCode.Value
	(DocumentModeCode_Value)(0),                   // 44: google.fhir.dstu2.proto.DocumentModeCode.Value
	(DocumentReferenceStatusCode_Value)(0),        // 45: google.fhir.dstu2.proto.DocumentReferenceStatusCode.Value
	(DocumentRelationshipTypeCode_Value)(0),       // 46: google.fhir.dstu2.proto.DocumentRelationshipTypeCode.Value
	(EncounterClassCode_Value)(0),                 // 47: google.fhir.dstu2.proto.EncounterClassCode.Value
	(EncounterLocationStatusCode_Value)(0),        // 48: google.fhir.dstu2.proto.EncounterLocationStatusCode.Value
	(ParticipantTypeCode_Value)(0),                // 49: google.fhir.dstu2.proto.ParticipantTypeCode.Value
	(EncounterStateCode_Value)(0),                 // 50: google.fhir.dstu2.proto.EncounterStateCode.Value
	(EpisodeOfCareStatusCode_Value)(0),            // 51: google.fhir.dstu2.proto.EpisodeOfCareStatusCode.Value
	(ExtensionContextCode_Value)(0),               // 52: google.fhir.dstu2.proto.ExtensionContextCode.Value
	(FilterOperatorCode_Value)(0),                 // 53: google.fhir.dstu2.proto.FilterOperatorCode.Value
	(FlagStatusCode_Value)(0),                     // 54: google.fhir.dstu2.proto.FlagStatusCode.Value
	(FormsCode_Value)(0),                          // 55: google.fhir.dstu2.proto.FormsCode.Value
	(GoalStatusCode_Value)(0),                     // 56: google.fhir.dstu2.proto.GoalStatusCode.Value
	(GroupTypeCode_Value)(0),                      // 57: google.fhir.dstu2.proto.GroupTypeCode.Value
	(GuideDependencyTypeCode_Value)(0),            // 58: google.fhir.dstu2.proto.GuideDependencyTypeCode.Value
	(GuidePageKindCode_Value)(0),                  // 59: google.fhir.dstu2.proto.GuidePageKindCode.Value
	(GuideResourcePurposeCode_Value)(0),           // 60: google.fhir.dstu2.proto.GuideResourcePurposeCode.Value
	(FamilyHistoryStatusCode_Value)(0),            // 61: google.fhir.dstu2.proto.FamilyHistoryStatusCode.Value
	(HTTPVerbCode_Value)(0),                       // 62: google.fhir.dstu2.proto.HTTPVerbCode.Value
	(IdentityAssuranceLevelCode_Value)(0),         // 63: google.fhir.dstu2.proto.IdentityAssuranceLevelCode.Value
	(IssueSeverityCode_Value)(0),                  // 64: google.fhir.dstu2.proto.IssueSeverityCode.Value
	(IssueTypeCode_Value)(0),                      // 65: google.fhir.dstu2.proto.IssueTypeCode.Value
	(LinkTypeCode_Value)(0),                       // 66: google.fhir.dstu2.proto.LinkTypeCode.Value
	(ListModeCode_Value)(0),                       // 67: google.fhir.dstu2.proto.ListModeCode.Value
	(ListStatusCode_Value)(0),                     // 68: google.fhir.dstu2.proto.ListStatusCode.Value
	(LocationModeCode_Value)(0),                   // 69: google.fhir.dstu2.proto.LocationModeCode.Value
	(LocationStatusCode_Value)(0),                 // 70: google.fhir.dstu2.proto.LocationStatusCode.Value
	(MaritalStatusCode_Value)(0),                  // 71: google.fhir.dstu2.proto.MaritalStatusCode.Value
	(MeasmntPrincipleCode_Value)(0),               // 72: google.fhir.dstu2.proto.MeasmntPrincipleCode.Value
	(MedicationAdministrationStatusCode_Value)(0), // 73: google.fhir.dstu2.proto.MedicationAdministrationStatusCode.Value
	(MedicationDispenseStatusCode_Value)(0),       // 74: google.fhir.dstu2.proto.MedicationDispenseStatusCode.Value
	(MedicationOrderStatusCode_Value)(0),          // 75: google.fhir.dstu2.proto.MedicationOrderStatusCode.Value
	(MedicationStatementStatusCode_Value)(0),      // 76: google.fhir.dstu2.proto.MedicationStatementStatusCode.Value
	(ConformanceEventModeCode_Value)(0),           // 77: google.fhir.dstu2.proto.ConformanceEventModeCode.Value
	(MessageSignificanceCategoryCode_Value)(0),    // 78: google.fhir.dstu2.proto.MessageSignificanceCategoryCode.Value
	(DeviceMetricCalibrationStateCode_Value)(0),   // 79: google.fhir.dstu2.proto.DeviceMetricCalibrationStateCode.Value
	(DeviceMetricCalibrationTypeCode_Value)(0),    // 80: google.fhir.dstu2.proto.DeviceMetricCalibrationTypeCode.Value
	(DeviceMetricCategoryCode_Value)(0),           // 81: google.fhir.dstu2.proto.DeviceMetricCategoryCode.Value
	(DeviceMetricColorCode_Value)(0),              // 82: google.fhir.dstu2.proto.DeviceMetricColorCode.Value
	(DeviceMetricOperationalStatusCode_Value)(0),  // 83: google.fhir.dstu2.proto.DeviceMetricOperationalStatusCode.Value
	(NamingSystemIdentifierTypeCode_Value)(0),     // 84: google.fhir.dstu2.proto.NamingSystemIdentifierTypeCode.Value
	(NamingSystemTypeCode_Value)(0),               // 85: google.fhir.dstu2.proto.NamingSystemTypeCode.Value
	(NarrativeStatusCode_Value)(0),                // 86: google.fhir.dstu2.proto.NarrativeStatusCode.Value
	(AuditEventAgentNetworkTypeCode_Value)(0),     // 87: google.fhir.dstu2.proto.AuditEventAgentNetworkTypeCode.Value
	(NoteTypeCode_Value)(0),                       // 88: google.fhir.dstu2.proto.NoteTypeCode.Value
	(NutritionOrderStatusCode_Value)(0),           // 89: google.fhir.dstu2.proto.NutritionOrderStatusCode.Value
	(ObservationRelationshipTypeCode_Value)(0),    // 90: google.fhir.dstu2.proto.ObservationRelationshipTypeCode.Value
	(ObservationStatusCode_Value)(0),              // 91: google.fhir.dstu2.proto.ObservationStatusCode.Value
	(OperationKindCode_Value)(0),                  // 92: google.fhir.dstu2.proto.OperationKindCode.Value
	(OperationParameterUseCode_Value)(0),          // 93: google.fhir.dstu2.proto.OperationParameterUseCode.Value
	(OrderStatusCode_Value)(0),                    // 94: google.fhir.dstu2.proto.OrderStatusCode.Value
	(ParticipantRequiredCode_Value)(0),            // 95: google.fhir.dstu2.proto.ParticipantRequiredCode.Value
	(ParticipantStatusCode_Value)(0),              // 96: google.fhir.dstu2.proto.ParticipantStatusCode.Value
	(ParticipationStatusCode_Value)(0),            // 97: google.fhir.dstu2.proto.ParticipationStatusCode.Value
	(ProcedureRequestPriorityCode_Value)(0),       // 98: google.fhir.dstu2.proto.ProcedureRequestPriorityCode.Value
	(ProcedureRequestStatusCode_Value)(0),         // 99: google.fhir.dstu2.proto.ProcedureRequestStatusCode.Value
	(ProcedureStatusCode_Value)(0),                // 100: google.fhir.dstu2.proto.ProcedureStatusCode.Value
	(PropertyRepresentationCode_Value)(0),         // 101: google.fhir.dstu2.proto.PropertyRepresentationCode.Value
	(ProvenanceEntityRoleCode_Value)(0),           // 102: google.fhir.dstu2.proto.ProvenanceEntityRoleCode.Value
	(QuestionnaireResponseStatusCode_Value)(0),    // 103: google.fhir.dstu2.proto.QuestionnaireResponseStatusCode.Value
	(QuestionnaireStatusCode_Value)(0),            // 104: google.fhir.dstu2.proto.QuestionnaireStatusCode.Value
	(AllergyIntoleranceCertaintyCode_Value)(0),    // 105: google.fhir.dstu2.proto.AllergyIntoleranceCertaintyCode.Value
	(AllergyIntoleranceSeverityCode_Value)(0),     // 106: google.fhir.dstu2.proto.AllergyIntoleranceSeverityCode.Value
	(ReferralStatusCode_Value)(0),                 // 107: google.fhir.dstu2.proto.ReferralStatusCode.Value
	(RemittanceOutcomeCode_Value)(0),              // 108: google.fhir.dstu2.proto.RemittanceOutcomeCode.Value
	(AggregationModeCode_Value)(0),                // 109: google.fhir.dstu2.proto.AggregationModeCode.Value
	(SlicingRulesCode_Value)(0),                   // 110: google.fhir.dstu2.proto.SlicingRulesCode.Value
	(ResourceTypeCode_Value)(0),                   // 111: google.fhir.dstu2.proto.ResourceTypeCode.Value
	(ResponseTypeCode_Value)(0),                   // 112: google.fhir.dstu2.proto.ResponseTypeCode.Value
	(RestfulConformanceModeCode_Value)(0),         // 113: google.fhir.dstu2.proto.RestfulConformanceModeCode.Value
	(SearchEntryModeCode_Value)(0),                // 114: google.fhir.dstu2.proto.SearchEntryModeCode.Value
	(SearchModifierCodeCode_Value)(0),             // 115: google.fhir.dstu2.proto.SearchModifierCodeCode.Value
	(SearchParamTypeCode_Value)(0),                // 116: google.fhir.dstu2.proto.SearchParamTypeCode.Value
	(XPathUsageTypeCode_Value)(0),                 // 117: google.fhir.dstu2.proto.XPathUsageTypeCode.Value
	(SlotStatusCode_Value)(0),                     // 118: google.fhir.dstu2.proto.SlotStatusCode.Value
	(SpecimenStatusCode_Value)(0),                 // 119: google.fhir.dstu2.proto.SpecimenStatusCode.Value
	(StructureDefinitionKindCode_Value)(0),        // 120: google.fhir.dstu2.proto.StructureDefinitionKindCode.Value
	(SubscriptionChannelTypeCode_Value)(0),        // 121: google.fhir.dstu2.proto.SubscriptionChannelTypeCode.Value
	(SubscriptionStatusCode_Value)(0),             // 122: google.fhir.dstu2.proto.SubscriptionStatusCode.Value
	(SupplyDeliveryStatusCode_Value)(0),           // 123: google.fhir.dstu2.proto.SupplyDeliveryStatusCode.Value
	(SupplyDeliveryCode_Value)(0),                 // 124: google.fhir.dstu2.proto.SupplyDeliveryCode.Value
	(SupplyTypeCode_Value)(0),                     // 125: google.fhir.dstu2.proto.SupplyTypeCode.Value
	(SupplyRequestStatusCode_Value)(0),            // 126: google.fhir.dstu2.proto.SupplyRequestStatusCode.Value
	(TransactionModeCode_Value)(0),                // 127: google.fhir.dstu2.proto.TransactionModeCode.Value
	(UnknownContentCodeCode_Value)(0),             // 128: google.fhir.dstu2.proto.UnknownContentCodeCode.Value
	(ConfidentialityClassificationCode_Value)(0),  // 129: google.fhir.dstu2.proto.ConfidentialityClassificationCode.Value
	(ResourceVersionPolicyCode_Value)(0),          // 130: google.fhir.dstu2.proto.ResourceVersionPolicyCode.Value
	(VisionBaseCode_Value)(0),                     // 131: google.fhir.dstu2.proto.VisionBaseCode.Value
	(VisionEyesCode_Value)(0),                     // 132: google.fhir.dstu2.proto.VisionEyesCode.Value
	(TypeRestfulInteractionCode_Value)(0),         // 133: google.fhir.dstu2.proto.TypeRestfulInteractionCode.Value
	(SystemRestfulInteractionCode_Value)(0),       // 134: google.fhir.dstu2.proto.SystemRestfulInteractionCode.Value
	(InstanceAvailabilityCode_Value)(0),           // 135: google.fhir.dstu2.proto.InstanceAvailabilityCode.Value
	(*ActionListCode)(nil),                        // 136: google.fhir.dstu2.proto.ActionListCode
	(*AdjudicationErrorCode)(nil),                 // 137: google.fhir.dstu2.proto.AdjudicationErrorCode
	(*AdministrativeGenderCode)(nil),              // 138: google.fhir.dstu2.proto.AdministrativeGenderCode
	(*AllergyIntoleranceCategoryCode)(nil),        // 139: google.fhir.dstu2.proto.AllergyIntoleranceCategoryCode
	(*AllergyIntoleranceCriticalityCode)(nil),     // 140: google.fhir.dstu2.proto.AllergyIntoleranceCriticalityCode
	(*AllergyIntoleranceStatusCode)(nil),          // 141: google.fhir.dstu2.proto.AllergyIntoleranceStatusCode
	(*AllergyIntoleranceTypeCode)(nil),            // 142: google.fhir.dstu2.proto.AllergyIntoleranceTypeCode
	(*AnswerFormatCode)(nil),                      // 143: google.fhir.dstu2.proto.AnswerFormatCode
	(*AppointmentStatusCode)(nil),                 // 144: google.fhir.dstu2.proto.AppointmentStatusCode
	(*AssertionDirectionTypeCode)(nil),            // 145: google.fhir.dstu2.proto.AssertionDirectionTypeCode
	(*AssertionOperatorTypeCode)(nil),             // 146: google.fhir.dstu2.proto.AssertionOperatorTypeCode
	(*AssertionResponseTypesCode)(nil),            // 147: google.fhir.dstu2.proto.AssertionResponseTypesCode
	(*AuditEventActionCode)(nil),                  // 148: google.fhir.dstu2.proto.AuditEventActionCode
	(*AuditEventOutcomeCode)(nil),                 // 149: google.fhir.dstu2.proto.AuditEventOutcomeCode
	(*BindingStrengthCode)(nil),                   // 150: google.fhir.dstu2.proto.BindingStrengthCode
	(*BundleTypeCode)(nil),                        // 151: google.fhir.dstu2.proto.BundleTypeCode
	(*CarePlanActivityStatusCode)(nil),            // 152: google.fhir.dstu2.proto.CarePlanActivityStatusCode
	(*CarePlanRelationshipCode)(nil),              // 153: google.fhir.dstu2.proto.CarePlanRelationshipCode
	(*CarePlanStatusCode)(nil),                    // 154: google.fhir.dstu2.proto.CarePlanStatusCode
	(*ClaimTypeCode)(nil),                         // 155: google.fhir.dstu2.proto.ClaimTypeCode
	(*UseCode)(nil),                               // 156: google.fhir.dstu2.proto.UseCode
	(*ClinicalImpressionStatusCode)(nil),          // 157: google.fhir.dstu2.proto.ClinicalImpressionStatusCode
	(*CommunicationRequestStatusCode)(nil),        // 158: google.fhir.dstu2.proto.CommunicationRequestStatusCode
	(*CommunicationStatusCode)(nil),               // 159: google.fhir.dstu2.proto.CommunicationStatusCode
	(*CompositionAttestationModeCode)(nil),        // 160: google.fhir.dstu2.proto.CompositionAttestationModeCode
	(*CompositionStatusCode)(nil),                 // 161: google.fhir.dstu2.proto.CompositionStatusCode
	(*ConceptMapEquivalenceCode)(nil),             // 162: google.fhir.dstu2.proto.ConceptMapEquivalenceCode
	(*ConditionVerificationStatusCode)(nil),       // 163: google.fhir.dstu2.proto.ConditionVerificationStatusCode
	(*ConditionalDeleteStatusCode)(nil),           // 164: google.fhir.dstu2.proto.ConditionalDeleteStatusCode
	(*ConformanceResourceStatusCode)(nil),         // 165: google.fhir.dstu2.proto.ConformanceResourceStatusCode
	(*ConformanceStatementKindCode)(nil),          // 166: google.fhir.dstu2.proto.ConformanceStatementKindCode
	(*ConstraintSeverityCode)(nil),                // 167: google.fhir.dstu2.proto.ConstraintSeverityCode
	(*ContentTypeCode)(nil),                       // 168: google.fhir.dstu2.proto.ContentTypeCode
	(*DataElementStringencyCode)(nil),             // 169: google.fhir.dstu2.proto.DataElementStringencyCode
	(*DaysOfWeekCode)(nil),                        // 170: google.fhir.dstu2.proto.DaysOfWeekCode
	(*DetectedIssueSeverityCode)(nil),             // 171: google.fhir.dstu2.proto.DetectedIssueSeverityCode
	(*DeviceActionCode)(nil),                      // 172: google.fhir.dstu2.proto.DeviceActionCode
	(*DeviceUseRequestPriorityCode)(nil),          // 173: google.fhir.dstu2.proto.DeviceUseRequestPriorityCode
	(*DeviceUseRequestStatusCode)(nil),            // 174: google.fhir.dstu2.proto.DeviceUseRequestStatusCode
	(*DeviceStatusCode)(nil),                      // 175: google.fhir.dstu2.proto.DeviceStatusCode
	(*DiagnosticOrderPriorityCode)(nil),           // 176: google.fhir.dstu2.proto.DiagnosticOrderPriorityCode
	(*DiagnosticOrderStatusCode)(nil),             // 177: google.fhir.dstu2.proto.DiagnosticOrderStatusCode
	(*DiagnosticReportStatusCode)(nil),            // 178: google.fhir.dstu2.proto.DiagnosticReportStatusCode
	(*DigitalMediaTypeCode)(nil),                  // 179: google.fhir.dstu2.proto.DigitalMediaTypeCode
	(*DocumentModeCode)(nil),                      // 180: google.fhir.dstu2.proto.DocumentModeCode
	(*DocumentReferenceStatusCode)(nil),           // 181: google.fhir.dstu2.proto.DocumentReferenceStatusCode
	(*DocumentRelationshipTypeCode)(nil),          // 182: google.fhir.dstu2.proto.DocumentRelationshipTypeCode
	(*EncounterClassCode)(nil),                    // 183: google.fhir.dstu2.proto.EncounterClassCode
	(*EncounterLocationStatusCode)(nil),           // 184: google.fhir.dstu2.proto.EncounterLocationStatusCode
	(*ParticipantTypeCode)(nil),                   // 185: google.fhir.dstu2.proto.ParticipantTypeCode
	(*EncounterStateCode)(nil),                    // 186: google.fhir.dstu2.proto.EncounterStateCode
	(*EpisodeOfCareStatusCode)(nil),               // 187: google.fhir.dstu2.proto.EpisodeOfCareStatusCode
	(*ExtensionContextCode)(nil),                  // 188: google.fhir.dstu2.proto.ExtensionContextCode
	(*FilterOperatorCode)(nil),                    // 189: google.fhir.dstu2.proto.FilterOperatorCode
	(*FlagStatusCode)(nil),                        // 190: google.fhir.dstu2.proto.FlagStatusCode
	(*FormsCode)(nil),                             // 191: google.fhir.dstu2.proto.FormsCode
	(*GoalStatusCode)(nil),                        // 192: google.fhir.dstu2.proto.GoalStatusCode
	(*GroupTypeCode)(nil),                         // 193: google.fhir.dstu2.proto.GroupTypeCode
	(*GuideDependencyTypeCode)(nil),               // 194: google.fhir.dstu2.proto.GuideDependencyTypeCode
	(*GuidePageKindCode)(nil),                     // 195: google.fhir.dstu2.proto.GuidePageKindCode
	(*GuideResourcePurposeCode)(nil),              // 196: google.fhir.dstu2.proto.GuideResourcePurposeCode
	(*FamilyHistoryStatusCode)(nil),               // 197: google.fhir.dstu2.proto.FamilyHistoryStatusCode
	(*HTTPVerbCode)(nil),                          // 198: google.fhir.dstu2.proto.HTTPVerbCode
	(*IdentityAssuranceLevelCode)(nil),            // 199: google.fhir.dstu2.proto.IdentityAssuranceLevelCode
	(*IssueSeverityCode)(nil),                     // 200: google.fhir.dstu2.proto.IssueSeverityCode
	(*IssueTypeCode)(nil),                         // 201: google.fhir.dstu2.proto.IssueTypeCode
	(*LinkTypeCode)(nil),                          // 202: google.fhir.dstu2.proto.LinkTypeCode
	(*ListModeCode)(nil),                          // 203: google.fhir.dstu2.proto.ListModeCode
	(*ListStatusCode)(nil),                        // 204: google.fhir.dstu2.proto.ListStatusCode
	(*LocationModeCode)(nil),                      // 205: google.fhir.dstu2.proto.LocationModeCode
	(*LocationStatusCode)(nil),                    // 206: google.fhir.dstu2.proto.LocationStatusCode
	(*MaritalStatusCode)(nil),                     // 207: google.fhir.dstu2.proto.MaritalStatusCode
	(*MeasmntPrincipleCode)(nil),                  // 208: google.fhir.dstu2.proto.MeasmntPrincipleCode
	(*MedicationAdministrationStatusCode)(nil),    // 209: google.fhir.dstu2.proto.MedicationAdministrationStatusCode
	(*MedicationDispenseStatusCode)(nil),          // 210: google.fhir.dstu2.proto.MedicationDispenseStatusCode
	(*MedicationOrderStatusCode)(nil),             // 211: google.fhir.dstu2.proto.MedicationOrderStatusCode
	(*MedicationStatementStatusCode)(nil),         // 212: google.fhir.dstu2.proto.MedicationStatementStatusCode
	(*ConformanceEventModeCode)(nil),              // 213: google.fhir.dstu2.proto.ConformanceEventModeCode
	(*MessageSignificanceCategoryCode)(nil),       // 214: google.fhir.dstu2.proto.MessageSignificanceCategoryCode
	(*DeviceMetricCalibrationStateCode)(nil),      // 215: google.fhir.dstu2.proto.DeviceMetricCalibrationStateCode
	(*DeviceMetricCalibrationTypeCode)(nil),       // 216: google.fhir.dstu2.proto.DeviceMetricCalibrationTypeCode
	(*DeviceMetricCategoryCode)(nil),              // 217: google.fhir.dstu2.proto.DeviceMetricCategoryCode
	(*DeviceMetricColorCode)(nil),                 // 218: google.fhir.dstu2.proto.DeviceMetricColorCode
	(*DeviceMetricOperationalStatusCode)(nil),     // 219: google.fhir.dstu2.proto.DeviceMetricOperationalStatusCode
	(*NamingSystemIdentifierTypeCode)(nil),        // 220: google.fhir.dstu2.proto.NamingSystemIdentifierTypeCode
	(*NamingSystemTypeCode)(nil),                  // 221: google.fhir.dstu2.proto.NamingSystemTypeCode
	(*NarrativeStatusCode)(nil),                   // 222: google.fhir.dstu2.proto.NarrativeStatusCode
	(*AuditEventAgentNetworkTypeCode)(nil),        // 223: google.fhir.dstu2.proto.AuditEventAgentNetworkTypeCode
	(*NoteTypeCode)(nil),                          // 224: google.fhir.dstu2.proto.NoteTypeCode
	(*NutritionOrderStatusCode)(nil),              // 225: google.fhir.dstu2.proto.NutritionOrderStatusCode
	(*ObservationRelationshipTypeCode)(nil),       // 226: google.fhir.dstu2.proto.ObservationRelationshipTypeCode
	(*ObservationStatusCode)(nil),                 // 227: google.fhir.dstu2.proto.ObservationStatusCode
	(*OperationKindCode)(nil),                     // 228: google.fhir.dstu2.proto.OperationKindCode
	(*OperationParameterUseCode)(nil),             // 229: google.fhir.dstu2.proto.OperationParameterUseCode
	(*OrderStatusCode)(nil),                       // 230: google.fhir.dstu2.proto.OrderStatusCode
	(*ParticipantRequiredCode)(nil),               // 231: google.fhir.dstu2.proto.ParticipantRequiredCode
	(*ParticipantStatusCode)(nil),                 // 232: google.fhir.dstu2.proto.ParticipantStatusCode
	(*ParticipationStatusCode)(nil),               // 233: google.fhir.dstu2.proto.ParticipationStatusCode
	(*ProcedureRequestPriorityCode)(nil),          // 234: google.fhir.dstu2.proto.ProcedureRequestPriorityCode
	(*ProcedureRequestStatusCode)(nil),            // 235: google.fhir.dstu2.proto.ProcedureRequestStatusCode
	(*ProcedureStatusCode)(nil),                   // 236: google.fhir.dstu2.proto.ProcedureStatusCode
	(*PropertyRepresentationCode)(nil),            // 237: google.fhir.dstu2.proto.PropertyRepresentationCode
	(*ProvenanceEntityRoleCode)(nil),              // 238: google.fhir.dstu2.proto.ProvenanceEntityRoleCode
	(*QuestionnaireResponseStatusCode)(nil),       // 239: google.fhir.dstu2.proto.QuestionnaireResponseStatusCode
	(*QuestionnaireStatusCode)(nil),               // 240: google.fhir.dstu2.proto.QuestionnaireStatusCode
	(*AllergyIntoleranceCertaintyCode)(nil),       // 241: google.fhir.dstu2.proto.AllergyIntoleranceCertaintyCode
	(*AllergyIntoleranceSeverityCode)(nil),        // 242: google.fhir.dstu2.proto.AllergyIntoleranceSeverityCode
	(*ReferralStatusCode)(nil),                    // 243: google.fhir.dstu2.proto.ReferralStatusCode
	(*RemittanceOutcomeCode)(nil),                 // 244: google.fhir.dstu2.proto.RemittanceOutcomeCode
	(*AggregationModeCode)(nil),                   // 245: google.fhir.dstu2.proto.AggregationModeCode
	(*SlicingRulesCode)(nil),                      // 246: google.fhir.dstu2.proto.SlicingRulesCode
	(*ResourceTypeCode)(nil),                      // 247: google.fhir.dstu2.proto.ResourceTypeCode
	(*ResponseTypeCode)(nil),                      // 248: google.fhir.dstu2.proto.ResponseTypeCode
	(*RestfulConformanceModeCode)(nil),            // 249: google.fhir.dstu2.proto.RestfulConformanceModeCode
	(*SearchEntryModeCode)(nil),                   // 250: google.fhir.dstu2.proto.SearchEntryModeCode
	(*SearchModifierCodeCode)(nil),                // 251: google.fhir.dstu2.proto.SearchModifierCodeCode
	(*SearchParamTypeCode)(nil),                   // 252: google.fhir.dstu2.proto.SearchParamTypeCode
	(*XPathUsageTypeCode)(nil),                    // 253: google.fhir.dstu2.proto.XPathUsageTypeCode
	(*SlotStatusCode)(nil),                        // 254: google.fhir.dstu2.proto.SlotStatusCode
	(*SpecimenStatusCode)(nil),                    // 255: google.fhir.dstu2.proto.SpecimenStatusCode
	(*StructureDefinitionKindCode)(nil),           // 256: google.fhir.dstu2.proto.StructureDefinitionKindCode
	(*SubscriptionChannelTypeCode)(nil),           // 257: google.fhir.dstu2.proto.SubscriptionChannelTypeCode
	(*SubscriptionStatusCode)(nil),                // 258: google.fhir.dstu2.proto.SubscriptionStatusCode
	(*SupplyDeliveryStatusCode)(nil),              // 259: google.fhir.dstu2.proto.SupplyDeliveryStatusCode
	(*SupplyDeliveryCode)(nil),                    // 260: google.fhir.dstu2.proto.SupplyDeliveryCode
	(*SupplyTypeCode)(nil),                        // 261: google.fhir.dstu2.proto.SupplyTypeCode
	(*SupplyRequestStatusCode)(nil),               // 262: google.fhir.dstu2.proto.SupplyRequestStatusCode
	(*TransactionModeCode)(nil),                   // 263: google.fhir.dstu2.proto.TransactionModeCode
	(*UnknownContentCodeCode)(nil),                // 264: google.fhir.dstu2.proto.UnknownContentCodeCode
	(*ConfidentialityClassificationCode)(nil),     // 265: google.fhir.dstu2.proto.ConfidentialityClassificationCode
	(*ResourceVersionPolicyCode)(nil),             // 266: google.fhir.dstu2.proto.ResourceVersionPolicyCode
	(*VisionBaseCode)(nil),                        // 267: google.fhir.dstu2.proto.VisionBaseCode
	(*VisionEyesCode)(nil),                        // 268: google.fhir.dstu2.proto.VisionEyesCode
	(*TypeRestfulInteractionCode)(nil),            // 269: google.fhir.dstu2.proto.TypeRestfulInteractionCode
	(*SystemRestfulInteractionCode)(nil),          // 270: google.fhir.dstu2.proto.SystemRestfulInteractionCode
	(*InstanceAvailabilityCode)(nil),              // 271: google.fhir.dstu2.proto.InstanceAvailabilityCode
	(*FHIRDefinedTypeCode)(nil),                   // 272: google.fhir.dstu2.proto.FHIRDefinedTypeCode
	(*datatypes_go_proto.Id)(nil),                 // 273: google.fhir.dstu2.proto.Id
	(*datatypes_go_proto.Extension)(nil),          // 274: google.fhir.dstu2.proto.Extension
}
var file_proto_google_fhir_proto_dstu2_codes_proto_depIdxs = []int32{
	0,   // 0: google.fhir.dstu2.proto.ActionListCode.value:type_name -> google.fhir.dstu2.proto.ActionListCode.Value
	273, // 1: google.fhir.dstu2.proto.ActionListCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 2: google.fhir.dstu2.proto.ActionListCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	1,   // 3: google.fhir.dstu2.proto.AdjudicationErrorCode.value:type_name -> google.fhir.dstu2.proto.AdjudicationErrorCode.Value
	273, // 4: google.fhir.dstu2.proto.AdjudicationErrorCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 5: google.fhir.dstu2.proto.AdjudicationErrorCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	2,   // 6: google.fhir.dstu2.proto.AdministrativeGenderCode.value:type_name -> google.fhir.dstu2.proto.AdministrativeGenderCode.Value
	273, // 7: google.fhir.dstu2.proto.AdministrativeGenderCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 8: google.fhir.dstu2.proto.AdministrativeGenderCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	3,   // 9: google.fhir.dstu2.proto.AllergyIntoleranceCategoryCode.value:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceCategoryCode.Value
	273, // 10: google.fhir.dstu2.proto.AllergyIntoleranceCategoryCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 11: google.fhir.dstu2.proto.AllergyIntoleranceCategoryCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	4,   // 12: google.fhir.dstu2.proto.AllergyIntoleranceCriticalityCode.value:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceCriticalityCode.Value
	273, // 13: google.fhir.dstu2.proto.AllergyIntoleranceCriticalityCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 14: google.fhir.dstu2.proto.AllergyIntoleranceCriticalityCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	5,   // 15: google.fhir.dstu2.proto.AllergyIntoleranceStatusCode.value:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceStatusCode.Value
	273, // 16: google.fhir.dstu2.proto.AllergyIntoleranceStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 17: google.fhir.dstu2.proto.AllergyIntoleranceStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	6,   // 18: google.fhir.dstu2.proto.AllergyIntoleranceTypeCode.value:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceTypeCode.Value
	273, // 19: google.fhir.dstu2.proto.AllergyIntoleranceTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 20: google.fhir.dstu2.proto.AllergyIntoleranceTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	7,   // 21: google.fhir.dstu2.proto.AnswerFormatCode.value:type_name -> google.fhir.dstu2.proto.AnswerFormatCode.Value
	273, // 22: google.fhir.dstu2.proto.AnswerFormatCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 23: google.fhir.dstu2.proto.AnswerFormatCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	8,   // 24: google.fhir.dstu2.proto.AppointmentStatusCode.value:type_name -> google.fhir.dstu2.proto.AppointmentStatusCode.Value
	273, // 25: google.fhir.dstu2.proto.AppointmentStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 26: google.fhir.dstu2.proto.AppointmentStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	9,   // 27: google.fhir.dstu2.proto.AssertionDirectionTypeCode.value:type_name -> google.fhir.dstu2.proto.AssertionDirectionTypeCode.Value
	273, // 28: google.fhir.dstu2.proto.AssertionDirectionTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 29: google.fhir.dstu2.proto.AssertionDirectionTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	10,  // 30: google.fhir.dstu2.proto.AssertionOperatorTypeCode.value:type_name -> google.fhir.dstu2.proto.AssertionOperatorTypeCode.Value
	273, // 31: google.fhir.dstu2.proto.AssertionOperatorTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 32: google.fhir.dstu2.proto.AssertionOperatorTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	11,  // 33: google.fhir.dstu2.proto.AssertionResponseTypesCode.value:type_name -> google.fhir.dstu2.proto.AssertionResponseTypesCode.Value
	273, // 34: google.fhir.dstu2.proto.AssertionResponseTypesCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 35: google.fhir.dstu2.proto.AssertionResponseTypesCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	12,  // 36: google.fhir.dstu2.proto.AuditEventActionCode.value:type_name -> google.fhir.dstu2.proto.AuditEventActionCode.Value
	273, // 37: google.fhir.dstu2.proto.AuditEventActionCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 38: google.fhir.dstu2.proto.AuditEventActionCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	13,  // 39: google.fhir.dstu2.proto.AuditEventOutcomeCode.value:type_name -> google.fhir.dstu2.proto.AuditEventOutcomeCode.Value
	273, // 40: google.fhir.dstu2.proto.AuditEventOutcomeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 41: google.fhir.dstu2.proto.AuditEventOutcomeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	14,  // 42: google.fhir.dstu2.proto.BindingStrengthCode.value:type_name -> google.fhir.dstu2.proto.BindingStrengthCode.Value
	273, // 43: google.fhir.dstu2.proto.BindingStrengthCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 44: google.fhir.dstu2.proto.BindingStrengthCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	15,  // 45: google.fhir.dstu2.proto.BundleTypeCode.value:type_name -> google.fhir.dstu2.proto.BundleTypeCode.Value
	273, // 46: google.fhir.dstu2.proto.BundleTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 47: google.fhir.dstu2.proto.BundleTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	16,  // 48: google.fhir.dstu2.proto.CarePlanActivityStatusCode.value:type_name -> google.fhir.dstu2.proto.CarePlanActivityStatusCode.Value
	273, // 49: google.fhir.dstu2.proto.CarePlanActivityStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 50: google.fhir.dstu2.proto.CarePlanActivityStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	17,  // 51: google.fhir.dstu2.proto.CarePlanRelationshipCode.value:type_name -> google.fhir.dstu2.proto.CarePlanRelationshipCode.Value
	273, // 52: google.fhir.dstu2.proto.CarePlanRelationshipCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 53: google.fhir.dstu2.proto.CarePlanRelationshipCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	18,  // 54: google.fhir.dstu2.proto.CarePlanStatusCode.value:type_name -> google.fhir.dstu2.proto.CarePlanStatusCode.Value
	273, // 55: google.fhir.dstu2.proto.CarePlanStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 56: google.fhir.dstu2.proto.CarePlanStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	19,  // 57: google.fhir.dstu2.proto.ClaimTypeCode.value:type_name -> google.fhir.dstu2.proto.ClaimTypeCode.Value
	273, // 58: google.fhir.dstu2.proto.ClaimTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 59: google.fhir.dstu2.proto.ClaimTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	20,  // 60: google.fhir.dstu2.proto.UseCode.value:type_name -> google.fhir.dstu2.proto.UseCode.Value
	273, // 61: google.fhir.dstu2.proto.UseCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 62: google.fhir.dstu2.proto.UseCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	21,  // 63: google.fhir.dstu2.proto.ClinicalImpressionStatusCode.value:type_name -> google.fhir.dstu2.proto.ClinicalImpressionStatusCode.Value
	273, // 64: google.fhir.dstu2.proto.ClinicalImpressionStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 65: google.fhir.dstu2.proto.ClinicalImpressionStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	22,  // 66: google.fhir.dstu2.proto.CommunicationRequestStatusCode.value:type_name -> google.fhir.dstu2.proto.CommunicationRequestStatusCode.Value
	273, // 67: google.fhir.dstu2.proto.CommunicationRequestStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 68: google.fhir.dstu2.proto.CommunicationRequestStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	23,  // 69: google.fhir.dstu2.proto.CommunicationStatusCode.value:type_name -> google.fhir.dstu2.proto.CommunicationStatusCode.Value
	273, // 70: google.fhir.dstu2.proto.CommunicationStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 71: google.fhir.dstu2.proto.CommunicationStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	24,  // 72: google.fhir.dstu2.proto.CompositionAttestationModeCode.value:type_name -> google.fhir.dstu2.proto.CompositionAttestationModeCode.Value
	273, // 73: google.fhir.dstu2.proto.CompositionAttestationModeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 74: google.fhir.dstu2.proto.CompositionAttestationModeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	25,  // 75: google.fhir.dstu2.proto.CompositionStatusCode.value:type_name -> google.fhir.dstu2.proto.CompositionStatusCode.Value
	273, // 76: google.fhir.dstu2.proto.CompositionStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 77: google.fhir.dstu2.proto.CompositionStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	26,  // 78: google.fhir.dstu2.proto.ConceptMapEquivalenceCode.value:type_name -> google.fhir.dstu2.proto.ConceptMapEquivalenceCode.Value
	273, // 79: google.fhir.dstu2.proto.ConceptMapEquivalenceCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 80: google.fhir.dstu2.proto.ConceptMapEquivalenceCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	27,  // 81: google.fhir.dstu2.proto.ConditionVerificationStatusCode.value:type_name -> google.fhir.dstu2.proto.ConditionVerificationStatusCode.Value
	273, // 82: google.fhir.dstu2.proto.ConditionVerificationStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 83: google.fhir.dstu2.proto.ConditionVerificationStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	28,  // 84: google.fhir.dstu2.proto.ConditionalDeleteStatusCode.value:type_name -> google.fhir.dstu2.proto.ConditionalDeleteStatusCode.Value
	273, // 85: google.fhir.dstu2.proto.ConditionalDeleteStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 86: google.fhir.dstu2.proto.ConditionalDeleteStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	29,  // 87: google.fhir.dstu2.proto.ConformanceResourceStatusCode.value:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode.Value
	273, // 88: google.fhir.dstu2.proto.ConformanceResourceStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 89: google.fhir.dstu2.proto.ConformanceResourceStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	30,  // 90: google.fhir.dstu2.proto.ConformanceStatementKindCode.value:type_name -> google.fhir.dstu2.proto.ConformanceStatementKindCode.Value
	273, // 91: google.fhir.dstu2.proto.ConformanceStatementKindCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 92: google.fhir.dstu2.proto.ConformanceStatementKindCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	31,  // 93: google.fhir.dstu2.proto.ConstraintSeverityCode.value:type_name -> google.fhir.dstu2.proto.ConstraintSeverityCode.Value
	273, // 94: google.fhir.dstu2.proto.ConstraintSeverityCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 95: google.fhir.dstu2.proto.ConstraintSeverityCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	32,  // 96: google.fhir.dstu2.proto.ContentTypeCode.value:type_name -> google.fhir.dstu2.proto.ContentTypeCode.Value
	273, // 97: google.fhir.dstu2.proto.ContentTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 98: google.fhir.dstu2.proto.ContentTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	33,  // 99: google.fhir.dstu2.proto.DataElementStringencyCode.value:type_name -> google.fhir.dstu2.proto.DataElementStringencyCode.Value
	273, // 100: google.fhir.dstu2.proto.DataElementStringencyCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 101: google.fhir.dstu2.proto.DataElementStringencyCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	34,  // 102: google.fhir.dstu2.proto.DaysOfWeekCode.value:type_name -> google.fhir.dstu2.proto.DaysOfWeekCode.Value
	273, // 103: google.fhir.dstu2.proto.DaysOfWeekCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 104: google.fhir.dstu2.proto.DaysOfWeekCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	35,  // 105: google.fhir.dstu2.proto.DetectedIssueSeverityCode.value:type_name -> google.fhir.dstu2.proto.DetectedIssueSeverityCode.Value
	273, // 106: google.fhir.dstu2.proto.DetectedIssueSeverityCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 107: google.fhir.dstu2.proto.DetectedIssueSeverityCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	36,  // 108: google.fhir.dstu2.proto.DeviceActionCode.value:type_name -> google.fhir.dstu2.proto.DeviceActionCode.Value
	273, // 109: google.fhir.dstu2.proto.DeviceActionCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 110: google.fhir.dstu2.proto.DeviceActionCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	37,  // 111: google.fhir.dstu2.proto.DeviceUseRequestPriorityCode.value:type_name -> google.fhir.dstu2.proto.DeviceUseRequestPriorityCode.Value
	273, // 112: google.fhir.dstu2.proto.DeviceUseRequestPriorityCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 113: google.fhir.dstu2.proto.DeviceUseRequestPriorityCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	38,  // 114: google.fhir.dstu2.proto.DeviceUseRequestStatusCode.value:type_name -> google.fhir.dstu2.proto.DeviceUseRequestStatusCode.Value
	273, // 115: google.fhir.dstu2.proto.DeviceUseRequestStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 116: google.fhir.dstu2.proto.DeviceUseRequestStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	39,  // 117: google.fhir.dstu2.proto.DeviceStatusCode.value:type_name -> google.fhir.dstu2.proto.DeviceStatusCode.Value
	273, // 118: google.fhir.dstu2.proto.DeviceStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 119: google.fhir.dstu2.proto.DeviceStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	40,  // 120: google.fhir.dstu2.proto.DiagnosticOrderPriorityCode.value:type_name -> google.fhir.dstu2.proto.DiagnosticOrderPriorityCode.Value
	273, // 121: google.fhir.dstu2.proto.DiagnosticOrderPriorityCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 122: google.fhir.dstu2.proto.DiagnosticOrderPriorityCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	41,  // 123: google.fhir.dstu2.proto.DiagnosticOrderStatusCode.value:type_name -> google.fhir.dstu2.proto.DiagnosticOrderStatusCode.Value
	273, // 124: google.fhir.dstu2.proto.DiagnosticOrderStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 125: google.fhir.dstu2.proto.DiagnosticOrderStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	42,  // 126: google.fhir.dstu2.proto.DiagnosticReportStatusCode.value:type_name -> google.fhir.dstu2.proto.DiagnosticReportStatusCode.Value
	273, // 127: google.fhir.dstu2.proto.DiagnosticReportStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 128: google.fhir.dstu2.proto.DiagnosticReportStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	43,  // 129: google.fhir.dstu2.proto.DigitalMediaTypeCode.value:type_name -> google.fhir.dstu2.proto.DigitalMediaTypeCode.Value
	273, // 130: google.fhir.dstu2.proto.DigitalMediaTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 131: google.fhir.dstu2.proto.DigitalMediaTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	44,  // 132: google.fhir.dstu2.proto.DocumentModeCode.value:type_name -> google.fhir.dstu2.proto.DocumentModeCode.Value
	273, // 133: google.fhir.dstu2.proto.DocumentModeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 134: google.fhir.dstu2.proto.DocumentModeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	45,  // 135: google.fhir.dstu2.proto.DocumentReferenceStatusCode.value:type_name -> google.fhir.dstu2.proto.DocumentReferenceStatusCode.Value
	273, // 136: google.fhir.dstu2.proto.DocumentReferenceStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 137: google.fhir.dstu2.proto.DocumentReferenceStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	46,  // 138: google.fhir.dstu2.proto.DocumentRelationshipTypeCode.value:type_name -> google.fhir.dstu2.proto.DocumentRelationshipTypeCode.Value
	273, // 139: google.fhir.dstu2.proto.DocumentRelationshipTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 140: google.fhir.dstu2.proto.DocumentRelationshipTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	47,  // 141: google.fhir.dstu2.proto.EncounterClassCode.value:type_name -> google.fhir.dstu2.proto.EncounterClassCode.Value
	273, // 142: google.fhir.dstu2.proto.EncounterClassCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 143: google.fhir.dstu2.proto.EncounterClassCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	48,  // 144: google.fhir.dstu2.proto.EncounterLocationStatusCode.value:type_name -> google.fhir.dstu2.proto.EncounterLocationStatusCode.Value
	273, // 145: google.fhir.dstu2.proto.EncounterLocationStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 146: google.fhir.dstu2.proto.EncounterLocationStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	49,  // 147: google.fhir.dstu2.proto.ParticipantTypeCode.value:type_name -> google.fhir.dstu2.proto.ParticipantTypeCode.Value
	273, // 148: google.fhir.dstu2.proto.ParticipantTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 149: google.fhir.dstu2.proto.ParticipantTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	50,  // 150: google.fhir.dstu2.proto.EncounterStateCode.value:type_name -> google.fhir.dstu2.proto.EncounterStateCode.Value
	273, // 151: google.fhir.dstu2.proto.EncounterStateCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 152: google.fhir.dstu2.proto.EncounterStateCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	51,  // 153: google.fhir.dstu2.proto.EpisodeOfCareStatusCode.value:type_name -> google.fhir.dstu2.proto.EpisodeOfCareStatusCode.Value
	273, // 154: google.fhir.dstu2.proto.EpisodeOfCareStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 155: google.fhir.dstu2.proto.EpisodeOfCareStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	52,  // 156: google.fhir.dstu2.proto.ExtensionContextCode.value:type_name -> google.fhir.dstu2.proto.ExtensionContextCode.Value
	273, // 157: google.fhir.dstu2.proto.ExtensionContextCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 158: google.fhir.dstu2.proto.ExtensionContextCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	53,  // 159: google.fhir.dstu2.proto.FilterOperatorCode.value:type_name -> google.fhir.dstu2.proto.FilterOperatorCode.Value
	273, // 160: google.fhir.dstu2.proto.FilterOperatorCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 161: google.fhir.dstu2.proto.FilterOperatorCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	54,  // 162: google.fhir.dstu2.proto.FlagStatusCode.value:type_name -> google.fhir.dstu2.proto.FlagStatusCode.Value
	273, // 163: google.fhir.dstu2.proto.FlagStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 164: google.fhir.dstu2.proto.FlagStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	55,  // 165: google.fhir.dstu2.proto.FormsCode.value:type_name -> google.fhir.dstu2.proto.FormsCode.Value
	273, // 166: google.fhir.dstu2.proto.FormsCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 167: google.fhir.dstu2.proto.FormsCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	56,  // 168: google.fhir.dstu2.proto.GoalStatusCode.value:type_name -> google.fhir.dstu2.proto.GoalStatusCode.Value
	273, // 169: google.fhir.dstu2.proto.GoalStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 170: google.fhir.dstu2.proto.GoalStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	57,  // 171: google.fhir.dstu2.proto.GroupTypeCode.value:type_name -> google.fhir.dstu2.proto.GroupTypeCode.Value
	273, // 172: google.fhir.dstu2.proto.GroupTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 173: google.fhir.dstu2.proto.GroupTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	58,  // 174: google.fhir.dstu2.proto.GuideDependencyTypeCode.value:type_name -> google.fhir.dstu2.proto.GuideDependencyTypeCode.Value
	273, // 175: google.fhir.dstu2.proto.GuideDependencyTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 176: google.fhir.dstu2.proto.GuideDependencyTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	59,  // 177: google.fhir.dstu2.proto.GuidePageKindCode.value:type_name -> google.fhir.dstu2.proto.GuidePageKindCode.Value
	273, // 178: google.fhir.dstu2.proto.GuidePageKindCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 179: google.fhir.dstu2.proto.GuidePageKindCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	60,  // 180: google.fhir.dstu2.proto.GuideResourcePurposeCode.value:type_name -> google.fhir.dstu2.proto.GuideResourcePurposeCode.Value
	273, // 181: google.fhir.dstu2.proto.GuideResourcePurposeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 182: google.fhir.dstu2.proto.GuideResourcePurposeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	61,  // 183: google.fhir.dstu2.proto.FamilyHistoryStatusCode.value:type_name -> google.fhir.dstu2.proto.FamilyHistoryStatusCode.Value
	273, // 184: google.fhir.dstu2.proto.FamilyHistoryStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 185: google.fhir.dstu2.proto.FamilyHistoryStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	62,  // 186: google.fhir.dstu2.proto.HTTPVerbCode.value:type_name -> google.fhir.dstu2.proto.HTTPVerbCode.Value
	273, // 187: google.fhir.dstu2.proto.HTTPVerbCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 188: google.fhir.dstu2.proto.HTTPVerbCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	63,  // 189: google.fhir.dstu2.proto.IdentityAssuranceLevelCode.value:type_name -> google.fhir.dstu2.proto.IdentityAssuranceLevelCode.Value
	273, // 190: google.fhir.dstu2.proto.IdentityAssuranceLevelCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 191: google.fhir.dstu2.proto.IdentityAssuranceLevelCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	64,  // 192: google.fhir.dstu2.proto.IssueSeverityCode.value:type_name -> google.fhir.dstu2.proto.IssueSeverityCode.Value
	273, // 193: google.fhir.dstu2.proto.IssueSeverityCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 194: google.fhir.dstu2.proto.IssueSeverityCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	65,  // 195: google.fhir.dstu2.proto.IssueTypeCode.value:type_name -> google.fhir.dstu2.proto.IssueTypeCode.Value
	273, // 196: google.fhir.dstu2.proto.IssueTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 197: google.fhir.dstu2.proto.IssueTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	66,  // 198: google.fhir.dstu2.proto.LinkTypeCode.value:type_name -> google.fhir.dstu2.proto.LinkTypeCode.Value
	273, // 199: google.fhir.dstu2.proto.LinkTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 200: google.fhir.dstu2.proto.LinkTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	67,  // 201: google.fhir.dstu2.proto.ListModeCode.value:type_name -> google.fhir.dstu2.proto.ListModeCode.Value
	273, // 202: google.fhir.dstu2.proto.ListModeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 203: google.fhir.dstu2.proto.ListModeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	68,  // 204: google.fhir.dstu2.proto.ListStatusCode.value:type_name -> google.fhir.dstu2.proto.ListStatusCode.Value
	273, // 205: google.fhir.dstu2.proto.ListStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 206: google.fhir.dstu2.proto.ListStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	69,  // 207: google.fhir.dstu2.proto.LocationModeCode.value:type_name -> google.fhir.dstu2.proto.LocationModeCode.Value
	273, // 208: google.fhir.dstu2.proto.LocationModeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 209: google.fhir.dstu2.proto.LocationModeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	70,  // 210: google.fhir.dstu2.proto.LocationStatusCode.value:type_name -> google.fhir.dstu2.proto.LocationStatusCode.Value
	273, // 211: google.fhir.dstu2.proto.LocationStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 212: google.fhir.dstu2.proto.LocationStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	71,  // 213: google.fhir.dstu2.proto.MaritalStatusCode.value:type_name -> google.fhir.dstu2.proto.MaritalStatusCode.Value
	273, // 214: google.fhir.dstu2.proto.MaritalStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 215: google.fhir.dstu2.proto.MaritalStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	72,  // 216: google.fhir.dstu2.proto.MeasmntPrincipleCode.value:type_name -> google.fhir.dstu2.proto.MeasmntPrincipleCode.Value
	273, // 217: google.fhir.dstu2.proto.MeasmntPrincipleCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 218: google.fhir.dstu2.proto.MeasmntPrincipleCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	73,  // 219: google.fhir.dstu2.proto.MedicationAdministrationStatusCode.value:type_name -> google.fhir.dstu2.proto.MedicationAdministrationStatusCode.Value
	273, // 220: google.fhir.dstu2.proto.MedicationAdministrationStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 221: google.fhir.dstu2.proto.MedicationAdministrationStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	74,  // 222: google.fhir.dstu2.proto.MedicationDispenseStatusCode.value:type_name -> google.fhir.dstu2.proto.MedicationDispenseStatusCode.Value
	273, // 223: google.fhir.dstu2.proto.MedicationDispenseStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 224: google.fhir.dstu2.proto.MedicationDispenseStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	75,  // 225: google.fhir.dstu2.proto.MedicationOrderStatusCode.value:type_name -> google.fhir.dstu2.proto.MedicationOrderStatusCode.Value
	273, // 226: google.fhir.dstu2.proto.MedicationOrderStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 227: google.fhir.dstu2.proto.MedicationOrderStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	76,  // 228: google.fhir.dstu2.proto.MedicationStatementStatusCode.value:type_name -> google.fhir.dstu2.proto.MedicationStatementStatusCode.Value
	273, // 229: google.fhir.dstu2.proto.MedicationStatementStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 230: google.fhir.dstu2.proto.MedicationStatementStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	77,  // 231: google.fhir.dstu2.proto.ConformanceEventModeCode.value:type_name -> google.fhir.dstu2.proto.ConformanceEventModeCode.Value
	273, // 232: google.fhir.dstu2.proto.ConformanceEventModeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 233: google.fhir.dstu2.proto.ConformanceEventModeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	78,  // 234: google.fhir.dstu2.proto.MessageSignificanceCategoryCode.value:type_name -> google.fhir.dstu2.proto.MessageSignificanceCategoryCode.Value
	273, // 235: google.fhir.dstu2.proto.MessageSignificanceCategoryCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 236: google.fhir.dstu2.proto.MessageSignificanceCategoryCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	79,  // 237: google.fhir.dstu2.proto.DeviceMetricCalibrationStateCode.value:type_name -> google.fhir.dstu2.proto.DeviceMetricCalibrationStateCode.Value
	273, // 238: google.fhir.dstu2.proto.DeviceMetricCalibrationStateCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 239: google.fhir.dstu2.proto.DeviceMetricCalibrationStateCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	80,  // 240: google.fhir.dstu2.proto.DeviceMetricCalibrationTypeCode.value:type_name -> google.fhir.dstu2.proto.DeviceMetricCalibrationTypeCode.Value
	273, // 241: google.fhir.dstu2.proto.DeviceMetricCalibrationTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 242: google.fhir.dstu2.proto.DeviceMetricCalibrationTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	81,  // 243: google.fhir.dstu2.proto.DeviceMetricCategoryCode.value:type_name -> google.fhir.dstu2.proto.DeviceMetricCategoryCode.Value
	273, // 244: google.fhir.dstu2.proto.DeviceMetricCategoryCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 245: google.fhir.dstu2.proto.DeviceMetricCategoryCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	82,  // 246: google.fhir.dstu2.proto.DeviceMetricColorCode.value:type_name -> google.fhir.dstu2.proto.DeviceMetricColorCode.Value
	273, // 247: google.fhir.dstu2.proto.DeviceMetricColorCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 248: google.fhir.dstu2.proto.DeviceMetricColorCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	83,  // 249: google.fhir.dstu2.proto.DeviceMetricOperationalStatusCode.value:type_name -> google.fhir.dstu2.proto.DeviceMetricOperationalStatusCode.Value
	273, // 250: google.fhir.dstu2.proto.DeviceMetricOperationalStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 251: google.fhir.dstu2.proto.DeviceMetricOperationalStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	84,  // 252: google.fhir.dstu2.proto.NamingSystemIdentifierTypeCode.value:type_name -> google.fhir.dstu2.proto.NamingSystemIdentifierTypeCode.Value
	273, // 253: google.fhir.dstu2.proto.NamingSystemIdentifierTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 254: google.fhir.dstu2.proto.NamingSystemIdentifierTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	85,  // 255: google.fhir.dstu2.proto.NamingSystemTypeCode.value:type_name -> google.fhir.dstu2.proto.NamingSystemTypeCode.Value
	273, // 256: google.fhir.dstu2.proto.NamingSystemTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 257: google.fhir.dstu2.proto.NamingSystemTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	86,  // 258: google.fhir.dstu2.proto.NarrativeStatusCode.value:type_name -> google.fhir.dstu2.proto.NarrativeStatusCode.Value
	273, // 259: google.fhir.dstu2.proto.NarrativeStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 260: google.fhir.dstu2.proto.NarrativeStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	87,  // 261: google.fhir.dstu2.proto.AuditEventAgentNetworkTypeCode.value:type_name -> google.fhir.dstu2.proto.AuditEventAgentNetworkTypeCode.Value
	273, // 262: google.fhir.dstu2.proto.AuditEventAgentNetworkTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 263: google.fhir.dstu2.proto.AuditEventAgentNetworkTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	88,  // 264: google.fhir.dstu2.proto.NoteTypeCode.value:type_name -> google.fhir.dstu2.proto.NoteTypeCode.Value
	273, // 265: google.fhir.dstu2.proto.NoteTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 266: google.fhir.dstu2.proto.NoteTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	89,  // 267: google.fhir.dstu2.proto.NutritionOrderStatusCode.value:type_name -> google.fhir.dstu2.proto.NutritionOrderStatusCode.Value
	273, // 268: google.fhir.dstu2.proto.NutritionOrderStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 269: google.fhir.dstu2.proto.NutritionOrderStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	90,  // 270: google.fhir.dstu2.proto.ObservationRelationshipTypeCode.value:type_name -> google.fhir.dstu2.proto.ObservationRelationshipTypeCode.Value
	273, // 271: google.fhir.dstu2.proto.ObservationRelationshipTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 272: google.fhir.dstu2.proto.ObservationRelationshipTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	91,  // 273: google.fhir.dstu2.proto.ObservationStatusCode.value:type_name -> google.fhir.dstu2.proto.ObservationStatusCode.Value
	273, // 274: google.fhir.dstu2.proto.ObservationStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 275: google.fhir.dstu2.proto.ObservationStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	92,  // 276: google.fhir.dstu2.proto.OperationKindCode.value:type_name -> google.fhir.dstu2.proto.OperationKindCode.Value
	273, // 277: google.fhir.dstu2.proto.OperationKindCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 278: google.fhir.dstu2.proto.OperationKindCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	93,  // 279: google.fhir.dstu2.proto.OperationParameterUseCode.value:type_name -> google.fhir.dstu2.proto.OperationParameterUseCode.Value
	273, // 280: google.fhir.dstu2.proto.OperationParameterUseCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 281: google.fhir.dstu2.proto.OperationParameterUseCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	94,  // 282: google.fhir.dstu2.proto.OrderStatusCode.value:type_name -> google.fhir.dstu2.proto.OrderStatusCode.Value
	273, // 283: google.fhir.dstu2.proto.OrderStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 284: google.fhir.dstu2.proto.OrderStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	95,  // 285: google.fhir.dstu2.proto.ParticipantRequiredCode.value:type_name -> google.fhir.dstu2.proto.ParticipantRequiredCode.Value
	273, // 286: google.fhir.dstu2.proto.ParticipantRequiredCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 287: google.fhir.dstu2.proto.ParticipantRequiredCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	96,  // 288: google.fhir.dstu2.proto.ParticipantStatusCode.value:type_name -> google.fhir.dstu2.proto.ParticipantStatusCode.Value
	273, // 289: google.fhir.dstu2.proto.ParticipantStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 290: google.fhir.dstu2.proto.ParticipantStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	97,  // 291: google.fhir.dstu2.proto.ParticipationStatusCode.value:type_name -> google.fhir.dstu2.proto.ParticipationStatusCode.Value
	273, // 292: google.fhir.dstu2.proto.ParticipationStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 293: google.fhir.dstu2.proto.ParticipationStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	98,  // 294: google.fhir.dstu2.proto.ProcedureRequestPriorityCode.value:type_name -> google.fhir.dstu2.proto.ProcedureRequestPriorityCode.Value
	273, // 295: google.fhir.dstu2.proto.ProcedureRequestPriorityCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 296: google.fhir.dstu2.proto.ProcedureRequestPriorityCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	99,  // 297: google.fhir.dstu2.proto.ProcedureRequestStatusCode.value:type_name -> google.fhir.dstu2.proto.ProcedureRequestStatusCode.Value
	273, // 298: google.fhir.dstu2.proto.ProcedureRequestStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 299: google.fhir.dstu2.proto.ProcedureRequestStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	100, // 300: google.fhir.dstu2.proto.ProcedureStatusCode.value:type_name -> google.fhir.dstu2.proto.ProcedureStatusCode.Value
	273, // 301: google.fhir.dstu2.proto.ProcedureStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 302: google.fhir.dstu2.proto.ProcedureStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	101, // 303: google.fhir.dstu2.proto.PropertyRepresentationCode.value:type_name -> google.fhir.dstu2.proto.PropertyRepresentationCode.Value
	273, // 304: google.fhir.dstu2.proto.PropertyRepresentationCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 305: google.fhir.dstu2.proto.PropertyRepresentationCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	102, // 306: google.fhir.dstu2.proto.ProvenanceEntityRoleCode.value:type_name -> google.fhir.dstu2.proto.ProvenanceEntityRoleCode.Value
	273, // 307: google.fhir.dstu2.proto.ProvenanceEntityRoleCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 308: google.fhir.dstu2.proto.ProvenanceEntityRoleCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	103, // 309: google.fhir.dstu2.proto.QuestionnaireResponseStatusCode.value:type_name -> google.fhir.dstu2.proto.QuestionnaireResponseStatusCode.Value
	273, // 310: google.fhir.dstu2.proto.QuestionnaireResponseStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 311: google.fhir.dstu2.proto.QuestionnaireResponseStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	104, // 312: google.fhir.dstu2.proto.QuestionnaireStatusCode.value:type_name -> google.fhir.dstu2.proto.QuestionnaireStatusCode.Value
	273, // 313: google.fhir.dstu2.proto.QuestionnaireStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 314: google.fhir.dstu2.proto.QuestionnaireStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	105, // 315: google.fhir.dstu2.proto.AllergyIntoleranceCertaintyCode.value:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceCertaintyCode.Value
	273, // 316: google.fhir.dstu2.proto.AllergyIntoleranceCertaintyCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 317: google.fhir.dstu2.proto.AllergyIntoleranceCertaintyCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	106, // 318: google.fhir.dstu2.proto.AllergyIntoleranceSeverityCode.value:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceSeverityCode.Value
	273, // 319: google.fhir.dstu2.proto.AllergyIntoleranceSeverityCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 320: google.fhir.dstu2.proto.AllergyIntoleranceSeverityCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	107, // 321: google.fhir.dstu2.proto.ReferralStatusCode.value:type_name -> google.fhir.dstu2.proto.ReferralStatusCode.Value
	273, // 322: google.fhir.dstu2.proto.ReferralStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 323: google.fhir.dstu2.proto.ReferralStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	108, // 324: google.fhir.dstu2.proto.RemittanceOutcomeCode.value:type_name -> google.fhir.dstu2.proto.RemittanceOutcomeCode.Value
	273, // 325: google.fhir.dstu2.proto.RemittanceOutcomeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 326: google.fhir.dstu2.proto.RemittanceOutcomeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	109, // 327: google.fhir.dstu2.proto.AggregationModeCode.value:type_name -> google.fhir.dstu2.proto.AggregationModeCode.Value
	273, // 328: google.fhir.dstu2.proto.AggregationModeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 329: google.fhir.dstu2.proto.AggregationModeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	110, // 330: google.fhir.dstu2.proto.SlicingRulesCode.value:type_name -> google.fhir.dstu2.proto.SlicingRulesCode.Value
	273, // 331: google.fhir.dstu2.proto.SlicingRulesCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 332: google.fhir.dstu2.proto.SlicingRulesCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	111, // 333: google.fhir.dstu2.proto.ResourceTypeCode.value:type_name -> google.fhir.dstu2.proto.ResourceTypeCode.Value
	273, // 334: google.fhir.dstu2.proto.ResourceTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 335: google.fhir.dstu2.proto.ResourceTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	112, // 336: google.fhir.dstu2.proto.ResponseTypeCode.value:type_name -> google.fhir.dstu2.proto.ResponseTypeCode.Value
	273, // 337: google.fhir.dstu2.proto.ResponseTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 338: google.fhir.dstu2.proto.ResponseTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	113, // 339: google.fhir.dstu2.proto.RestfulConformanceModeCode.value:type_name -> google.fhir.dstu2.proto.RestfulConformanceModeCode.Value
	273, // 340: google.fhir.dstu2.proto.RestfulConformanceModeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 341: google.fhir.dstu2.proto.RestfulConformanceModeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	114, // 342: google.fhir.dstu2.proto.SearchEntryModeCode.value:type_name -> google.fhir.dstu2.proto.SearchEntryModeCode.Value
	273, // 343: google.fhir.dstu2.proto.SearchEntryModeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 344: google.fhir.dstu2.proto.SearchEntryModeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	115, // 345: google.fhir.dstu2.proto.SearchModifierCodeCode.value:type_name -> google.fhir.dstu2.proto.SearchModifierCodeCode.Value
	273, // 346: google.fhir.dstu2.proto.SearchModifierCodeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 347: google.fhir.dstu2.proto.SearchModifierCodeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	116, // 348: google.fhir.dstu2.proto.SearchParamTypeCode.value:type_name -> google.fhir.dstu2.proto.SearchParamTypeCode.Value
	273, // 349: google.fhir.dstu2.proto.SearchParamTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 350: google.fhir.dstu2.proto.SearchParamTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	117, // 351: google.fhir.dstu2.proto.XPathUsageTypeCode.value:type_name -> google.fhir.dstu2.proto.XPathUsageTypeCode.Value
	273, // 352: google.fhir.dstu2.proto.XPathUsageTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 353: google.fhir.dstu2.proto.XPathUsageTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	118, // 354: google.fhir.dstu2.proto.SlotStatusCode.value:type_name -> google.fhir.dstu2.proto.SlotStatusCode.Value
	273, // 355: google.fhir.dstu2.proto.SlotStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 356: google.fhir.dstu2.proto.SlotStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	119, // 357: google.fhir.dstu2.proto.SpecimenStatusCode.value:type_name -> google.fhir.dstu2.proto.SpecimenStatusCode.Value
	273, // 358: google.fhir.dstu2.proto.SpecimenStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 359: google.fhir.dstu2.proto.SpecimenStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	120, // 360: google.fhir.dstu2.proto.StructureDefinitionKindCode.value:type_name -> google.fhir.dstu2.proto.StructureDefinitionKindCode.Value
	273, // 361: google.fhir.dstu2.proto.StructureDefinitionKindCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 362: google.fhir.dstu2.proto.StructureDefinitionKindCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	121, // 363: google.fhir.dstu2.proto.SubscriptionChannelTypeCode.value:type_name -> google.fhir.dstu2.proto.SubscriptionChannelTypeCode.Value
	273, // 364: google.fhir.dstu2.proto.SubscriptionChannelTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 365: google.fhir.dstu2.proto.SubscriptionChannelTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	122, // 366: google.fhir.dstu2.proto.SubscriptionStatusCode.value:type_name -> google.fhir.dstu2.proto.SubscriptionStatusCode.Value
	273, // 367: google.fhir.dstu2.proto.SubscriptionStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 368: google.fhir.dstu2.proto.SubscriptionStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	123, // 369: google.fhir.dstu2.proto.SupplyDeliveryStatusCode.value:type_name -> google.fhir.dstu2.proto.SupplyDeliveryStatusCode.Value
	273, // 370: google.fhir.dstu2.proto.SupplyDeliveryStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 371: google.fhir.dstu2.proto.SupplyDeliveryStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	124, // 372: google.fhir.dstu2.proto.SupplyDeliveryCode.value:type_name -> google.fhir.dstu2.proto.SupplyDeliveryCode.Value
	273, // 373: google.fhir.dstu2.proto.SupplyDeliveryCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 374: google.fhir.dstu2.proto.SupplyDeliveryCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	125, // 375: google.fhir.dstu2.proto.SupplyTypeCode.value:type_name -> google.fhir.dstu2.proto.SupplyTypeCode.Value
	273, // 376: google.fhir.dstu2.proto.SupplyTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 377: google.fhir.dstu2.proto.SupplyTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	126, // 378: google.fhir.dstu2.proto.SupplyRequestStatusCode.value:type_name -> google.fhir.dstu2.proto.SupplyRequestStatusCode.Value
	273, // 379: google.fhir.dstu2.proto.SupplyRequestStatusCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 380: google.fhir.dstu2.proto.SupplyRequestStatusCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	127, // 381: google.fhir.dstu2.proto.TransactionModeCode.value:type_name -> google.fhir.dstu2.proto.TransactionModeCode.Value
	273, // 382: google.fhir.dstu2.proto.TransactionModeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 383: google.fhir.dstu2.proto.TransactionModeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	128, // 384: google.fhir.dstu2.proto.UnknownContentCodeCode.value:type_name -> google.fhir.dstu2.proto.UnknownContentCodeCode.Value
	273, // 385: google.fhir.dstu2.proto.UnknownContentCodeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 386: google.fhir.dstu2.proto.UnknownContentCodeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	129, // 387: google.fhir.dstu2.proto.ConfidentialityClassificationCode.value:type_name -> google.fhir.dstu2.proto.ConfidentialityClassificationCode.Value
	273, // 388: google.fhir.dstu2.proto.ConfidentialityClassificationCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 389: google.fhir.dstu2.proto.ConfidentialityClassificationCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	130, // 390: google.fhir.dstu2.proto.ResourceVersionPolicyCode.value:type_name -> google.fhir.dstu2.proto.ResourceVersionPolicyCode.Value
	273, // 391: google.fhir.dstu2.proto.ResourceVersionPolicyCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 392: google.fhir.dstu2.proto.ResourceVersionPolicyCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	131, // 393: google.fhir.dstu2.proto.VisionBaseCode.value:type_name -> google.fhir.dstu2.proto.VisionBaseCode.Value
	273, // 394: google.fhir.dstu2.proto.VisionBaseCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 395: google.fhir.dstu2.proto.VisionBaseCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	132, // 396: google.fhir.dstu2.proto.VisionEyesCode.value:type_name -> google.fhir.dstu2.proto.VisionEyesCode.Value
	273, // 397: google.fhir.dstu2.proto.VisionEyesCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 398: google.fhir.dstu2.proto.VisionEyesCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	133, // 399: google.fhir.dstu2.proto.TypeRestfulInteractionCode.value:type_name -> google.fhir.dstu2.proto.TypeRestfulInteractionCode.Value
	273, // 400: google.fhir.dstu2.proto.TypeRestfulInteractionCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 401: google.fhir.dstu2.proto.TypeRestfulInteractionCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	134, // 402: google.fhir.dstu2.proto.SystemRestfulInteractionCode.value:type_name -> google.fhir.dstu2.proto.SystemRestfulInteractionCode.Value
	273, // 403: google.fhir.dstu2.proto.SystemRestfulInteractionCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 404: google.fhir.dstu2.proto.SystemRestfulInteractionCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	135, // 405: google.fhir.dstu2.proto.InstanceAvailabilityCode.value:type_name -> google.fhir.dstu2.proto.InstanceAvailabilityCode.Value
	273, // 406: google.fhir.dstu2.proto.InstanceAvailabilityCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 407: google.fhir.dstu2.proto.InstanceAvailabilityCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	273, // 408: google.fhir.dstu2.proto.FHIRDefinedTypeCode.id:type_name -> google.fhir.dstu2.proto.Id
	274, // 409: google.fhir.dstu2.proto.FHIRDefinedTypeCode.extension:type_name -> google.fhir.dstu2.proto.Extension
	410, // [410:410] is the sub-list for method output_type
	410, // [410:410] is the sub-list for method input_type
	410, // [410:410] is the sub-list for extension type_name
	410, // [410:410] is the sub-list for extension extendee
	0,   // [0:410] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_dstu2_codes_proto_init() }
func file_proto_google_fhir_proto_dstu2_codes_proto_init() {
	if File_proto_google_fhir_proto_dstu2_codes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionListCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjudicationErrorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdministrativeGenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCriticalityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerFormatCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionDirectionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionOperatorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionResponseTypesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventActionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindingStrengthCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanActivityStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanRelationshipCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalImpressionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositionAttestationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapEquivalenceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionVerificationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalDeleteStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConformanceResourceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConformanceStatementKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementStringencyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaysOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectedIssueSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceActionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseRequestPriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseRequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticOrderPriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticOrderStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalMediaTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentReferenceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterClassCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterLocationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpisodeOfCareStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionContextCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterOperatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideDependencyTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidePageKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideResourcePurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyHistoryStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPVerbCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityAssuranceLevelCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaritalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasmntPrincipleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministrationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispenseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrderStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatementStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConformanceEventModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSignificanceCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCalibrationStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCalibrationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricColorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricOperationalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystemIdentifierTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NarrativeStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventAgentNetworkTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrderStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationParameterUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantRequiredCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequestPriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyRepresentationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvenanceEntityRoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCertaintyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemittanceOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlicingRulesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestfulConformanceModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEntryModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchModifierCodeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParamTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XPathUsageTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionChannelTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyDeliveryStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyDeliveryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyRequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownContentCodeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfidentialityClassificationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceVersionPolicyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionBaseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionEyesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeRestfulInteractionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemRestfulInteractionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAvailabilityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRDefinedTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_dstu2_codes_proto_rawDesc,
			NumEnums:      136,
			NumMessages:   137,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_dstu2_codes_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_dstu2_codes_proto_depIdxs,
		EnumInfos:         file_proto_google_fhir_proto_dstu2_codes_proto_enumTypes,
		MessageInfos:      file_proto_google_fhir_proto_dstu2_codes_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_dstu2_codes_proto = out.File
	file_proto_google_fhir_proto_dstu2_codes_proto_rawDesc = nil
	file_proto_google_fhir_proto_dstu2_codes_proto_goTypes = nil
	file_proto_google_fhir_proto_dstu2_codes_proto_depIdxs = nil
}

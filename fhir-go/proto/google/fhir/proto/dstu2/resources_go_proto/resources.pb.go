//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/dstu2/resources.proto

package resources_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/dstu2/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/dstu2/datatypes_go_proto"
	metadatatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/dstu2/metadatatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Account.
// See http://hl7.org/fhir/StructureDefinition/Account
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Account number
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Human-readable label
	Name *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// E.g. patient, expense, depreciation
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// active | inactive
	Status *datatypes_go_proto.Code `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Valid from..to
	ActivePeriod *datatypes_go_proto.Period `protobuf:"bytes,13,opt,name=active_period,json=activePeriod,proto3" json:"active_period,omitempty"`
	// Base currency in which balance is tracked
	Currency *datatypes_go_proto.Coding `protobuf:"bytes,14,opt,name=currency,proto3" json:"currency,omitempty"`
	// How much is in account?
	Balance *datatypes_go_proto.Money `protobuf:"bytes,15,opt,name=balance,proto3" json:"balance,omitempty"`
	// Transaction window
	CoveragePeriod *datatypes_go_proto.Period `protobuf:"bytes,16,opt,name=coverage_period,json=coveragePeriod,proto3" json:"coverage_period,omitempty"`
	// What is account tied to?
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=subject,proto3" json:"subject,omitempty"`
	// Who is responsible?
	Owner *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=owner,proto3" json:"owner,omitempty"`
	// Explanation of purpose/use
	Description *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Account) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Account) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Account) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Account) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Account) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Account) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Account) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Account) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Account) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Account) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Account) GetStatus() *datatypes_go_proto.Code {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Account) GetActivePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ActivePeriod
	}
	return nil
}

func (x *Account) GetCurrency() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *Account) GetBalance() *datatypes_go_proto.Money {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *Account) GetCoveragePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.CoveragePeriod
	}
	return nil
}

func (x *Account) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Account) GetOwner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Account) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

// Auto-generated from StructureDefinition for AllergyIntolerance.
// Allergy or Intolerance (generally: Risk Of Adverse reaction to a substance).
// See http://hl7.org/fhir/StructureDefinition/AllergyIntolerance
type AllergyIntolerance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External ids for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Date(/time) when manifestations showed
	Onset *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=onset,proto3" json:"onset,omitempty"`
	// When recorded
	RecordedDate *datatypes_go_proto.DateTime `protobuf:"bytes,11,opt,name=recorded_date,json=recordedDate,proto3" json:"recorded_date,omitempty"`
	// Who recorded the sensitivity
	Recorder *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=recorder,proto3" json:"recorder,omitempty"`
	// Who the sensitivity is for
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=patient,proto3" json:"patient,omitempty"`
	// Source of the information about the allergy
	Reporter *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// Substance, (or class) considered to be responsible for risk
	Substance *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=substance,proto3" json:"substance,omitempty"`
	// active | unconfirmed | confirmed | inactive | resolved | refuted |
	// entered-in-error
	Status *codes_go_proto.AllergyIntoleranceStatusCode `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	// CRITL | CRITH | CRITU
	Criticality *codes_go_proto.AllergyIntoleranceCriticalityCode `protobuf:"bytes,17,opt,name=criticality,proto3" json:"criticality,omitempty"`
	// allergy | intolerance - Underlying mechanism (if known)
	Type *codes_go_proto.AllergyIntoleranceTypeCode `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	// food | medication | environment | other - Category of Substance
	Category *codes_go_proto.AllergyIntoleranceCategoryCode `protobuf:"bytes,19,opt,name=category,proto3" json:"category,omitempty"`
	// Date(/time) of last known occurrence of a reaction
	LastOccurence *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=last_occurence,json=lastOccurence,proto3" json:"last_occurence,omitempty"`
	// Additional text not captured in other fields
	Note     *datatypes_go_proto.Annotation `protobuf:"bytes,21,opt,name=note,proto3" json:"note,omitempty"`
	Reaction []*AllergyIntolerance_Reaction `protobuf:"bytes,22,rep,name=reaction,proto3" json:"reaction,omitempty"`
}

func (x *AllergyIntolerance) Reset() {
	*x = AllergyIntolerance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntolerance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntolerance) ProtoMessage() {}

func (x *AllergyIntolerance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntolerance.ProtoReflect.Descriptor instead.
func (*AllergyIntolerance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{1}
}

func (x *AllergyIntolerance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntolerance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AllergyIntolerance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *AllergyIntolerance) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *AllergyIntolerance) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *AllergyIntolerance) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *AllergyIntolerance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AllergyIntolerance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AllergyIntolerance) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *AllergyIntolerance) GetOnset() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *AllergyIntolerance) GetRecordedDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedDate
	}
	return nil
}

func (x *AllergyIntolerance) GetRecorder() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *AllergyIntolerance) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *AllergyIntolerance) GetReporter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *AllergyIntolerance) GetSubstance() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *AllergyIntolerance) GetStatus() *codes_go_proto.AllergyIntoleranceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AllergyIntolerance) GetCriticality() *codes_go_proto.AllergyIntoleranceCriticalityCode {
	if x != nil {
		return x.Criticality
	}
	return nil
}

func (x *AllergyIntolerance) GetType() *codes_go_proto.AllergyIntoleranceTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AllergyIntolerance) GetCategory() *codes_go_proto.AllergyIntoleranceCategoryCode {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *AllergyIntolerance) GetLastOccurence() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.LastOccurence
	}
	return nil
}

func (x *AllergyIntolerance) GetNote() *datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *AllergyIntolerance) GetReaction() []*AllergyIntolerance_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

// Auto-generated from StructureDefinition for Appointment.
// A booking of a healthcare event among patient(s), practitioner(s), related
// person(s) and/or device(s) for a specific date/time. This may result in one
// or more Encounter(s). See http://hl7.org/fhir/StructureDefinition/Appointment
type Appointment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// proposed | pending | booked | arrived | fulfilled | cancelled | noshow
	Status *codes_go_proto.AppointmentStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// The type of appointment that is being booked
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// Reason this appointment is scheduled
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=reason,proto3" json:"reason,omitempty"`
	// Used to make informed decisions if needing to re-prioritize
	Priority *datatypes_go_proto.UnsignedInt `protobuf:"bytes,13,opt,name=priority,proto3" json:"priority,omitempty"`
	// Shown on a subject line in a meeting request, or appointment list
	Description *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// When appointment is to take place
	Start *datatypes_go_proto.Instant `protobuf:"bytes,15,opt,name=start,proto3" json:"start,omitempty"`
	// When appointment is to conclude
	End *datatypes_go_proto.Instant `protobuf:"bytes,16,opt,name=end,proto3" json:"end,omitempty"`
	// Can be less than start/end (e.g. estimate)
	MinutesDuration *datatypes_go_proto.PositiveInt `protobuf:"bytes,17,opt,name=minutes_duration,json=minutesDuration,proto3" json:"minutes_duration,omitempty"`
	// If provided, then no schedule and start/end values MUST match slot
	Slot []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=slot,proto3" json:"slot,omitempty"`
	// Additional comments
	Comment     *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=comment,proto3" json:"comment,omitempty"`
	Participant []*Appointment_Participant `protobuf:"bytes,20,rep,name=participant,proto3" json:"participant,omitempty"`
}

func (x *Appointment) Reset() {
	*x = Appointment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appointment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appointment) ProtoMessage() {}

func (x *Appointment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appointment.ProtoReflect.Descriptor instead.
func (*Appointment) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{2}
}

func (x *Appointment) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Appointment) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Appointment) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Appointment) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Appointment) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Appointment) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Appointment) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Appointment) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Appointment) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Appointment) GetStatus() *codes_go_proto.AppointmentStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Appointment) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Appointment) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Appointment) GetPriority() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Appointment) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Appointment) GetStart() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Appointment) GetEnd() *datatypes_go_proto.Instant {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Appointment) GetMinutesDuration() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.MinutesDuration
	}
	return nil
}

func (x *Appointment) GetSlot() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *Appointment) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Appointment) GetParticipant() []*Appointment_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

// Auto-generated from StructureDefinition for AppointmentResponse.
// A reply to an appointment request for a patient and/or practitioner(s), such
// as a confirmation or rejection. See
// http://hl7.org/fhir/StructureDefinition/AppointmentResponse
type AppointmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Appointment this response relates to
	Appointment *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=appointment,proto3" json:"appointment,omitempty"`
	// Time from appointment, or requested new start time
	Start *datatypes_go_proto.Instant `protobuf:"bytes,11,opt,name=start,proto3" json:"start,omitempty"`
	// Time from appointment, or requested new end time
	End *datatypes_go_proto.Instant `protobuf:"bytes,12,opt,name=end,proto3" json:"end,omitempty"`
	// Role of participant in the appointment
	ParticipantType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=participant_type,json=participantType,proto3" json:"participant_type,omitempty"`
	// Person, Location/HealthcareService or Device
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=actor,proto3" json:"actor,omitempty"`
	// accepted | declined | tentative | in-process | completed | needs-action
	ParticipantStatus *codes_go_proto.ParticipantStatusCode `protobuf:"bytes,15,opt,name=participant_status,json=participantStatus,proto3" json:"participant_status,omitempty"`
	// Additional comments
	Comment *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *AppointmentResponse) Reset() {
	*x = AppointmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentResponse) ProtoMessage() {}

func (x *AppointmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentResponse.ProtoReflect.Descriptor instead.
func (*AppointmentResponse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{3}
}

func (x *AppointmentResponse) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AppointmentResponse) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AppointmentResponse) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *AppointmentResponse) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *AppointmentResponse) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *AppointmentResponse) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *AppointmentResponse) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AppointmentResponse) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AppointmentResponse) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *AppointmentResponse) GetAppointment() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Appointment
	}
	return nil
}

func (x *AppointmentResponse) GetStart() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *AppointmentResponse) GetEnd() *datatypes_go_proto.Instant {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *AppointmentResponse) GetParticipantType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ParticipantType
	}
	return nil
}

func (x *AppointmentResponse) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *AppointmentResponse) GetParticipantStatus() *codes_go_proto.ParticipantStatusCode {
	if x != nil {
		return x.ParticipantStatus
	}
	return nil
}

func (x *AppointmentResponse) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Auto-generated from StructureDefinition for AuditEvent.
// Event record kept for security purposes.
// See http://hl7.org/fhir/StructureDefinition/AuditEvent
type AuditEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Event             *AuditEvent_Event               `protobuf:"bytes,9,opt,name=event,proto3" json:"event,omitempty"`
	Participant       []*AuditEvent_Participant       `protobuf:"bytes,10,rep,name=participant,proto3" json:"participant,omitempty"`
	Source            *AuditEvent_Source              `protobuf:"bytes,11,opt,name=source,proto3" json:"source,omitempty"`
	Object            []*AuditEvent_Object            `protobuf:"bytes,12,rep,name=object,proto3" json:"object,omitempty"`
}

func (x *AuditEvent) Reset() {
	*x = AuditEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent) ProtoMessage() {}

func (x *AuditEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent.ProtoReflect.Descriptor instead.
func (*AuditEvent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{4}
}

func (x *AuditEvent) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *AuditEvent) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *AuditEvent) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *AuditEvent) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *AuditEvent) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *AuditEvent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent) GetEvent() *AuditEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *AuditEvent) GetParticipant() []*AuditEvent_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *AuditEvent) GetSource() *AuditEvent_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AuditEvent) GetObject() []*AuditEvent_Object {
	if x != nil {
		return x.Object
	}
	return nil
}

// Auto-generated from StructureDefinition for Basic.
// Resource for non-supported content.
// See http://hl7.org/fhir/StructureDefinition/Basic
type Basic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Kind of Resource
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	// Identifies the focus of this resource
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`
	// Who created
	Author *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=author,proto3" json:"author,omitempty"`
	// When created
	Created *datatypes_go_proto.Date `protobuf:"bytes,13,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *Basic) Reset() {
	*x = Basic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Basic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Basic) ProtoMessage() {}

func (x *Basic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Basic.ProtoReflect.Descriptor instead.
func (*Basic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{5}
}

func (x *Basic) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Basic) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Basic) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Basic) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Basic) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Basic) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Basic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Basic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Basic) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Basic) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Basic) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Basic) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Basic) GetCreated() *datatypes_go_proto.Date {
	if x != nil {
		return x.Created
	}
	return nil
}

// Auto-generated from StructureDefinition for Binary.
// Pure binary content defined by some other format than FHIR.
// See http://hl7.org/fhir/StructureDefinition/Binary
type Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// MimeType of the binary content
	ContentType *datatypes_go_proto.MimeTypeCode `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The actual content
	Content *datatypes_go_proto.Base64Binary `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Binary) Reset() {
	*x = Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binary) ProtoMessage() {}

func (x *Binary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binary.ProtoReflect.Descriptor instead.
func (*Binary) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{6}
}

func (x *Binary) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Binary) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Binary) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Binary) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Binary) GetContentType() *datatypes_go_proto.MimeTypeCode {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *Binary) GetContent() *datatypes_go_proto.Base64Binary {
	if x != nil {
		return x.Content
	}
	return nil
}

// Auto-generated from StructureDefinition for BodySite.
// Specific and identified anatomical location.
// See http://hl7.org/fhir/StructureDefinition/BodySite
type BodySite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Patient
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=patient,proto3" json:"patient,omitempty"`
	// Bodysite identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Named anatomical location
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	// Modification to location code
	Modifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// The Description of anatomical location
	Description *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// Attached images
	Image []*datatypes_go_proto.Attachment `protobuf:"bytes,14,rep,name=image,proto3" json:"image,omitempty"`
}

func (x *BodySite) Reset() {
	*x = BodySite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodySite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodySite) ProtoMessage() {}

func (x *BodySite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodySite.ProtoReflect.Descriptor instead.
func (*BodySite) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{7}
}

func (x *BodySite) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BodySite) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *BodySite) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *BodySite) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *BodySite) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *BodySite) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *BodySite) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *BodySite) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *BodySite) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *BodySite) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *BodySite) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *BodySite) GetModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *BodySite) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *BodySite) GetImage() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Image
	}
	return nil
}

// Auto-generated from StructureDefinition for Bundle.
// Contains a collection of resources.
// See http://hl7.org/fhir/StructureDefinition/Bundle
type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// document | message | transaction | transaction-response | batch |
	// batch-response | history | searchset | collection
	Type *codes_go_proto.BundleTypeCode `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// If search, the total number of matches
	Total *datatypes_go_proto.UnsignedInt `protobuf:"bytes,6,opt,name=total,proto3" json:"total,omitempty"`
	Link  []*Bundle_Link                  `protobuf:"bytes,7,rep,name=link,proto3" json:"link,omitempty"`
	Entry []*Bundle_Entry                 `protobuf:"bytes,8,rep,name=entry,proto3" json:"entry,omitempty"`
	// Digital Signature
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{8}
}

func (x *Bundle) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bundle) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Bundle) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Bundle) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Bundle) GetType() *codes_go_proto.BundleTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bundle) GetTotal() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Bundle) GetLink() []*Bundle_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Bundle) GetEntry() []*Bundle_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *Bundle) GetSignature() *datatypes_go_proto.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Auto-generated from StructureDefinition for CarePlan.
// Healthcare plan for patient or group.
// See http://hl7.org/fhir/StructureDefinition/CarePlan
type CarePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this plan
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who care plan is for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`
	// proposed | draft | active | completed | cancelled
	Status *codes_go_proto.CarePlanStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Created in context of
	Context *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=context,proto3" json:"context,omitempty"`
	// Time period plan covers
	Period *datatypes_go_proto.Period `protobuf:"bytes,13,opt,name=period,proto3" json:"period,omitempty"`
	// Who is responsible for contents of the plan
	Author []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=author,proto3" json:"author,omitempty"`
	// When last updated
	Modified *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=modified,proto3" json:"modified,omitempty"`
	// Type of plan
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=category,proto3" json:"category,omitempty"`
	// Summary of nature of plan
	Description *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	// Health issues this plan addresses
	Addresses []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Information considered as part of plan
	Support     []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=support,proto3" json:"support,omitempty"`
	RelatedPlan []*CarePlan_RelatedPlan         `protobuf:"bytes,20,rep,name=related_plan,json=relatedPlan,proto3" json:"related_plan,omitempty"`
	Participant []*CarePlan_Participant         `protobuf:"bytes,21,rep,name=participant,proto3" json:"participant,omitempty"`
	// Desired outcome of plan
	Goal     []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=goal,proto3" json:"goal,omitempty"`
	Activity []*CarePlan_Activity            `protobuf:"bytes,23,rep,name=activity,proto3" json:"activity,omitempty"`
	// Comments about the plan
	Note *datatypes_go_proto.Annotation `protobuf:"bytes,24,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CarePlan) Reset() {
	*x = CarePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlan) ProtoMessage() {}

func (x *CarePlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlan.ProtoReflect.Descriptor instead.
func (*CarePlan) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{9}
}

func (x *CarePlan) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlan) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CarePlan) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *CarePlan) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *CarePlan) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *CarePlan) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *CarePlan) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CarePlan) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CarePlan) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *CarePlan) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *CarePlan) GetStatus() *codes_go_proto.CarePlanStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CarePlan) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CarePlan) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *CarePlan) GetAuthor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CarePlan) GetModified() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *CarePlan) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CarePlan) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CarePlan) GetAddresses() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *CarePlan) GetSupport() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Support
	}
	return nil
}

func (x *CarePlan) GetRelatedPlan() []*CarePlan_RelatedPlan {
	if x != nil {
		return x.RelatedPlan
	}
	return nil
}

func (x *CarePlan) GetParticipant() []*CarePlan_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *CarePlan) GetGoal() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *CarePlan) GetActivity() []*CarePlan_Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *CarePlan) GetNote() *datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for Claim.
// Claim, Pre-determination or Pre-authorization.
// See http://hl7.org/fhir/StructureDefinition/Claim
type Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// institutional | oral | pharmacy | professional | vision
	Type *codes_go_proto.ClaimTypeCode `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// Claim number
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Current specification followed
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original specification followed
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,13,opt,name=created,proto3" json:"created,omitempty"`
	// Insurer
	Target *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=target,proto3" json:"target,omitempty"`
	// Responsible provider
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=provider,proto3" json:"provider,omitempty"`
	// Responsible organization
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=organization,proto3" json:"organization,omitempty"`
	// complete | proposed | exploratory | other
	Use *codes_go_proto.UseCode `protobuf:"bytes,17,opt,name=use,proto3" json:"use,omitempty"`
	// Desired processing priority
	Priority *datatypes_go_proto.Coding `protobuf:"bytes,18,opt,name=priority,proto3" json:"priority,omitempty"`
	// Funds requested to be reserved
	FundsReserve *datatypes_go_proto.Coding `protobuf:"bytes,19,opt,name=funds_reserve,json=fundsReserve,proto3" json:"funds_reserve,omitempty"`
	// Author
	Enterer *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=enterer,proto3" json:"enterer,omitempty"`
	// Servicing Facility
	Facility *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=facility,proto3" json:"facility,omitempty"`
	// Prescription
	Prescription *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=prescription,proto3" json:"prescription,omitempty"`
	// Original Prescription
	OriginalPrescription *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=original_prescription,json=originalPrescription,proto3" json:"original_prescription,omitempty"`
	Payee                *Claim_Payee                  `protobuf:"bytes,24,opt,name=payee,proto3" json:"payee,omitempty"`
	// Treatment Referral
	Referral  *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=referral,proto3" json:"referral,omitempty"`
	Diagnosis []*Claim_Diagnosis            `protobuf:"bytes,26,rep,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	// List of presenting Conditions
	Condition []*datatypes_go_proto.Coding `protobuf:"bytes,27,rep,name=condition,proto3" json:"condition,omitempty"`
	// The subject of the Products and Services
	Patient  *datatypes_go_proto.Reference `protobuf:"bytes,28,opt,name=patient,proto3" json:"patient,omitempty"`
	Coverage []*Claim_Coverage             `protobuf:"bytes,29,rep,name=coverage,proto3" json:"coverage,omitempty"`
	// Eligibility exceptions
	Exception []*datatypes_go_proto.Coding `protobuf:"bytes,30,rep,name=exception,proto3" json:"exception,omitempty"`
	// Name of School
	School *datatypes_go_proto.String `protobuf:"bytes,31,opt,name=school,proto3" json:"school,omitempty"`
	// Accident Date
	Accident *datatypes_go_proto.Date `protobuf:"bytes,32,opt,name=accident,proto3" json:"accident,omitempty"`
	// Accident Type
	AccidentType *datatypes_go_proto.Coding `protobuf:"bytes,33,opt,name=accident_type,json=accidentType,proto3" json:"accident_type,omitempty"`
	// Intervention and exception code (Pharma)
	InterventionException []*datatypes_go_proto.Coding `protobuf:"bytes,34,rep,name=intervention_exception,json=interventionException,proto3" json:"intervention_exception,omitempty"`
	Item                  []*Claim_Item                `protobuf:"bytes,35,rep,name=item,proto3" json:"item,omitempty"`
	// Additional materials, documents, etc.
	AdditionalMaterials []*datatypes_go_proto.Coding `protobuf:"bytes,36,rep,name=additional_materials,json=additionalMaterials,proto3" json:"additional_materials,omitempty"`
	MissingTeeth        []*Claim_MissingTeeth        `protobuf:"bytes,37,rep,name=missing_teeth,json=missingTeeth,proto3" json:"missing_teeth,omitempty"`
}

func (x *Claim) Reset() {
	*x = Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

func (x *Claim) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{10}
}

func (x *Claim) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Claim) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Claim) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Claim) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Claim) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Claim) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim) GetType() *codes_go_proto.ClaimTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Claim) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *Claim) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *Claim) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Claim) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Claim) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Claim) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Claim) GetUse() *codes_go_proto.UseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *Claim) GetPriority() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Claim) GetFundsReserve() *datatypes_go_proto.Coding {
	if x != nil {
		return x.FundsReserve
	}
	return nil
}

func (x *Claim) GetEnterer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Enterer
	}
	return nil
}

func (x *Claim) GetFacility() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Facility
	}
	return nil
}

func (x *Claim) GetPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Prescription
	}
	return nil
}

func (x *Claim) GetOriginalPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OriginalPrescription
	}
	return nil
}

func (x *Claim) GetPayee() *Claim_Payee {
	if x != nil {
		return x.Payee
	}
	return nil
}

func (x *Claim) GetReferral() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Referral
	}
	return nil
}

func (x *Claim) GetDiagnosis() []*Claim_Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

func (x *Claim) GetCondition() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Claim) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *Claim) GetCoverage() []*Claim_Coverage {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *Claim) GetException() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Exception
	}
	return nil
}

func (x *Claim) GetSchool() *datatypes_go_proto.String {
	if x != nil {
		return x.School
	}
	return nil
}

func (x *Claim) GetAccident() *datatypes_go_proto.Date {
	if x != nil {
		return x.Accident
	}
	return nil
}

func (x *Claim) GetAccidentType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.AccidentType
	}
	return nil
}

func (x *Claim) GetInterventionException() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.InterventionException
	}
	return nil
}

func (x *Claim) GetItem() []*Claim_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *Claim) GetAdditionalMaterials() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.AdditionalMaterials
	}
	return nil
}

func (x *Claim) GetMissingTeeth() []*Claim_MissingTeeth {
	if x != nil {
		return x.MissingTeeth
	}
	return nil
}

// Auto-generated from StructureDefinition for ClaimResponse.
// Remittance resource.
// See http://hl7.org/fhir/StructureDefinition/ClaimResponse
type ClaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Response  number
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Id of resource triggering adjudication
	Request *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=request,proto3" json:"request,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,13,opt,name=created,proto3" json:"created,omitempty"`
	// Insurer
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=organization,proto3" json:"organization,omitempty"`
	// Responsible practitioner
	RequestProvider *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=request_provider,json=requestProvider,proto3" json:"request_provider,omitempty"`
	// Responsible organization
	RequestOrganization *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=request_organization,json=requestOrganization,proto3" json:"request_organization,omitempty"`
	// complete | error
	Outcome *codes_go_proto.RemittanceOutcomeCode `protobuf:"bytes,17,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Disposition Message
	Disposition *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=disposition,proto3" json:"disposition,omitempty"`
	// Party to be paid any benefits payable
	PayeeType *datatypes_go_proto.Coding `protobuf:"bytes,19,opt,name=payee_type,json=payeeType,proto3" json:"payee_type,omitempty"`
	Item      []*ClaimResponse_Item      `protobuf:"bytes,20,rep,name=item,proto3" json:"item,omitempty"`
	AddItem   []*ClaimResponse_AddItem   `protobuf:"bytes,21,rep,name=add_item,json=addItem,proto3" json:"add_item,omitempty"`
	Error     []*ClaimResponse_Error     `protobuf:"bytes,22,rep,name=error,proto3" json:"error,omitempty"`
	// Total Cost of service from the Claim
	TotalCost *datatypes_go_proto.Money `protobuf:"bytes,23,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	// Unallocated deductible
	UnallocDeductable *datatypes_go_proto.Money `protobuf:"bytes,24,opt,name=unalloc_deductable,json=unallocDeductable,proto3" json:"unalloc_deductable,omitempty"`
	// Total benefit payable for the Claim
	TotalBenefit *datatypes_go_proto.Money `protobuf:"bytes,25,opt,name=total_benefit,json=totalBenefit,proto3" json:"total_benefit,omitempty"`
	// Payment adjustment for non-Claim issues
	PaymentAdjustment *datatypes_go_proto.Money `protobuf:"bytes,26,opt,name=payment_adjustment,json=paymentAdjustment,proto3" json:"payment_adjustment,omitempty"`
	// Reason for Payment adjustment
	PaymentAdjustmentReason *datatypes_go_proto.Coding `protobuf:"bytes,27,opt,name=payment_adjustment_reason,json=paymentAdjustmentReason,proto3" json:"payment_adjustment_reason,omitempty"`
	// Expected data of Payment
	PaymentDate *datatypes_go_proto.Date `protobuf:"bytes,28,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	// Payment amount
	PaymentAmount *datatypes_go_proto.Money `protobuf:"bytes,29,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`
	// Payment identifier
	PaymentRef *datatypes_go_proto.Identifier `protobuf:"bytes,30,opt,name=payment_ref,json=paymentRef,proto3" json:"payment_ref,omitempty"`
	// Funds reserved status
	Reserved *datatypes_go_proto.Coding `protobuf:"bytes,31,opt,name=reserved,proto3" json:"reserved,omitempty"`
	// Printed Form Identifier
	Form     *datatypes_go_proto.Coding `protobuf:"bytes,32,opt,name=form,proto3" json:"form,omitempty"`
	Note     []*ClaimResponse_Note      `protobuf:"bytes,33,rep,name=note,proto3" json:"note,omitempty"`
	Coverage []*ClaimResponse_Coverage  `protobuf:"bytes,34,rep,name=coverage,proto3" json:"coverage,omitempty"`
}

func (x *ClaimResponse) Reset() {
	*x = ClaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse) ProtoMessage() {}

func (x *ClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse.ProtoReflect.Descriptor instead.
func (*ClaimResponse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11}
}

func (x *ClaimResponse) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ClaimResponse) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ClaimResponse) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ClaimResponse) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ClaimResponse) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ClaimResponse) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ClaimResponse) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ClaimResponse) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *ClaimResponse) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *ClaimResponse) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ClaimResponse) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *ClaimResponse) GetRequestProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestProvider
	}
	return nil
}

func (x *ClaimResponse) GetRequestOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestOrganization
	}
	return nil
}

func (x *ClaimResponse) GetOutcome() *codes_go_proto.RemittanceOutcomeCode {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *ClaimResponse) GetDisposition() *datatypes_go_proto.String {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *ClaimResponse) GetPayeeType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.PayeeType
	}
	return nil
}

func (x *ClaimResponse) GetItem() []*ClaimResponse_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ClaimResponse) GetAddItem() []*ClaimResponse_AddItem {
	if x != nil {
		return x.AddItem
	}
	return nil
}

func (x *ClaimResponse) GetError() []*ClaimResponse_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ClaimResponse) GetTotalCost() *datatypes_go_proto.Money {
	if x != nil {
		return x.TotalCost
	}
	return nil
}

func (x *ClaimResponse) GetUnallocDeductable() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnallocDeductable
	}
	return nil
}

func (x *ClaimResponse) GetTotalBenefit() *datatypes_go_proto.Money {
	if x != nil {
		return x.TotalBenefit
	}
	return nil
}

func (x *ClaimResponse) GetPaymentAdjustment() *datatypes_go_proto.Money {
	if x != nil {
		return x.PaymentAdjustment
	}
	return nil
}

func (x *ClaimResponse) GetPaymentAdjustmentReason() *datatypes_go_proto.Coding {
	if x != nil {
		return x.PaymentAdjustmentReason
	}
	return nil
}

func (x *ClaimResponse) GetPaymentDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *ClaimResponse) GetPaymentAmount() *datatypes_go_proto.Money {
	if x != nil {
		return x.PaymentAmount
	}
	return nil
}

func (x *ClaimResponse) GetPaymentRef() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.PaymentRef
	}
	return nil
}

func (x *ClaimResponse) GetReserved() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *ClaimResponse) GetForm() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *ClaimResponse) GetNote() []*ClaimResponse_Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *ClaimResponse) GetCoverage() []*ClaimResponse_Coverage {
	if x != nil {
		return x.Coverage
	}
	return nil
}

// Auto-generated from StructureDefinition for ClinicalImpression.
// A clinical assessment performed when planning treatments and management
// strategies for a patient. See
// http://hl7.org/fhir/StructureDefinition/ClinicalImpression
type ClinicalImpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The patient being assessed
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=patient,proto3" json:"patient,omitempty"`
	// The clinician performing the assessment
	Assessor *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=assessor,proto3" json:"assessor,omitempty"`
	// in-progress | completed | entered-in-error
	Status *codes_go_proto.ClinicalImpressionStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// When the assessment occurred
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,12,opt,name=date,proto3" json:"date,omitempty"`
	// Why/how the assessment was performed
	Description *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// Reference to last assessment
	Previous *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=previous,proto3" json:"previous,omitempty"`
	// General assessment of patient state
	Problem        []*datatypes_go_proto.Reference      `protobuf:"bytes,15,rep,name=problem,proto3" json:"problem,omitempty"`
	Trigger        *ClinicalImpression_Trigger          `protobuf:"bytes,16,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Investigations []*ClinicalImpression_Investigations `protobuf:"bytes,17,rep,name=investigations,proto3" json:"investigations,omitempty"`
	// Clinical Protocol followed
	Protocol *datatypes_go_proto.Uri `protobuf:"bytes,18,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Summary of the assessment
	Summary *datatypes_go_proto.String    `protobuf:"bytes,19,opt,name=summary,proto3" json:"summary,omitempty"`
	Finding []*ClinicalImpression_Finding `protobuf:"bytes,20,rep,name=finding,proto3" json:"finding,omitempty"`
	// Diagnoses/conditions resolved since previous assessment
	Resolved []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,rep,name=resolved,proto3" json:"resolved,omitempty"`
	RuledOut []*ClinicalImpression_RuledOut        `protobuf:"bytes,22,rep,name=ruled_out,json=ruledOut,proto3" json:"ruled_out,omitempty"`
	// Estimate of likely outcome
	Prognosis *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=prognosis,proto3" json:"prognosis,omitempty"`
	// Plan of action after assessment
	Plan []*datatypes_go_proto.Reference `protobuf:"bytes,24,rep,name=plan,proto3" json:"plan,omitempty"`
	// Actions taken during assessment
	Action []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=action,proto3" json:"action,omitempty"`
}

func (x *ClinicalImpression) Reset() {
	*x = ClinicalImpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalImpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalImpression) ProtoMessage() {}

func (x *ClinicalImpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalImpression.ProtoReflect.Descriptor instead.
func (*ClinicalImpression) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{12}
}

func (x *ClinicalImpression) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalImpression) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ClinicalImpression) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ClinicalImpression) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ClinicalImpression) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ClinicalImpression) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ClinicalImpression) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalImpression) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalImpression) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *ClinicalImpression) GetAssessor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Assessor
	}
	return nil
}

func (x *ClinicalImpression) GetStatus() *codes_go_proto.ClinicalImpressionStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ClinicalImpression) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ClinicalImpression) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ClinicalImpression) GetPrevious() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *ClinicalImpression) GetProblem() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Problem
	}
	return nil
}

func (x *ClinicalImpression) GetTrigger() *ClinicalImpression_Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *ClinicalImpression) GetInvestigations() []*ClinicalImpression_Investigations {
	if x != nil {
		return x.Investigations
	}
	return nil
}

func (x *ClinicalImpression) GetProtocol() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *ClinicalImpression) GetSummary() *datatypes_go_proto.String {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ClinicalImpression) GetFinding() []*ClinicalImpression_Finding {
	if x != nil {
		return x.Finding
	}
	return nil
}

func (x *ClinicalImpression) GetResolved() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Resolved
	}
	return nil
}

func (x *ClinicalImpression) GetRuledOut() []*ClinicalImpression_RuledOut {
	if x != nil {
		return x.RuledOut
	}
	return nil
}

func (x *ClinicalImpression) GetPrognosis() *datatypes_go_proto.String {
	if x != nil {
		return x.Prognosis
	}
	return nil
}

func (x *ClinicalImpression) GetPlan() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *ClinicalImpression) GetAction() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Action
	}
	return nil
}

// Auto-generated from StructureDefinition for Communication.
// A record of information transmitted from a sender to a receiver.
// See http://hl7.org/fhir/StructureDefinition/Communication
type Communication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Message category
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	// Message sender
	Sender *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=sender,proto3" json:"sender,omitempty"`
	// Message recipient
	Recipient []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=recipient,proto3" json:"recipient,omitempty"`
	Payload   []*Communication_Payload        `protobuf:"bytes,13,rep,name=payload,proto3" json:"payload,omitempty"`
	// A channel of communication
	Medium []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=medium,proto3" json:"medium,omitempty"`
	// in-progress | completed | suspended | rejected | failed
	Status *codes_go_proto.CommunicationStatusCode `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// Encounter leading to message
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// When sent
	Sent *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=sent,proto3" json:"sent,omitempty"`
	// When received
	Received *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=received,proto3" json:"received,omitempty"`
	// Indication for message
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=reason,proto3" json:"reason,omitempty"`
	// Focus of message
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=subject,proto3" json:"subject,omitempty"`
	// CommunicationRequest producing this message
	RequestDetail *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=request_detail,json=requestDetail,proto3" json:"request_detail,omitempty"`
}

func (x *Communication) Reset() {
	*x = Communication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Communication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Communication) ProtoMessage() {}

func (x *Communication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Communication.ProtoReflect.Descriptor instead.
func (*Communication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{13}
}

func (x *Communication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Communication) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Communication) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Communication) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Communication) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Communication) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Communication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Communication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Communication) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Communication) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Communication) GetSender() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Communication) GetRecipient() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Communication) GetPayload() []*Communication_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Communication) GetMedium() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *Communication) GetStatus() *codes_go_proto.CommunicationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Communication) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Communication) GetSent() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Sent
	}
	return nil
}

func (x *Communication) GetReceived() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *Communication) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Communication) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Communication) GetRequestDetail() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestDetail
	}
	return nil
}

// Auto-generated from StructureDefinition for CommunicationRequest.
// A request for information to be sent to a receiver.
// See http://hl7.org/fhir/StructureDefinition/CommunicationRequest
type CommunicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Message category
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	// Message sender
	Sender *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=sender,proto3" json:"sender,omitempty"`
	// Message recipient
	Recipient []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=recipient,proto3" json:"recipient,omitempty"`
	Payload   []*CommunicationRequest_Payload `protobuf:"bytes,13,rep,name=payload,proto3" json:"payload,omitempty"`
	// A channel of communication
	Medium []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=medium,proto3" json:"medium,omitempty"`
	// An individual who requested a communication
	Requester *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=requester,proto3" json:"requester,omitempty"`
	// proposed | planned | requested | received | accepted | in-progress |
	// completed | suspended | rejected | failed
	Status *codes_go_proto.CommunicationRequestStatusCode `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	// Encounter leading to message
	Encounter *datatypes_go_proto.Reference   `protobuf:"bytes,17,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Scheduled *CommunicationRequest_Scheduled `protobuf:"bytes,18,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	// Indication for message
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=reason,proto3" json:"reason,omitempty"`
	// When ordered or proposed
	RequestedOn *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=requested_on,json=requestedOn,proto3" json:"requested_on,omitempty"`
	// Focus of message
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=subject,proto3" json:"subject,omitempty"`
	// Message urgency
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *CommunicationRequest) Reset() {
	*x = CommunicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequest) ProtoMessage() {}

func (x *CommunicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequest.ProtoReflect.Descriptor instead.
func (*CommunicationRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{14}
}

func (x *CommunicationRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CommunicationRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *CommunicationRequest) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *CommunicationRequest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *CommunicationRequest) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *CommunicationRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CommunicationRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CommunicationRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *CommunicationRequest) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CommunicationRequest) GetSender() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *CommunicationRequest) GetRecipient() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *CommunicationRequest) GetPayload() []*CommunicationRequest_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CommunicationRequest) GetMedium() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *CommunicationRequest) GetRequester() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *CommunicationRequest) GetStatus() *codes_go_proto.CommunicationRequestStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CommunicationRequest) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *CommunicationRequest) GetScheduled() *CommunicationRequest_Scheduled {
	if x != nil {
		return x.Scheduled
	}
	return nil
}

func (x *CommunicationRequest) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *CommunicationRequest) GetRequestedOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RequestedOn
	}
	return nil
}

func (x *CommunicationRequest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *CommunicationRequest) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

// Auto-generated from StructureDefinition for Composition.
// A set of resources composed into a single coherent clinical statement with
// clinical attestation. See http://hl7.org/fhir/StructureDefinition/Composition
type Composition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Logical identifier of composition (version-independent)
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,9,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Composition editing time
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date,proto3" json:"date,omitempty"`
	// Kind of composition (LOINC if possible)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// Categorization of Composition
	ClassValue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// Human Readable name/title
	Title *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
	// preliminary | final | amended | entered-in-error
	Status *codes_go_proto.CompositionStatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// As defined by affinity domain
	Confidentiality *codes_go_proto.ConfidentialityClassificationCode `protobuf:"bytes,15,opt,name=confidentiality,proto3" json:"confidentiality,omitempty"`
	// Who and/or what the composition is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// Who and/or what authored the composition
	Author   []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=author,proto3" json:"author,omitempty"`
	Attester []*Composition_Attester         `protobuf:"bytes,18,rep,name=attester,proto3" json:"attester,omitempty"`
	// Organization which maintains the composition
	Custodian *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=custodian,proto3" json:"custodian,omitempty"`
	Event     []*Composition_Event          `protobuf:"bytes,20,rep,name=event,proto3" json:"event,omitempty"`
	// Context of the Composition
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Section   []*Composition_Section        `protobuf:"bytes,22,rep,name=section,proto3" json:"section,omitempty"`
}

func (x *Composition) Reset() {
	*x = Composition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Composition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Composition) ProtoMessage() {}

func (x *Composition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Composition.ProtoReflect.Descriptor instead.
func (*Composition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{15}
}

func (x *Composition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Composition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Composition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Composition) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Composition) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Composition) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Composition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Composition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Composition) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Composition) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Composition) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Composition) GetClassValue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *Composition) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Composition) GetStatus() *codes_go_proto.CompositionStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Composition) GetConfidentiality() *codes_go_proto.ConfidentialityClassificationCode {
	if x != nil {
		return x.Confidentiality
	}
	return nil
}

func (x *Composition) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Composition) GetAuthor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Composition) GetAttester() []*Composition_Attester {
	if x != nil {
		return x.Attester
	}
	return nil
}

func (x *Composition) GetCustodian() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Custodian
	}
	return nil
}

func (x *Composition) GetEvent() []*Composition_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Composition) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Composition) GetSection() []*Composition_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

// Auto-generated from StructureDefinition for ConceptMap.
// A map from one set of concepts to one or more other concepts.
// See http://hl7.org/fhir/StructureDefinition/ConceptMap
type ConceptMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Globally unique logical id for concept map
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Additional identifier for the concept map
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Logical id for this version of the concept map
	Version *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	// Informal name for this concept map
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Name of the publisher (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*ConceptMap_Contact      `protobuf:"bytes,16,rep,name=contact,proto3" json:"contact,omitempty"`
	// Date for given status
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=date,proto3" json:"date,omitempty"`
	// Human language description of the concept map
	Description *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	// Content intends to support these contexts
	UseContext []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Why needed
	Requirements *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.String `protobuf:"bytes,21,opt,name=copyright,proto3" json:"copyright,omitempty"`
	Source    *ConceptMap_Source         `protobuf:"bytes,22,opt,name=source,proto3" json:"source,omitempty"`
	Target    *ConceptMap_Target         `protobuf:"bytes,23,opt,name=target,proto3" json:"target,omitempty"`
	Element   []*ConceptMap_Element      `protobuf:"bytes,24,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *ConceptMap) Reset() {
	*x = ConceptMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMap) ProtoMessage() {}

func (x *ConceptMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMap.ProtoReflect.Descriptor instead.
func (*ConceptMap) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{16}
}

func (x *ConceptMap) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConceptMap) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ConceptMap) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ConceptMap) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ConceptMap) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ConceptMap) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ConceptMap) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ConceptMap) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ConceptMap) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ConceptMap) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ConceptMap) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ConceptMap) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConceptMap) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ConceptMap) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *ConceptMap) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *ConceptMap) GetContact() []*ConceptMap_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *ConceptMap) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ConceptMap) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ConceptMap) GetUseContext() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *ConceptMap) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ConceptMap) GetCopyright() *datatypes_go_proto.String {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *ConceptMap) GetSource() *ConceptMap_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ConceptMap) GetTarget() *ConceptMap_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ConceptMap) GetElement() []*ConceptMap_Element {
	if x != nil {
		return x.Element
	}
	return nil
}

// Auto-generated from StructureDefinition for Condition.
// Detailed information about conditions, problems or diagnoses.
// See http://hl7.org/fhir/StructureDefinition/Condition
type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this condition
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who has the condition?
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=patient,proto3" json:"patient,omitempty"`
	// Encounter when condition first asserted
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Person who asserts this condition
	Asserter *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=asserter,proto3" json:"asserter,omitempty"`
	// When first entered
	DateRecorded *datatypes_go_proto.Date `protobuf:"bytes,13,opt,name=date_recorded,json=dateRecorded,proto3" json:"date_recorded,omitempty"`
	// Identification of the condition, problem or diagnosis
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=code,proto3" json:"code,omitempty"`
	// complaint | symptom | finding | diagnosis
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=category,proto3" json:"category,omitempty"`
	// active | relapse | remission | resolved
	ClinicalStatus *datatypes_go_proto.Code `protobuf:"bytes,16,opt,name=clinical_status,json=clinicalStatus,proto3" json:"clinical_status,omitempty"`
	// provisional | differential | confirmed | refuted | entered-in-error |
	// unknown
	VerificationStatus *codes_go_proto.ConditionVerificationStatusCode `protobuf:"bytes,17,opt,name=verification_status,json=verificationStatus,proto3" json:"verification_status,omitempty"`
	// Subjective severity of condition
	Severity  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=severity,proto3" json:"severity,omitempty"`
	Onset     *Condition_Onset                    `protobuf:"bytes,19,opt,name=onset,proto3" json:"onset,omitempty"`
	Abatement *Condition_Abatement                `protobuf:"bytes,20,opt,name=abatement,proto3" json:"abatement,omitempty"`
	Stage     *Condition_Stage                    `protobuf:"bytes,21,opt,name=stage,proto3" json:"stage,omitempty"`
	Evidence  []*Condition_Evidence               `protobuf:"bytes,22,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// Anatomical location, if relevant
	BodySite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Additional information about the Condition
	Notes *datatypes_go_proto.String `protobuf:"bytes,24,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{17}
}

func (x *Condition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Condition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Condition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Condition) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Condition) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Condition) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Condition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Condition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Condition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Condition) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *Condition) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Condition) GetAsserter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Asserter
	}
	return nil
}

func (x *Condition) GetDateRecorded() *datatypes_go_proto.Date {
	if x != nil {
		return x.DateRecorded
	}
	return nil
}

func (x *Condition) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Condition) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Condition) GetClinicalStatus() *datatypes_go_proto.Code {
	if x != nil {
		return x.ClinicalStatus
	}
	return nil
}

func (x *Condition) GetVerificationStatus() *codes_go_proto.ConditionVerificationStatusCode {
	if x != nil {
		return x.VerificationStatus
	}
	return nil
}

func (x *Condition) GetSeverity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *Condition) GetOnset() *Condition_Onset {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *Condition) GetAbatement() *Condition_Abatement {
	if x != nil {
		return x.Abatement
	}
	return nil
}

func (x *Condition) GetStage() *Condition_Stage {
	if x != nil {
		return x.Stage
	}
	return nil
}

func (x *Condition) GetEvidence() []*Condition_Evidence {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *Condition) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Condition) GetNotes() *datatypes_go_proto.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

// Auto-generated from StructureDefinition for Conformance.
// A conformance statement.
// See http://hl7.org/fhir/StructureDefinition/Conformance
type Conformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Logical uri to reference this statement
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Logical id for this version of the statement
	Version *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// Informal name for this conformance statement
	Name *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,13,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Name of the publisher (Organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*Conformance_Contact     `protobuf:"bytes,15,rep,name=contact,proto3" json:"contact,omitempty"`
	// Publication Date(/time)
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=date,proto3" json:"date,omitempty"`
	// Human description of the conformance statement
	Description *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	// Why is this needed?
	Requirements *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// instance | capability | requirements
	Kind           *codes_go_proto.ConformanceStatementKindCode `protobuf:"bytes,20,opt,name=kind,proto3" json:"kind,omitempty"`
	Software       *Conformance_Software                        `protobuf:"bytes,21,opt,name=software,proto3" json:"software,omitempty"`
	Implementation *Conformance_Implementation                  `protobuf:"bytes,22,opt,name=implementation,proto3" json:"implementation,omitempty"`
	// FHIR Version the system uses
	FhirVersion *datatypes_go_proto.Id `protobuf:"bytes,23,opt,name=fhir_version,json=fhirVersion,proto3" json:"fhir_version,omitempty"`
	// no | extensions | elements | both
	AcceptUnknown *codes_go_proto.UnknownContentCodeCode `protobuf:"bytes,24,opt,name=accept_unknown,json=acceptUnknown,proto3" json:"accept_unknown,omitempty"`
	// formats supported (xml | json | mime type)
	Format []*datatypes_go_proto.MimeTypeCode `protobuf:"bytes,25,rep,name=format,proto3" json:"format,omitempty"`
	// Profiles for use cases supported
	Profile   []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=profile,proto3" json:"profile,omitempty"`
	Rest      []*Conformance_Rest             `protobuf:"bytes,27,rep,name=rest,proto3" json:"rest,omitempty"`
	Messaging []*Conformance_Messaging        `protobuf:"bytes,28,rep,name=messaging,proto3" json:"messaging,omitempty"`
	Document  []*Conformance_Document         `protobuf:"bytes,29,rep,name=document,proto3" json:"document,omitempty"`
}

func (x *Conformance) Reset() {
	*x = Conformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance) ProtoMessage() {}

func (x *Conformance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance.ProtoReflect.Descriptor instead.
func (*Conformance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18}
}

func (x *Conformance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Conformance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Conformance) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Conformance) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Conformance) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Conformance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Conformance) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Conformance) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conformance) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Conformance) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *Conformance) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Conformance) GetContact() []*Conformance_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Conformance) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Conformance) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Conformance) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Conformance) GetCopyright() *datatypes_go_proto.String {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *Conformance) GetKind() *codes_go_proto.ConformanceStatementKindCode {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Conformance) GetSoftware() *Conformance_Software {
	if x != nil {
		return x.Software
	}
	return nil
}

func (x *Conformance) GetImplementation() *Conformance_Implementation {
	if x != nil {
		return x.Implementation
	}
	return nil
}

func (x *Conformance) GetFhirVersion() *datatypes_go_proto.Id {
	if x != nil {
		return x.FhirVersion
	}
	return nil
}

func (x *Conformance) GetAcceptUnknown() *codes_go_proto.UnknownContentCodeCode {
	if x != nil {
		return x.AcceptUnknown
	}
	return nil
}

func (x *Conformance) GetFormat() []*datatypes_go_proto.MimeTypeCode {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *Conformance) GetProfile() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Conformance) GetRest() []*Conformance_Rest {
	if x != nil {
		return x.Rest
	}
	return nil
}

func (x *Conformance) GetMessaging() []*Conformance_Messaging {
	if x != nil {
		return x.Messaging
	}
	return nil
}

func (x *Conformance) GetDocument() []*Conformance_Document {
	if x != nil {
		return x.Document
	}
	return nil
}

// Auto-generated from StructureDefinition for Contract.
// Contract.
// See http://hl7.org/fhir/StructureDefinition/Contract
type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Contract identifier
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,9,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// When this Contract was issued
	Issued *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=issued,proto3" json:"issued,omitempty"`
	// Effective time
	Applies *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=applies,proto3" json:"applies,omitempty"`
	// Subject of this Contract
	Subject []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=subject,proto3" json:"subject,omitempty"`
	// Authority under which this Contract has standing
	Authority []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=authority,proto3" json:"authority,omitempty"`
	// Domain in which this Contract applies
	Domain []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=domain,proto3" json:"domain,omitempty"`
	// Contract Tyoe
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	// Contract Subtype
	SubType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	// Contract Action
	Action []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,rep,name=action,proto3" json:"action,omitempty"`
	// Contract Action Reason
	ActionReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=action_reason,json=actionReason,proto3" json:"action_reason,omitempty"`
	Actor        []*Contract_Actor                     `protobuf:"bytes,19,rep,name=actor,proto3" json:"actor,omitempty"`
	ValuedItem   []*Contract_ValuedItem                `protobuf:"bytes,20,rep,name=valued_item,json=valuedItem,proto3" json:"valued_item,omitempty"`
	Signer       []*Contract_Signer                    `protobuf:"bytes,21,rep,name=signer,proto3" json:"signer,omitempty"`
	Term         []*Contract_Term                      `protobuf:"bytes,22,rep,name=term,proto3" json:"term,omitempty"`
	Binding      *Contract_Binding                     `protobuf:"bytes,23,opt,name=binding,proto3" json:"binding,omitempty"`
	Friendly     []*Contract_Friendly                  `protobuf:"bytes,24,rep,name=friendly,proto3" json:"friendly,omitempty"`
	Legal        []*Contract_Legal                     `protobuf:"bytes,25,rep,name=legal,proto3" json:"legal,omitempty"`
	Rule         []*Contract_Rule                      `protobuf:"bytes,26,rep,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19}
}

func (x *Contract) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Contract) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Contract) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Contract) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Contract) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Contract) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Contract) GetIssued() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Contract) GetApplies() *datatypes_go_proto.Period {
	if x != nil {
		return x.Applies
	}
	return nil
}

func (x *Contract) GetSubject() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Contract) GetAuthority() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *Contract) GetDomain() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *Contract) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract) GetSubType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubType
	}
	return nil
}

func (x *Contract) GetAction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Contract) GetActionReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ActionReason
	}
	return nil
}

func (x *Contract) GetActor() []*Contract_Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Contract) GetValuedItem() []*Contract_ValuedItem {
	if x != nil {
		return x.ValuedItem
	}
	return nil
}

func (x *Contract) GetSigner() []*Contract_Signer {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *Contract) GetTerm() []*Contract_Term {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *Contract) GetBinding() *Contract_Binding {
	if x != nil {
		return x.Binding
	}
	return nil
}

func (x *Contract) GetFriendly() []*Contract_Friendly {
	if x != nil {
		return x.Friendly
	}
	return nil
}

func (x *Contract) GetLegal() []*Contract_Legal {
	if x != nil {
		return x.Legal
	}
	return nil
}

func (x *Contract) GetRule() []*Contract_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// Auto-generated from StructureDefinition for Coverage.
// Insurance or medical plan.
// See http://hl7.org/fhir/StructureDefinition/Coverage
type Coverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for the plan issuer
	Issuer *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// BIN Number
	Bin *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=bin,proto3" json:"bin,omitempty"`
	// Coverage start and end dates
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3" json:"period,omitempty"`
	// Type of coverage
	Type *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// Subscriber ID
	SubscriberId *datatypes_go_proto.Identifier `protobuf:"bytes,13,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	// The primary coverage ID
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,14,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// An identifier for the group
	Group *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`
	// An identifier for the plan
	Plan *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=plan,proto3" json:"plan,omitempty"`
	// An identifier for the subsection of the plan
	SubPlan *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=sub_plan,json=subPlan,proto3" json:"sub_plan,omitempty"`
	// The dependent number
	Dependent *datatypes_go_proto.PositiveInt `protobuf:"bytes,18,opt,name=dependent,proto3" json:"dependent,omitempty"`
	// The plan instance or sequence counter
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,19,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Plan holder information
	Subscriber *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	// Insurer network
	Network *datatypes_go_proto.Identifier `protobuf:"bytes,21,opt,name=network,proto3" json:"network,omitempty"`
	// Contract details
	Contract []*datatypes_go_proto.Reference `protobuf:"bytes,22,rep,name=contract,proto3" json:"contract,omitempty"`
}

func (x *Coverage) Reset() {
	*x = Coverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coverage) ProtoMessage() {}

func (x *Coverage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coverage.ProtoReflect.Descriptor instead.
func (*Coverage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{20}
}

func (x *Coverage) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Coverage) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Coverage) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Coverage) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Coverage) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Coverage) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Coverage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Coverage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Coverage) GetIssuer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *Coverage) GetBin() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Bin
	}
	return nil
}

func (x *Coverage) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Coverage) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Coverage) GetSubscriberId() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.SubscriberId
	}
	return nil
}

func (x *Coverage) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Coverage) GetGroup() *datatypes_go_proto.String {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Coverage) GetPlan() *datatypes_go_proto.String {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *Coverage) GetSubPlan() *datatypes_go_proto.String {
	if x != nil {
		return x.SubPlan
	}
	return nil
}

func (x *Coverage) GetDependent() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Dependent
	}
	return nil
}

func (x *Coverage) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Coverage) GetSubscriber() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subscriber
	}
	return nil
}

func (x *Coverage) GetNetwork() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Coverage) GetContract() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Contract
	}
	return nil
}

// Auto-generated from StructureDefinition for DataElement.
// Resource data element.
// See http://hl7.org/fhir/StructureDefinition/DataElement
type DataElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Globally unique logical id for data element
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Logical id to reference this data element
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Logical id for this version of the data element
	Version *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	// Descriptive label for this element definition
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Name of the publisher (Organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*DataElement_Contact     `protobuf:"bytes,16,rep,name=contact,proto3" json:"contact,omitempty"`
	// Date for this version of the data element
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=date,proto3" json:"date,omitempty"`
	// Content intends to support these contexts
	UseContext []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// comparable | fully-specified | equivalent | convertable | scaleable |
	// flexible
	Stringency *codes_go_proto.DataElementStringencyCode `protobuf:"bytes,20,opt,name=stringency,proto3" json:"stringency,omitempty"`
	Mapping    []*DataElement_Mapping                    `protobuf:"bytes,21,rep,name=mapping,proto3" json:"mapping,omitempty"`
	// Definition of element
	Element []*metadatatypes_go_proto.ElementDefinition `protobuf:"bytes,22,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *DataElement) Reset() {
	*x = DataElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElement) ProtoMessage() {}

func (x *DataElement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElement.ProtoReflect.Descriptor instead.
func (*DataElement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{21}
}

func (x *DataElement) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElement) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DataElement) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DataElement) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DataElement) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DataElement) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DataElement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataElement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DataElement) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *DataElement) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DataElement) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DataElement) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DataElement) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DataElement) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *DataElement) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *DataElement) GetContact() []*DataElement_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *DataElement) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DataElement) GetUseContext() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *DataElement) GetCopyright() *datatypes_go_proto.String {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *DataElement) GetStringency() *codes_go_proto.DataElementStringencyCode {
	if x != nil {
		return x.Stringency
	}
	return nil
}

func (x *DataElement) GetMapping() []*DataElement_Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *DataElement) GetElement() []*metadatatypes_go_proto.ElementDefinition {
	if x != nil {
		return x.Element
	}
	return nil
}

// Auto-generated from StructureDefinition for DetectedIssue.
// Clinical issue with action.
// See http://hl7.org/fhir/StructureDefinition/DetectedIssue
type DetectedIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Associated patient
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=patient,proto3" json:"patient,omitempty"`
	// Issue Category, e.g. drug-drug, duplicate therapy, etc.
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	// high | moderate | low
	Severity *codes_go_proto.DetectedIssueSeverityCode `protobuf:"bytes,11,opt,name=severity,proto3" json:"severity,omitempty"`
	// Problem resource
	Implicated []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=implicated,proto3" json:"implicated,omitempty"`
	// Description and context
	Detail *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=detail,proto3" json:"detail,omitempty"`
	// When identified
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,14,opt,name=date,proto3" json:"date,omitempty"`
	// The provider or device that identified the issue
	Author *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=author,proto3" json:"author,omitempty"`
	// Unique id for the detected issue
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,16,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Authority for issue
	Reference  *datatypes_go_proto.Uri     `protobuf:"bytes,17,opt,name=reference,proto3" json:"reference,omitempty"`
	Mitigation []*DetectedIssue_Mitigation `protobuf:"bytes,18,rep,name=mitigation,proto3" json:"mitigation,omitempty"`
}

func (x *DetectedIssue) Reset() {
	*x = DetectedIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectedIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedIssue) ProtoMessage() {}

func (x *DetectedIssue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedIssue.ProtoReflect.Descriptor instead.
func (*DetectedIssue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{22}
}

func (x *DetectedIssue) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DetectedIssue) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DetectedIssue) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DetectedIssue) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DetectedIssue) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DetectedIssue) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DetectedIssue) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DetectedIssue) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DetectedIssue) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *DetectedIssue) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DetectedIssue) GetSeverity() *codes_go_proto.DetectedIssueSeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *DetectedIssue) GetImplicated() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Implicated
	}
	return nil
}

func (x *DetectedIssue) GetDetail() *datatypes_go_proto.String {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *DetectedIssue) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DetectedIssue) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *DetectedIssue) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DetectedIssue) GetReference() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *DetectedIssue) GetMitigation() []*DetectedIssue_Mitigation {
	if x != nil {
		return x.Mitigation
	}
	return nil
}

// Auto-generated from StructureDefinition for Device.
// An instance of a manufactured te that is used in the provision of healthcare.
// See http://hl7.org/fhir/StructureDefinition/Device
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Instance id from manufacturer, owner, and others
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What kind of device this is
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	// Device notes and comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,11,rep,name=note,proto3" json:"note,omitempty"`
	// available | not-available | entered-in-error
	Status *codes_go_proto.DeviceStatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Name of device manufacturer
	Manufacturer *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Model id assigned by the manufacturer
	Model *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=model,proto3" json:"model,omitempty"`
	// Version number (i.e. software)
	Version *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`
	// Manufacture date
	ManufactureDate *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=manufacture_date,json=manufactureDate,proto3" json:"manufacture_date,omitempty"`
	// Date and time of expiry of this device (if applicable)
	Expiry *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// FDA mandated Unique Device Identifier
	Udi *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=udi,proto3" json:"udi,omitempty"`
	// Lot number of manufacture
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Organization responsible for device
	Owner *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=owner,proto3" json:"owner,omitempty"`
	// Where the resource is found
	Location *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=location,proto3" json:"location,omitempty"`
	// If the resource is affixed to a person
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=patient,proto3" json:"patient,omitempty"`
	// Details for human/organization for support
	Contact []*datatypes_go_proto.ContactPoint `protobuf:"bytes,23,rep,name=contact,proto3" json:"contact,omitempty"`
	// Network address to contact device
	Url *datatypes_go_proto.Uri `protobuf:"bytes,24,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{23}
}

func (x *Device) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Device) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Device) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Device) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Device) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Device) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Device) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Device) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Device) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Device) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Device) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Device) GetStatus() *codes_go_proto.DeviceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Device) GetManufacturer() *datatypes_go_proto.String {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *Device) GetModel() *datatypes_go_proto.String {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *Device) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Device) GetManufactureDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ManufactureDate
	}
	return nil
}

func (x *Device) GetExpiry() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *Device) GetUdi() *datatypes_go_proto.String {
	if x != nil {
		return x.Udi
	}
	return nil
}

func (x *Device) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *Device) GetOwner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Device) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Device) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *Device) GetContact() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Device) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

// Auto-generated from StructureDefinition for DeviceComponent.
// An instance of a medical-related component of a medical device.
// See http://hl7.org/fhir/StructureDefinition/DeviceComponent
type DeviceComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// What kind of component it is
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// Instance id assigned by the software stack
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Recent system change timestamp
	LastSystemChange *datatypes_go_proto.Instant `protobuf:"bytes,11,opt,name=last_system_change,json=lastSystemChange,proto3" json:"last_system_change,omitempty"`
	// A source device of this component
	Source *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	// Parent resource link
	Parent *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=parent,proto3" json:"parent,omitempty"`
	// Component operational status
	OperationalStatus []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=operational_status,json=operationalStatus,proto3" json:"operational_status,omitempty"`
	// Current supported parameter group
	ParameterGroup *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=parameter_group,json=parameterGroup,proto3" json:"parameter_group,omitempty"`
	// other | chemical | electrical | impedance | nuclear | optical | thermal |
	// biological | mechanical | acoustical | manual+
	MeasurementPrinciple    *codes_go_proto.MeasmntPrincipleCode       `protobuf:"bytes,16,opt,name=measurement_principle,json=measurementPrinciple,proto3" json:"measurement_principle,omitempty"`
	ProductionSpecification []*DeviceComponent_ProductionSpecification `protobuf:"bytes,17,rep,name=production_specification,json=productionSpecification,proto3" json:"production_specification,omitempty"`
	// Language code for the human-readable text strings produced by the device
	LanguageCode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
}

func (x *DeviceComponent) Reset() {
	*x = DeviceComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceComponent) ProtoMessage() {}

func (x *DeviceComponent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceComponent.ProtoReflect.Descriptor instead.
func (*DeviceComponent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{24}
}

func (x *DeviceComponent) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceComponent) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeviceComponent) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DeviceComponent) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DeviceComponent) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DeviceComponent) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DeviceComponent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceComponent) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceComponent) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DeviceComponent) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DeviceComponent) GetLastSystemChange() *datatypes_go_proto.Instant {
	if x != nil {
		return x.LastSystemChange
	}
	return nil
}

func (x *DeviceComponent) GetSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DeviceComponent) GetParent() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *DeviceComponent) GetOperationalStatus() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OperationalStatus
	}
	return nil
}

func (x *DeviceComponent) GetParameterGroup() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ParameterGroup
	}
	return nil
}

func (x *DeviceComponent) GetMeasurementPrinciple() *codes_go_proto.MeasmntPrincipleCode {
	if x != nil {
		return x.MeasurementPrinciple
	}
	return nil
}

func (x *DeviceComponent) GetProductionSpecification() []*DeviceComponent_ProductionSpecification {
	if x != nil {
		return x.ProductionSpecification
	}
	return nil
}

func (x *DeviceComponent) GetLanguageCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.LanguageCode
	}
	return nil
}

// Auto-generated from StructureDefinition for DeviceMetric.
// Measurement, calculation or setting capability of a medical device.
// See http://hl7.org/fhir/StructureDefinition/DeviceMetric
type DeviceMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of metric
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// Unique identifier of this DeviceMetric
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Unit of metric
	Unit *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=unit,proto3" json:"unit,omitempty"`
	// Describes the link to the source Device
	Source *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	// Describes the link to the parent DeviceComponent
	Parent *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=parent,proto3" json:"parent,omitempty"`
	// on | off | standby
	OperationalStatus *codes_go_proto.DeviceMetricOperationalStatusCode `protobuf:"bytes,14,opt,name=operational_status,json=operationalStatus,proto3" json:"operational_status,omitempty"`
	// black | red | green | yellow | blue | magenta | cyan | white
	Color *codes_go_proto.DeviceMetricColorCode `protobuf:"bytes,15,opt,name=color,proto3" json:"color,omitempty"`
	// measurement | setting | calculation | unspecified
	Category *codes_go_proto.DeviceMetricCategoryCode `protobuf:"bytes,16,opt,name=category,proto3" json:"category,omitempty"`
	// Describes the measurement repetition time
	MeasurementPeriod *datatypes_go_proto.Timing  `protobuf:"bytes,17,opt,name=measurement_period,json=measurementPeriod,proto3" json:"measurement_period,omitempty"`
	Calibration       []*DeviceMetric_Calibration `protobuf:"bytes,18,rep,name=calibration,proto3" json:"calibration,omitempty"`
}

func (x *DeviceMetric) Reset() {
	*x = DeviceMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetric) ProtoMessage() {}

func (x *DeviceMetric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetric.ProtoReflect.Descriptor instead.
func (*DeviceMetric) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{25}
}

func (x *DeviceMetric) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetric) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeviceMetric) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DeviceMetric) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DeviceMetric) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DeviceMetric) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DeviceMetric) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceMetric) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceMetric) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DeviceMetric) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DeviceMetric) GetUnit() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *DeviceMetric) GetSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DeviceMetric) GetParent() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *DeviceMetric) GetOperationalStatus() *codes_go_proto.DeviceMetricOperationalStatusCode {
	if x != nil {
		return x.OperationalStatus
	}
	return nil
}

func (x *DeviceMetric) GetColor() *codes_go_proto.DeviceMetricColorCode {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *DeviceMetric) GetCategory() *codes_go_proto.DeviceMetricCategoryCode {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DeviceMetric) GetMeasurementPeriod() *datatypes_go_proto.Timing {
	if x != nil {
		return x.MeasurementPeriod
	}
	return nil
}

func (x *DeviceMetric) GetCalibration() []*DeviceMetric_Calibration {
	if x != nil {
		return x.Calibration
	}
	return nil
}

// Auto-generated from StructureDefinition for DeviceUseRequest.
// A request for a patient to use or be given a medical device.
// See http://hl7.org/fhir/StructureDefinition/DeviceUseRequest
type DeviceUseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	BodySite          *DeviceUseRequest_BodySite      `protobuf:"bytes,9,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// proposed | planned | requested | received | accepted | in-progress |
	// completed | suspended | rejected | aborted
	Status *codes_go_proto.DeviceUseRequestStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Device requested
	Device *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=device,proto3" json:"device,omitempty"`
	// Encounter motivating request
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Request identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,13,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Reason for request
	Indication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,rep,name=indication,proto3" json:"indication,omitempty"`
	// Notes or comments
	Notes []*datatypes_go_proto.String `protobuf:"bytes,15,rep,name=notes,proto3" json:"notes,omitempty"`
	// PRN
	PrnReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=prn_reason,json=prnReason,proto3" json:"prn_reason,omitempty"`
	// When ordered
	OrderedOn *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=ordered_on,json=orderedOn,proto3" json:"ordered_on,omitempty"`
	// When recorded
	RecordedOn *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=recorded_on,json=recordedOn,proto3" json:"recorded_on,omitempty"`
	// Focus of request
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=subject,proto3" json:"subject,omitempty"`
	Timing  *DeviceUseRequest_TimingType  `protobuf:"bytes,20,opt,name=timing,proto3" json:"timing,omitempty"`
	// routine | urgent | stat | asap
	Priority *codes_go_proto.DeviceUseRequestPriorityCode `protobuf:"bytes,21,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *DeviceUseRequest) Reset() {
	*x = DeviceUseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseRequest) ProtoMessage() {}

func (x *DeviceUseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseRequest.ProtoReflect.Descriptor instead.
func (*DeviceUseRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{26}
}

func (x *DeviceUseRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceUseRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeviceUseRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DeviceUseRequest) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DeviceUseRequest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DeviceUseRequest) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DeviceUseRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceUseRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceUseRequest) GetBodySite() *DeviceUseRequest_BodySite {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *DeviceUseRequest) GetStatus() *codes_go_proto.DeviceUseRequestStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeviceUseRequest) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceUseRequest) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *DeviceUseRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DeviceUseRequest) GetIndication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *DeviceUseRequest) GetNotes() []*datatypes_go_proto.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *DeviceUseRequest) GetPrnReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PrnReason
	}
	return nil
}

func (x *DeviceUseRequest) GetOrderedOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.OrderedOn
	}
	return nil
}

func (x *DeviceUseRequest) GetRecordedOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedOn
	}
	return nil
}

func (x *DeviceUseRequest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *DeviceUseRequest) GetTiming() *DeviceUseRequest_TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *DeviceUseRequest) GetPriority() *codes_go_proto.DeviceUseRequestPriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

// Auto-generated from StructureDefinition for DeviceUseStatement.
// See http://hl7.org/fhir/StructureDefinition/DeviceUseStatement
type DeviceUseStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension       `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	BodySite          *DeviceUseStatement_BodySite          `protobuf:"bytes,9,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	WhenUsed          *datatypes_go_proto.Period            `protobuf:"bytes,10,opt,name=when_used,json=whenUsed,proto3" json:"when_used,omitempty"`
	Device            *datatypes_go_proto.Reference         `protobuf:"bytes,11,opt,name=device,proto3" json:"device,omitempty"`
	Identifier        []*datatypes_go_proto.Identifier      `protobuf:"bytes,12,rep,name=identifier,proto3" json:"identifier,omitempty"`
	Indication        []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=indication,proto3" json:"indication,omitempty"`
	Notes             []*datatypes_go_proto.String          `protobuf:"bytes,14,rep,name=notes,proto3" json:"notes,omitempty"`
	RecordedOn        *datatypes_go_proto.DateTime          `protobuf:"bytes,15,opt,name=recorded_on,json=recordedOn,proto3" json:"recorded_on,omitempty"`
	Subject           *datatypes_go_proto.Reference         `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	Timing            *DeviceUseStatement_TimingType        `protobuf:"bytes,17,opt,name=timing,proto3" json:"timing,omitempty"`
}

func (x *DeviceUseStatement) Reset() {
	*x = DeviceUseStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseStatement) ProtoMessage() {}

func (x *DeviceUseStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseStatement.ProtoReflect.Descriptor instead.
func (*DeviceUseStatement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{27}
}

func (x *DeviceUseStatement) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceUseStatement) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DeviceUseStatement) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DeviceUseStatement) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DeviceUseStatement) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DeviceUseStatement) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DeviceUseStatement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceUseStatement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceUseStatement) GetBodySite() *DeviceUseStatement_BodySite {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *DeviceUseStatement) GetWhenUsed() *datatypes_go_proto.Period {
	if x != nil {
		return x.WhenUsed
	}
	return nil
}

func (x *DeviceUseStatement) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceUseStatement) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DeviceUseStatement) GetIndication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *DeviceUseStatement) GetNotes() []*datatypes_go_proto.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *DeviceUseStatement) GetRecordedOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.RecordedOn
	}
	return nil
}

func (x *DeviceUseStatement) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *DeviceUseStatement) GetTiming() *DeviceUseStatement_TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

// Auto-generated from StructureDefinition for DiagnosticOrder.
// A request for a diagnostic service.
// See http://hl7.org/fhir/StructureDefinition/DiagnosticOrder
type DiagnosticOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Who and/or what test is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`
	// Who ordered the test
	Orderer *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// Identifiers assigned to this order
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The encounter that this diagnostic order is associated with
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Explanation/Justification for test
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=reason,proto3" json:"reason,omitempty"`
	// Additional clinical information
	SupportingInformation []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	// If the whole order relates to specific specimens
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,15,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// proposed | draft | planned | requested | received | accepted | in-progress
	// | review | completed | cancelled | suspended | rejected | failed
	Status *codes_go_proto.DiagnosticOrderStatusCode `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	// routine | urgent | stat | asap
	Priority *codes_go_proto.DiagnosticOrderPriorityCode `protobuf:"bytes,17,opt,name=priority,proto3" json:"priority,omitempty"`
	Event    []*DiagnosticOrder_Event                    `protobuf:"bytes,18,rep,name=event,proto3" json:"event,omitempty"`
	Item     []*DiagnosticOrder_Item                     `protobuf:"bytes,19,rep,name=item,proto3" json:"item,omitempty"`
	// Other notes and comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,20,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *DiagnosticOrder) Reset() {
	*x = DiagnosticOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticOrder) ProtoMessage() {}

func (x *DiagnosticOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticOrder.ProtoReflect.Descriptor instead.
func (*DiagnosticOrder) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{28}
}

func (x *DiagnosticOrder) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticOrder) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DiagnosticOrder) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DiagnosticOrder) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DiagnosticOrder) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DiagnosticOrder) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DiagnosticOrder) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticOrder) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DiagnosticOrder) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *DiagnosticOrder) GetOrderer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Orderer
	}
	return nil
}

func (x *DiagnosticOrder) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DiagnosticOrder) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *DiagnosticOrder) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *DiagnosticOrder) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *DiagnosticOrder) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *DiagnosticOrder) GetStatus() *codes_go_proto.DiagnosticOrderStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DiagnosticOrder) GetPriority() *codes_go_proto.DiagnosticOrderPriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *DiagnosticOrder) GetEvent() []*DiagnosticOrder_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *DiagnosticOrder) GetItem() []*DiagnosticOrder_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *DiagnosticOrder) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for DiagnosticReport.
// A Diagnostic report - a combination of request information, atomic results,
// images, interpretation, as well as formatted reports. See
// http://hl7.org/fhir/StructureDefinition/DiagnosticReport
type DiagnosticReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Id for external references to this report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// registered | partial | final | corrected | appended | cancelled |
	// entered-in-error
	Status *codes_go_proto.DiagnosticReportStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	// Name/Code for this diagnostic report
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report, usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *DiagnosticReport_Effective   `protobuf:"bytes,15,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was released
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,16,opt,name=issued,proto3" json:"issued,omitempty"`
	// Responsible Diagnostic Service
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=performer,proto3" json:"performer,omitempty"`
	// What was requested
	Request []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=request,proto3" json:"request,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations - simple, or complex nested groups
	Result []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Image        []*DiagnosticReport_Image       `protobuf:"bytes,22,rep,name=image,proto3" json:"image,omitempty"`
	// Clinical Interpretation of test results
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Codes for the conclusion
	CodedDiagnosis []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=coded_diagnosis,json=codedDiagnosis,proto3" json:"coded_diagnosis,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,25,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
}

func (x *DiagnosticReport) Reset() {
	*x = DiagnosticReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReport) ProtoMessage() {}

func (x *DiagnosticReport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReport.ProtoReflect.Descriptor instead.
func (*DiagnosticReport) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{29}
}

func (x *DiagnosticReport) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReport) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DiagnosticReport) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DiagnosticReport) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DiagnosticReport) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DiagnosticReport) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DiagnosticReport) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticReport) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DiagnosticReport) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DiagnosticReport) GetStatus() *codes_go_proto.DiagnosticReportStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DiagnosticReport) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DiagnosticReport) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *DiagnosticReport) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *DiagnosticReport) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *DiagnosticReport) GetEffective() *DiagnosticReport_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *DiagnosticReport) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *DiagnosticReport) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *DiagnosticReport) GetRequest() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DiagnosticReport) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *DiagnosticReport) GetResult() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *DiagnosticReport) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *DiagnosticReport) GetImage() []*DiagnosticReport_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *DiagnosticReport) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *DiagnosticReport) GetCodedDiagnosis() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CodedDiagnosis
	}
	return nil
}

func (x *DiagnosticReport) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

// Auto-generated from StructureDefinition for DocumentManifest.
// A manifest that defines a set of documents.
// See http://hl7.org/fhir/StructureDefinition/DocumentManifest
type DocumentManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique Identifier for the set of documents
	MasterIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,9,opt,name=master_identifier,json=masterIdentifier,proto3" json:"master_identifier,omitempty"`
	// Other identifiers for the manifest
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The subject of the set of documents
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`
	// Intended to get notified about this set of documents
	Recipient []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=recipient,proto3" json:"recipient,omitempty"`
	// Kind of document set
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	// Who and/or what authored the manifest
	Author []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=author,proto3" json:"author,omitempty"`
	// When this document manifest created
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
	// The source system/application/software
	Source *datatypes_go_proto.Uri `protobuf:"bytes,16,opt,name=source,proto3" json:"source,omitempty"`
	// current | superseded | entered-in-error
	Status *codes_go_proto.DocumentReferenceStatusCode `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable description (title)
	Description *datatypes_go_proto.String  `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	Content     []*DocumentManifest_Content `protobuf:"bytes,19,rep,name=content,proto3" json:"content,omitempty"`
	Related     []*DocumentManifest_Related `protobuf:"bytes,20,rep,name=related,proto3" json:"related,omitempty"`
}

func (x *DocumentManifest) Reset() {
	*x = DocumentManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentManifest) ProtoMessage() {}

func (x *DocumentManifest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentManifest.ProtoReflect.Descriptor instead.
func (*DocumentManifest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{30}
}

func (x *DocumentManifest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentManifest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DocumentManifest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DocumentManifest) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DocumentManifest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DocumentManifest) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DocumentManifest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DocumentManifest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DocumentManifest) GetMasterIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.MasterIdentifier
	}
	return nil
}

func (x *DocumentManifest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DocumentManifest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *DocumentManifest) GetRecipient() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *DocumentManifest) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DocumentManifest) GetAuthor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *DocumentManifest) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DocumentManifest) GetSource() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DocumentManifest) GetStatus() *codes_go_proto.DocumentReferenceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DocumentManifest) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DocumentManifest) GetContent() []*DocumentManifest_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *DocumentManifest) GetRelated() []*DocumentManifest_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

// Auto-generated from StructureDefinition for DocumentReference.
// A reference to a document.
// See http://hl7.org/fhir/StructureDefinition/DocumentReference
type DocumentReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Master Version Specific Identifier
	MasterIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,9,opt,name=master_identifier,json=masterIdentifier,proto3" json:"master_identifier,omitempty"`
	// Other identifiers for the document
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who/what is the subject of the document
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`
	// Kind of document (LOINC if possible)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// Categorization of document
	ClassValue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// Who and/or what authored the document
	Author []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=author,proto3" json:"author,omitempty"`
	// Organization which maintains the document
	Custodian *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=custodian,proto3" json:"custodian,omitempty"`
	// Who/what authenticated the document
	Authenticator *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=authenticator,proto3" json:"authenticator,omitempty"`
	// Document creation time
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=created,proto3" json:"created,omitempty"`
	// When this document reference created
	Indexed *datatypes_go_proto.Instant `protobuf:"bytes,18,opt,name=indexed,proto3" json:"indexed,omitempty"`
	// current | superseded | entered-in-error
	Status *codes_go_proto.DocumentReferenceStatusCode `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`
	// preliminary | final | appended | amended | entered-in-error
	DocStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=doc_status,json=docStatus,proto3" json:"doc_status,omitempty"`
	RelatesTo []*DocumentReference_RelatesTo      `protobuf:"bytes,21,rep,name=relates_to,json=relatesTo,proto3" json:"relates_to,omitempty"`
	// Human-readable description (title)
	Description *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`
	// Document security-tags
	SecurityLabel []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,rep,name=security_label,json=securityLabel,proto3" json:"security_label,omitempty"`
	Content       []*DocumentReference_Content          `protobuf:"bytes,24,rep,name=content,proto3" json:"content,omitempty"`
	Context       *DocumentReference_Context            `protobuf:"bytes,25,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *DocumentReference) Reset() {
	*x = DocumentReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentReference) ProtoMessage() {}

func (x *DocumentReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentReference.ProtoReflect.Descriptor instead.
func (*DocumentReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{31}
}

func (x *DocumentReference) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentReference) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DocumentReference) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DocumentReference) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DocumentReference) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DocumentReference) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DocumentReference) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DocumentReference) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DocumentReference) GetMasterIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.MasterIdentifier
	}
	return nil
}

func (x *DocumentReference) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DocumentReference) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *DocumentReference) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DocumentReference) GetClassValue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *DocumentReference) GetAuthor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *DocumentReference) GetCustodian() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Custodian
	}
	return nil
}

func (x *DocumentReference) GetAuthenticator() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authenticator
	}
	return nil
}

func (x *DocumentReference) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DocumentReference) GetIndexed() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Indexed
	}
	return nil
}

func (x *DocumentReference) GetStatus() *codes_go_proto.DocumentReferenceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DocumentReference) GetDocStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DocStatus
	}
	return nil
}

func (x *DocumentReference) GetRelatesTo() []*DocumentReference_RelatesTo {
	if x != nil {
		return x.RelatesTo
	}
	return nil
}

func (x *DocumentReference) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DocumentReference) GetSecurityLabel() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SecurityLabel
	}
	return nil
}

func (x *DocumentReference) GetContent() []*DocumentReference_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *DocumentReference) GetContext() *DocumentReference_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

// Auto-generated from StructureDefinition for DomainResource.
// A resource with narrative, extensions, and contained resources.
// See http://hl7.org/fhir/StructureDefinition/DomainResource
type DomainResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
}

func (x *DomainResource) Reset() {
	*x = DomainResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainResource) ProtoMessage() {}

func (x *DomainResource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainResource.ProtoReflect.Descriptor instead.
func (*DomainResource) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{32}
}

func (x *DomainResource) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DomainResource) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DomainResource) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DomainResource) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DomainResource) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DomainResource) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DomainResource) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DomainResource) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

// Auto-generated from StructureDefinition for EligibilityRequest.
// Eligibility request.
// See http://hl7.org/fhir/StructureDefinition/EligibilityRequest
type EligibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,10,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	// Insurer
	Target *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=target,proto3" json:"target,omitempty"`
	// Responsible practitioner
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=provider,proto3" json:"provider,omitempty"`
	// Responsible organization
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *EligibilityRequest) Reset() {
	*x = EligibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilityRequest) ProtoMessage() {}

func (x *EligibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilityRequest.ProtoReflect.Descriptor instead.
func (*EligibilityRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{33}
}

func (x *EligibilityRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EligibilityRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *EligibilityRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *EligibilityRequest) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *EligibilityRequest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EligibilityRequest) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *EligibilityRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EligibilityRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EligibilityRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *EligibilityRequest) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *EligibilityRequest) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *EligibilityRequest) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *EligibilityRequest) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *EligibilityRequest) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *EligibilityRequest) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

// Auto-generated from StructureDefinition for EligibilityResponse.
// EligibilityResponse resource.
// See http://hl7.org/fhir/StructureDefinition/EligibilityResponse
type EligibilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Claim reference
	Request *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=request,proto3" json:"request,omitempty"`
	// complete | error
	Outcome *codes_go_proto.RemittanceOutcomeCode `protobuf:"bytes,11,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Disposition Message
	Disposition *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=disposition,proto3" json:"disposition,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,13,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,14,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
	// Insurer
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=organization,proto3" json:"organization,omitempty"`
	// Responsible practitioner
	RequestProvider *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=request_provider,json=requestProvider,proto3" json:"request_provider,omitempty"`
	// Responsible organization
	RequestOrganization *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=request_organization,json=requestOrganization,proto3" json:"request_organization,omitempty"`
}

func (x *EligibilityResponse) Reset() {
	*x = EligibilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilityResponse) ProtoMessage() {}

func (x *EligibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilityResponse.ProtoReflect.Descriptor instead.
func (*EligibilityResponse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{34}
}

func (x *EligibilityResponse) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EligibilityResponse) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *EligibilityResponse) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *EligibilityResponse) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *EligibilityResponse) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EligibilityResponse) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *EligibilityResponse) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EligibilityResponse) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EligibilityResponse) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *EligibilityResponse) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *EligibilityResponse) GetOutcome() *codes_go_proto.RemittanceOutcomeCode {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *EligibilityResponse) GetDisposition() *datatypes_go_proto.String {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *EligibilityResponse) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *EligibilityResponse) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *EligibilityResponse) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *EligibilityResponse) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *EligibilityResponse) GetRequestProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestProvider
	}
	return nil
}

func (x *EligibilityResponse) GetRequestOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestOrganization
	}
	return nil
}

// Auto-generated from StructureDefinition for Encounter.
// An interaction during which services are provided to the patient.
// See http://hl7.org/fhir/StructureDefinition/Encounter
type Encounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier(s) by which this encounter is known
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// planned | arrived | in-progress | onleave | finished | cancelled
	Status        *codes_go_proto.EncounterStateCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	StatusHistory []*Encounter_StatusHistory         `protobuf:"bytes,11,rep,name=status_history,json=statusHistory,proto3" json:"status_history,omitempty"`
	// inpatient | outpatient | ambulatory | emergency +
	ClassValue *codes_go_proto.EncounterClassCode `protobuf:"bytes,12,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// Specific type of encounter
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=type,proto3" json:"type,omitempty"`
	// Indicates the urgency of the encounter
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty"`
	// The patient present at the encounter
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=patient,proto3" json:"patient,omitempty"`
	// Episode(s) of care that this encounter should be recorded against
	EpisodeOfCare []*datatypes_go_proto.Reference `protobuf:"bytes,16,rep,name=episode_of_care,json=episodeOfCare,proto3" json:"episode_of_care,omitempty"`
	// The ReferralRequest that initiated this encounter
	IncomingReferral []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=incoming_referral,json=incomingReferral,proto3" json:"incoming_referral,omitempty"`
	Participant      []*Encounter_Participant        `protobuf:"bytes,18,rep,name=participant,proto3" json:"participant,omitempty"`
	// The appointment that scheduled this encounter
	Appointment *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=appointment,proto3" json:"appointment,omitempty"`
	// The start and end time of the encounter
	Period *datatypes_go_proto.Period `protobuf:"bytes,20,opt,name=period,proto3" json:"period,omitempty"`
	// Quantity of time the encounter lasted (less time absent)
	Length *datatypes_go_proto.Duration `protobuf:"bytes,21,opt,name=length,proto3" json:"length,omitempty"`
	// Reason the encounter takes place (code)
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=reason,proto3" json:"reason,omitempty"`
	// Reason the encounter takes place (resource)
	Indication      []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=indication,proto3" json:"indication,omitempty"`
	Hospitalization *Encounter_Hospitalization      `protobuf:"bytes,24,opt,name=hospitalization,proto3" json:"hospitalization,omitempty"`
	Location        []*Encounter_Location           `protobuf:"bytes,25,rep,name=location,proto3" json:"location,omitempty"`
	// The custodian organization of this Encounter record
	ServiceProvider *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=service_provider,json=serviceProvider,proto3" json:"service_provider,omitempty"`
	// Another Encounter this encounter is part of
	PartOf *datatypes_go_proto.Reference `protobuf:"bytes,27,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
}

func (x *Encounter) Reset() {
	*x = Encounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encounter) ProtoMessage() {}

func (x *Encounter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encounter.ProtoReflect.Descriptor instead.
func (*Encounter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{35}
}

func (x *Encounter) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Encounter) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Encounter) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Encounter) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Encounter) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Encounter) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Encounter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Encounter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Encounter) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Encounter) GetStatus() *codes_go_proto.EncounterStateCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Encounter) GetStatusHistory() []*Encounter_StatusHistory {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

func (x *Encounter) GetClassValue() *codes_go_proto.EncounterClassCode {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *Encounter) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Encounter) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Encounter) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *Encounter) GetEpisodeOfCare() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.EpisodeOfCare
	}
	return nil
}

func (x *Encounter) GetIncomingReferral() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.IncomingReferral
	}
	return nil
}

func (x *Encounter) GetParticipant() []*Encounter_Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *Encounter) GetAppointment() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Appointment
	}
	return nil
}

func (x *Encounter) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Encounter) GetLength() *datatypes_go_proto.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *Encounter) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Encounter) GetIndication() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Indication
	}
	return nil
}

func (x *Encounter) GetHospitalization() *Encounter_Hospitalization {
	if x != nil {
		return x.Hospitalization
	}
	return nil
}

func (x *Encounter) GetLocation() []*Encounter_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Encounter) GetServiceProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ServiceProvider
	}
	return nil
}

func (x *Encounter) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

// Auto-generated from StructureDefinition for EnrollmentRequest.
// Enrollment request.
// See http://hl7.org/fhir/StructureDefinition/EnrollmentRequest
type EnrollmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,10,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	// Insurer
	Target *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=target,proto3" json:"target,omitempty"`
	// Responsible practitioner
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=provider,proto3" json:"provider,omitempty"`
	// Responsible organization
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=organization,proto3" json:"organization,omitempty"`
	// The subject of the Products and Services
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=subject,proto3" json:"subject,omitempty"`
	// Insurance information
	Coverage *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Patient relationship to subscriber
	Relationship *datatypes_go_proto.Coding `protobuf:"bytes,18,opt,name=relationship,proto3" json:"relationship,omitempty"`
}

func (x *EnrollmentRequest) Reset() {
	*x = EnrollmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentRequest) ProtoMessage() {}

func (x *EnrollmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentRequest.ProtoReflect.Descriptor instead.
func (*EnrollmentRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{36}
}

func (x *EnrollmentRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EnrollmentRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *EnrollmentRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *EnrollmentRequest) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *EnrollmentRequest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EnrollmentRequest) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *EnrollmentRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EnrollmentRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EnrollmentRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *EnrollmentRequest) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *EnrollmentRequest) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *EnrollmentRequest) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *EnrollmentRequest) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *EnrollmentRequest) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *EnrollmentRequest) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *EnrollmentRequest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *EnrollmentRequest) GetCoverage() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *EnrollmentRequest) GetRelationship() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Relationship
	}
	return nil
}

// Auto-generated from StructureDefinition for EnrollmentResponse.
// EnrollmentResponse resource.
// See http://hl7.org/fhir/StructureDefinition/EnrollmentResponse
type EnrollmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Claim reference
	Request *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=request,proto3" json:"request,omitempty"`
	// complete | error
	Outcome *codes_go_proto.RemittanceOutcomeCode `protobuf:"bytes,11,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Disposition Message
	Disposition *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=disposition,proto3" json:"disposition,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,13,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,14,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
	// Insurer
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=organization,proto3" json:"organization,omitempty"`
	// Responsible practitioner
	RequestProvider *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=request_provider,json=requestProvider,proto3" json:"request_provider,omitempty"`
	// Responsible organization
	RequestOrganization *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=request_organization,json=requestOrganization,proto3" json:"request_organization,omitempty"`
}

func (x *EnrollmentResponse) Reset() {
	*x = EnrollmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentResponse) ProtoMessage() {}

func (x *EnrollmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentResponse.ProtoReflect.Descriptor instead.
func (*EnrollmentResponse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{37}
}

func (x *EnrollmentResponse) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EnrollmentResponse) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *EnrollmentResponse) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *EnrollmentResponse) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *EnrollmentResponse) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EnrollmentResponse) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *EnrollmentResponse) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EnrollmentResponse) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EnrollmentResponse) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *EnrollmentResponse) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *EnrollmentResponse) GetOutcome() *codes_go_proto.RemittanceOutcomeCode {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *EnrollmentResponse) GetDisposition() *datatypes_go_proto.String {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *EnrollmentResponse) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *EnrollmentResponse) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *EnrollmentResponse) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *EnrollmentResponse) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *EnrollmentResponse) GetRequestProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestProvider
	}
	return nil
}

func (x *EnrollmentResponse) GetRequestOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestOrganization
	}
	return nil
}

// Auto-generated from StructureDefinition for EpisodeOfCare.
// An association of a Patient with an Organization and  Healthcare Provider(s)
// for a period of time that the Organization assumes some level of
// responsibility. See http://hl7.org/fhir/StructureDefinition/EpisodeOfCare
type EpisodeOfCare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier(s) for the EpisodeOfCare
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// planned | waitlist | active | onhold | finished | cancelled
	Status        *codes_go_proto.EpisodeOfCareStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	StatusHistory []*EpisodeOfCare_StatusHistory          `protobuf:"bytes,11,rep,name=status_history,json=statusHistory,proto3" json:"status_history,omitempty"`
	// Type/class  - e.g. specialist referral, disease management
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=type,proto3" json:"type,omitempty"`
	// Conditions/problems/diagnoses this episode of care is for
	Condition []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=condition,proto3" json:"condition,omitempty"`
	// Patient for this episode of care
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=patient,proto3" json:"patient,omitempty"`
	// Organization that assumes care
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// Interval during responsibility is assumed
	Period *datatypes_go_proto.Period `protobuf:"bytes,16,opt,name=period,proto3" json:"period,omitempty"`
	// Originating Referral Request(s)
	ReferralRequest []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=referral_request,json=referralRequest,proto3" json:"referral_request,omitempty"`
	// Care manager/care co-ordinator for the patient
	CareManager *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=care_manager,json=careManager,proto3" json:"care_manager,omitempty"`
	CareTeam    []*EpisodeOfCare_CareTeam     `protobuf:"bytes,19,rep,name=care_team,json=careTeam,proto3" json:"care_team,omitempty"`
}

func (x *EpisodeOfCare) Reset() {
	*x = EpisodeOfCare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOfCare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOfCare) ProtoMessage() {}

func (x *EpisodeOfCare) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOfCare.ProtoReflect.Descriptor instead.
func (*EpisodeOfCare) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{38}
}

func (x *EpisodeOfCare) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeOfCare) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *EpisodeOfCare) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *EpisodeOfCare) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *EpisodeOfCare) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EpisodeOfCare) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *EpisodeOfCare) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EpisodeOfCare) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EpisodeOfCare) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *EpisodeOfCare) GetStatus() *codes_go_proto.EpisodeOfCareStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EpisodeOfCare) GetStatusHistory() []*EpisodeOfCare_StatusHistory {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

func (x *EpisodeOfCare) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EpisodeOfCare) GetCondition() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *EpisodeOfCare) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *EpisodeOfCare) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *EpisodeOfCare) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *EpisodeOfCare) GetReferralRequest() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReferralRequest
	}
	return nil
}

func (x *EpisodeOfCare) GetCareManager() *datatypes_go_proto.Reference {
	if x != nil {
		return x.CareManager
	}
	return nil
}

func (x *EpisodeOfCare) GetCareTeam() []*EpisodeOfCare_CareTeam {
	if x != nil {
		return x.CareTeam
	}
	return nil
}

// Auto-generated from StructureDefinition for ExplanationOfBenefit.
// Remittance resource.
// See http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit
type ExplanationOfBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Claim reference
	Request *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=request,proto3" json:"request,omitempty"`
	// complete | error
	Outcome *codes_go_proto.RemittanceOutcomeCode `protobuf:"bytes,11,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Disposition Message
	Disposition *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=disposition,proto3" json:"disposition,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,13,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,14,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
	// Insurer
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=organization,proto3" json:"organization,omitempty"`
	// Responsible practitioner
	RequestProvider *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=request_provider,json=requestProvider,proto3" json:"request_provider,omitempty"`
	// Responsible organization
	RequestOrganization *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=request_organization,json=requestOrganization,proto3" json:"request_organization,omitempty"`
}

func (x *ExplanationOfBenefit) Reset() {
	*x = ExplanationOfBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplanationOfBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplanationOfBenefit) ProtoMessage() {}

func (x *ExplanationOfBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplanationOfBenefit.ProtoReflect.Descriptor instead.
func (*ExplanationOfBenefit) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{39}
}

func (x *ExplanationOfBenefit) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExplanationOfBenefit) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ExplanationOfBenefit) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ExplanationOfBenefit) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ExplanationOfBenefit) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ExplanationOfBenefit) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ExplanationOfBenefit) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ExplanationOfBenefit) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ExplanationOfBenefit) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ExplanationOfBenefit) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ExplanationOfBenefit) GetOutcome() *codes_go_proto.RemittanceOutcomeCode {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *ExplanationOfBenefit) GetDisposition() *datatypes_go_proto.String {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *ExplanationOfBenefit) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *ExplanationOfBenefit) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *ExplanationOfBenefit) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ExplanationOfBenefit) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *ExplanationOfBenefit) GetRequestProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestProvider
	}
	return nil
}

func (x *ExplanationOfBenefit) GetRequestOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestOrganization
	}
	return nil
}

// Auto-generated from StructureDefinition for FamilyMemberHistory.
// Information about patient's relatives, relevant for patient.
// See http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory
type FamilyMemberHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Id(s) for this record
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Patient history is about
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=patient,proto3" json:"patient,omitempty"`
	// When history was captured/updated
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"`
	// partial | completed | entered-in-error | health-unknown
	Status *codes_go_proto.FamilyHistoryStatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// The family member described
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Relationship to the subject
	Relationship *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// male | female | other | unknown
	Gender   *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,15,opt,name=gender,proto3" json:"gender,omitempty"`
	Born     *FamilyMemberHistory_Born                `protobuf:"bytes,16,opt,name=born,proto3" json:"born,omitempty"`
	Age      *FamilyMemberHistory_AgeType             `protobuf:"bytes,17,opt,name=age,proto3" json:"age,omitempty"`
	Deceased *FamilyMemberHistory_Deceased            `protobuf:"bytes,18,opt,name=deceased,proto3" json:"deceased,omitempty"`
	// General note about related person
	Note      *datatypes_go_proto.Annotation   `protobuf:"bytes,19,opt,name=note,proto3" json:"note,omitempty"`
	Condition []*FamilyMemberHistory_Condition `protobuf:"bytes,20,rep,name=condition,proto3" json:"condition,omitempty"`
}

func (x *FamilyMemberHistory) Reset() {
	*x = FamilyMemberHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistory) ProtoMessage() {}

func (x *FamilyMemberHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistory.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{40}
}

func (x *FamilyMemberHistory) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistory) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FamilyMemberHistory) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *FamilyMemberHistory) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *FamilyMemberHistory) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *FamilyMemberHistory) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *FamilyMemberHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *FamilyMemberHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *FamilyMemberHistory) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *FamilyMemberHistory) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *FamilyMemberHistory) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *FamilyMemberHistory) GetStatus() *codes_go_proto.FamilyHistoryStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FamilyMemberHistory) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FamilyMemberHistory) GetRelationship() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *FamilyMemberHistory) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *FamilyMemberHistory) GetBorn() *FamilyMemberHistory_Born {
	if x != nil {
		return x.Born
	}
	return nil
}

func (x *FamilyMemberHistory) GetAge() *FamilyMemberHistory_AgeType {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *FamilyMemberHistory) GetDeceased() *FamilyMemberHistory_Deceased {
	if x != nil {
		return x.Deceased
	}
	return nil
}

func (x *FamilyMemberHistory) GetNote() *datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *FamilyMemberHistory) GetCondition() []*FamilyMemberHistory_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

// Auto-generated from StructureDefinition for Flag.
// Key information to flag to healthcare providers.
// See http://hl7.org/fhir/StructureDefinition/Flag
type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Clinical, administrative, etc.
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	// active | inactive | entered-in-error
	Status *codes_go_proto.FlagStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Time period when flag is active
	Period *datatypes_go_proto.Period `protobuf:"bytes,12,opt,name=period,proto3" json:"period,omitempty"`
	// Who/What is flag about?
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`
	// Alert relevant during encounter
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Flag creator
	Author *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=author,proto3" json:"author,omitempty"`
	// Partially deaf, Requires easy open caps, No permanent address, etc.
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{41}
}

func (x *Flag) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Flag) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Flag) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Flag) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Flag) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Flag) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Flag) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Flag) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Flag) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Flag) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Flag) GetStatus() *codes_go_proto.FlagStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Flag) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Flag) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Flag) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Flag) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Flag) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Goal.
// Describes the intended objective(s) for a patient, group or organization.
// See http://hl7.org/fhir/StructureDefinition/Goal
type Goal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this goal
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who this goal is intended for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`
	Start   *Goal_Start                   `protobuf:"bytes,11,opt,name=start,proto3" json:"start,omitempty"`
	Target  *Goal_Target                  `protobuf:"bytes,12,opt,name=target,proto3" json:"target,omitempty"`
	// E.g. Treatment, dietary, behavioral, etc.
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,rep,name=category,proto3" json:"category,omitempty"`
	// What's the desired outcome?
	Description *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// proposed | planned | accepted | rejected | in-progress | achieved |
	// sustaining | on-hold | cancelled
	Status *codes_go_proto.GoalStatusCode `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// When goal status took effect
	StatusDate *datatypes_go_proto.Date `protobuf:"bytes,16,opt,name=status_date,json=statusDate,proto3" json:"status_date,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Who's responsible for creating Goal?
	Author *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=author,proto3" json:"author,omitempty"`
	// high | medium |low
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,opt,name=priority,proto3" json:"priority,omitempty"`
	// Issues addressed by this goal
	Addresses []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Comments about the goal
	Note    []*datatypes_go_proto.Annotation `protobuf:"bytes,21,rep,name=note,proto3" json:"note,omitempty"`
	Outcome []*Goal_Outcome                  `protobuf:"bytes,22,rep,name=outcome,proto3" json:"outcome,omitempty"`
}

func (x *Goal) Reset() {
	*x = Goal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal) ProtoMessage() {}

func (x *Goal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal.ProtoReflect.Descriptor instead.
func (*Goal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{42}
}

func (x *Goal) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Goal) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Goal) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Goal) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Goal) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Goal) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Goal) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Goal) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Goal) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Goal) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Goal) GetStart() *Goal_Start {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Goal) GetTarget() *Goal_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Goal) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Goal) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Goal) GetStatus() *codes_go_proto.GoalStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Goal) GetStatusDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

func (x *Goal) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *Goal) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Goal) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Goal) GetAddresses() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Goal) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Goal) GetOutcome() []*Goal_Outcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

// Auto-generated from StructureDefinition for Group.
// Group of multiple entities.
// See http://hl7.org/fhir/StructureDefinition/Group
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique id
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// person | animal | practitioner | device | medication | substance
	Type *codes_go_proto.GroupTypeCode `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	// Descriptive or actual
	Actual *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=actual,proto3" json:"actual,omitempty"`
	// Kind of Group members
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=code,proto3" json:"code,omitempty"`
	// Label for Group
	Name *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Number of members
	Quantity       *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Characteristic []*Group_Characteristic         `protobuf:"bytes,15,rep,name=characteristic,proto3" json:"characteristic,omitempty"`
	Member         []*Group_Member                 `protobuf:"bytes,16,rep,name=member,proto3" json:"member,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{43}
}

func (x *Group) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Group) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Group) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Group) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Group) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Group) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Group) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Group) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Group) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Group) GetType() *codes_go_proto.GroupTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Group) GetActual() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Actual
	}
	return nil
}

func (x *Group) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Group) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Group) GetQuantity() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Group) GetCharacteristic() []*Group_Characteristic {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

func (x *Group) GetMember() []*Group_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

// Auto-generated from StructureDefinition for HealthcareService.
// The details of a healthcare service available at a location.
// See http://hl7.org/fhir/StructureDefinition/HealthcareService
type HealthcareService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifiers for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Organization that provides this service
	ProvidedBy *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=provided_by,json=providedBy,proto3" json:"provided_by,omitempty"`
	// Broad category of service being performed or delivered
	ServiceCategory *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=service_category,json=serviceCategory,proto3" json:"service_category,omitempty"`
	ServiceType     []*HealthcareService_ServiceType    `protobuf:"bytes,12,rep,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	// Location where service may be provided
	Location *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
	// Description of service as presented to a consumer while searching
	ServiceName *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Additional description and/or any specific issues not covered elsewhere
	Comment *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`
	// Extra details about the service that can't be placed in the other fields
	ExtraDetails *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=extra_details,json=extraDetails,proto3" json:"extra_details,omitempty"`
	// Facilitates quick identification of the service
	Photo *datatypes_go_proto.Attachment `protobuf:"bytes,17,opt,name=photo,proto3" json:"photo,omitempty"`
	// Contacts related to the healthcare service
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,18,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Location(s) service is inteded for/available to
	CoverageArea []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=coverage_area,json=coverageArea,proto3" json:"coverage_area,omitempty"`
	// Conditions under which service is available/offered
	ServiceProvisionCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,rep,name=service_provision_code,json=serviceProvisionCode,proto3" json:"service_provision_code,omitempty"`
	// Specific eligibility requirements required to use the service
	Eligibility *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=eligibility,proto3" json:"eligibility,omitempty"`
	// Describes the eligibility conditions for the service
	EligibilityNote *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=eligibility_note,json=eligibilityNote,proto3" json:"eligibility_note,omitempty"`
	// Program Names that categorize the service
	ProgramName []*datatypes_go_proto.String `protobuf:"bytes,23,rep,name=program_name,json=programName,proto3" json:"program_name,omitempty"`
	// Collection of characteristics (attributes)
	Characteristic []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=characteristic,proto3" json:"characteristic,omitempty"`
	// Ways that the service accepts referrals
	ReferralMethod []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,rep,name=referral_method,json=referralMethod,proto3" json:"referral_method,omitempty"`
	// PKI Public keys to support secure communications
	PublicKey *datatypes_go_proto.String `protobuf:"bytes,26,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// If an appointment is required for access to this service
	AppointmentRequired *datatypes_go_proto.Boolean        `protobuf:"bytes,27,opt,name=appointment_required,json=appointmentRequired,proto3" json:"appointment_required,omitempty"`
	AvailableTime       []*HealthcareService_AvailableTime `protobuf:"bytes,28,rep,name=available_time,json=availableTime,proto3" json:"available_time,omitempty"`
	NotAvailable        []*HealthcareService_NotAvailable  `protobuf:"bytes,29,rep,name=not_available,json=notAvailable,proto3" json:"not_available,omitempty"`
	// Description of availability exceptions
	AvailabilityExceptions *datatypes_go_proto.String `protobuf:"bytes,30,opt,name=availability_exceptions,json=availabilityExceptions,proto3" json:"availability_exceptions,omitempty"`
}

func (x *HealthcareService) Reset() {
	*x = HealthcareService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthcareService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthcareService) ProtoMessage() {}

func (x *HealthcareService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthcareService.ProtoReflect.Descriptor instead.
func (*HealthcareService) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{44}
}

func (x *HealthcareService) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HealthcareService) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *HealthcareService) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *HealthcareService) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *HealthcareService) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *HealthcareService) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *HealthcareService) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *HealthcareService) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *HealthcareService) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *HealthcareService) GetProvidedBy() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ProvidedBy
	}
	return nil
}

func (x *HealthcareService) GetServiceCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ServiceCategory
	}
	return nil
}

func (x *HealthcareService) GetServiceType() []*HealthcareService_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return nil
}

func (x *HealthcareService) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *HealthcareService) GetServiceName() *datatypes_go_proto.String {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *HealthcareService) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *HealthcareService) GetExtraDetails() *datatypes_go_proto.String {
	if x != nil {
		return x.ExtraDetails
	}
	return nil
}

func (x *HealthcareService) GetPhoto() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *HealthcareService) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *HealthcareService) GetCoverageArea() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.CoverageArea
	}
	return nil
}

func (x *HealthcareService) GetServiceProvisionCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ServiceProvisionCode
	}
	return nil
}

func (x *HealthcareService) GetEligibility() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Eligibility
	}
	return nil
}

func (x *HealthcareService) GetEligibilityNote() *datatypes_go_proto.String {
	if x != nil {
		return x.EligibilityNote
	}
	return nil
}

func (x *HealthcareService) GetProgramName() []*datatypes_go_proto.String {
	if x != nil {
		return x.ProgramName
	}
	return nil
}

func (x *HealthcareService) GetCharacteristic() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Characteristic
	}
	return nil
}

func (x *HealthcareService) GetReferralMethod() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReferralMethod
	}
	return nil
}

func (x *HealthcareService) GetPublicKey() *datatypes_go_proto.String {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *HealthcareService) GetAppointmentRequired() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AppointmentRequired
	}
	return nil
}

func (x *HealthcareService) GetAvailableTime() []*HealthcareService_AvailableTime {
	if x != nil {
		return x.AvailableTime
	}
	return nil
}

func (x *HealthcareService) GetNotAvailable() []*HealthcareService_NotAvailable {
	if x != nil {
		return x.NotAvailable
	}
	return nil
}

func (x *HealthcareService) GetAvailabilityExceptions() *datatypes_go_proto.String {
	if x != nil {
		return x.AvailabilityExceptions
	}
	return nil
}

// Auto-generated from StructureDefinition for ImagingObjectSelection.
// Key Object Selection.
// See http://hl7.org/fhir/StructureDefinition/ImagingObjectSelection
type ImagingObjectSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Instance UID
	Uid *datatypes_go_proto.Oid `protobuf:"bytes,9,opt,name=uid,proto3" json:"uid,omitempty"`
	// Patient of the selected objects
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=patient,proto3" json:"patient,omitempty"`
	// Reason for selection
	Title *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	// Description text
	Description *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// Author (human or machine)
	Author *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=author,proto3" json:"author,omitempty"`
	// Authoring time of the selection
	AuthoringTime *datatypes_go_proto.DateTime    `protobuf:"bytes,14,opt,name=authoring_time,json=authoringTime,proto3" json:"authoring_time,omitempty"`
	Study         []*ImagingObjectSelection_Study `protobuf:"bytes,15,rep,name=study,proto3" json:"study,omitempty"`
}

func (x *ImagingObjectSelection) Reset() {
	*x = ImagingObjectSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingObjectSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingObjectSelection) ProtoMessage() {}

func (x *ImagingObjectSelection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingObjectSelection.ProtoReflect.Descriptor instead.
func (*ImagingObjectSelection) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{45}
}

func (x *ImagingObjectSelection) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImagingObjectSelection) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ImagingObjectSelection) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ImagingObjectSelection) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ImagingObjectSelection) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ImagingObjectSelection) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ImagingObjectSelection) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImagingObjectSelection) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImagingObjectSelection) GetUid() *datatypes_go_proto.Oid {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ImagingObjectSelection) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *ImagingObjectSelection) GetTitle() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ImagingObjectSelection) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ImagingObjectSelection) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ImagingObjectSelection) GetAuthoringTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AuthoringTime
	}
	return nil
}

func (x *ImagingObjectSelection) GetStudy() []*ImagingObjectSelection_Study {
	if x != nil {
		return x.Study
	}
	return nil
}

// Auto-generated from StructureDefinition for ImagingStudy.
// A set of images produced in single study (one or more series of references
// images). See http://hl7.org/fhir/StructureDefinition/ImagingStudy
type ImagingStudy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// When the study was started
	Started *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=started,proto3" json:"started,omitempty"`
	// Who the images are of
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=patient,proto3" json:"patient,omitempty"`
	// Formal identifier for the study
	Uid *datatypes_go_proto.Oid `protobuf:"bytes,11,opt,name=uid,proto3" json:"uid,omitempty"`
	// Related workflow identifier ("Accession Number")
	Accession *datatypes_go_proto.Identifier `protobuf:"bytes,12,opt,name=accession,proto3" json:"accession,omitempty"`
	// Other identifiers for the study
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,13,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Order(s) that caused this study to be performed
	Order []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=order,proto3" json:"order,omitempty"`
	// All series modality if actual acquisition modalities
	ModalityList []*datatypes_go_proto.Coding `protobuf:"bytes,15,rep,name=modality_list,json=modalityList,proto3" json:"modality_list,omitempty"`
	// Referring physician (0008,0090)
	Referrer *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=referrer,proto3" json:"referrer,omitempty"`
	// ONLINE | OFFLINE | NEARLINE | UNAVAILABLE (0008,0056)
	Availability *codes_go_proto.InstanceAvailabilityCode `protobuf:"bytes,17,opt,name=availability,proto3" json:"availability,omitempty"`
	// Retrieve URI
	Url *datatypes_go_proto.Uri `protobuf:"bytes,18,opt,name=url,proto3" json:"url,omitempty"`
	// Number of Study Related Series
	NumberOfSeries *datatypes_go_proto.UnsignedInt `protobuf:"bytes,19,opt,name=number_of_series,json=numberOfSeries,proto3" json:"number_of_series,omitempty"`
	// Number of Study Related Instances
	NumberOfInstances *datatypes_go_proto.UnsignedInt `protobuf:"bytes,20,opt,name=number_of_instances,json=numberOfInstances,proto3" json:"number_of_instances,omitempty"`
	// Type of procedure performed
	Procedure []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=procedure,proto3" json:"procedure,omitempty"`
	// Who interpreted images
	Interpreter *datatypes_go_proto.Reference `protobuf:"bytes,22,opt,name=interpreter,proto3" json:"interpreter,omitempty"`
	// Institution-generated description
	Description *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	Series      []*ImagingStudy_Series     `protobuf:"bytes,24,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *ImagingStudy) Reset() {
	*x = ImagingStudy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingStudy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingStudy) ProtoMessage() {}

func (x *ImagingStudy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingStudy.ProtoReflect.Descriptor instead.
func (*ImagingStudy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{46}
}

func (x *ImagingStudy) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImagingStudy) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ImagingStudy) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ImagingStudy) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ImagingStudy) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ImagingStudy) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ImagingStudy) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImagingStudy) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImagingStudy) GetStarted() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *ImagingStudy) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *ImagingStudy) GetUid() *datatypes_go_proto.Oid {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ImagingStudy) GetAccession() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Accession
	}
	return nil
}

func (x *ImagingStudy) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ImagingStudy) GetOrder() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ImagingStudy) GetModalityList() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.ModalityList
	}
	return nil
}

func (x *ImagingStudy) GetReferrer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Referrer
	}
	return nil
}

func (x *ImagingStudy) GetAvailability() *codes_go_proto.InstanceAvailabilityCode {
	if x != nil {
		return x.Availability
	}
	return nil
}

func (x *ImagingStudy) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ImagingStudy) GetNumberOfSeries() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.NumberOfSeries
	}
	return nil
}

func (x *ImagingStudy) GetNumberOfInstances() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.NumberOfInstances
	}
	return nil
}

func (x *ImagingStudy) GetProcedure() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *ImagingStudy) GetInterpreter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Interpreter
	}
	return nil
}

func (x *ImagingStudy) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ImagingStudy) GetSeries() []*ImagingStudy_Series {
	if x != nil {
		return x.Series
	}
	return nil
}

// Auto-generated from StructureDefinition for Immunization.
// Immunization event information.
// See http://hl7.org/fhir/StructureDefinition/Immunization
type Immunization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// in-progress | on-hold | completed | entered-in-error | stopped
	Status *codes_go_proto.MedicationAdministrationStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Vaccination administration date
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"`
	// Vaccine product administered
	VaccineCode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=vaccine_code,json=vaccineCode,proto3" json:"vaccine_code,omitempty"`
	// Who was immunized
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=patient,proto3" json:"patient,omitempty"`
	// Flag for whether immunization was given
	WasNotGiven *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=was_not_given,json=wasNotGiven,proto3" json:"was_not_given,omitempty"`
	// Indicates a self-reported record
	Reported *datatypes_go_proto.Boolean `protobuf:"bytes,15,opt,name=reported,proto3" json:"reported,omitempty"`
	// Who administered vaccine
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=performer,proto3" json:"performer,omitempty"`
	// Who ordered vaccination
	Requester *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=requester,proto3" json:"requester,omitempty"`
	// Encounter administered as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Vaccine manufacturer
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Where vaccination occurred
	Location *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	// Vaccine lot number
	LotNumber *datatypes_go_proto.String `protobuf:"bytes,21,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	// Vaccine expiration date
	ExpirationDate *datatypes_go_proto.Date `protobuf:"bytes,22,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Body site vaccine  was administered
	Site *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=site,proto3" json:"site,omitempty"`
	// How vaccine entered body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=route,proto3" json:"route,omitempty"`
	// Amount of vaccine administered
	DoseQuantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,25,opt,name=dose_quantity,json=doseQuantity,proto3" json:"dose_quantity,omitempty"`
	// Vaccination notes
	Note                []*datatypes_go_proto.Annotation    `protobuf:"bytes,26,rep,name=note,proto3" json:"note,omitempty"`
	Explanation         *Immunization_Explanation           `protobuf:"bytes,27,opt,name=explanation,proto3" json:"explanation,omitempty"`
	Reaction            []*Immunization_Reaction            `protobuf:"bytes,28,rep,name=reaction,proto3" json:"reaction,omitempty"`
	VaccinationProtocol []*Immunization_VaccinationProtocol `protobuf:"bytes,29,rep,name=vaccination_protocol,json=vaccinationProtocol,proto3" json:"vaccination_protocol,omitempty"`
}

func (x *Immunization) Reset() {
	*x = Immunization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization) ProtoMessage() {}

func (x *Immunization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization.ProtoReflect.Descriptor instead.
func (*Immunization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{47}
}

func (x *Immunization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Immunization) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Immunization) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Immunization) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Immunization) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Immunization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Immunization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Immunization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Immunization) GetStatus() *codes_go_proto.MedicationAdministrationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Immunization) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Immunization) GetVaccineCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VaccineCode
	}
	return nil
}

func (x *Immunization) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *Immunization) GetWasNotGiven() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.WasNotGiven
	}
	return nil
}

func (x *Immunization) GetReported() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Reported
	}
	return nil
}

func (x *Immunization) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Immunization) GetRequester() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *Immunization) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Immunization) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *Immunization) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Immunization) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *Immunization) GetExpirationDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Immunization) GetSite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Immunization) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *Immunization) GetDoseQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DoseQuantity
	}
	return nil
}

func (x *Immunization) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Immunization) GetExplanation() *Immunization_Explanation {
	if x != nil {
		return x.Explanation
	}
	return nil
}

func (x *Immunization) GetReaction() []*Immunization_Reaction {
	if x != nil {
		return x.Reaction
	}
	return nil
}

func (x *Immunization) GetVaccinationProtocol() []*Immunization_VaccinationProtocol {
	if x != nil {
		return x.VaccinationProtocol
	}
	return nil
}

// Auto-generated from StructureDefinition for ImmunizationRecommendation.
// Guidance or advice relating to an immunization.
// See http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation
type ImmunizationRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who this profile is for
	Patient        *datatypes_go_proto.Reference                `protobuf:"bytes,10,opt,name=patient,proto3" json:"patient,omitempty"`
	Recommendation []*ImmunizationRecommendation_Recommendation `protobuf:"bytes,11,rep,name=recommendation,proto3" json:"recommendation,omitempty"`
}

func (x *ImmunizationRecommendation) Reset() {
	*x = ImmunizationRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationRecommendation) ProtoMessage() {}

func (x *ImmunizationRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationRecommendation.ProtoReflect.Descriptor instead.
func (*ImmunizationRecommendation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{48}
}

func (x *ImmunizationRecommendation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImmunizationRecommendation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ImmunizationRecommendation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ImmunizationRecommendation) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ImmunizationRecommendation) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ImmunizationRecommendation) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ImmunizationRecommendation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImmunizationRecommendation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImmunizationRecommendation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ImmunizationRecommendation) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *ImmunizationRecommendation) GetRecommendation() []*ImmunizationRecommendation_Recommendation {
	if x != nil {
		return x.Recommendation
	}
	return nil
}

// Auto-generated from StructureDefinition for ImplementationGuide.
// A set of rules about how FHIR is used.
// See http://hl7.org/fhir/StructureDefinition/ImplementationGuide
type ImplementationGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Absolute URL used to reference this Implementation Guide
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Logical id for this version of the Implementation Guide
	Version *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// Informal name for this Implementation Guide
	Name *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,13,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Name of the publisher (Organization or individual)
	Publisher *datatypes_go_proto.String     `protobuf:"bytes,14,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*ImplementationGuide_Contact `protobuf:"bytes,15,rep,name=contact,proto3" json:"contact,omitempty"`
	// Date for this version of the Implementation Guide
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=date,proto3" json:"date,omitempty"`
	// Natural language description of the Implementation Guide
	Description *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	// The implementation guide is intended to support these contexts
	UseContext []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// FHIR Version this Implementation Guide targets
	FhirVersion  *datatypes_go_proto.Id            `protobuf:"bytes,20,opt,name=fhir_version,json=fhirVersion,proto3" json:"fhir_version,omitempty"`
	Dependency   []*ImplementationGuide_Dependency `protobuf:"bytes,21,rep,name=dependency,proto3" json:"dependency,omitempty"`
	PackageValue []*ImplementationGuide_Package    `protobuf:"bytes,22,rep,name=package_value,json=package,proto3" json:"package_value,omitempty"`
	Global       []*ImplementationGuide_Global     `protobuf:"bytes,23,rep,name=global,proto3" json:"global,omitempty"`
	// Image, css, script, etc.
	Binary []*datatypes_go_proto.Uri `protobuf:"bytes,24,rep,name=binary,proto3" json:"binary,omitempty"`
	Page   *ImplementationGuide_Page `protobuf:"bytes,25,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ImplementationGuide) Reset() {
	*x = ImplementationGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationGuide) ProtoMessage() {}

func (x *ImplementationGuide) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationGuide.ProtoReflect.Descriptor instead.
func (*ImplementationGuide) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{49}
}

func (x *ImplementationGuide) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImplementationGuide) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ImplementationGuide) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ImplementationGuide) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ImplementationGuide) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ImplementationGuide) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ImplementationGuide) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImplementationGuide) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImplementationGuide) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ImplementationGuide) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ImplementationGuide) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ImplementationGuide) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImplementationGuide) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *ImplementationGuide) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *ImplementationGuide) GetContact() []*ImplementationGuide_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *ImplementationGuide) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ImplementationGuide) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ImplementationGuide) GetUseContext() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *ImplementationGuide) GetCopyright() *datatypes_go_proto.String {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *ImplementationGuide) GetFhirVersion() *datatypes_go_proto.Id {
	if x != nil {
		return x.FhirVersion
	}
	return nil
}

func (x *ImplementationGuide) GetDependency() []*ImplementationGuide_Dependency {
	if x != nil {
		return x.Dependency
	}
	return nil
}

func (x *ImplementationGuide) GetPackageValue() []*ImplementationGuide_Package {
	if x != nil {
		return x.PackageValue
	}
	return nil
}

func (x *ImplementationGuide) GetGlobal() []*ImplementationGuide_Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *ImplementationGuide) GetBinary() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *ImplementationGuide) GetPage() *ImplementationGuide_Page {
	if x != nil {
		return x.Page
	}
	return nil
}

// Auto-generated from StructureDefinition for List.
// Information summarized from a list of other resources.
// See http://hl7.org/fhir/StructureDefinition/List
type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Descriptive name for the list
	Title *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	// What the purpose of this list is
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	// If all resources have the same subject
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=subject,proto3" json:"subject,omitempty"`
	// Who and/or what defined the list contents (aka Author)
	Source *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=source,proto3" json:"source,omitempty"`
	// Context in which list created
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// current | retired | entered-in-error
	Status *codes_go_proto.ListStatusCode `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// When the list was prepared
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=date,proto3" json:"date,omitempty"`
	// What order the list has
	OrderedBy *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=ordered_by,json=orderedBy,proto3" json:"ordered_by,omitempty"`
	// working | snapshot | changes
	Mode *codes_go_proto.ListModeCode `protobuf:"bytes,18,opt,name=mode,proto3" json:"mode,omitempty"`
	// Comments about the list
	Note  *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=note,proto3" json:"note,omitempty"`
	Entry []*List_Entry              `protobuf:"bytes,20,rep,name=entry,proto3" json:"entry,omitempty"`
	// Why list is empty
	EmptyReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=empty_reason,json=emptyReason,proto3" json:"empty_reason,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{50}
}

func (x *List) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *List) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *List) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *List) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *List) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *List) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *List) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *List) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *List) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *List) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *List) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *List) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *List) GetSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *List) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *List) GetStatus() *codes_go_proto.ListStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *List) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *List) GetOrderedBy() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OrderedBy
	}
	return nil
}

func (x *List) GetMode() *codes_go_proto.ListModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *List) GetNote() *datatypes_go_proto.String {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *List) GetEntry() []*List_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *List) GetEmptyReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.EmptyReason
	}
	return nil
}

// Auto-generated from StructureDefinition for Location.
// Details and position information for a physical place.
// See http://hl7.org/fhir/StructureDefinition/Location
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique code or number identifying the location to its users
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// active | suspended | inactive
	Status *codes_go_proto.LocationStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Name of the location as used by humans
	Name *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the location
	Description *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// instance | kind
	Mode *codes_go_proto.LocationModeCode `protobuf:"bytes,13,opt,name=mode,proto3" json:"mode,omitempty"`
	// Type of function performed
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=type,proto3" json:"type,omitempty"`
	// Contact details of the location
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,15,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Physical location
	Address *datatypes_go_proto.Address `protobuf:"bytes,16,opt,name=address,proto3" json:"address,omitempty"`
	// Physical form of the location
	PhysicalType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=physical_type,json=physicalType,proto3" json:"physical_type,omitempty"`
	Position     *Location_Position                  `protobuf:"bytes,18,opt,name=position,proto3" json:"position,omitempty"`
	// Organization responsible for provisioning and upkeep
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,19,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// Another Location this one is physically part of
	PartOf *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{51}
}

func (x *Location) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Location) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Location) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Location) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Location) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Location) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Location) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Location) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Location) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Location) GetStatus() *codes_go_proto.LocationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Location) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Location) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Location) GetMode() *codes_go_proto.LocationModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Location) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Location) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *Location) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Location) GetPhysicalType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PhysicalType
	}
	return nil
}

func (x *Location) GetPosition() *Location_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Location) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *Location) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

// Auto-generated from StructureDefinition for Media.
// A photo, video, or audio recording acquired or used in healthcare. The actual
// content may be inline or provided by direct reference. See
// http://hl7.org/fhir/StructureDefinition/Media
type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// photo | video | audio
	Type *codes_go_proto.DigitalMediaTypeCode `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// The type of acquisition equipment/process
	Subtype *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=subtype,proto3" json:"subtype,omitempty"`
	// Identifier(s) for the image
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who/What this Media is a record of
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=subject,proto3" json:"subject,omitempty"`
	// The person who generated the image
	Operator *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=operator,proto3" json:"operator,omitempty"`
	// Imaging view, e.g. Lateral or Antero-posterior
	View *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=view,proto3" json:"view,omitempty"`
	// Name of the device/manufacturer
	DeviceName *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Height of the image in pixels (photo/video)
	Height *datatypes_go_proto.PositiveInt `protobuf:"bytes,16,opt,name=height,proto3" json:"height,omitempty"`
	// Width of the image in pixels (photo/video)
	Width *datatypes_go_proto.PositiveInt `protobuf:"bytes,17,opt,name=width,proto3" json:"width,omitempty"`
	// Number of frames if > 1 (photo)
	Frames *datatypes_go_proto.PositiveInt `protobuf:"bytes,18,opt,name=frames,proto3" json:"frames,omitempty"`
	// Length in seconds (audio / video)
	Duration *datatypes_go_proto.UnsignedInt `protobuf:"bytes,19,opt,name=duration,proto3" json:"duration,omitempty"`
	// Actual Media - reference or data
	Content *datatypes_go_proto.Attachment `protobuf:"bytes,20,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{52}
}

func (x *Media) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Media) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Media) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Media) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Media) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Media) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Media) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Media) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Media) GetType() *codes_go_proto.DigitalMediaTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Media) GetSubtype() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Subtype
	}
	return nil
}

func (x *Media) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Media) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Media) GetOperator() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *Media) GetView() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *Media) GetDeviceName() *datatypes_go_proto.String {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *Media) GetHeight() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *Media) GetWidth() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *Media) GetFrames() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *Media) GetDuration() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Media) GetContent() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.Content
	}
	return nil
}

// Auto-generated from StructureDefinition for Medication.
// Definition of a Medication.
// See http://hl7.org/fhir/StructureDefinition/Medication
type Medication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Codes that identify this medication
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=code,proto3" json:"code,omitempty"`
	// True if a brand
	IsBrand *datatypes_go_proto.Boolean `protobuf:"bytes,10,opt,name=is_brand,json=isBrand,proto3" json:"is_brand,omitempty"`
	// Manufacturer of the item
	Manufacturer *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Product      *Medication_Product           `protobuf:"bytes,12,opt,name=product,proto3" json:"product,omitempty"`
	PackageValue *Medication_Package           `protobuf:"bytes,13,opt,name=package_value,json=package,proto3" json:"package_value,omitempty"`
}

func (x *Medication) Reset() {
	*x = Medication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Medication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Medication) ProtoMessage() {}

func (x *Medication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Medication.ProtoReflect.Descriptor instead.
func (*Medication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{53}
}

func (x *Medication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Medication) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Medication) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Medication) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Medication) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Medication) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Medication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Medication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Medication) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Medication) GetIsBrand() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsBrand
	}
	return nil
}

func (x *Medication) GetManufacturer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *Medication) GetProduct() *Medication_Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Medication) GetPackageValue() *Medication_Package {
	if x != nil {
		return x.PackageValue
	}
	return nil
}

// Auto-generated from StructureDefinition for MedicationAdministration.
// Administration of medication to a patient.
// See http://hl7.org/fhir/StructureDefinition/MedicationAdministration
type MedicationAdministration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// in-progress | on-hold | completed | entered-in-error | stopped
	Status *codes_go_proto.MedicationAdministrationStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Who received medication
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=patient,proto3" json:"patient,omitempty"`
	// Who administered substance
	Practitioner *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=practitioner,proto3" json:"practitioner,omitempty"`
	// Encounter administered as part of
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Order administration performed against
	Prescription *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=prescription,proto3" json:"prescription,omitempty"`
	// True if medication not administered
	WasNotGiven *datatypes_go_proto.Boolean `protobuf:"bytes,15,opt,name=was_not_given,json=wasNotGiven,proto3" json:"was_not_given,omitempty"`
	// Reason administration not performed
	ReasonNotGiven []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=reason_not_given,json=reasonNotGiven,proto3" json:"reason_not_given,omitempty"`
	// Reason administration performed
	ReasonGiven   []*datatypes_go_proto.CodeableConcept   `protobuf:"bytes,17,rep,name=reason_given,json=reasonGiven,proto3" json:"reason_given,omitempty"`
	EffectiveTime *MedicationAdministration_EffectiveTime `protobuf:"bytes,18,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	Medication    *MedicationAdministration_Medication    `protobuf:"bytes,19,opt,name=medication,proto3" json:"medication,omitempty"`
	// Device used to administer
	Device []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=device,proto3" json:"device,omitempty"`
	// Information about the administration
	Note   *datatypes_go_proto.String       `protobuf:"bytes,21,opt,name=note,proto3" json:"note,omitempty"`
	Dosage *MedicationAdministration_Dosage `protobuf:"bytes,22,opt,name=dosage,proto3" json:"dosage,omitempty"`
}

func (x *MedicationAdministration) Reset() {
	*x = MedicationAdministration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration) ProtoMessage() {}

func (x *MedicationAdministration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration.ProtoReflect.Descriptor instead.
func (*MedicationAdministration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{54}
}

func (x *MedicationAdministration) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationAdministration) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicationAdministration) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicationAdministration) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicationAdministration) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationAdministration) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicationAdministration) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationAdministration) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationAdministration) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicationAdministration) GetStatus() *codes_go_proto.MedicationAdministrationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicationAdministration) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *MedicationAdministration) GetPractitioner() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Practitioner
	}
	return nil
}

func (x *MedicationAdministration) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *MedicationAdministration) GetPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Prescription
	}
	return nil
}

func (x *MedicationAdministration) GetWasNotGiven() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.WasNotGiven
	}
	return nil
}

func (x *MedicationAdministration) GetReasonNotGiven() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonNotGiven
	}
	return nil
}

func (x *MedicationAdministration) GetReasonGiven() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonGiven
	}
	return nil
}

func (x *MedicationAdministration) GetEffectiveTime() *MedicationAdministration_EffectiveTime {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *MedicationAdministration) GetMedication() *MedicationAdministration_Medication {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *MedicationAdministration) GetDevice() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *MedicationAdministration) GetNote() *datatypes_go_proto.String {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *MedicationAdministration) GetDosage() *MedicationAdministration_Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

// Auto-generated from StructureDefinition for MedicationDispense.
// Dispensing a medication to a named patient.
// See http://hl7.org/fhir/StructureDefinition/MedicationDispense
type MedicationDispense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,9,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// in-progress | on-hold | completed | entered-in-error | stopped
	Status *codes_go_proto.MedicationDispenseStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Who the dispense is for
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=patient,proto3" json:"patient,omitempty"`
	// Practitioner responsible for dispensing medication
	Dispenser *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=dispenser,proto3" json:"dispenser,omitempty"`
	// Medication order that authorizes the dispense
	AuthorizingPrescription []*datatypes_go_proto.Reference `protobuf:"bytes,13,rep,name=authorizing_prescription,json=authorizingPrescription,proto3" json:"authorizing_prescription,omitempty"`
	// Trial fill, partial fill, emergency fill, etc.
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=type,proto3" json:"type,omitempty"`
	// Amount dispensed
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,15,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Days Supply
	DaysSupply *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,16,opt,name=days_supply,json=daysSupply,proto3" json:"days_supply,omitempty"`
	Medication *MedicationDispense_Medication     `protobuf:"bytes,17,opt,name=medication,proto3" json:"medication,omitempty"`
	// Dispense processing time
	WhenPrepared *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=when_prepared,json=whenPrepared,proto3" json:"when_prepared,omitempty"`
	// When product was given out
	WhenHandedOver *datatypes_go_proto.DateTime `protobuf:"bytes,19,opt,name=when_handed_over,json=whenHandedOver,proto3" json:"when_handed_over,omitempty"`
	// Where the medication was sent
	Destination *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=destination,proto3" json:"destination,omitempty"`
	// Who collected the medication
	Receiver []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=receiver,proto3" json:"receiver,omitempty"`
	// Information about the dispense
	Note              *datatypes_go_proto.String              `protobuf:"bytes,22,opt,name=note,proto3" json:"note,omitempty"`
	DosageInstruction []*MedicationDispense_DosageInstruction `protobuf:"bytes,23,rep,name=dosage_instruction,json=dosageInstruction,proto3" json:"dosage_instruction,omitempty"`
	Substitution      *MedicationDispense_Substitution        `protobuf:"bytes,24,opt,name=substitution,proto3" json:"substitution,omitempty"`
}

func (x *MedicationDispense) Reset() {
	*x = MedicationDispense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense) ProtoMessage() {}

func (x *MedicationDispense) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense.ProtoReflect.Descriptor instead.
func (*MedicationDispense) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{55}
}

func (x *MedicationDispense) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispense) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicationDispense) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicationDispense) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicationDispense) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationDispense) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicationDispense) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationDispense) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationDispense) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicationDispense) GetStatus() *codes_go_proto.MedicationDispenseStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicationDispense) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *MedicationDispense) GetDispenser() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Dispenser
	}
	return nil
}

func (x *MedicationDispense) GetAuthorizingPrescription() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AuthorizingPrescription
	}
	return nil
}

func (x *MedicationDispense) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationDispense) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MedicationDispense) GetDaysSupply() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DaysSupply
	}
	return nil
}

func (x *MedicationDispense) GetMedication() *MedicationDispense_Medication {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *MedicationDispense) GetWhenPrepared() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.WhenPrepared
	}
	return nil
}

func (x *MedicationDispense) GetWhenHandedOver() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.WhenHandedOver
	}
	return nil
}

func (x *MedicationDispense) GetDestination() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MedicationDispense) GetReceiver() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *MedicationDispense) GetNote() *datatypes_go_proto.String {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *MedicationDispense) GetDosageInstruction() []*MedicationDispense_DosageInstruction {
	if x != nil {
		return x.DosageInstruction
	}
	return nil
}

func (x *MedicationDispense) GetSubstitution() *MedicationDispense_Substitution {
	if x != nil {
		return x.Substitution
	}
	return nil
}

// Auto-generated from StructureDefinition for MedicationOrder.
// Prescription of medication to for patient.
// See http://hl7.org/fhir/StructureDefinition/MedicationOrder
type MedicationOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// When prescription was authorized
	DateWritten *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_written,json=dateWritten,proto3" json:"date_written,omitempty"`
	// active | on-hold | completed | entered-in-error | stopped | draft
	Status *codes_go_proto.MedicationOrderStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// When prescription was stopped
	DateEnded *datatypes_go_proto.DateTime `protobuf:"bytes,12,opt,name=date_ended,json=dateEnded,proto3" json:"date_ended,omitempty"`
	// Why prescription was stopped
	ReasonEnded *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=reason_ended,json=reasonEnded,proto3" json:"reason_ended,omitempty"`
	// Who prescription is for
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=patient,proto3" json:"patient,omitempty"`
	// Who ordered the medication(s)
	Prescriber *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=prescriber,proto3" json:"prescriber,omitempty"`
	// Created during encounter/admission/stay
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Reason    *MedicationOrder_Reason       `protobuf:"bytes,17,opt,name=reason,proto3" json:"reason,omitempty"`
	// Information about the prescription
	Note              *datatypes_go_proto.String           `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`
	Medication        *MedicationOrder_Medication          `protobuf:"bytes,19,opt,name=medication,proto3" json:"medication,omitempty"`
	DosageInstruction []*MedicationOrder_DosageInstruction `protobuf:"bytes,20,rep,name=dosage_instruction,json=dosageInstruction,proto3" json:"dosage_instruction,omitempty"`
	DispenseRequest   *MedicationOrder_DispenseRequest     `protobuf:"bytes,21,opt,name=dispense_request,json=dispenseRequest,proto3" json:"dispense_request,omitempty"`
	Substitution      *MedicationOrder_Substitution        `protobuf:"bytes,22,opt,name=substitution,proto3" json:"substitution,omitempty"`
	// An order/prescription that this supersedes
	PriorPrescription *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=prior_prescription,json=priorPrescription,proto3" json:"prior_prescription,omitempty"`
}

func (x *MedicationOrder) Reset() {
	*x = MedicationOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder) ProtoMessage() {}

func (x *MedicationOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder.ProtoReflect.Descriptor instead.
func (*MedicationOrder) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56}
}

func (x *MedicationOrder) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationOrder) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicationOrder) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicationOrder) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicationOrder) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationOrder) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicationOrder) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationOrder) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationOrder) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicationOrder) GetDateWritten() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateWritten
	}
	return nil
}

func (x *MedicationOrder) GetStatus() *codes_go_proto.MedicationOrderStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicationOrder) GetDateEnded() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateEnded
	}
	return nil
}

func (x *MedicationOrder) GetReasonEnded() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonEnded
	}
	return nil
}

func (x *MedicationOrder) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *MedicationOrder) GetPrescriber() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Prescriber
	}
	return nil
}

func (x *MedicationOrder) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *MedicationOrder) GetReason() *MedicationOrder_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *MedicationOrder) GetNote() *datatypes_go_proto.String {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *MedicationOrder) GetMedication() *MedicationOrder_Medication {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *MedicationOrder) GetDosageInstruction() []*MedicationOrder_DosageInstruction {
	if x != nil {
		return x.DosageInstruction
	}
	return nil
}

func (x *MedicationOrder) GetDispenseRequest() *MedicationOrder_DispenseRequest {
	if x != nil {
		return x.DispenseRequest
	}
	return nil
}

func (x *MedicationOrder) GetSubstitution() *MedicationOrder_Substitution {
	if x != nil {
		return x.Substitution
	}
	return nil
}

func (x *MedicationOrder) GetPriorPrescription() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PriorPrescription
	}
	return nil
}

// Auto-generated from StructureDefinition for MedicationStatement.
// Record of medication being taken by a patient.
// See http://hl7.org/fhir/StructureDefinition/MedicationStatement
type MedicationStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who is/was taking  the medication
	Patient           *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=patient,proto3" json:"patient,omitempty"`
	InformationSource *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=information_source,json=informationSource,proto3" json:"information_source,omitempty"`
	// When the statement was asserted?
	DateAsserted *datatypes_go_proto.DateTime `protobuf:"bytes,12,opt,name=date_asserted,json=dateAsserted,proto3" json:"date_asserted,omitempty"`
	// active | completed | entered-in-error | intended
	Status *codes_go_proto.MedicationStatementStatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// True if medication is/was not being taken
	WasNotTaken *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=was_not_taken,json=wasNotTaken,proto3" json:"was_not_taken,omitempty"`
	// True if asserting medication was not given
	ReasonNotTaken []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=reason_not_taken,json=reasonNotTaken,proto3" json:"reason_not_taken,omitempty"`
	ReasonForUse   *MedicationStatement_ReasonForUse     `protobuf:"bytes,16,opt,name=reason_for_use,json=reasonForUse,proto3" json:"reason_for_use,omitempty"`
	Effective      *MedicationStatement_Effective        `protobuf:"bytes,17,opt,name=effective,proto3" json:"effective,omitempty"`
	// Further information about the statement
	Note *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`
	// Additional supporting information
	SupportingInformation []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	Medication            *MedicationStatement_Medication `protobuf:"bytes,20,opt,name=medication,proto3" json:"medication,omitempty"`
	Dosage                []*MedicationStatement_Dosage   `protobuf:"bytes,21,rep,name=dosage,proto3" json:"dosage,omitempty"`
}

func (x *MedicationStatement) Reset() {
	*x = MedicationStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatement) ProtoMessage() {}

func (x *MedicationStatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatement.ProtoReflect.Descriptor instead.
func (*MedicationStatement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{57}
}

func (x *MedicationStatement) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationStatement) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MedicationStatement) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MedicationStatement) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MedicationStatement) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationStatement) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MedicationStatement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationStatement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationStatement) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MedicationStatement) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *MedicationStatement) GetInformationSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.InformationSource
	}
	return nil
}

func (x *MedicationStatement) GetDateAsserted() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateAsserted
	}
	return nil
}

func (x *MedicationStatement) GetStatus() *codes_go_proto.MedicationStatementStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MedicationStatement) GetWasNotTaken() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.WasNotTaken
	}
	return nil
}

func (x *MedicationStatement) GetReasonNotTaken() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonNotTaken
	}
	return nil
}

func (x *MedicationStatement) GetReasonForUse() *MedicationStatement_ReasonForUse {
	if x != nil {
		return x.ReasonForUse
	}
	return nil
}

func (x *MedicationStatement) GetEffective() *MedicationStatement_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *MedicationStatement) GetNote() *datatypes_go_proto.String {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *MedicationStatement) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *MedicationStatement) GetMedication() *MedicationStatement_Medication {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *MedicationStatement) GetDosage() []*MedicationStatement_Dosage {
	if x != nil {
		return x.Dosage
	}
	return nil
}

// Auto-generated from StructureDefinition for MessageHeader.
// A resource that describes a message that is exchanged between systems.
// See http://hl7.org/fhir/StructureDefinition/MessageHeader
type MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Time that the message was sent
	Timestamp *datatypes_go_proto.Instant `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Code for the event this message represents
	Event       *datatypes_go_proto.Coding   `protobuf:"bytes,10,opt,name=event,proto3" json:"event,omitempty"`
	Response    *MessageHeader_Response      `protobuf:"bytes,11,opt,name=response,proto3" json:"response,omitempty"`
	Source      *MessageHeader_Source        `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	Destination []*MessageHeader_Destination `protobuf:"bytes,13,rep,name=destination,proto3" json:"destination,omitempty"`
	// The source of the data entry
	Enterer *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=enterer,proto3" json:"enterer,omitempty"`
	// The source of the decision
	Author *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=author,proto3" json:"author,omitempty"`
	// Intended "real-world" recipient for the data
	Receiver *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Final responsibility for event
	Responsible *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=responsible,proto3" json:"responsible,omitempty"`
	// Cause of event
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,opt,name=reason,proto3" json:"reason,omitempty"`
	// The actual content of the message
	Data []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{58}
}

func (x *MessageHeader) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageHeader) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MessageHeader) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MessageHeader) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MessageHeader) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MessageHeader) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MessageHeader) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MessageHeader) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MessageHeader) GetTimestamp() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessageHeader) GetEvent() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *MessageHeader) GetResponse() *MessageHeader_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *MessageHeader) GetSource() *MessageHeader_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MessageHeader) GetDestination() []*MessageHeader_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *MessageHeader) GetEnterer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Enterer
	}
	return nil
}

func (x *MessageHeader) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MessageHeader) GetReceiver() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *MessageHeader) GetResponsible() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Responsible
	}
	return nil
}

func (x *MessageHeader) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *MessageHeader) GetData() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Data
	}
	return nil
}

// Auto-generated from StructureDefinition for NamingSystem.
// System of unique identification.
// See http://hl7.org/fhir/StructureDefinition/NamingSystem
type NamingSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Human-readable label
	Name *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// codesystem | identifier | root
	Kind *codes_go_proto.NamingSystemTypeCode `protobuf:"bytes,11,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the publisher (Organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*NamingSystem_Contact    `protobuf:"bytes,13,rep,name=contact,proto3" json:"contact,omitempty"`
	// Who maintains system namespace?
	Responsible *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=responsible,proto3" json:"responsible,omitempty"`
	// Publication Date(/time)
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=date,proto3" json:"date,omitempty"`
	// e.g. driver,  provider,  patient, bank etc.
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
	// What does naming system identify?
	Description *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	// Content intends to support these contexts
	UseContext []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// How/where is it used
	Usage    *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=usage,proto3" json:"usage,omitempty"`
	UniqueId []*NamingSystem_UniqueId   `protobuf:"bytes,20,rep,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// Use this instead
	ReplacedBy *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=replaced_by,json=replacedBy,proto3" json:"replaced_by,omitempty"`
}

func (x *NamingSystem) Reset() {
	*x = NamingSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystem) ProtoMessage() {}

func (x *NamingSystem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystem.ProtoReflect.Descriptor instead.
func (*NamingSystem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{59}
}

func (x *NamingSystem) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamingSystem) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NamingSystem) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *NamingSystem) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *NamingSystem) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *NamingSystem) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *NamingSystem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NamingSystem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NamingSystem) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NamingSystem) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *NamingSystem) GetKind() *codes_go_proto.NamingSystemTypeCode {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *NamingSystem) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *NamingSystem) GetContact() []*NamingSystem_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *NamingSystem) GetResponsible() *datatypes_go_proto.String {
	if x != nil {
		return x.Responsible
	}
	return nil
}

func (x *NamingSystem) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *NamingSystem) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NamingSystem) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *NamingSystem) GetUseContext() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *NamingSystem) GetUsage() *datatypes_go_proto.String {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *NamingSystem) GetUniqueId() []*NamingSystem_UniqueId {
	if x != nil {
		return x.UniqueId
	}
	return nil
}

func (x *NamingSystem) GetReplacedBy() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ReplacedBy
	}
	return nil
}

// Auto-generated from StructureDefinition for NutritionOrder.
// A request for a diet, formula or nutritional supplement.
// See http://hl7.org/fhir/StructureDefinition/NutritionOrder
type NutritionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The person who requires the diet, formula or nutritional supplement
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=patient,proto3" json:"patient,omitempty"`
	// Who ordered the diet, formula or nutritional supplement
	Orderer *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// Identifiers assigned to this order
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,11,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The encounter associated with this nutrition order
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Date and time the nutrition order was requested
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,13,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	// proposed | draft | planned | requested | active | on-hold | completed |
	// cancelled
	Status *codes_go_proto.NutritionOrderStatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// List of the patient's food and nutrition-related allergies and intolerances
	AllergyIntolerance []*datatypes_go_proto.Reference `protobuf:"bytes,15,rep,name=allergy_intolerance,json=allergyIntolerance,proto3" json:"allergy_intolerance,omitempty"`
	// Order-specific modifier about the type of food that should be given
	FoodPreferenceModifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=food_preference_modifier,json=foodPreferenceModifier,proto3" json:"food_preference_modifier,omitempty"`
	// Order-specific modifier about the type of food that should not be given
	ExcludeFoodModifier []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,rep,name=exclude_food_modifier,json=excludeFoodModifier,proto3" json:"exclude_food_modifier,omitempty"`
	OralDiet            *NutritionOrder_OralDiet              `protobuf:"bytes,18,opt,name=oral_diet,json=oralDiet,proto3" json:"oral_diet,omitempty"`
	Supplement          []*NutritionOrder_Supplement          `protobuf:"bytes,19,rep,name=supplement,proto3" json:"supplement,omitempty"`
	EnteralFormula      *NutritionOrder_EnteralFormula        `protobuf:"bytes,20,opt,name=enteral_formula,json=enteralFormula,proto3" json:"enteral_formula,omitempty"`
}

func (x *NutritionOrder) Reset() {
	*x = NutritionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder) ProtoMessage() {}

func (x *NutritionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder.ProtoReflect.Descriptor instead.
func (*NutritionOrder) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{60}
}

func (x *NutritionOrder) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *NutritionOrder) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *NutritionOrder) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *NutritionOrder) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *NutritionOrder) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *NutritionOrder) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *NutritionOrder) GetOrderer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Orderer
	}
	return nil
}

func (x *NutritionOrder) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *NutritionOrder) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *NutritionOrder) GetDateTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *NutritionOrder) GetStatus() *codes_go_proto.NutritionOrderStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *NutritionOrder) GetAllergyIntolerance() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AllergyIntolerance
	}
	return nil
}

func (x *NutritionOrder) GetFoodPreferenceModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FoodPreferenceModifier
	}
	return nil
}

func (x *NutritionOrder) GetExcludeFoodModifier() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExcludeFoodModifier
	}
	return nil
}

func (x *NutritionOrder) GetOralDiet() *NutritionOrder_OralDiet {
	if x != nil {
		return x.OralDiet
	}
	return nil
}

func (x *NutritionOrder) GetSupplement() []*NutritionOrder_Supplement {
	if x != nil {
		return x.Supplement
	}
	return nil
}

func (x *NutritionOrder) GetEnteralFormula() *NutritionOrder_EnteralFormula {
	if x != nil {
		return x.EnteralFormula
	}
	return nil
}

// Auto-generated from StructureDefinition for Observation.
// Measurements and simple assertions.
// See http://hl7.org/fhir/StructureDefinition/Observation
type Observation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique Id for this particular observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	// Type of observation (code / type)
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Effective *Observation_Effective        `protobuf:"bytes,15,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,16,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Observation_Value              `protobuf:"bytes,18,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comments *datatypes_go_proto.String `protobuf:"bytes,21,opt,name=comments,proto3" json:"comments,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Observation_ReferenceRange `protobuf:"bytes,26,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Observation_Related        `protobuf:"bytes,27,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Observation_Component      `protobuf:"bytes,28,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Observation) Reset() {
	*x = Observation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{61}
}

func (x *Observation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Observation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Observation) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Observation) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Observation) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Observation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Observation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Observation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Observation) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Observation) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Observation) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Observation) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Observation) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Observation) GetEffective() *Observation_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Observation) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Observation) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Observation) GetValue() *Observation_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Observation) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Observation) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Observation) GetComments() *datatypes_go_proto.String {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Observation) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Observation) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Observation) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Observation) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Observation) GetReferenceRange() []*Observation_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Observation) GetRelated() []*Observation_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Observation) GetComponent() []*Observation_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for OperationDefinition.
// Definition of an operation or a named query.
// See http://hl7.org/fhir/StructureDefinition/OperationDefinition
type OperationDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Logical URL to reference this operation definition
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Logical id for this version of the operation definition
	Version *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// Informal name for this operation
	Name *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// operation | query
	Kind *codes_go_proto.OperationKindCode `protobuf:"bytes,13,opt,name=kind,proto3" json:"kind,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Name of the publisher (Organization or individual)
	Publisher *datatypes_go_proto.String     `protobuf:"bytes,15,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*OperationDefinition_Contact `protobuf:"bytes,16,rep,name=contact,proto3" json:"contact,omitempty"`
	// Date for this version of the operation definition
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=date,proto3" json:"date,omitempty"`
	// Natural language description of the operation
	Description *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	// Why is this needed?
	Requirements *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Whether content is unchanged by operation
	Idempotent *datatypes_go_proto.Boolean `protobuf:"bytes,20,opt,name=idempotent,proto3" json:"idempotent,omitempty"`
	// Name used to invoke the operation
	Code *datatypes_go_proto.Code `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// Additional information about use
	Notes *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=notes,proto3" json:"notes,omitempty"`
	// Marks this as a profile of the base
	Base *datatypes_go_proto.Reference `protobuf:"bytes,23,opt,name=base,proto3" json:"base,omitempty"`
	// Invoke at the system level?
	System *datatypes_go_proto.Boolean `protobuf:"bytes,24,opt,name=system,proto3" json:"system,omitempty"`
	// Invoke at resource level for these type
	Type []*codes_go_proto.ResourceTypeCode `protobuf:"bytes,25,rep,name=type,proto3" json:"type,omitempty"`
	// Invoke on an instance?
	Instance  *datatypes_go_proto.Boolean      `protobuf:"bytes,26,opt,name=instance,proto3" json:"instance,omitempty"`
	Parameter []*OperationDefinition_Parameter `protobuf:"bytes,27,rep,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *OperationDefinition) Reset() {
	*x = OperationDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDefinition) ProtoMessage() {}

func (x *OperationDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDefinition.ProtoReflect.Descriptor instead.
func (*OperationDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{62}
}

func (x *OperationDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *OperationDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *OperationDefinition) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *OperationDefinition) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *OperationDefinition) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *OperationDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *OperationDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *OperationDefinition) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *OperationDefinition) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *OperationDefinition) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OperationDefinition) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *OperationDefinition) GetKind() *codes_go_proto.OperationKindCode {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *OperationDefinition) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *OperationDefinition) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *OperationDefinition) GetContact() []*OperationDefinition_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *OperationDefinition) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *OperationDefinition) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *OperationDefinition) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *OperationDefinition) GetIdempotent() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Idempotent
	}
	return nil
}

func (x *OperationDefinition) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *OperationDefinition) GetNotes() *datatypes_go_proto.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *OperationDefinition) GetBase() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *OperationDefinition) GetSystem() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *OperationDefinition) GetType() []*codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *OperationDefinition) GetInstance() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *OperationDefinition) GetParameter() []*OperationDefinition_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

// Auto-generated from StructureDefinition for OperationOutcome.
// Information about the success/failure of an action.
// See http://hl7.org/fhir/StructureDefinition/OperationOutcome
type OperationOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Issue             []*OperationOutcome_Issue       `protobuf:"bytes,9,rep,name=issue,proto3" json:"issue,omitempty"`
}

func (x *OperationOutcome) Reset() {
	*x = OperationOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationOutcome) ProtoMessage() {}

func (x *OperationOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationOutcome.ProtoReflect.Descriptor instead.
func (*OperationOutcome) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{63}
}

func (x *OperationOutcome) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationOutcome) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *OperationOutcome) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *OperationOutcome) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *OperationOutcome) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *OperationOutcome) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *OperationOutcome) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *OperationOutcome) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *OperationOutcome) GetIssue() []*OperationOutcome_Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

// Auto-generated from StructureDefinition for Order.
// A request to perform an action.
// See http://hl7.org/fhir/StructureDefinition/Order
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifiers assigned to this order by the orderer or by the receiver
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// When the order was made
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date,proto3" json:"date,omitempty"`
	// Patient this order is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`
	// Who initiated the order
	Source *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	// Who is intended to fulfill the order
	Target *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=target,proto3" json:"target,omitempty"`
	Reason *Order_Reason                 `protobuf:"bytes,14,opt,name=reason,proto3" json:"reason,omitempty"`
	When   *Order_When                   `protobuf:"bytes,15,opt,name=when,proto3" json:"when,omitempty"`
	// What action is being ordered
	Detail []*datatypes_go_proto.Reference `protobuf:"bytes,16,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{64}
}

func (x *Order) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Order) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Order) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Order) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Order) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Order) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Order) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Order) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Order) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Order) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Order) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Order) GetSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Order) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Order) GetReason() *Order_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Order) GetWhen() *Order_When {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Order) GetDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Auto-generated from StructureDefinition for OrderResponse.
// A response to an order.
// See http://hl7.org/fhir/StructureDefinition/OrderResponse
type OrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifiers assigned to this order by the orderer or by the receiver
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The order that this is a response to
	Request *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=request,proto3" json:"request,omitempty"`
	// When the response was made
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"`
	// Who made the response
	Who *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=who,proto3" json:"who,omitempty"`
	// pending | review | rejected | error | accepted | cancelled | replaced |
	// aborted | completed
	OrderStatus *codes_go_proto.OrderStatusCode `protobuf:"bytes,13,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	// Additional description of the response
	Description *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// Details of the outcome of performing the order
	Fulfillment []*datatypes_go_proto.Reference `protobuf:"bytes,15,rep,name=fulfillment,proto3" json:"fulfillment,omitempty"`
}

func (x *OrderResponse) Reset() {
	*x = OrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponse) ProtoMessage() {}

func (x *OrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponse.ProtoReflect.Descriptor instead.
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{65}
}

func (x *OrderResponse) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OrderResponse) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *OrderResponse) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *OrderResponse) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *OrderResponse) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *OrderResponse) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *OrderResponse) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *OrderResponse) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *OrderResponse) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *OrderResponse) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *OrderResponse) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *OrderResponse) GetWho() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Who
	}
	return nil
}

func (x *OrderResponse) GetOrderStatus() *codes_go_proto.OrderStatusCode {
	if x != nil {
		return x.OrderStatus
	}
	return nil
}

func (x *OrderResponse) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *OrderResponse) GetFulfillment() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Fulfillment
	}
	return nil
}

// Auto-generated from StructureDefinition for Organization.
// A grouping of people or organizations with a common purpose.
// See http://hl7.org/fhir/StructureDefinition/Organization
type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifies this organization  across multiple systems
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether the organization's record is still in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,10,opt,name=active,proto3" json:"active,omitempty"`
	// Kind of organization
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// Name used for the organization
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the organization
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,13,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// An address for the organization
	Address []*datatypes_go_proto.Address `protobuf:"bytes,14,rep,name=address,proto3" json:"address,omitempty"`
	// The organization of which this organization forms a part
	PartOf  *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=part_of,json=partOf,proto3" json:"part_of,omitempty"`
	Contact []*Organization_Contact       `protobuf:"bytes,16,rep,name=contact,proto3" json:"contact,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{66}
}

func (x *Organization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Organization) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Organization) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Organization) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Organization) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Organization) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Organization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Organization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Organization) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Organization) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Organization) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Organization) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Organization) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *Organization) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Organization) GetPartOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *Organization) GetContact() []*Organization_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

// Auto-generated from StructureDefinition for Parameters.
// Operation Request or Response.
// See http://hl7.org/fhir/StructureDefinition/Parameters
type Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language  *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	Parameter []*Parameters_Parameter             `protobuf:"bytes,5,rep,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{67}
}

func (x *Parameters) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Parameters) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Parameters) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Parameters) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Parameters) GetParameter() []*Parameters_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

// Auto-generated from StructureDefinition for Patient.
// Information about an individual or animal receiving health care services.
// See http://hl7.org/fhir/StructureDefinition/Patient
type Patient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for this patient
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this patient's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,10,opt,name=active,proto3" json:"active,omitempty"`
	// A name associated with the patient
	Name []*datatypes_go_proto.HumanName `protobuf:"bytes,11,rep,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the individual
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,12,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// male | female | other | unknown
	Gender *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,13,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date of birth for the individual
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,14,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	Deceased  *Patient_Deceased        `protobuf:"bytes,15,opt,name=deceased,proto3" json:"deceased,omitempty"`
	// Addresses for the individual
	Address []*datatypes_go_proto.Address `protobuf:"bytes,16,rep,name=address,proto3" json:"address,omitempty"`
	// Marital (civil) status of a patient
	MaritalStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=marital_status,json=maritalStatus,proto3" json:"marital_status,omitempty"`
	MultipleBirth *Patient_MultipleBirth              `protobuf:"bytes,18,opt,name=multiple_birth,json=multipleBirth,proto3" json:"multiple_birth,omitempty"`
	// Image of the patient
	Photo         []*datatypes_go_proto.Attachment `protobuf:"bytes,19,rep,name=photo,proto3" json:"photo,omitempty"`
	Contact       []*Patient_Contact               `protobuf:"bytes,20,rep,name=contact,proto3" json:"contact,omitempty"`
	Animal        *Patient_Animal                  `protobuf:"bytes,21,opt,name=animal,proto3" json:"animal,omitempty"`
	Communication []*Patient_Communication         `protobuf:"bytes,22,rep,name=communication,proto3" json:"communication,omitempty"`
	// Patient's nominated primary care provider
	CareProvider []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=care_provider,json=careProvider,proto3" json:"care_provider,omitempty"`
	// Organization that is the custodian of the patient record
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,24,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	Link                 []*Patient_Link               `protobuf:"bytes,25,rep,name=link,proto3" json:"link,omitempty"`
}

func (x *Patient) Reset() {
	*x = Patient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient) ProtoMessage() {}

func (x *Patient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient.ProtoReflect.Descriptor instead.
func (*Patient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{68}
}

func (x *Patient) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Patient) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Patient) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Patient) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Patient) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Patient) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Patient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Patient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Patient) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Patient) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Patient) GetName() []*datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Patient) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *Patient) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *Patient) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *Patient) GetDeceased() *Patient_Deceased {
	if x != nil {
		return x.Deceased
	}
	return nil
}

func (x *Patient) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Patient) GetMaritalStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.MaritalStatus
	}
	return nil
}

func (x *Patient) GetMultipleBirth() *Patient_MultipleBirth {
	if x != nil {
		return x.MultipleBirth
	}
	return nil
}

func (x *Patient) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *Patient) GetContact() []*Patient_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Patient) GetAnimal() *Patient_Animal {
	if x != nil {
		return x.Animal
	}
	return nil
}

func (x *Patient) GetCommunication() []*Patient_Communication {
	if x != nil {
		return x.Communication
	}
	return nil
}

func (x *Patient) GetCareProvider() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.CareProvider
	}
	return nil
}

func (x *Patient) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *Patient) GetLink() []*Patient_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

// Auto-generated from StructureDefinition for PaymentNotice.
// PaymentNotice request.
// See http://hl7.org/fhir/StructureDefinition/PaymentNotice
type PaymentNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,10,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	// Insurer or Regulatory body
	Target *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=target,proto3" json:"target,omitempty"`
	// Responsible practitioner
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=provider,proto3" json:"provider,omitempty"`
	// Responsible organization
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=organization,proto3" json:"organization,omitempty"`
	// Request reference
	Request *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=request,proto3" json:"request,omitempty"`
	// Response reference
	Response *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=response,proto3" json:"response,omitempty"`
	// Status of the payment
	PaymentStatus *datatypes_go_proto.Coding `protobuf:"bytes,18,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
}

func (x *PaymentNotice) Reset() {
	*x = PaymentNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentNotice) ProtoMessage() {}

func (x *PaymentNotice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentNotice.ProtoReflect.Descriptor instead.
func (*PaymentNotice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{69}
}

func (x *PaymentNotice) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PaymentNotice) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PaymentNotice) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *PaymentNotice) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *PaymentNotice) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *PaymentNotice) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *PaymentNotice) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PaymentNotice) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PaymentNotice) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *PaymentNotice) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *PaymentNotice) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *PaymentNotice) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PaymentNotice) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *PaymentNotice) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *PaymentNotice) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *PaymentNotice) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PaymentNotice) GetResponse() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *PaymentNotice) GetPaymentStatus() *datatypes_go_proto.Coding {
	if x != nil {
		return x.PaymentStatus
	}
	return nil
}

// Auto-generated from StructureDefinition for PaymentReconciliation.
// PaymentReconciliation resource.
// See http://hl7.org/fhir/StructureDefinition/PaymentReconciliation
type PaymentReconciliation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Claim reference
	Request *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=request,proto3" json:"request,omitempty"`
	// complete | error
	Outcome *codes_go_proto.RemittanceOutcomeCode `protobuf:"bytes,11,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Disposition Message
	Disposition *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=disposition,proto3" json:"disposition,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,13,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,14,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
	// Period covered
	Period *datatypes_go_proto.Period `protobuf:"bytes,16,opt,name=period,proto3" json:"period,omitempty"`
	// Insurer
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=organization,proto3" json:"organization,omitempty"`
	// Responsible practitioner
	RequestProvider *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=request_provider,json=requestProvider,proto3" json:"request_provider,omitempty"`
	// Responsible organization
	RequestOrganization *datatypes_go_proto.Reference   `protobuf:"bytes,19,opt,name=request_organization,json=requestOrganization,proto3" json:"request_organization,omitempty"`
	Detail              []*PaymentReconciliation_Detail `protobuf:"bytes,20,rep,name=detail,proto3" json:"detail,omitempty"`
	// Printed Form Identifier
	Form *datatypes_go_proto.Coding `protobuf:"bytes,21,opt,name=form,proto3" json:"form,omitempty"`
	// Total amount of Payment
	Total *datatypes_go_proto.Money     `protobuf:"bytes,22,opt,name=total,proto3" json:"total,omitempty"`
	Note  []*PaymentReconciliation_Note `protobuf:"bytes,23,rep,name=note,proto3" json:"note,omitempty"`
}

func (x *PaymentReconciliation) Reset() {
	*x = PaymentReconciliation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentReconciliation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentReconciliation) ProtoMessage() {}

func (x *PaymentReconciliation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentReconciliation.ProtoReflect.Descriptor instead.
func (*PaymentReconciliation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{70}
}

func (x *PaymentReconciliation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PaymentReconciliation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PaymentReconciliation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *PaymentReconciliation) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *PaymentReconciliation) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *PaymentReconciliation) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *PaymentReconciliation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PaymentReconciliation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PaymentReconciliation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *PaymentReconciliation) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PaymentReconciliation) GetOutcome() *codes_go_proto.RemittanceOutcomeCode {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *PaymentReconciliation) GetDisposition() *datatypes_go_proto.String {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *PaymentReconciliation) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *PaymentReconciliation) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *PaymentReconciliation) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PaymentReconciliation) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *PaymentReconciliation) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *PaymentReconciliation) GetRequestProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestProvider
	}
	return nil
}

func (x *PaymentReconciliation) GetRequestOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestOrganization
	}
	return nil
}

func (x *PaymentReconciliation) GetDetail() []*PaymentReconciliation_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *PaymentReconciliation) GetForm() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *PaymentReconciliation) GetTotal() *datatypes_go_proto.Money {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *PaymentReconciliation) GetNote() []*PaymentReconciliation_Note {
	if x != nil {
		return x.Note
	}
	return nil
}

// Auto-generated from StructureDefinition for Person.
// A generic person record.
// See http://hl7.org/fhir/StructureDefinition/Person
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A human identifier for this person
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// A name associated with the person
	Name []*datatypes_go_proto.HumanName `protobuf:"bytes,10,rep,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the person
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,11,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// male | female | other | unknown
	Gender *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,12,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date on which the person was born
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,13,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// One or more addresses for the person
	Address []*datatypes_go_proto.Address `protobuf:"bytes,14,rep,name=address,proto3" json:"address,omitempty"`
	// Image of the person
	Photo *datatypes_go_proto.Attachment `protobuf:"bytes,15,opt,name=photo,proto3" json:"photo,omitempty"`
	// The organization that is the custodian of the person record
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// This person's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,17,opt,name=active,proto3" json:"active,omitempty"`
	Link   []*Person_Link              `protobuf:"bytes,18,rep,name=link,proto3" json:"link,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{71}
}

func (x *Person) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Person) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Person) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Person) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Person) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Person) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Person) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Person) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Person) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Person) GetName() []*datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Person) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *Person) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *Person) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *Person) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Person) GetPhoto() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *Person) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *Person) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Person) GetLink() []*Person_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

// Auto-generated from StructureDefinition for Practitioner.
// A person with a  formal responsibility in the provisioning of healthcare or
// related services. See http://hl7.org/fhir/StructureDefinition/Practitioner
type Practitioner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A identifier for the person as this agent
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Whether this practitioner's record is in active use
	Active *datatypes_go_proto.Boolean `protobuf:"bytes,10,opt,name=active,proto3" json:"active,omitempty"`
	// A name associated with the person
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the practitioner
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,12,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Where practitioner can be found/visited
	Address []*datatypes_go_proto.Address `protobuf:"bytes,13,rep,name=address,proto3" json:"address,omitempty"`
	// male | female | other | unknown
	Gender *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,14,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date  on which the practitioner was born
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,15,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// Image of the person
	Photo            []*datatypes_go_proto.Attachment `protobuf:"bytes,16,rep,name=photo,proto3" json:"photo,omitempty"`
	PractitionerRole []*Practitioner_PractitionerRole `protobuf:"bytes,17,rep,name=practitioner_role,json=practitionerRole,proto3" json:"practitioner_role,omitempty"`
	Qualification    []*Practitioner_Qualification    `protobuf:"bytes,18,rep,name=qualification,proto3" json:"qualification,omitempty"`
	// A language the practitioner is able to use in patient communication
	Communication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=communication,proto3" json:"communication,omitempty"`
}

func (x *Practitioner) Reset() {
	*x = Practitioner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Practitioner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Practitioner) ProtoMessage() {}

func (x *Practitioner) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Practitioner.ProtoReflect.Descriptor instead.
func (*Practitioner) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{72}
}

func (x *Practitioner) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Practitioner) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Practitioner) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Practitioner) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Practitioner) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Practitioner) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Practitioner) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Practitioner) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Practitioner) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Practitioner) GetActive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Practitioner) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Practitioner) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *Practitioner) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Practitioner) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *Practitioner) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *Practitioner) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *Practitioner) GetPractitionerRole() []*Practitioner_PractitionerRole {
	if x != nil {
		return x.PractitionerRole
	}
	return nil
}

func (x *Practitioner) GetQualification() []*Practitioner_Qualification {
	if x != nil {
		return x.Qualification
	}
	return nil
}

func (x *Practitioner) GetCommunication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Communication
	}
	return nil
}

// Auto-generated from StructureDefinition for Procedure.
// An action that is being or was performed on a patient.
// See http://hl7.org/fhir/StructureDefinition/Procedure
type Procedure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Identifiers for this procedure
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who the procedure was performed on
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`
	// in-progress | aborted | completed | entered-in-error
	Status *codes_go_proto.ProcedureStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of the procedure
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	// Identification of the procedure
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// True if procedure was not performed as scheduled
	NotPerformed *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=not_performed,json=notPerformed,proto3" json:"not_performed,omitempty"`
	// Reason procedure was not performed
	ReasonNotPerformed []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,rep,name=reason_not_performed,json=reasonNotPerformed,proto3" json:"reason_not_performed,omitempty"`
	// Target body sites
	BodySite  []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,16,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	Reason    *Procedure_Reason                     `protobuf:"bytes,17,opt,name=reason,proto3" json:"reason,omitempty"`
	Performer []*Procedure_Performer                `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Performed *Procedure_Performed                  `protobuf:"bytes,19,opt,name=performed,proto3" json:"performed,omitempty"`
	// The encounter associated with the procedure
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Where the procedure happened
	Location *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=location,proto3" json:"location,omitempty"`
	// The result of procedure
	Outcome *datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Any report resulting from the procedure
	Report []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=report,proto3" json:"report,omitempty"`
	// Complication following the procedure
	Complication []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=complication,proto3" json:"complication,omitempty"`
	// Instructions for follow up
	FollowUp []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,25,rep,name=follow_up,json=followUp,proto3" json:"follow_up,omitempty"`
	// A request for this procedure
	Request *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=request,proto3" json:"request,omitempty"`
	// Additional information about the procedure
	Notes       []*datatypes_go_proto.Annotation `protobuf:"bytes,27,rep,name=notes,proto3" json:"notes,omitempty"`
	FocalDevice []*Procedure_FocalDevice         `protobuf:"bytes,28,rep,name=focal_device,json=focalDevice,proto3" json:"focal_device,omitempty"`
	// Items used during procedure
	Used []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=used,proto3" json:"used,omitempty"`
}

func (x *Procedure) Reset() {
	*x = Procedure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Procedure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Procedure) ProtoMessage() {}

func (x *Procedure) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Procedure.ProtoReflect.Descriptor instead.
func (*Procedure) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{73}
}

func (x *Procedure) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Procedure) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Procedure) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Procedure) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Procedure) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Procedure) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Procedure) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Procedure) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Procedure) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Procedure) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Procedure) GetStatus() *codes_go_proto.ProcedureStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Procedure) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Procedure) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Procedure) GetNotPerformed() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.NotPerformed
	}
	return nil
}

func (x *Procedure) GetReasonNotPerformed() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonNotPerformed
	}
	return nil
}

func (x *Procedure) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Procedure) GetReason() *Procedure_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Procedure) GetPerformer() []*Procedure_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Procedure) GetPerformed() *Procedure_Performed {
	if x != nil {
		return x.Performed
	}
	return nil
}

func (x *Procedure) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Procedure) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Procedure) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *Procedure) GetReport() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *Procedure) GetComplication() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Complication
	}
	return nil
}

func (x *Procedure) GetFollowUp() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FollowUp
	}
	return nil
}

func (x *Procedure) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Procedure) GetNotes() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Procedure) GetFocalDevice() []*Procedure_FocalDevice {
	if x != nil {
		return x.FocalDevice
	}
	return nil
}

func (x *Procedure) GetUsed() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Used
	}
	return nil
}

// Auto-generated from StructureDefinition for ProcedureRequest.
// A request for a procedure to be performed.
// See http://hl7.org/fhir/StructureDefinition/ProcedureRequest
type ProcedureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique identifier for the request
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Who the procedure should be done to
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`
	// What procedure to perform
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	// What part of body to perform on
	BodySite  []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	Reason    *ProcedureRequest_Reason              `protobuf:"bytes,13,opt,name=reason,proto3" json:"reason,omitempty"`
	Scheduled *ProcedureRequest_Scheduled           `protobuf:"bytes,14,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	// Encounter request created during
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Who should perform the procedure
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=performer,proto3" json:"performer,omitempty"`
	// proposed | draft | requested | received | accepted | in-progress |
	// completed | suspended | rejected | aborted
	Status *codes_go_proto.ProcedureRequestStatusCode `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// Additional information about desired procedure
	Notes    []*datatypes_go_proto.Annotation `protobuf:"bytes,18,rep,name=notes,proto3" json:"notes,omitempty"`
	AsNeeded *ProcedureRequest_AsNeeded       `protobuf:"bytes,19,opt,name=as_needed,json=asNeeded,proto3" json:"as_needed,omitempty"`
	// When request was created
	OrderedOn *datatypes_go_proto.DateTime `protobuf:"bytes,20,opt,name=ordered_on,json=orderedOn,proto3" json:"ordered_on,omitempty"`
	// Who made request
	Orderer *datatypes_go_proto.Reference `protobuf:"bytes,21,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// routine | urgent | stat | asap
	Priority *codes_go_proto.ProcedureRequestPriorityCode `protobuf:"bytes,22,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ProcedureRequest) Reset() {
	*x = ProcedureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequest) ProtoMessage() {}

func (x *ProcedureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequest.ProtoReflect.Descriptor instead.
func (*ProcedureRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{74}
}

func (x *ProcedureRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProcedureRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ProcedureRequest) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ProcedureRequest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ProcedureRequest) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ProcedureRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProcedureRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProcedureRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ProcedureRequest) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ProcedureRequest) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ProcedureRequest) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *ProcedureRequest) GetReason() *ProcedureRequest_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *ProcedureRequest) GetScheduled() *ProcedureRequest_Scheduled {
	if x != nil {
		return x.Scheduled
	}
	return nil
}

func (x *ProcedureRequest) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *ProcedureRequest) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *ProcedureRequest) GetStatus() *codes_go_proto.ProcedureRequestStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ProcedureRequest) GetNotes() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *ProcedureRequest) GetAsNeeded() *ProcedureRequest_AsNeeded {
	if x != nil {
		return x.AsNeeded
	}
	return nil
}

func (x *ProcedureRequest) GetOrderedOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.OrderedOn
	}
	return nil
}

func (x *ProcedureRequest) GetOrderer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Orderer
	}
	return nil
}

func (x *ProcedureRequest) GetPriority() *codes_go_proto.ProcedureRequestPriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

// Auto-generated from StructureDefinition for ProcessRequest.
// Process request.
// See http://hl7.org/fhir/StructureDefinition/ProcessRequest
type ProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// cancel | poll | reprocess | status
	Action *codes_go_proto.ActionListCode `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"`
	// Business Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,13,opt,name=created,proto3" json:"created,omitempty"`
	// Target of the request
	Target *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=target,proto3" json:"target,omitempty"`
	// Responsible practitioner
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=provider,proto3" json:"provider,omitempty"`
	// Responsible organization
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=organization,proto3" json:"organization,omitempty"`
	// Request reference
	Request *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=request,proto3" json:"request,omitempty"`
	// Response reference
	Response *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=response,proto3" json:"response,omitempty"`
	// Nullify
	Nullify *datatypes_go_proto.Boolean `protobuf:"bytes,19,opt,name=nullify,proto3" json:"nullify,omitempty"`
	// Reference number/string
	Reference *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=reference,proto3" json:"reference,omitempty"`
	Item      []*ProcessRequest_Item     `protobuf:"bytes,21,rep,name=item,proto3" json:"item,omitempty"`
	// Resource type(s) to include
	Include []*datatypes_go_proto.String `protobuf:"bytes,22,rep,name=include,proto3" json:"include,omitempty"`
	// Resource type(s) to exclude
	Exclude []*datatypes_go_proto.String `protobuf:"bytes,23,rep,name=exclude,proto3" json:"exclude,omitempty"`
	// Period
	Period *datatypes_go_proto.Period `protobuf:"bytes,24,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *ProcessRequest) Reset() {
	*x = ProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRequest) ProtoMessage() {}

func (x *ProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRequest.ProtoReflect.Descriptor instead.
func (*ProcessRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{75}
}

func (x *ProcessRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcessRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProcessRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ProcessRequest) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ProcessRequest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ProcessRequest) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ProcessRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProcessRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProcessRequest) GetAction() *codes_go_proto.ActionListCode {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ProcessRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ProcessRequest) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *ProcessRequest) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *ProcessRequest) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ProcessRequest) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ProcessRequest) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ProcessRequest) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *ProcessRequest) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ProcessRequest) GetResponse() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ProcessRequest) GetNullify() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Nullify
	}
	return nil
}

func (x *ProcessRequest) GetReference() *datatypes_go_proto.String {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *ProcessRequest) GetItem() []*ProcessRequest_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ProcessRequest) GetInclude() []*datatypes_go_proto.String {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *ProcessRequest) GetExclude() []*datatypes_go_proto.String {
	if x != nil {
		return x.Exclude
	}
	return nil
}

func (x *ProcessRequest) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for ProcessResponse.
// ProcessResponse resource.
// See http://hl7.org/fhir/StructureDefinition/ProcessResponse
type ProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Request reference
	Request *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=request,proto3" json:"request,omitempty"`
	// Processing outcome
	Outcome *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Disposition Message
	Disposition *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=disposition,proto3" json:"disposition,omitempty"`
	// Resource version
	Ruleset *datatypes_go_proto.Coding `protobuf:"bytes,13,opt,name=ruleset,proto3" json:"ruleset,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,14,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
	// Creation date
	Created *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
	// Authoring Organization
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=organization,proto3" json:"organization,omitempty"`
	// Responsible Practitioner
	RequestProvider *datatypes_go_proto.Reference `protobuf:"bytes,17,opt,name=request_provider,json=requestProvider,proto3" json:"request_provider,omitempty"`
	// Responsible organization
	RequestOrganization *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=request_organization,json=requestOrganization,proto3" json:"request_organization,omitempty"`
	// Printed Form Identifier
	Form  *datatypes_go_proto.Coding `protobuf:"bytes,19,opt,name=form,proto3" json:"form,omitempty"`
	Notes []*ProcessResponse_Notes   `protobuf:"bytes,20,rep,name=notes,proto3" json:"notes,omitempty"`
	// Error code
	Error []*datatypes_go_proto.Coding `protobuf:"bytes,21,rep,name=error,proto3" json:"error,omitempty"`
}

func (x *ProcessResponse) Reset() {
	*x = ProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessResponse) ProtoMessage() {}

func (x *ProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessResponse.ProtoReflect.Descriptor instead.
func (*ProcessResponse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{76}
}

func (x *ProcessResponse) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcessResponse) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProcessResponse) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ProcessResponse) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ProcessResponse) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ProcessResponse) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ProcessResponse) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProcessResponse) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProcessResponse) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ProcessResponse) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ProcessResponse) GetOutcome() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *ProcessResponse) GetDisposition() *datatypes_go_proto.String {
	if x != nil {
		return x.Disposition
	}
	return nil
}

func (x *ProcessResponse) GetRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Ruleset
	}
	return nil
}

func (x *ProcessResponse) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

func (x *ProcessResponse) GetCreated() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ProcessResponse) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *ProcessResponse) GetRequestProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestProvider
	}
	return nil
}

func (x *ProcessResponse) GetRequestOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.RequestOrganization
	}
	return nil
}

func (x *ProcessResponse) GetForm() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *ProcessResponse) GetNotes() []*ProcessResponse_Notes {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *ProcessResponse) GetError() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Error
	}
	return nil
}

// Auto-generated from StructureDefinition for Provenance.
// Who, What, When for a set of resources.
// See http://hl7.org/fhir/StructureDefinition/Provenance
type Provenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Target Reference(s) (usually version specific)
	Target []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=target,proto3" json:"target,omitempty"`
	// When the activity occurred
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3" json:"period,omitempty"`
	// When the activity was recorded / updated
	Recorded *datatypes_go_proto.Instant `protobuf:"bytes,11,opt,name=recorded,proto3" json:"recorded,omitempty"`
	// Reason the activity is occurring
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=reason,proto3" json:"reason,omitempty"`
	// Activity that occurred
	Activity *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=activity,proto3" json:"activity,omitempty"`
	// Where the activity occurred, if relevant
	Location *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=location,proto3" json:"location,omitempty"`
	// Policy or plan the activity was defined by
	Policy []*datatypes_go_proto.Uri `protobuf:"bytes,15,rep,name=policy,proto3" json:"policy,omitempty"`
	Agent  []*Provenance_Agent       `protobuf:"bytes,16,rep,name=agent,proto3" json:"agent,omitempty"`
	Entity []*Provenance_Entity      `protobuf:"bytes,17,rep,name=entity,proto3" json:"entity,omitempty"`
	// Signature on target
	Signature []*datatypes_go_proto.Signature `protobuf:"bytes,18,rep,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Provenance) Reset() {
	*x = Provenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenance) ProtoMessage() {}

func (x *Provenance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenance.ProtoReflect.Descriptor instead.
func (*Provenance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{77}
}

func (x *Provenance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Provenance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Provenance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Provenance) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Provenance) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Provenance) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Provenance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Provenance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Provenance) GetTarget() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Provenance) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Provenance) GetRecorded() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Recorded
	}
	return nil
}

func (x *Provenance) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Provenance) GetActivity() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *Provenance) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Provenance) GetPolicy() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *Provenance) GetAgent() []*Provenance_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Provenance) GetEntity() []*Provenance_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Provenance) GetSignature() []*datatypes_go_proto.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Auto-generated from StructureDefinition for Questionnaire.
// A structured set of questions.
// See http://hl7.org/fhir/StructureDefinition/Questionnaire
type Questionnaire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifiers for this questionnaire
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Logical identifier for this version of Questionnaire
	Version *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// draft | published | retired
	Status *codes_go_proto.QuestionnaireStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Date this version was authored
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,12,opt,name=date,proto3" json:"date,omitempty"`
	// Organization/individual who designed the questionnaire
	Publisher *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact information of the publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,14,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Resource that can be subject of QuestionnaireResponse
	SubjectType []*codes_go_proto.ResourceTypeCode `protobuf:"bytes,15,rep,name=subject_type,json=subjectType,proto3" json:"subject_type,omitempty"`
	Group       *Questionnaire_Group               `protobuf:"bytes,16,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *Questionnaire) Reset() {
	*x = Questionnaire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire) ProtoMessage() {}

func (x *Questionnaire) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire.ProtoReflect.Descriptor instead.
func (*Questionnaire) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{78}
}

func (x *Questionnaire) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Questionnaire) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Questionnaire) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Questionnaire) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Questionnaire) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Questionnaire) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Questionnaire) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Questionnaire) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Questionnaire) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Questionnaire) GetStatus() *codes_go_proto.QuestionnaireStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Questionnaire) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Questionnaire) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Questionnaire) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *Questionnaire) GetSubjectType() []*codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.SubjectType
	}
	return nil
}

func (x *Questionnaire) GetGroup() *Questionnaire_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

// Auto-generated from StructureDefinition for QuestionnaireResponse.
// A structured set of questions and their answers.
// See http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse
type QuestionnaireResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique id for this set of answers
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,9,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Form being answered
	Questionnaire *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=questionnaire,proto3" json:"questionnaire,omitempty"`
	// in-progress | completed | amended
	Status *codes_go_proto.QuestionnaireResponseStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// The subject of the questions
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=subject,proto3" json:"subject,omitempty"`
	// Person who received and recorded the answers
	Author *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=author,proto3" json:"author,omitempty"`
	// Date this version was authored
	Authored *datatypes_go_proto.DateTime `protobuf:"bytes,14,opt,name=authored,proto3" json:"authored,omitempty"`
	// The person who answered the questions
	Source *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=source,proto3" json:"source,omitempty"`
	// Primary encounter during which the answers were collected
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Group     *QuestionnaireResponse_Group  `protobuf:"bytes,17,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *QuestionnaireResponse) Reset() {
	*x = QuestionnaireResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponse) ProtoMessage() {}

func (x *QuestionnaireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponse.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{79}
}

func (x *QuestionnaireResponse) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponse) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *QuestionnaireResponse) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *QuestionnaireResponse) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *QuestionnaireResponse) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QuestionnaireResponse) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *QuestionnaireResponse) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QuestionnaireResponse) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QuestionnaireResponse) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *QuestionnaireResponse) GetQuestionnaire() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Questionnaire
	}
	return nil
}

func (x *QuestionnaireResponse) GetStatus() *codes_go_proto.QuestionnaireResponseStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QuestionnaireResponse) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QuestionnaireResponse) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *QuestionnaireResponse) GetAuthored() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Authored
	}
	return nil
}

func (x *QuestionnaireResponse) GetSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *QuestionnaireResponse) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *QuestionnaireResponse) GetGroup() *QuestionnaireResponse_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

// Auto-generated from StructureDefinition for ReferralRequest.
// A request for referral or transfer of care.
// See http://hl7.org/fhir/StructureDefinition/ReferralRequest
type ReferralRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// draft | requested | active | cancelled | accepted | rejected | completed
	Status *codes_go_proto.ReferralStatusCode `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Date of creation/activation
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"`
	// Referral/Transition of care request type
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// The clinical specialty (discipline) that the referral is requested for
	Specialty *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=specialty,proto3" json:"specialty,omitempty"`
	// Urgency of referral / transfer of care request
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=priority,proto3" json:"priority,omitempty"`
	// Patient referred to care or transfer
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=patient,proto3" json:"patient,omitempty"`
	// Requester of referral / transfer of care
	Requester *datatypes_go_proto.Reference `protobuf:"bytes,16,opt,name=requester,proto3" json:"requester,omitempty"`
	// Receiver of referral / transfer of care request
	Recipient []*datatypes_go_proto.Reference `protobuf:"bytes,17,rep,name=recipient,proto3" json:"recipient,omitempty"`
	// Originating encounter
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Date referral/transfer of care request is sent
	DateSent *datatypes_go_proto.DateTime `protobuf:"bytes,19,opt,name=date_sent,json=dateSent,proto3" json:"date_sent,omitempty"`
	// Reason for referral / transfer of care request
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=reason,proto3" json:"reason,omitempty"`
	// A textual description of the referral
	Description *datatypes_go_proto.String `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	// Actions requested as part of the referral
	ServiceRequested []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,22,rep,name=service_requested,json=serviceRequested,proto3" json:"service_requested,omitempty"`
	// Additonal information to support referral or transfer of care request
	SupportingInformation []*datatypes_go_proto.Reference `protobuf:"bytes,23,rep,name=supporting_information,json=supportingInformation,proto3" json:"supporting_information,omitempty"`
	// Requested service(s) fulfillment time
	FulfillmentTime *datatypes_go_proto.Period `protobuf:"bytes,24,opt,name=fulfillment_time,json=fulfillmentTime,proto3" json:"fulfillment_time,omitempty"`
}

func (x *ReferralRequest) Reset() {
	*x = ReferralRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralRequest) ProtoMessage() {}

func (x *ReferralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralRequest.ProtoReflect.Descriptor instead.
func (*ReferralRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{80}
}

func (x *ReferralRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferralRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ReferralRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ReferralRequest) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ReferralRequest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ReferralRequest) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ReferralRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ReferralRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ReferralRequest) GetStatus() *codes_go_proto.ReferralStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReferralRequest) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ReferralRequest) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ReferralRequest) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ReferralRequest) GetSpecialty() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Specialty
	}
	return nil
}

func (x *ReferralRequest) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *ReferralRequest) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *ReferralRequest) GetRequester() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *ReferralRequest) GetRecipient() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *ReferralRequest) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *ReferralRequest) GetDateSent() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateSent
	}
	return nil
}

func (x *ReferralRequest) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *ReferralRequest) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ReferralRequest) GetServiceRequested() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ServiceRequested
	}
	return nil
}

func (x *ReferralRequest) GetSupportingInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInformation
	}
	return nil
}

func (x *ReferralRequest) GetFulfillmentTime() *datatypes_go_proto.Period {
	if x != nil {
		return x.FulfillmentTime
	}
	return nil
}

// Auto-generated from StructureDefinition for RelatedPerson.
// An person that is related to a patient, but who is not a direct target of
// care. See http://hl7.org/fhir/StructureDefinition/RelatedPerson
type RelatedPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A human identifier for this person
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The patient this person is related to
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=patient,proto3" json:"patient,omitempty"`
	// The nature of the relationship
	Relationship *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// A name associated with the person
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the person
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,13,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// male | female | other | unknown
	Gender *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,14,opt,name=gender,proto3" json:"gender,omitempty"`
	// The date on which the related person was born
	BirthDate *datatypes_go_proto.Date `protobuf:"bytes,15,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// Address where the related person can be contacted or visited
	Address []*datatypes_go_proto.Address `protobuf:"bytes,16,rep,name=address,proto3" json:"address,omitempty"`
	// Image of the person
	Photo []*datatypes_go_proto.Attachment `protobuf:"bytes,17,rep,name=photo,proto3" json:"photo,omitempty"`
	// Period of time that this relationship is considered valid
	Period *datatypes_go_proto.Period `protobuf:"bytes,18,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *RelatedPerson) Reset() {
	*x = RelatedPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedPerson) ProtoMessage() {}

func (x *RelatedPerson) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedPerson.ProtoReflect.Descriptor instead.
func (*RelatedPerson) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{81}
}

func (x *RelatedPerson) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RelatedPerson) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RelatedPerson) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *RelatedPerson) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *RelatedPerson) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *RelatedPerson) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *RelatedPerson) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *RelatedPerson) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *RelatedPerson) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *RelatedPerson) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *RelatedPerson) GetRelationship() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *RelatedPerson) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RelatedPerson) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *RelatedPerson) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *RelatedPerson) GetBirthDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *RelatedPerson) GetAddress() []*datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *RelatedPerson) GetPhoto() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *RelatedPerson) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Resource.
// Base Resource.
// See http://hl7.org/fhir/StructureDefinition/Resource
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{82}
}

func (x *Resource) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Resource) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Resource) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Resource) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

// Auto-generated from StructureDefinition for RiskAssessment.
// Potential outcomes for a subject with likelihood.
// See http://hl7.org/fhir/StructureDefinition/RiskAssessment
type RiskAssessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Who/what does assessment apply to?
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`
	// When was assessment made?
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date,proto3" json:"date,omitempty"`
	// Condition assessed
	Condition *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`
	// Where was assessment performed?
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Who did assessment?
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=performer,proto3" json:"performer,omitempty"`
	// Unique identifier for the assessment
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,14,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Evaluation mechanism
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,15,opt,name=method,proto3" json:"method,omitempty"`
	// Information used in assessment
	Basis      []*datatypes_go_proto.Reference `protobuf:"bytes,16,rep,name=basis,proto3" json:"basis,omitempty"`
	Prediction []*RiskAssessment_Prediction    `protobuf:"bytes,17,rep,name=prediction,proto3" json:"prediction,omitempty"`
	// How to reduce risk
	Mitigation *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=mitigation,proto3" json:"mitigation,omitempty"`
}

func (x *RiskAssessment) Reset() {
	*x = RiskAssessment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAssessment) ProtoMessage() {}

func (x *RiskAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAssessment.ProtoReflect.Descriptor instead.
func (*RiskAssessment) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{83}
}

func (x *RiskAssessment) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RiskAssessment) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RiskAssessment) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *RiskAssessment) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *RiskAssessment) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *RiskAssessment) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *RiskAssessment) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *RiskAssessment) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *RiskAssessment) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *RiskAssessment) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *RiskAssessment) GetCondition() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *RiskAssessment) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *RiskAssessment) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *RiskAssessment) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *RiskAssessment) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *RiskAssessment) GetBasis() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Basis
	}
	return nil
}

func (x *RiskAssessment) GetPrediction() []*RiskAssessment_Prediction {
	if x != nil {
		return x.Prediction
	}
	return nil
}

func (x *RiskAssessment) GetMitigation() *datatypes_go_proto.String {
	if x != nil {
		return x.Mitigation
	}
	return nil
}

// Auto-generated from StructureDefinition for Schedule.
// A container for slot(s) of time that may be available for booking
// appointments. See http://hl7.org/fhir/StructureDefinition/Schedule
type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The schedule type can be used for the categorization of healthcare services
	// or other appointment types
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=type,proto3" json:"type,omitempty"`
	// The resource this Schedule resource is providing availability information
	// for. These are expected to usually be one of HealthcareService, Location,
	// Practitioner, Device, Patient or RelatedPerson
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=actor,proto3" json:"actor,omitempty"`
	// The period of time that the slots that are attached to this Schedule
	// resource cover (even if none exist). These  cover the amount of time that
	// an organization's planning horizon; the interval for which they are
	// currently accepting appointments. This does not define a "template" for
	// planning outside these dates
	PlanningHorizon *datatypes_go_proto.Period `protobuf:"bytes,12,opt,name=planning_horizon,json=planningHorizon,proto3" json:"planning_horizon,omitempty"`
	// Comments on the availability to describe any extended information. Such as
	// custom constraints on the slot(s) that may be associated
	Comment *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{84}
}

func (x *Schedule) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Schedule) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Schedule) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Schedule) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Schedule) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Schedule) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Schedule) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Schedule) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Schedule) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Schedule) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Schedule) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Schedule) GetPlanningHorizon() *datatypes_go_proto.Period {
	if x != nil {
		return x.PlanningHorizon
	}
	return nil
}

func (x *Schedule) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Auto-generated from StructureDefinition for SearchParameter.
// Search Parameter for a resource.
// See http://hl7.org/fhir/StructureDefinition/SearchParameter
type SearchParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Absolute URL used to reference this search parameter
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Informal name for this search parameter
	Name *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,12,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Name of the publisher (Organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*SearchParameter_Contact `protobuf:"bytes,14,rep,name=contact,proto3" json:"contact,omitempty"`
	// Publication Date(/time)
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=date,proto3" json:"date,omitempty"`
	// Why this search parameter is defined
	Requirements *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Code used in URL
	Code *datatypes_go_proto.Code `protobuf:"bytes,17,opt,name=code,proto3" json:"code,omitempty"`
	// The resource type this search parameter applies to
	Base *codes_go_proto.ResourceTypeCode `protobuf:"bytes,18,opt,name=base,proto3" json:"base,omitempty"`
	// number | date | string | token | reference | composite | quantity | uri
	Type *codes_go_proto.SearchParamTypeCode `protobuf:"bytes,19,opt,name=type,proto3" json:"type,omitempty"`
	// Documentation for  search parameter
	Description *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	// XPath that extracts the values
	Xpath *datatypes_go_proto.String `protobuf:"bytes,21,opt,name=xpath,proto3" json:"xpath,omitempty"`
	// normal | phonetic | nearby | distance | other
	XpathUsage *codes_go_proto.XPathUsageTypeCode `protobuf:"bytes,22,opt,name=xpath_usage,json=xpathUsage,proto3" json:"xpath_usage,omitempty"`
	// Types of resource (if a resource reference)
	Target []*codes_go_proto.ResourceTypeCode `protobuf:"bytes,23,rep,name=target,proto3" json:"target,omitempty"`
}

func (x *SearchParameter) Reset() {
	*x = SearchParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParameter) ProtoMessage() {}

func (x *SearchParameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParameter.ProtoReflect.Descriptor instead.
func (*SearchParameter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{85}
}

func (x *SearchParameter) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchParameter) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SearchParameter) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SearchParameter) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SearchParameter) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SearchParameter) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SearchParameter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SearchParameter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SearchParameter) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *SearchParameter) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SearchParameter) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SearchParameter) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *SearchParameter) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *SearchParameter) GetContact() []*SearchParameter_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *SearchParameter) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *SearchParameter) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *SearchParameter) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SearchParameter) GetBase() *codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SearchParameter) GetType() *codes_go_proto.SearchParamTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SearchParameter) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *SearchParameter) GetXpath() *datatypes_go_proto.String {
	if x != nil {
		return x.Xpath
	}
	return nil
}

func (x *SearchParameter) GetXpathUsage() *codes_go_proto.XPathUsageTypeCode {
	if x != nil {
		return x.XpathUsage
	}
	return nil
}

func (x *SearchParameter) GetTarget() []*codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.Target
	}
	return nil
}

// Auto-generated from StructureDefinition for Slot.
// A slot of time on a schedule that may be available for booking appointments.
// See http://hl7.org/fhir/StructureDefinition/Slot
type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Ids for this item
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// The type of appointments that can be booked into this slot (ideally this
	// would be an identifiable service - which is at a location, rather than the
	// location itself). If provided then this overrides the value provided on the
	// availability resource
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	// The schedule resource that this slot defines an interval of status
	// information
	Schedule *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// busy | free | busy-unavailable | busy-tentative
	FreeBusyType *codes_go_proto.SlotStatusCode `protobuf:"bytes,12,opt,name=free_busy_type,json=freeBusyType,proto3" json:"free_busy_type,omitempty"`
	// Date/Time that the slot is to begin
	Start *datatypes_go_proto.Instant `protobuf:"bytes,13,opt,name=start,proto3" json:"start,omitempty"`
	// Date/Time that the slot is to conclude
	End *datatypes_go_proto.Instant `protobuf:"bytes,14,opt,name=end,proto3" json:"end,omitempty"`
	// This slot has already been overbooked, appointments are unlikely to be
	// accepted for this time
	Overbooked *datatypes_go_proto.Boolean `protobuf:"bytes,15,opt,name=overbooked,proto3" json:"overbooked,omitempty"`
	// Comments on the slot to describe any extended information. Such as custom
	// constraints on the slot
	Comment *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{86}
}

func (x *Slot) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Slot) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Slot) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Slot) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Slot) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Slot) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Slot) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Slot) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Slot) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Slot) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Slot) GetSchedule() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *Slot) GetFreeBusyType() *codes_go_proto.SlotStatusCode {
	if x != nil {
		return x.FreeBusyType
	}
	return nil
}

func (x *Slot) GetStart() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Slot) GetEnd() *datatypes_go_proto.Instant {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Slot) GetOverbooked() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Overbooked
	}
	return nil
}

func (x *Slot) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Auto-generated from StructureDefinition for Specimen.
// Sample for analysis.
// See http://hl7.org/fhir/StructureDefinition/Specimen
type Specimen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// available | unavailable | unsatisfactory | entered-in-error
	Status *codes_go_proto.SpecimenStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Kind of material that forms the specimen
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// Specimen from which this specimen originated
	Parent []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=parent,proto3" json:"parent,omitempty"`
	// Where the specimen came from. This may be from the patient(s) or from the
	// environment or a device
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`
	// Identifier assigned by the lab
	AccessionIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,14,opt,name=accession_identifier,json=accessionIdentifier,proto3" json:"accession_identifier,omitempty"`
	// The time when specimen was received for processing
	ReceivedTime *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	Collection   *Specimen_Collection         `protobuf:"bytes,16,opt,name=collection,proto3" json:"collection,omitempty"`
	Treatment    []*Specimen_Treatment        `protobuf:"bytes,17,rep,name=treatment,proto3" json:"treatment,omitempty"`
	Container    []*Specimen_Container        `protobuf:"bytes,18,rep,name=container,proto3" json:"container,omitempty"`
}

func (x *Specimen) Reset() {
	*x = Specimen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen) ProtoMessage() {}

func (x *Specimen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen.ProtoReflect.Descriptor instead.
func (*Specimen) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{87}
}

func (x *Specimen) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Specimen) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Specimen) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Specimen) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Specimen) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Specimen) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Specimen) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Specimen) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Specimen) GetStatus() *codes_go_proto.SpecimenStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Specimen) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Specimen) GetParent() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Specimen) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Specimen) GetAccessionIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.AccessionIdentifier
	}
	return nil
}

func (x *Specimen) GetReceivedTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ReceivedTime
	}
	return nil
}

func (x *Specimen) GetCollection() *Specimen_Collection {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *Specimen) GetTreatment() []*Specimen_Treatment {
	if x != nil {
		return x.Treatment
	}
	return nil
}

func (x *Specimen) GetContainer() []*Specimen_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

// Auto-generated from StructureDefinition for StructureDefinition.
// Structural Definition.
// See http://hl7.org/fhir/StructureDefinition/StructureDefinition
type StructureDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Absolute URL used to reference this StructureDefinition
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Other identifiers for the StructureDefinition
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Logical id for this version of the StructureDefinition
	Version *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	// Informal name for this StructureDefinition
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Use this name when displaying the value
	Display *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=display,proto3" json:"display,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,15,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Name of the publisher (Organization or individual)
	Publisher *datatypes_go_proto.String     `protobuf:"bytes,16,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*StructureDefinition_Contact `protobuf:"bytes,17,rep,name=contact,proto3" json:"contact,omitempty"`
	// Date for this version of the StructureDefinition
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,18,opt,name=date,proto3" json:"date,omitempty"`
	// Natural language description of the StructureDefinition
	Description *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=description,proto3" json:"description,omitempty"`
	// Content intends to support these contexts
	UseContext []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Scope and Usage this structure definition is for
	Requirements *datatypes_go_proto.String `protobuf:"bytes,21,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Assist with indexing and finding
	Code []*datatypes_go_proto.Coding `protobuf:"bytes,23,rep,name=code,proto3" json:"code,omitempty"`
	// FHIR Version this StructureDefinition targets
	FhirVersion *datatypes_go_proto.Id         `protobuf:"bytes,24,opt,name=fhir_version,json=fhirVersion,proto3" json:"fhir_version,omitempty"`
	Mapping     []*StructureDefinition_Mapping `protobuf:"bytes,25,rep,name=mapping,proto3" json:"mapping,omitempty"`
	// datatype | resource | logical
	Kind *codes_go_proto.StructureDefinitionKindCode `protobuf:"bytes,26,opt,name=kind,proto3" json:"kind,omitempty"`
	// Any datatype or resource, including abstract ones
	ConstrainedType *codes_go_proto.FHIRDefinedTypeCode `protobuf:"bytes,27,opt,name=constrained_type,json=constrainedType,proto3" json:"constrained_type,omitempty"`
	// Whether the structure is abstract
	Abstract *datatypes_go_proto.Boolean `protobuf:"bytes,28,opt,name=abstract,proto3" json:"abstract,omitempty"`
	// resource | datatype | mapping | extension
	ContextType *codes_go_proto.ExtensionContextCode `protobuf:"bytes,29,opt,name=context_type,json=contextType,proto3" json:"context_type,omitempty"`
	// Where the extension can be used in instances
	Context []*datatypes_go_proto.String `protobuf:"bytes,30,rep,name=context,proto3" json:"context,omitempty"`
	// Structure that this set of constraints applies to
	Base         *datatypes_go_proto.Uri           `protobuf:"bytes,31,opt,name=base,proto3" json:"base,omitempty"`
	Snapshot     *StructureDefinition_Snapshot     `protobuf:"bytes,32,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Differential *StructureDefinition_Differential `protobuf:"bytes,33,opt,name=differential,proto3" json:"differential,omitempty"`
}

func (x *StructureDefinition) Reset() {
	*x = StructureDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition) ProtoMessage() {}

func (x *StructureDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition.ProtoReflect.Descriptor instead.
func (*StructureDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{88}
}

func (x *StructureDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *StructureDefinition) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *StructureDefinition) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *StructureDefinition) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *StructureDefinition) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *StructureDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *StructureDefinition) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *StructureDefinition) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *StructureDefinition) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StructureDefinition) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *StructureDefinition) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StructureDefinition) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *StructureDefinition) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *StructureDefinition) GetContact() []*StructureDefinition_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *StructureDefinition) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *StructureDefinition) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *StructureDefinition) GetUseContext() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *StructureDefinition) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *StructureDefinition) GetCopyright() *datatypes_go_proto.String {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *StructureDefinition) GetCode() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *StructureDefinition) GetFhirVersion() *datatypes_go_proto.Id {
	if x != nil {
		return x.FhirVersion
	}
	return nil
}

func (x *StructureDefinition) GetMapping() []*StructureDefinition_Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *StructureDefinition) GetKind() *codes_go_proto.StructureDefinitionKindCode {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *StructureDefinition) GetConstrainedType() *codes_go_proto.FHIRDefinedTypeCode {
	if x != nil {
		return x.ConstrainedType
	}
	return nil
}

func (x *StructureDefinition) GetAbstract() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *StructureDefinition) GetContextType() *codes_go_proto.ExtensionContextCode {
	if x != nil {
		return x.ContextType
	}
	return nil
}

func (x *StructureDefinition) GetContext() []*datatypes_go_proto.String {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *StructureDefinition) GetBase() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *StructureDefinition) GetSnapshot() *StructureDefinition_Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *StructureDefinition) GetDifferential() *StructureDefinition_Differential {
	if x != nil {
		return x.Differential
	}
	return nil
}

// Auto-generated from StructureDefinition for Subscription.
// A server push subscription criteria.
// See http://hl7.org/fhir/StructureDefinition/Subscription
type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Rule for server push criteria
	Criteria *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=criteria,proto3" json:"criteria,omitempty"`
	// Contact details for source (e.g. troubleshooting)
	Contact []*datatypes_go_proto.ContactPoint `protobuf:"bytes,10,rep,name=contact,proto3" json:"contact,omitempty"`
	// Description of why this subscription was created
	Reason *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=reason,proto3" json:"reason,omitempty"`
	// requested | active | error | off
	Status *codes_go_proto.SubscriptionStatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// Latest error note
	Error   *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=error,proto3" json:"error,omitempty"`
	Channel *Subscription_Channel      `protobuf:"bytes,14,opt,name=channel,proto3" json:"channel,omitempty"`
	// When to automatically delete the subscription
	End *datatypes_go_proto.Instant `protobuf:"bytes,15,opt,name=end,proto3" json:"end,omitempty"`
	// A tag to add to matching resources
	Tag []*datatypes_go_proto.Coding `protobuf:"bytes,16,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{89}
}

func (x *Subscription) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Subscription) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Subscription) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Subscription) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Subscription) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Subscription) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Subscription) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Subscription) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Subscription) GetCriteria() *datatypes_go_proto.String {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *Subscription) GetContact() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Subscription) GetReason() *datatypes_go_proto.String {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Subscription) GetStatus() *codes_go_proto.SubscriptionStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Subscription) GetError() *datatypes_go_proto.String {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Subscription) GetChannel() *Subscription_Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Subscription) GetEnd() *datatypes_go_proto.Instant {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Subscription) GetTag() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Tag
	}
	return nil
}

// Auto-generated from StructureDefinition for Substance.
// A homogeneous material with a definite composition.
// See http://hl7.org/fhir/StructureDefinition/Substance
type Substance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Unique identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What class/type of substance this is
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=category,proto3" json:"category,omitempty"`
	// What substance this is
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=code,proto3" json:"code,omitempty"`
	// Textual description of the substance, comments
	Description *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Instance    []*Substance_Instance      `protobuf:"bytes,13,rep,name=instance,proto3" json:"instance,omitempty"`
	Ingredient  []*Substance_Ingredient    `protobuf:"bytes,14,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
}

func (x *Substance) Reset() {
	*x = Substance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Substance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Substance) ProtoMessage() {}

func (x *Substance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Substance.ProtoReflect.Descriptor instead.
func (*Substance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{90}
}

func (x *Substance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Substance) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Substance) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Substance) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Substance) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Substance) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Substance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Substance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Substance) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Substance) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Substance) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Substance) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Substance) GetInstance() []*Substance_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *Substance) GetIngredient() []*Substance_Ingredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

// Auto-generated from StructureDefinition for SupplyDelivery.
// Delivery of Supply.
// See http://hl7.org/fhir/StructureDefinition/SupplyDelivery
type SupplyDelivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External identifier
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,9,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// in-progress | completed | abandoned
	Status *codes_go_proto.SupplyDeliveryStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Patient for whom the item is supplied
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=patient,proto3" json:"patient,omitempty"`
	// Category of dispense event
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	// Amount dispensed
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,13,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Medication, Substance, or Device supplied
	SuppliedItem *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=supplied_item,json=suppliedItem,proto3" json:"supplied_item,omitempty"`
	// Dispenser
	Supplier *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=supplier,proto3" json:"supplier,omitempty"`
	// Dispensing time
	WhenPrepared *datatypes_go_proto.Period `protobuf:"bytes,16,opt,name=when_prepared,json=whenPrepared,proto3" json:"when_prepared,omitempty"`
	// Handover time
	Time *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=time,proto3" json:"time,omitempty"`
	// Where the Supply was sent
	Destination *datatypes_go_proto.Reference `protobuf:"bytes,18,opt,name=destination,proto3" json:"destination,omitempty"`
	// Who collected the Supply
	Receiver []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=receiver,proto3" json:"receiver,omitempty"`
}

func (x *SupplyDelivery) Reset() {
	*x = SupplyDelivery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyDelivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyDelivery) ProtoMessage() {}

func (x *SupplyDelivery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyDelivery.ProtoReflect.Descriptor instead.
func (*SupplyDelivery) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{91}
}

func (x *SupplyDelivery) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyDelivery) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SupplyDelivery) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SupplyDelivery) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SupplyDelivery) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SupplyDelivery) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SupplyDelivery) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SupplyDelivery) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SupplyDelivery) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SupplyDelivery) GetStatus() *codes_go_proto.SupplyDeliveryStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SupplyDelivery) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *SupplyDelivery) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SupplyDelivery) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *SupplyDelivery) GetSuppliedItem() *datatypes_go_proto.Reference {
	if x != nil {
		return x.SuppliedItem
	}
	return nil
}

func (x *SupplyDelivery) GetSupplier() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Supplier
	}
	return nil
}

func (x *SupplyDelivery) GetWhenPrepared() *datatypes_go_proto.Period {
	if x != nil {
		return x.WhenPrepared
	}
	return nil
}

func (x *SupplyDelivery) GetTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *SupplyDelivery) GetDestination() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SupplyDelivery) GetReceiver() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Receiver
	}
	return nil
}

// Auto-generated from StructureDefinition for SupplyRequest.
// Request for a medication, substance or device.
// See http://hl7.org/fhir/StructureDefinition/SupplyRequest
type SupplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Patient for whom the item is supplied
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=patient,proto3" json:"patient,omitempty"`
	// Who initiated this order
	Source *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`
	// When the request was made
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"`
	// Unique identifier
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,12,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// requested | completed | failed | cancelled
	Status *codes_go_proto.SupplyRequestStatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// The kind of supply (central, non-stock, etc.)
	Kind *datatypes_go_proto.CodeableConcept `protobuf:"bytes,14,opt,name=kind,proto3" json:"kind,omitempty"`
	// Medication, Substance, or Device requested to be supplied
	OrderedItem *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=ordered_item,json=orderedItem,proto3" json:"ordered_item,omitempty"`
	// Who is intended to fulfill the request
	Supplier []*datatypes_go_proto.Reference `protobuf:"bytes,16,rep,name=supplier,proto3" json:"supplier,omitempty"`
	Reason   *SupplyRequest_Reason           `protobuf:"bytes,17,opt,name=reason,proto3" json:"reason,omitempty"`
	When     *SupplyRequest_When             `protobuf:"bytes,18,opt,name=when,proto3" json:"when,omitempty"`
}

func (x *SupplyRequest) Reset() {
	*x = SupplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyRequest) ProtoMessage() {}

func (x *SupplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyRequest.ProtoReflect.Descriptor instead.
func (*SupplyRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{92}
}

func (x *SupplyRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyRequest) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SupplyRequest) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *SupplyRequest) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *SupplyRequest) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SupplyRequest) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *SupplyRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SupplyRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SupplyRequest) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *SupplyRequest) GetSource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SupplyRequest) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *SupplyRequest) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SupplyRequest) GetStatus() *codes_go_proto.SupplyRequestStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SupplyRequest) GetKind() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *SupplyRequest) GetOrderedItem() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OrderedItem
	}
	return nil
}

func (x *SupplyRequest) GetSupplier() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Supplier
	}
	return nil
}

func (x *SupplyRequest) GetReason() *SupplyRequest_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *SupplyRequest) GetWhen() *SupplyRequest_When {
	if x != nil {
		return x.When
	}
	return nil
}

// Auto-generated from StructureDefinition for TestScript.
// Describes a set of tests.
// See http://hl7.org/fhir/StructureDefinition/TestScript
type TestScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Absolute URL used to reference this TestScript
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Logical id for this version of the TestScript
	Version *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// Informal name for this TestScript
	Name *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// External identifier
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,13,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Name of the publisher (Organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*TestScript_Contact      `protobuf:"bytes,16,rep,name=contact,proto3" json:"contact,omitempty"`
	// Date for this version of the TestScript
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=date,proto3" json:"date,omitempty"`
	// Natural language description of the TestScript
	Description *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	// Content intends to support these contexts
	UseContext []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Scope and Usage this Test Script is for
	Requirements *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.String `protobuf:"bytes,21,opt,name=copyright,proto3" json:"copyright,omitempty"`
	Metadata  *TestScript_Metadata       `protobuf:"bytes,22,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Whether or not the tests apply to more than one FHIR server
	Multiserver *datatypes_go_proto.Boolean `protobuf:"bytes,23,opt,name=multiserver,proto3" json:"multiserver,omitempty"`
	Fixture     []*TestScript_Fixture       `protobuf:"bytes,24,rep,name=fixture,proto3" json:"fixture,omitempty"`
	// Reference of the validation profile
	Profile  []*datatypes_go_proto.Reference `protobuf:"bytes,25,rep,name=profile,proto3" json:"profile,omitempty"`
	Variable []*TestScript_Variable          `protobuf:"bytes,26,rep,name=variable,proto3" json:"variable,omitempty"`
	Setup    *TestScript_Setup               `protobuf:"bytes,27,opt,name=setup,proto3" json:"setup,omitempty"`
	Test     []*TestScript_Test              `protobuf:"bytes,28,rep,name=test,proto3" json:"test,omitempty"`
	Teardown *TestScript_Teardown            `protobuf:"bytes,29,opt,name=teardown,proto3" json:"teardown,omitempty"`
}

func (x *TestScript) Reset() {
	*x = TestScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript) ProtoMessage() {}

func (x *TestScript) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript.ProtoReflect.Descriptor instead.
func (*TestScript) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93}
}

func (x *TestScript) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TestScript) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *TestScript) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *TestScript) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TestScript) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *TestScript) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *TestScript) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *TestScript) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TestScript) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TestScript) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *TestScript) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *TestScript) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *TestScript) GetContact() []*TestScript_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *TestScript) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TestScript) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TestScript) GetUseContext() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *TestScript) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *TestScript) GetCopyright() *datatypes_go_proto.String {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *TestScript) GetMetadata() *TestScript_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TestScript) GetMultiserver() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Multiserver
	}
	return nil
}

func (x *TestScript) GetFixture() []*TestScript_Fixture {
	if x != nil {
		return x.Fixture
	}
	return nil
}

func (x *TestScript) GetProfile() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *TestScript) GetVariable() []*TestScript_Variable {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *TestScript) GetSetup() *TestScript_Setup {
	if x != nil {
		return x.Setup
	}
	return nil
}

func (x *TestScript) GetTest() []*TestScript_Test {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *TestScript) GetTeardown() *TestScript_Teardown {
	if x != nil {
		return x.Teardown
	}
	return nil
}

// Auto-generated from StructureDefinition for ValueSet.
// A set of codes drawn from one or more code systems.
// See http://hl7.org/fhir/StructureDefinition/ValueSet
type ValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Globally unique logical identifier for  value set
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Additional identifier for the value set (e.g. HL7 v2 / CDA)
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Logical identifier for this version of the value set
	Version *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	// Informal name for this value set
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// draft | active | retired
	Status *codes_go_proto.ConformanceResourceStatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// If for testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Name of the publisher (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Contact   []*ValueSet_Contact        `protobuf:"bytes,16,rep,name=contact,proto3" json:"contact,omitempty"`
	// Date for given status
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,17,opt,name=date,proto3" json:"date,omitempty"`
	// Fixed date for all referenced code systems and value sets
	LockedDate *datatypes_go_proto.Date `protobuf:"bytes,18,opt,name=locked_date,json=lockedDate,proto3" json:"locked_date,omitempty"`
	// Human language description of the value set
	Description *datatypes_go_proto.String `protobuf:"bytes,19,opt,name=description,proto3" json:"description,omitempty"`
	// Content intends to support these contexts
	UseContext []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Indicates whether or not any change to the content logical definition may
	// occur
	Immutable *datatypes_go_proto.Boolean `protobuf:"bytes,21,opt,name=immutable,proto3" json:"immutable,omitempty"`
	// Why needed
	Requirements *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Whether this is intended to be used with an extensible binding
	Extensible *datatypes_go_proto.Boolean `protobuf:"bytes,24,opt,name=extensible,proto3" json:"extensible,omitempty"`
	CodeSystem *ValueSet_CodeSystem        `protobuf:"bytes,25,opt,name=code_system,json=codeSystem,proto3" json:"code_system,omitempty"`
	Compose    *ValueSet_Compose           `protobuf:"bytes,26,opt,name=compose,proto3" json:"compose,omitempty"`
	Expansion  *ValueSet_Expansion         `protobuf:"bytes,27,opt,name=expansion,proto3" json:"expansion,omitempty"`
}

func (x *ValueSet) Reset() {
	*x = ValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet) ProtoMessage() {}

func (x *ValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet.ProtoReflect.Descriptor instead.
func (*ValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94}
}

func (x *ValueSet) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ValueSet) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ValueSet) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ValueSet) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ValueSet) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ValueSet) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ValueSet) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ValueSet) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ValueSet) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ValueSet) GetStatus() *codes_go_proto.ConformanceResourceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ValueSet) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *ValueSet) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *ValueSet) GetContact() []*ValueSet_Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *ValueSet) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ValueSet) GetLockedDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.LockedDate
	}
	return nil
}

func (x *ValueSet) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ValueSet) GetUseContext() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *ValueSet) GetImmutable() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Immutable
	}
	return nil
}

func (x *ValueSet) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ValueSet) GetCopyright() *datatypes_go_proto.String {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *ValueSet) GetExtensible() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Extensible
	}
	return nil
}

func (x *ValueSet) GetCodeSystem() *ValueSet_CodeSystem {
	if x != nil {
		return x.CodeSystem
	}
	return nil
}

func (x *ValueSet) GetCompose() *ValueSet_Compose {
	if x != nil {
		return x.Compose
	}
	return nil
}

func (x *ValueSet) GetExpansion() *ValueSet_Expansion {
	if x != nil {
		return x.Expansion
	}
	return nil
}

// Auto-generated from StructureDefinition for VisionPrescription.
// Prescription for vision correction products for a patient.
// See http://hl7.org/fhir/StructureDefinition/VisionPrescription
type VisionPrescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// When prescription was authorized
	DateWritten *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_written,json=dateWritten,proto3" json:"date_written,omitempty"`
	// Who prescription is for
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,11,opt,name=patient,proto3" json:"patient,omitempty"`
	// Who authorizes the vision product
	Prescriber *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=prescriber,proto3" json:"prescriber,omitempty"`
	// Created during encounter / admission / stay
	Encounter *datatypes_go_proto.Reference  `protobuf:"bytes,13,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Reason    *VisionPrescription_Reason     `protobuf:"bytes,14,opt,name=reason,proto3" json:"reason,omitempty"`
	Dispense  []*VisionPrescription_Dispense `protobuf:"bytes,15,rep,name=dispense,proto3" json:"dispense,omitempty"`
}

func (x *VisionPrescription) Reset() {
	*x = VisionPrescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionPrescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionPrescription) ProtoMessage() {}

func (x *VisionPrescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionPrescription.ProtoReflect.Descriptor instead.
func (*VisionPrescription) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{95}
}

func (x *VisionPrescription) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VisionPrescription) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *VisionPrescription) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *VisionPrescription) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *VisionPrescription) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *VisionPrescription) GetContained() []*ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *VisionPrescription) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *VisionPrescription) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *VisionPrescription) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *VisionPrescription) GetDateWritten() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateWritten
	}
	return nil
}

func (x *VisionPrescription) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *VisionPrescription) GetPrescriber() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Prescriber
	}
	return nil
}

func (x *VisionPrescription) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *VisionPrescription) GetReason() *VisionPrescription_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *VisionPrescription) GetDispense() []*VisionPrescription_Dispense {
	if x != nil {
		return x.Dispense
	}
	return nil
}

type ContainedResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofResource:
	//	*ContainedResource_Account
	//	*ContainedResource_AllergyIntolerance
	//	*ContainedResource_Appointment
	//	*ContainedResource_AppointmentResponse
	//	*ContainedResource_AuditEvent
	//	*ContainedResource_Basic
	//	*ContainedResource_Binary
	//	*ContainedResource_BodySite
	//	*ContainedResource_Bundle
	//	*ContainedResource_CarePlan
	//	*ContainedResource_Claim
	//	*ContainedResource_ClaimResponse
	//	*ContainedResource_ClinicalImpression
	//	*ContainedResource_Communication
	//	*ContainedResource_CommunicationRequest
	//	*ContainedResource_Composition
	//	*ContainedResource_ConceptMap
	//	*ContainedResource_Condition
	//	*ContainedResource_Conformance
	//	*ContainedResource_Contract
	//	*ContainedResource_Coverage
	//	*ContainedResource_DataElement
	//	*ContainedResource_DetectedIssue
	//	*ContainedResource_Device
	//	*ContainedResource_DeviceComponent
	//	*ContainedResource_DeviceMetric
	//	*ContainedResource_DeviceUseRequest
	//	*ContainedResource_DeviceUseStatement
	//	*ContainedResource_DiagnosticOrder
	//	*ContainedResource_DiagnosticReport
	//	*ContainedResource_DocumentManifest
	//	*ContainedResource_DocumentReference
	//	*ContainedResource_EligibilityRequest
	//	*ContainedResource_EligibilityResponse
	//	*ContainedResource_Encounter
	//	*ContainedResource_EnrollmentRequest
	//	*ContainedResource_EnrollmentResponse
	//	*ContainedResource_EpisodeOfCare
	//	*ContainedResource_ExplanationOfBenefit
	//	*ContainedResource_FamilyMemberHistory
	//	*ContainedResource_Flag
	//	*ContainedResource_Goal
	//	*ContainedResource_Group
	//	*ContainedResource_HealthcareService
	//	*ContainedResource_ImagingObjectSelection
	//	*ContainedResource_ImagingStudy
	//	*ContainedResource_Immunization
	//	*ContainedResource_ImmunizationRecommendation
	//	*ContainedResource_ImplementationGuide
	//	*ContainedResource_List
	//	*ContainedResource_Location
	//	*ContainedResource_Media
	//	*ContainedResource_Medication
	//	*ContainedResource_MedicationAdministration
	//	*ContainedResource_MedicationDispense
	//	*ContainedResource_MedicationOrder
	//	*ContainedResource_MedicationStatement
	//	*ContainedResource_MessageHeader
	//	*ContainedResource_NamingSystem
	//	*ContainedResource_NutritionOrder
	//	*ContainedResource_Observation
	//	*ContainedResource_OperationDefinition
	//	*ContainedResource_OperationOutcome
	//	*ContainedResource_Order
	//	*ContainedResource_OrderResponse
	//	*ContainedResource_Organization
	//	*ContainedResource_Parameters
	//	*ContainedResource_Patient
	//	*ContainedResource_PaymentNotice
	//	*ContainedResource_PaymentReconciliation
	//	*ContainedResource_Person
	//	*ContainedResource_Practitioner
	//	*ContainedResource_Procedure
	//	*ContainedResource_ProcedureRequest
	//	*ContainedResource_ProcessRequest
	//	*ContainedResource_ProcessResponse
	//	*ContainedResource_Provenance
	//	*ContainedResource_Questionnaire
	//	*ContainedResource_QuestionnaireResponse
	//	*ContainedResource_ReferralRequest
	//	*ContainedResource_RelatedPerson
	//	*ContainedResource_RiskAssessment
	//	*ContainedResource_Schedule
	//	*ContainedResource_SearchParameter
	//	*ContainedResource_Slot
	//	*ContainedResource_Specimen
	//	*ContainedResource_StructureDefinition
	//	*ContainedResource_Subscription
	//	*ContainedResource_Substance
	//	*ContainedResource_SupplyDelivery
	//	*ContainedResource_SupplyRequest
	//	*ContainedResource_TestScript
	//	*ContainedResource_ValueSet
	//	*ContainedResource_VisionPrescription
	OneofResource isContainedResource_OneofResource `protobuf_oneof:"oneof_resource"`
}

func (x *ContainedResource) Reset() {
	*x = ContainedResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainedResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainedResource) ProtoMessage() {}

func (x *ContainedResource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainedResource.ProtoReflect.Descriptor instead.
func (*ContainedResource) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{96}
}

func (m *ContainedResource) GetOneofResource() isContainedResource_OneofResource {
	if m != nil {
		return m.OneofResource
	}
	return nil
}

func (x *ContainedResource) GetAccount() *Account {
	if x, ok := x.GetOneofResource().(*ContainedResource_Account); ok {
		return x.Account
	}
	return nil
}

func (x *ContainedResource) GetAllergyIntolerance() *AllergyIntolerance {
	if x, ok := x.GetOneofResource().(*ContainedResource_AllergyIntolerance); ok {
		return x.AllergyIntolerance
	}
	return nil
}

func (x *ContainedResource) GetAppointment() *Appointment {
	if x, ok := x.GetOneofResource().(*ContainedResource_Appointment); ok {
		return x.Appointment
	}
	return nil
}

func (x *ContainedResource) GetAppointmentResponse() *AppointmentResponse {
	if x, ok := x.GetOneofResource().(*ContainedResource_AppointmentResponse); ok {
		return x.AppointmentResponse
	}
	return nil
}

func (x *ContainedResource) GetAuditEvent() *AuditEvent {
	if x, ok := x.GetOneofResource().(*ContainedResource_AuditEvent); ok {
		return x.AuditEvent
	}
	return nil
}

func (x *ContainedResource) GetBasic() *Basic {
	if x, ok := x.GetOneofResource().(*ContainedResource_Basic); ok {
		return x.Basic
	}
	return nil
}

func (x *ContainedResource) GetBinary() *Binary {
	if x, ok := x.GetOneofResource().(*ContainedResource_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *ContainedResource) GetBodySite() *BodySite {
	if x, ok := x.GetOneofResource().(*ContainedResource_BodySite); ok {
		return x.BodySite
	}
	return nil
}

func (x *ContainedResource) GetBundle() *Bundle {
	if x, ok := x.GetOneofResource().(*ContainedResource_Bundle); ok {
		return x.Bundle
	}
	return nil
}

func (x *ContainedResource) GetCarePlan() *CarePlan {
	if x, ok := x.GetOneofResource().(*ContainedResource_CarePlan); ok {
		return x.CarePlan
	}
	return nil
}

func (x *ContainedResource) GetClaim() *Claim {
	if x, ok := x.GetOneofResource().(*ContainedResource_Claim); ok {
		return x.Claim
	}
	return nil
}

func (x *ContainedResource) GetClaimResponse() *ClaimResponse {
	if x, ok := x.GetOneofResource().(*ContainedResource_ClaimResponse); ok {
		return x.ClaimResponse
	}
	return nil
}

func (x *ContainedResource) GetClinicalImpression() *ClinicalImpression {
	if x, ok := x.GetOneofResource().(*ContainedResource_ClinicalImpression); ok {
		return x.ClinicalImpression
	}
	return nil
}

func (x *ContainedResource) GetCommunication() *Communication {
	if x, ok := x.GetOneofResource().(*ContainedResource_Communication); ok {
		return x.Communication
	}
	return nil
}

func (x *ContainedResource) GetCommunicationRequest() *CommunicationRequest {
	if x, ok := x.GetOneofResource().(*ContainedResource_CommunicationRequest); ok {
		return x.CommunicationRequest
	}
	return nil
}

func (x *ContainedResource) GetComposition() *Composition {
	if x, ok := x.GetOneofResource().(*ContainedResource_Composition); ok {
		return x.Composition
	}
	return nil
}

func (x *ContainedResource) GetConceptMap() *ConceptMap {
	if x, ok := x.GetOneofResource().(*ContainedResource_ConceptMap); ok {
		return x.ConceptMap
	}
	return nil
}

func (x *ContainedResource) GetCondition() *Condition {
	if x, ok := x.GetOneofResource().(*ContainedResource_Condition); ok {
		return x.Condition
	}
	return nil
}

func (x *ContainedResource) GetConformance() *Conformance {
	if x, ok := x.GetOneofResource().(*ContainedResource_Conformance); ok {
		return x.Conformance
	}
	return nil
}

func (x *ContainedResource) GetContract() *Contract {
	if x, ok := x.GetOneofResource().(*ContainedResource_Contract); ok {
		return x.Contract
	}
	return nil
}

func (x *ContainedResource) GetCoverage() *Coverage {
	if x, ok := x.GetOneofResource().(*ContainedResource_Coverage); ok {
		return x.Coverage
	}
	return nil
}

func (x *ContainedResource) GetDataElement() *DataElement {
	if x, ok := x.GetOneofResource().(*ContainedResource_DataElement); ok {
		return x.DataElement
	}
	return nil
}

func (x *ContainedResource) GetDetectedIssue() *DetectedIssue {
	if x, ok := x.GetOneofResource().(*ContainedResource_DetectedIssue); ok {
		return x.DetectedIssue
	}
	return nil
}

func (x *ContainedResource) GetDevice() *Device {
	if x, ok := x.GetOneofResource().(*ContainedResource_Device); ok {
		return x.Device
	}
	return nil
}

func (x *ContainedResource) GetDeviceComponent() *DeviceComponent {
	if x, ok := x.GetOneofResource().(*ContainedResource_DeviceComponent); ok {
		return x.DeviceComponent
	}
	return nil
}

func (x *ContainedResource) GetDeviceMetric() *DeviceMetric {
	if x, ok := x.GetOneofResource().(*ContainedResource_DeviceMetric); ok {
		return x.DeviceMetric
	}
	return nil
}

func (x *ContainedResource) GetDeviceUseRequest() *DeviceUseRequest {
	if x, ok := x.GetOneofResource().(*ContainedResource_DeviceUseRequest); ok {
		return x.DeviceUseRequest
	}
	return nil
}

func (x *ContainedResource) GetDeviceUseStatement() *DeviceUseStatement {
	if x, ok := x.GetOneofResource().(*ContainedResource_DeviceUseStatement); ok {
		return x.DeviceUseStatement
	}
	return nil
}

func (x *ContainedResource) GetDiagnosticOrder() *DiagnosticOrder {
	if x, ok := x.GetOneofResource().(*ContainedResource_DiagnosticOrder); ok {
		return x.DiagnosticOrder
	}
	return nil
}

func (x *ContainedResource) GetDiagnosticReport() *DiagnosticReport {
	if x, ok := x.GetOneofResource().(*ContainedResource_DiagnosticReport); ok {
		return x.DiagnosticReport
	}
	return nil
}

func (x *ContainedResource) GetDocumentManifest() *DocumentManifest {
	if x, ok := x.GetOneofResource().(*ContainedResource_DocumentManifest); ok {
		return x.DocumentManifest
	}
	return nil
}

func (x *ContainedResource) GetDocumentReference() *DocumentReference {
	if x, ok := x.GetOneofResource().(*ContainedResource_DocumentReference); ok {
		return x.DocumentReference
	}
	return nil
}

func (x *ContainedResource) GetEligibilityRequest() *EligibilityRequest {
	if x, ok := x.GetOneofResource().(*ContainedResource_EligibilityRequest); ok {
		return x.EligibilityRequest
	}
	return nil
}

func (x *ContainedResource) GetEligibilityResponse() *EligibilityResponse {
	if x, ok := x.GetOneofResource().(*ContainedResource_EligibilityResponse); ok {
		return x.EligibilityResponse
	}
	return nil
}

func (x *ContainedResource) GetEncounter() *Encounter {
	if x, ok := x.GetOneofResource().(*ContainedResource_Encounter); ok {
		return x.Encounter
	}
	return nil
}

func (x *ContainedResource) GetEnrollmentRequest() *EnrollmentRequest {
	if x, ok := x.GetOneofResource().(*ContainedResource_EnrollmentRequest); ok {
		return x.EnrollmentRequest
	}
	return nil
}

func (x *ContainedResource) GetEnrollmentResponse() *EnrollmentResponse {
	if x, ok := x.GetOneofResource().(*ContainedResource_EnrollmentResponse); ok {
		return x.EnrollmentResponse
	}
	return nil
}

func (x *ContainedResource) GetEpisodeOfCare() *EpisodeOfCare {
	if x, ok := x.GetOneofResource().(*ContainedResource_EpisodeOfCare); ok {
		return x.EpisodeOfCare
	}
	return nil
}

func (x *ContainedResource) GetExplanationOfBenefit() *ExplanationOfBenefit {
	if x, ok := x.GetOneofResource().(*ContainedResource_ExplanationOfBenefit); ok {
		return x.ExplanationOfBenefit
	}
	return nil
}

func (x *ContainedResource) GetFamilyMemberHistory() *FamilyMemberHistory {
	if x, ok := x.GetOneofResource().(*ContainedResource_FamilyMemberHistory); ok {
		return x.FamilyMemberHistory
	}
	return nil
}

func (x *ContainedResource) GetFlag() *Flag {
	if x, ok := x.GetOneofResource().(*ContainedResource_Flag); ok {
		return x.Flag
	}
	return nil
}

func (x *ContainedResource) GetGoal() *Goal {
	if x, ok := x.GetOneofResource().(*ContainedResource_Goal); ok {
		return x.Goal
	}
	return nil
}

func (x *ContainedResource) GetGroup() *Group {
	if x, ok := x.GetOneofResource().(*ContainedResource_Group); ok {
		return x.Group
	}
	return nil
}

func (x *ContainedResource) GetHealthcareService() *HealthcareService {
	if x, ok := x.GetOneofResource().(*ContainedResource_HealthcareService); ok {
		return x.HealthcareService
	}
	return nil
}

func (x *ContainedResource) GetImagingObjectSelection() *ImagingObjectSelection {
	if x, ok := x.GetOneofResource().(*ContainedResource_ImagingObjectSelection); ok {
		return x.ImagingObjectSelection
	}
	return nil
}

func (x *ContainedResource) GetImagingStudy() *ImagingStudy {
	if x, ok := x.GetOneofResource().(*ContainedResource_ImagingStudy); ok {
		return x.ImagingStudy
	}
	return nil
}

func (x *ContainedResource) GetImmunization() *Immunization {
	if x, ok := x.GetOneofResource().(*ContainedResource_Immunization); ok {
		return x.Immunization
	}
	return nil
}

func (x *ContainedResource) GetImmunizationRecommendation() *ImmunizationRecommendation {
	if x, ok := x.GetOneofResource().(*ContainedResource_ImmunizationRecommendation); ok {
		return x.ImmunizationRecommendation
	}
	return nil
}

func (x *ContainedResource) GetImplementationGuide() *ImplementationGuide {
	if x, ok := x.GetOneofResource().(*ContainedResource_ImplementationGuide); ok {
		return x.ImplementationGuide
	}
	return nil
}

func (x *ContainedResource) GetList() *List {
	if x, ok := x.GetOneofResource().(*ContainedResource_List); ok {
		return x.List
	}
	return nil
}

func (x *ContainedResource) GetLocation() *Location {
	if x, ok := x.GetOneofResource().(*ContainedResource_Location); ok {
		return x.Location
	}
	return nil
}

func (x *ContainedResource) GetMedia() *Media {
	if x, ok := x.GetOneofResource().(*ContainedResource_Media); ok {
		return x.Media
	}
	return nil
}

func (x *ContainedResource) GetMedication() *Medication {
	if x, ok := x.GetOneofResource().(*ContainedResource_Medication); ok {
		return x.Medication
	}
	return nil
}

func (x *ContainedResource) GetMedicationAdministration() *MedicationAdministration {
	if x, ok := x.GetOneofResource().(*ContainedResource_MedicationAdministration); ok {
		return x.MedicationAdministration
	}
	return nil
}

func (x *ContainedResource) GetMedicationDispense() *MedicationDispense {
	if x, ok := x.GetOneofResource().(*ContainedResource_MedicationDispense); ok {
		return x.MedicationDispense
	}
	return nil
}

func (x *ContainedResource) GetMedicationOrder() *MedicationOrder {
	if x, ok := x.GetOneofResource().(*ContainedResource_MedicationOrder); ok {
		return x.MedicationOrder
	}
	return nil
}

func (x *ContainedResource) GetMedicationStatement() *MedicationStatement {
	if x, ok := x.GetOneofResource().(*ContainedResource_MedicationStatement); ok {
		return x.MedicationStatement
	}
	return nil
}

func (x *ContainedResource) GetMessageHeader() *MessageHeader {
	if x, ok := x.GetOneofResource().(*ContainedResource_MessageHeader); ok {
		return x.MessageHeader
	}
	return nil
}

func (x *ContainedResource) GetNamingSystem() *NamingSystem {
	if x, ok := x.GetOneofResource().(*ContainedResource_NamingSystem); ok {
		return x.NamingSystem
	}
	return nil
}

func (x *ContainedResource) GetNutritionOrder() *NutritionOrder {
	if x, ok := x.GetOneofResource().(*ContainedResource_NutritionOrder); ok {
		return x.NutritionOrder
	}
	return nil
}

func (x *ContainedResource) GetObservation() *Observation {
	if x, ok := x.GetOneofResource().(*ContainedResource_Observation); ok {
		return x.Observation
	}
	return nil
}

func (x *ContainedResource) GetOperationDefinition() *OperationDefinition {
	if x, ok := x.GetOneofResource().(*ContainedResource_OperationDefinition); ok {
		return x.OperationDefinition
	}
	return nil
}

func (x *ContainedResource) GetOperationOutcome() *OperationOutcome {
	if x, ok := x.GetOneofResource().(*ContainedResource_OperationOutcome); ok {
		return x.OperationOutcome
	}
	return nil
}

func (x *ContainedResource) GetOrder() *Order {
	if x, ok := x.GetOneofResource().(*ContainedResource_Order); ok {
		return x.Order
	}
	return nil
}

func (x *ContainedResource) GetOrderResponse() *OrderResponse {
	if x, ok := x.GetOneofResource().(*ContainedResource_OrderResponse); ok {
		return x.OrderResponse
	}
	return nil
}

func (x *ContainedResource) GetOrganization() *Organization {
	if x, ok := x.GetOneofResource().(*ContainedResource_Organization); ok {
		return x.Organization
	}
	return nil
}

func (x *ContainedResource) GetParameters() *Parameters {
	if x, ok := x.GetOneofResource().(*ContainedResource_Parameters); ok {
		return x.Parameters
	}
	return nil
}

func (x *ContainedResource) GetPatient() *Patient {
	if x, ok := x.GetOneofResource().(*ContainedResource_Patient); ok {
		return x.Patient
	}
	return nil
}

func (x *ContainedResource) GetPaymentNotice() *PaymentNotice {
	if x, ok := x.GetOneofResource().(*ContainedResource_PaymentNotice); ok {
		return x.PaymentNotice
	}
	return nil
}

func (x *ContainedResource) GetPaymentReconciliation() *PaymentReconciliation {
	if x, ok := x.GetOneofResource().(*ContainedResource_PaymentReconciliation); ok {
		return x.PaymentReconciliation
	}
	return nil
}

func (x *ContainedResource) GetPerson() *Person {
	if x, ok := x.GetOneofResource().(*ContainedResource_Person); ok {
		return x.Person
	}
	return nil
}

func (x *ContainedResource) GetPractitioner() *Practitioner {
	if x, ok := x.GetOneofResource().(*ContainedResource_Practitioner); ok {
		return x.Practitioner
	}
	return nil
}

func (x *ContainedResource) GetProcedure() *Procedure {
	if x, ok := x.GetOneofResource().(*ContainedResource_Procedure); ok {
		return x.Procedure
	}
	return nil
}

func (x *ContainedResource) GetProcedureRequest() *ProcedureRequest {
	if x, ok := x.GetOneofResource().(*ContainedResource_ProcedureRequest); ok {
		return x.ProcedureRequest
	}
	return nil
}

func (x *ContainedResource) GetProcessRequest() *ProcessRequest {
	if x, ok := x.GetOneofResource().(*ContainedResource_ProcessRequest); ok {
		return x.ProcessRequest
	}
	return nil
}

func (x *ContainedResource) GetProcessResponse() *ProcessResponse {
	if x, ok := x.GetOneofResource().(*ContainedResource_ProcessResponse); ok {
		return x.ProcessResponse
	}
	return nil
}

func (x *ContainedResource) GetProvenance() *Provenance {
	if x, ok := x.GetOneofResource().(*ContainedResource_Provenance); ok {
		return x.Provenance
	}
	return nil
}

func (x *ContainedResource) GetQuestionnaire() *Questionnaire {
	if x, ok := x.GetOneofResource().(*ContainedResource_Questionnaire); ok {
		return x.Questionnaire
	}
	return nil
}

func (x *ContainedResource) GetQuestionnaireResponse() *QuestionnaireResponse {
	if x, ok := x.GetOneofResource().(*ContainedResource_QuestionnaireResponse); ok {
		return x.QuestionnaireResponse
	}
	return nil
}

func (x *ContainedResource) GetReferralRequest() *ReferralRequest {
	if x, ok := x.GetOneofResource().(*ContainedResource_ReferralRequest); ok {
		return x.ReferralRequest
	}
	return nil
}

func (x *ContainedResource) GetRelatedPerson() *RelatedPerson {
	if x, ok := x.GetOneofResource().(*ContainedResource_RelatedPerson); ok {
		return x.RelatedPerson
	}
	return nil
}

func (x *ContainedResource) GetRiskAssessment() *RiskAssessment {
	if x, ok := x.GetOneofResource().(*ContainedResource_RiskAssessment); ok {
		return x.RiskAssessment
	}
	return nil
}

func (x *ContainedResource) GetSchedule() *Schedule {
	if x, ok := x.GetOneofResource().(*ContainedResource_Schedule); ok {
		return x.Schedule
	}
	return nil
}

func (x *ContainedResource) GetSearchParameter() *SearchParameter {
	if x, ok := x.GetOneofResource().(*ContainedResource_SearchParameter); ok {
		return x.SearchParameter
	}
	return nil
}

func (x *ContainedResource) GetSlot() *Slot {
	if x, ok := x.GetOneofResource().(*ContainedResource_Slot); ok {
		return x.Slot
	}
	return nil
}

func (x *ContainedResource) GetSpecimen() *Specimen {
	if x, ok := x.GetOneofResource().(*ContainedResource_Specimen); ok {
		return x.Specimen
	}
	return nil
}

func (x *ContainedResource) GetStructureDefinition() *StructureDefinition {
	if x, ok := x.GetOneofResource().(*ContainedResource_StructureDefinition); ok {
		return x.StructureDefinition
	}
	return nil
}

func (x *ContainedResource) GetSubscription() *Subscription {
	if x, ok := x.GetOneofResource().(*ContainedResource_Subscription); ok {
		return x.Subscription
	}
	return nil
}

func (x *ContainedResource) GetSubstance() *Substance {
	if x, ok := x.GetOneofResource().(*ContainedResource_Substance); ok {
		return x.Substance
	}
	return nil
}

func (x *ContainedResource) GetSupplyDelivery() *SupplyDelivery {
	if x, ok := x.GetOneofResource().(*ContainedResource_SupplyDelivery); ok {
		return x.SupplyDelivery
	}
	return nil
}

func (x *ContainedResource) GetSupplyRequest() *SupplyRequest {
	if x, ok := x.GetOneofResource().(*ContainedResource_SupplyRequest); ok {
		return x.SupplyRequest
	}
	return nil
}

func (x *ContainedResource) GetTestScript() *TestScript {
	if x, ok := x.GetOneofResource().(*ContainedResource_TestScript); ok {
		return x.TestScript
	}
	return nil
}

func (x *ContainedResource) GetValueSet() *ValueSet {
	if x, ok := x.GetOneofResource().(*ContainedResource_ValueSet); ok {
		return x.ValueSet
	}
	return nil
}

func (x *ContainedResource) GetVisionPrescription() *VisionPrescription {
	if x, ok := x.GetOneofResource().(*ContainedResource_VisionPrescription); ok {
		return x.VisionPrescription
	}
	return nil
}

type isContainedResource_OneofResource interface {
	isContainedResource_OneofResource()
}

type ContainedResource_Account struct {
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3,oneof"`
}

type ContainedResource_AllergyIntolerance struct {
	AllergyIntolerance *AllergyIntolerance `protobuf:"bytes,2,opt,name=allergy_intolerance,json=allergyIntolerance,proto3,oneof"`
}

type ContainedResource_Appointment struct {
	Appointment *Appointment `protobuf:"bytes,3,opt,name=appointment,proto3,oneof"`
}

type ContainedResource_AppointmentResponse struct {
	AppointmentResponse *AppointmentResponse `protobuf:"bytes,4,opt,name=appointment_response,json=appointmentResponse,proto3,oneof"`
}

type ContainedResource_AuditEvent struct {
	AuditEvent *AuditEvent `protobuf:"bytes,5,opt,name=audit_event,json=auditEvent,proto3,oneof"`
}

type ContainedResource_Basic struct {
	Basic *Basic `protobuf:"bytes,6,opt,name=basic,proto3,oneof"`
}

type ContainedResource_Binary struct {
	Binary *Binary `protobuf:"bytes,7,opt,name=binary,proto3,oneof"`
}

type ContainedResource_BodySite struct {
	BodySite *BodySite `protobuf:"bytes,8,opt,name=body_site,json=bodySite,proto3,oneof"`
}

type ContainedResource_Bundle struct {
	Bundle *Bundle `protobuf:"bytes,9,opt,name=bundle,proto3,oneof"`
}

type ContainedResource_CarePlan struct {
	CarePlan *CarePlan `protobuf:"bytes,10,opt,name=care_plan,json=carePlan,proto3,oneof"`
}

type ContainedResource_Claim struct {
	Claim *Claim `protobuf:"bytes,11,opt,name=claim,proto3,oneof"`
}

type ContainedResource_ClaimResponse struct {
	ClaimResponse *ClaimResponse `protobuf:"bytes,12,opt,name=claim_response,json=claimResponse,proto3,oneof"`
}

type ContainedResource_ClinicalImpression struct {
	ClinicalImpression *ClinicalImpression `protobuf:"bytes,13,opt,name=clinical_impression,json=clinicalImpression,proto3,oneof"`
}

type ContainedResource_Communication struct {
	Communication *Communication `protobuf:"bytes,14,opt,name=communication,proto3,oneof"`
}

type ContainedResource_CommunicationRequest struct {
	CommunicationRequest *CommunicationRequest `protobuf:"bytes,15,opt,name=communication_request,json=communicationRequest,proto3,oneof"`
}

type ContainedResource_Composition struct {
	Composition *Composition `protobuf:"bytes,16,opt,name=composition,proto3,oneof"`
}

type ContainedResource_ConceptMap struct {
	ConceptMap *ConceptMap `protobuf:"bytes,17,opt,name=concept_map,json=conceptMap,proto3,oneof"`
}

type ContainedResource_Condition struct {
	Condition *Condition `protobuf:"bytes,18,opt,name=condition,proto3,oneof"`
}

type ContainedResource_Conformance struct {
	Conformance *Conformance `protobuf:"bytes,19,opt,name=conformance,proto3,oneof"`
}

type ContainedResource_Contract struct {
	Contract *Contract `protobuf:"bytes,20,opt,name=contract,proto3,oneof"`
}

type ContainedResource_Coverage struct {
	Coverage *Coverage `protobuf:"bytes,21,opt,name=coverage,proto3,oneof"`
}

type ContainedResource_DataElement struct {
	DataElement *DataElement `protobuf:"bytes,22,opt,name=data_element,json=dataElement,proto3,oneof"`
}

type ContainedResource_DetectedIssue struct {
	DetectedIssue *DetectedIssue `protobuf:"bytes,23,opt,name=detected_issue,json=detectedIssue,proto3,oneof"`
}

type ContainedResource_Device struct {
	Device *Device `protobuf:"bytes,24,opt,name=device,proto3,oneof"`
}

type ContainedResource_DeviceComponent struct {
	DeviceComponent *DeviceComponent `protobuf:"bytes,25,opt,name=device_component,json=deviceComponent,proto3,oneof"`
}

type ContainedResource_DeviceMetric struct {
	DeviceMetric *DeviceMetric `protobuf:"bytes,26,opt,name=device_metric,json=deviceMetric,proto3,oneof"`
}

type ContainedResource_DeviceUseRequest struct {
	DeviceUseRequest *DeviceUseRequest `protobuf:"bytes,27,opt,name=device_use_request,json=deviceUseRequest,proto3,oneof"`
}

type ContainedResource_DeviceUseStatement struct {
	DeviceUseStatement *DeviceUseStatement `protobuf:"bytes,28,opt,name=device_use_statement,json=deviceUseStatement,proto3,oneof"`
}

type ContainedResource_DiagnosticOrder struct {
	DiagnosticOrder *DiagnosticOrder `protobuf:"bytes,29,opt,name=diagnostic_order,json=diagnosticOrder,proto3,oneof"`
}

type ContainedResource_DiagnosticReport struct {
	DiagnosticReport *DiagnosticReport `protobuf:"bytes,30,opt,name=diagnostic_report,json=diagnosticReport,proto3,oneof"`
}

type ContainedResource_DocumentManifest struct {
	DocumentManifest *DocumentManifest `protobuf:"bytes,31,opt,name=document_manifest,json=documentManifest,proto3,oneof"`
}

type ContainedResource_DocumentReference struct {
	DocumentReference *DocumentReference `protobuf:"bytes,32,opt,name=document_reference,json=documentReference,proto3,oneof"`
}

type ContainedResource_EligibilityRequest struct {
	EligibilityRequest *EligibilityRequest `protobuf:"bytes,33,opt,name=eligibility_request,json=eligibilityRequest,proto3,oneof"`
}

type ContainedResource_EligibilityResponse struct {
	EligibilityResponse *EligibilityResponse `protobuf:"bytes,34,opt,name=eligibility_response,json=eligibilityResponse,proto3,oneof"`
}

type ContainedResource_Encounter struct {
	Encounter *Encounter `protobuf:"bytes,35,opt,name=encounter,proto3,oneof"`
}

type ContainedResource_EnrollmentRequest struct {
	EnrollmentRequest *EnrollmentRequest `protobuf:"bytes,36,opt,name=enrollment_request,json=enrollmentRequest,proto3,oneof"`
}

type ContainedResource_EnrollmentResponse struct {
	EnrollmentResponse *EnrollmentResponse `protobuf:"bytes,37,opt,name=enrollment_response,json=enrollmentResponse,proto3,oneof"`
}

type ContainedResource_EpisodeOfCare struct {
	EpisodeOfCare *EpisodeOfCare `protobuf:"bytes,38,opt,name=episode_of_care,json=episodeOfCare,proto3,oneof"`
}

type ContainedResource_ExplanationOfBenefit struct {
	ExplanationOfBenefit *ExplanationOfBenefit `protobuf:"bytes,39,opt,name=explanation_of_benefit,json=explanationOfBenefit,proto3,oneof"`
}

type ContainedResource_FamilyMemberHistory struct {
	FamilyMemberHistory *FamilyMemberHistory `protobuf:"bytes,40,opt,name=family_member_history,json=familyMemberHistory,proto3,oneof"`
}

type ContainedResource_Flag struct {
	Flag *Flag `protobuf:"bytes,41,opt,name=flag,proto3,oneof"`
}

type ContainedResource_Goal struct {
	Goal *Goal `protobuf:"bytes,42,opt,name=goal,proto3,oneof"`
}

type ContainedResource_Group struct {
	Group *Group `protobuf:"bytes,43,opt,name=group,proto3,oneof"`
}

type ContainedResource_HealthcareService struct {
	HealthcareService *HealthcareService `protobuf:"bytes,44,opt,name=healthcare_service,json=healthcareService,proto3,oneof"`
}

type ContainedResource_ImagingObjectSelection struct {
	ImagingObjectSelection *ImagingObjectSelection `protobuf:"bytes,45,opt,name=imaging_object_selection,json=imagingObjectSelection,proto3,oneof"`
}

type ContainedResource_ImagingStudy struct {
	ImagingStudy *ImagingStudy `protobuf:"bytes,46,opt,name=imaging_study,json=imagingStudy,proto3,oneof"`
}

type ContainedResource_Immunization struct {
	Immunization *Immunization `protobuf:"bytes,47,opt,name=immunization,proto3,oneof"`
}

type ContainedResource_ImmunizationRecommendation struct {
	ImmunizationRecommendation *ImmunizationRecommendation `protobuf:"bytes,48,opt,name=immunization_recommendation,json=immunizationRecommendation,proto3,oneof"`
}

type ContainedResource_ImplementationGuide struct {
	ImplementationGuide *ImplementationGuide `protobuf:"bytes,49,opt,name=implementation_guide,json=implementationGuide,proto3,oneof"`
}

type ContainedResource_List struct {
	List *List `protobuf:"bytes,50,opt,name=list,proto3,oneof"`
}

type ContainedResource_Location struct {
	Location *Location `protobuf:"bytes,51,opt,name=location,proto3,oneof"`
}

type ContainedResource_Media struct {
	Media *Media `protobuf:"bytes,52,opt,name=media,proto3,oneof"`
}

type ContainedResource_Medication struct {
	Medication *Medication `protobuf:"bytes,53,opt,name=medication,proto3,oneof"`
}

type ContainedResource_MedicationAdministration struct {
	MedicationAdministration *MedicationAdministration `protobuf:"bytes,54,opt,name=medication_administration,json=medicationAdministration,proto3,oneof"`
}

type ContainedResource_MedicationDispense struct {
	MedicationDispense *MedicationDispense `protobuf:"bytes,55,opt,name=medication_dispense,json=medicationDispense,proto3,oneof"`
}

type ContainedResource_MedicationOrder struct {
	MedicationOrder *MedicationOrder `protobuf:"bytes,56,opt,name=medication_order,json=medicationOrder,proto3,oneof"`
}

type ContainedResource_MedicationStatement struct {
	MedicationStatement *MedicationStatement `protobuf:"bytes,57,opt,name=medication_statement,json=medicationStatement,proto3,oneof"`
}

type ContainedResource_MessageHeader struct {
	MessageHeader *MessageHeader `protobuf:"bytes,58,opt,name=message_header,json=messageHeader,proto3,oneof"`
}

type ContainedResource_NamingSystem struct {
	NamingSystem *NamingSystem `protobuf:"bytes,59,opt,name=naming_system,json=namingSystem,proto3,oneof"`
}

type ContainedResource_NutritionOrder struct {
	NutritionOrder *NutritionOrder `protobuf:"bytes,60,opt,name=nutrition_order,json=nutritionOrder,proto3,oneof"`
}

type ContainedResource_Observation struct {
	Observation *Observation `protobuf:"bytes,61,opt,name=observation,proto3,oneof"`
}

type ContainedResource_OperationDefinition struct {
	OperationDefinition *OperationDefinition `protobuf:"bytes,62,opt,name=operation_definition,json=operationDefinition,proto3,oneof"`
}

type ContainedResource_OperationOutcome struct {
	OperationOutcome *OperationOutcome `protobuf:"bytes,63,opt,name=operation_outcome,json=operationOutcome,proto3,oneof"`
}

type ContainedResource_Order struct {
	Order *Order `protobuf:"bytes,64,opt,name=order,proto3,oneof"`
}

type ContainedResource_OrderResponse struct {
	OrderResponse *OrderResponse `protobuf:"bytes,65,opt,name=order_response,json=orderResponse,proto3,oneof"`
}

type ContainedResource_Organization struct {
	Organization *Organization `protobuf:"bytes,66,opt,name=organization,proto3,oneof"`
}

type ContainedResource_Parameters struct {
	Parameters *Parameters `protobuf:"bytes,67,opt,name=parameters,proto3,oneof"`
}

type ContainedResource_Patient struct {
	Patient *Patient `protobuf:"bytes,68,opt,name=patient,proto3,oneof"`
}

type ContainedResource_PaymentNotice struct {
	PaymentNotice *PaymentNotice `protobuf:"bytes,69,opt,name=payment_notice,json=paymentNotice,proto3,oneof"`
}

type ContainedResource_PaymentReconciliation struct {
	PaymentReconciliation *PaymentReconciliation `protobuf:"bytes,70,opt,name=payment_reconciliation,json=paymentReconciliation,proto3,oneof"`
}

type ContainedResource_Person struct {
	Person *Person `protobuf:"bytes,71,opt,name=person,proto3,oneof"`
}

type ContainedResource_Practitioner struct {
	Practitioner *Practitioner `protobuf:"bytes,72,opt,name=practitioner,proto3,oneof"`
}

type ContainedResource_Procedure struct {
	Procedure *Procedure `protobuf:"bytes,73,opt,name=procedure,proto3,oneof"`
}

type ContainedResource_ProcedureRequest struct {
	ProcedureRequest *ProcedureRequest `protobuf:"bytes,74,opt,name=procedure_request,json=procedureRequest,proto3,oneof"`
}

type ContainedResource_ProcessRequest struct {
	ProcessRequest *ProcessRequest `protobuf:"bytes,75,opt,name=process_request,json=processRequest,proto3,oneof"`
}

type ContainedResource_ProcessResponse struct {
	ProcessResponse *ProcessResponse `protobuf:"bytes,76,opt,name=process_response,json=processResponse,proto3,oneof"`
}

type ContainedResource_Provenance struct {
	Provenance *Provenance `protobuf:"bytes,77,opt,name=provenance,proto3,oneof"`
}

type ContainedResource_Questionnaire struct {
	Questionnaire *Questionnaire `protobuf:"bytes,78,opt,name=questionnaire,proto3,oneof"`
}

type ContainedResource_QuestionnaireResponse struct {
	QuestionnaireResponse *QuestionnaireResponse `protobuf:"bytes,79,opt,name=questionnaire_response,json=questionnaireResponse,proto3,oneof"`
}

type ContainedResource_ReferralRequest struct {
	ReferralRequest *ReferralRequest `protobuf:"bytes,80,opt,name=referral_request,json=referralRequest,proto3,oneof"`
}

type ContainedResource_RelatedPerson struct {
	RelatedPerson *RelatedPerson `protobuf:"bytes,81,opt,name=related_person,json=relatedPerson,proto3,oneof"`
}

type ContainedResource_RiskAssessment struct {
	RiskAssessment *RiskAssessment `protobuf:"bytes,82,opt,name=risk_assessment,json=riskAssessment,proto3,oneof"`
}

type ContainedResource_Schedule struct {
	Schedule *Schedule `protobuf:"bytes,83,opt,name=schedule,proto3,oneof"`
}

type ContainedResource_SearchParameter struct {
	SearchParameter *SearchParameter `protobuf:"bytes,84,opt,name=search_parameter,json=searchParameter,proto3,oneof"`
}

type ContainedResource_Slot struct {
	Slot *Slot `protobuf:"bytes,85,opt,name=slot,proto3,oneof"`
}

type ContainedResource_Specimen struct {
	Specimen *Specimen `protobuf:"bytes,86,opt,name=specimen,proto3,oneof"`
}

type ContainedResource_StructureDefinition struct {
	StructureDefinition *StructureDefinition `protobuf:"bytes,87,opt,name=structure_definition,json=structureDefinition,proto3,oneof"`
}

type ContainedResource_Subscription struct {
	Subscription *Subscription `protobuf:"bytes,88,opt,name=subscription,proto3,oneof"`
}

type ContainedResource_Substance struct {
	Substance *Substance `protobuf:"bytes,89,opt,name=substance,proto3,oneof"`
}

type ContainedResource_SupplyDelivery struct {
	SupplyDelivery *SupplyDelivery `protobuf:"bytes,90,opt,name=supply_delivery,json=supplyDelivery,proto3,oneof"`
}

type ContainedResource_SupplyRequest struct {
	SupplyRequest *SupplyRequest `protobuf:"bytes,91,opt,name=supply_request,json=supplyRequest,proto3,oneof"`
}

type ContainedResource_TestScript struct {
	TestScript *TestScript `protobuf:"bytes,92,opt,name=test_script,json=testScript,proto3,oneof"`
}

type ContainedResource_ValueSet struct {
	ValueSet *ValueSet `protobuf:"bytes,93,opt,name=value_set,json=valueSet,proto3,oneof"`
}

type ContainedResource_VisionPrescription struct {
	VisionPrescription *VisionPrescription `protobuf:"bytes,94,opt,name=vision_prescription,json=visionPrescription,proto3,oneof"`
}

func (*ContainedResource_Account) isContainedResource_OneofResource() {}

func (*ContainedResource_AllergyIntolerance) isContainedResource_OneofResource() {}

func (*ContainedResource_Appointment) isContainedResource_OneofResource() {}

func (*ContainedResource_AppointmentResponse) isContainedResource_OneofResource() {}

func (*ContainedResource_AuditEvent) isContainedResource_OneofResource() {}

func (*ContainedResource_Basic) isContainedResource_OneofResource() {}

func (*ContainedResource_Binary) isContainedResource_OneofResource() {}

func (*ContainedResource_BodySite) isContainedResource_OneofResource() {}

func (*ContainedResource_Bundle) isContainedResource_OneofResource() {}

func (*ContainedResource_CarePlan) isContainedResource_OneofResource() {}

func (*ContainedResource_Claim) isContainedResource_OneofResource() {}

func (*ContainedResource_ClaimResponse) isContainedResource_OneofResource() {}

func (*ContainedResource_ClinicalImpression) isContainedResource_OneofResource() {}

func (*ContainedResource_Communication) isContainedResource_OneofResource() {}

func (*ContainedResource_CommunicationRequest) isContainedResource_OneofResource() {}

func (*ContainedResource_Composition) isContainedResource_OneofResource() {}

func (*ContainedResource_ConceptMap) isContainedResource_OneofResource() {}

func (*ContainedResource_Condition) isContainedResource_OneofResource() {}

func (*ContainedResource_Conformance) isContainedResource_OneofResource() {}

func (*ContainedResource_Contract) isContainedResource_OneofResource() {}

func (*ContainedResource_Coverage) isContainedResource_OneofResource() {}

func (*ContainedResource_DataElement) isContainedResource_OneofResource() {}

func (*ContainedResource_DetectedIssue) isContainedResource_OneofResource() {}

func (*ContainedResource_Device) isContainedResource_OneofResource() {}

func (*ContainedResource_DeviceComponent) isContainedResource_OneofResource() {}

func (*ContainedResource_DeviceMetric) isContainedResource_OneofResource() {}

func (*ContainedResource_DeviceUseRequest) isContainedResource_OneofResource() {}

func (*ContainedResource_DeviceUseStatement) isContainedResource_OneofResource() {}

func (*ContainedResource_DiagnosticOrder) isContainedResource_OneofResource() {}

func (*ContainedResource_DiagnosticReport) isContainedResource_OneofResource() {}

func (*ContainedResource_DocumentManifest) isContainedResource_OneofResource() {}

func (*ContainedResource_DocumentReference) isContainedResource_OneofResource() {}

func (*ContainedResource_EligibilityRequest) isContainedResource_OneofResource() {}

func (*ContainedResource_EligibilityResponse) isContainedResource_OneofResource() {}

func (*ContainedResource_Encounter) isContainedResource_OneofResource() {}

func (*ContainedResource_EnrollmentRequest) isContainedResource_OneofResource() {}

func (*ContainedResource_EnrollmentResponse) isContainedResource_OneofResource() {}

func (*ContainedResource_EpisodeOfCare) isContainedResource_OneofResource() {}

func (*ContainedResource_ExplanationOfBenefit) isContainedResource_OneofResource() {}

func (*ContainedResource_FamilyMemberHistory) isContainedResource_OneofResource() {}

func (*ContainedResource_Flag) isContainedResource_OneofResource() {}

func (*ContainedResource_Goal) isContainedResource_OneofResource() {}

func (*ContainedResource_Group) isContainedResource_OneofResource() {}

func (*ContainedResource_HealthcareService) isContainedResource_OneofResource() {}

func (*ContainedResource_ImagingObjectSelection) isContainedResource_OneofResource() {}

func (*ContainedResource_ImagingStudy) isContainedResource_OneofResource() {}

func (*ContainedResource_Immunization) isContainedResource_OneofResource() {}

func (*ContainedResource_ImmunizationRecommendation) isContainedResource_OneofResource() {}

func (*ContainedResource_ImplementationGuide) isContainedResource_OneofResource() {}

func (*ContainedResource_List) isContainedResource_OneofResource() {}

func (*ContainedResource_Location) isContainedResource_OneofResource() {}

func (*ContainedResource_Media) isContainedResource_OneofResource() {}

func (*ContainedResource_Medication) isContainedResource_OneofResource() {}

func (*ContainedResource_MedicationAdministration) isContainedResource_OneofResource() {}

func (*ContainedResource_MedicationDispense) isContainedResource_OneofResource() {}

func (*ContainedResource_MedicationOrder) isContainedResource_OneofResource() {}

func (*ContainedResource_MedicationStatement) isContainedResource_OneofResource() {}

func (*ContainedResource_MessageHeader) isContainedResource_OneofResource() {}

func (*ContainedResource_NamingSystem) isContainedResource_OneofResource() {}

func (*ContainedResource_NutritionOrder) isContainedResource_OneofResource() {}

func (*ContainedResource_Observation) isContainedResource_OneofResource() {}

func (*ContainedResource_OperationDefinition) isContainedResource_OneofResource() {}

func (*ContainedResource_OperationOutcome) isContainedResource_OneofResource() {}

func (*ContainedResource_Order) isContainedResource_OneofResource() {}

func (*ContainedResource_OrderResponse) isContainedResource_OneofResource() {}

func (*ContainedResource_Organization) isContainedResource_OneofResource() {}

func (*ContainedResource_Parameters) isContainedResource_OneofResource() {}

func (*ContainedResource_Patient) isContainedResource_OneofResource() {}

func (*ContainedResource_PaymentNotice) isContainedResource_OneofResource() {}

func (*ContainedResource_PaymentReconciliation) isContainedResource_OneofResource() {}

func (*ContainedResource_Person) isContainedResource_OneofResource() {}

func (*ContainedResource_Practitioner) isContainedResource_OneofResource() {}

func (*ContainedResource_Procedure) isContainedResource_OneofResource() {}

func (*ContainedResource_ProcedureRequest) isContainedResource_OneofResource() {}

func (*ContainedResource_ProcessRequest) isContainedResource_OneofResource() {}

func (*ContainedResource_ProcessResponse) isContainedResource_OneofResource() {}

func (*ContainedResource_Provenance) isContainedResource_OneofResource() {}

func (*ContainedResource_Questionnaire) isContainedResource_OneofResource() {}

func (*ContainedResource_QuestionnaireResponse) isContainedResource_OneofResource() {}

func (*ContainedResource_ReferralRequest) isContainedResource_OneofResource() {}

func (*ContainedResource_RelatedPerson) isContainedResource_OneofResource() {}

func (*ContainedResource_RiskAssessment) isContainedResource_OneofResource() {}

func (*ContainedResource_Schedule) isContainedResource_OneofResource() {}

func (*ContainedResource_SearchParameter) isContainedResource_OneofResource() {}

func (*ContainedResource_Slot) isContainedResource_OneofResource() {}

func (*ContainedResource_Specimen) isContainedResource_OneofResource() {}

func (*ContainedResource_StructureDefinition) isContainedResource_OneofResource() {}

func (*ContainedResource_Subscription) isContainedResource_OneofResource() {}

func (*ContainedResource_Substance) isContainedResource_OneofResource() {}

func (*ContainedResource_SupplyDelivery) isContainedResource_OneofResource() {}

func (*ContainedResource_SupplyRequest) isContainedResource_OneofResource() {}

func (*ContainedResource_TestScript) isContainedResource_OneofResource() {}

func (*ContainedResource_ValueSet) isContainedResource_OneofResource() {}

func (*ContainedResource_VisionPrescription) isContainedResource_OneofResource() {}

// Adverse Reaction Events linked to exposure to substance
type AllergyIntolerance_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific substance considered to be responsible for event
	Substance *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	// unlikely | likely | confirmed - clinical certainty about the specific
	// substance
	Certainty *codes_go_proto.AllergyIntoleranceCertaintyCode `protobuf:"bytes,5,opt,name=certainty,proto3" json:"certainty,omitempty"`
	// Clinical symptoms/signs associated with the Event
	Manifestation []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=manifestation,proto3" json:"manifestation,omitempty"`
	// Description of the event as a whole
	Description *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Date(/time) when manifestations showed
	Onset *datatypes_go_proto.DateTime `protobuf:"bytes,8,opt,name=onset,proto3" json:"onset,omitempty"`
	// mild | moderate | severe (of event as a whole)
	Severity *codes_go_proto.AllergyIntoleranceSeverityCode `protobuf:"bytes,9,opt,name=severity,proto3" json:"severity,omitempty"`
	// How the subject was exposed to the substance
	ExposureRoute *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=exposure_route,json=exposureRoute,proto3" json:"exposure_route,omitempty"`
	// Text about event not captured in other fields
	Note *datatypes_go_proto.Annotation `protobuf:"bytes,11,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AllergyIntolerance_Reaction) Reset() {
	*x = AllergyIntolerance_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntolerance_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntolerance_Reaction) ProtoMessage() {}

func (x *AllergyIntolerance_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntolerance_Reaction.ProtoReflect.Descriptor instead.
func (*AllergyIntolerance_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AllergyIntolerance_Reaction) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetSubstance() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetCertainty() *codes_go_proto.AllergyIntoleranceCertaintyCode {
	if x != nil {
		return x.Certainty
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetManifestation() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Manifestation
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetOnset() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetSeverity() *codes_go_proto.AllergyIntoleranceSeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetExposureRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExposureRoute
	}
	return nil
}

func (x *AllergyIntolerance_Reaction) GetNote() *datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// Participants involved in appointment
type Appointment_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Role of participant in the appointment
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	// Person, Location/HealthcareService or Device
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
	// required | optional | information-only
	Required *codes_go_proto.ParticipantRequiredCode `protobuf:"bytes,6,opt,name=required,proto3" json:"required,omitempty"`
	// accepted | declined | tentative | needs-action
	Status *codes_go_proto.ParticipationStatusCode `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Appointment_Participant) Reset() {
	*x = Appointment_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appointment_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appointment_Participant) ProtoMessage() {}

func (x *Appointment_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appointment_Participant.ProtoReflect.Descriptor instead.
func (*Appointment_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Appointment_Participant) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Appointment_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Appointment_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Appointment_Participant) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Appointment_Participant) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Appointment_Participant) GetRequired() *codes_go_proto.ParticipantRequiredCode {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *Appointment_Participant) GetStatus() *codes_go_proto.ParticipationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

// What was done
type AuditEvent_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type/identifier of event
	Type *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// More specific type/id for the event
	Subtype []*datatypes_go_proto.Coding `protobuf:"bytes,5,rep,name=subtype,proto3" json:"subtype,omitempty"`
	// Type of action performed during the event
	Action *codes_go_proto.AuditEventActionCode `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
	// Time when the event occurred on source
	DateTime *datatypes_go_proto.Instant `protobuf:"bytes,7,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	// Whether the event succeeded or failed
	Outcome *codes_go_proto.AuditEventOutcomeCode `protobuf:"bytes,8,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// Description of the event outcome
	OutcomeDesc *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=outcome_desc,json=outcomeDesc,proto3" json:"outcome_desc,omitempty"`
	// The purposeOfUse of the event
	PurposeOfEvent []*datatypes_go_proto.Coding `protobuf:"bytes,10,rep,name=purpose_of_event,json=purposeOfEvent,proto3" json:"purpose_of_event,omitempty"`
}

func (x *AuditEvent_Event) Reset() {
	*x = AuditEvent_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Event) ProtoMessage() {}

func (x *AuditEvent_Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Event.ProtoReflect.Descriptor instead.
func (*AuditEvent_Event) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AuditEvent_Event) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Event) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Event) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Event) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AuditEvent_Event) GetSubtype() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Subtype
	}
	return nil
}

func (x *AuditEvent_Event) GetAction() *codes_go_proto.AuditEventActionCode {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *AuditEvent_Event) GetDateTime() *datatypes_go_proto.Instant {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *AuditEvent_Event) GetOutcome() *codes_go_proto.AuditEventOutcomeCode {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *AuditEvent_Event) GetOutcomeDesc() *datatypes_go_proto.String {
	if x != nil {
		return x.OutcomeDesc
	}
	return nil
}

func (x *AuditEvent_Event) GetPurposeOfEvent() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.PurposeOfEvent
	}
	return nil
}

// A person, a hardware device or software process
type AuditEvent_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// User roles (e.g. local RBAC codes)
	Role []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=role,proto3" json:"role,omitempty"`
	// Direct reference to resource
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	// Unique identifier for the user
	UserId *datatypes_go_proto.Identifier `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Alternative User id e.g. authentication
	AltId *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=alt_id,json=altId,proto3" json:"alt_id,omitempty"`
	// Human-meaningful name for the user
	Name *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// Whether user is initiator
	Requestor *datatypes_go_proto.Boolean `protobuf:"bytes,9,opt,name=requestor,proto3" json:"requestor,omitempty"`
	// Where
	Location *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	// Policy that authorized event
	Policy []*datatypes_go_proto.Uri `protobuf:"bytes,11,rep,name=policy,proto3" json:"policy,omitempty"`
	// Type of media
	Media   *datatypes_go_proto.Coding      `protobuf:"bytes,12,opt,name=media,proto3" json:"media,omitempty"`
	Network *AuditEvent_Participant_Network `protobuf:"bytes,13,opt,name=network,proto3" json:"network,omitempty"`
	// Reason given for this user
	PurposeOfUse []*datatypes_go_proto.Coding `protobuf:"bytes,14,rep,name=purpose_of_use,json=purposeOfUse,proto3" json:"purpose_of_use,omitempty"`
}

func (x *AuditEvent_Participant) Reset() {
	*x = AuditEvent_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Participant) ProtoMessage() {}

func (x *AuditEvent_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Participant.ProtoReflect.Descriptor instead.
func (*AuditEvent_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{4, 1}
}

func (x *AuditEvent_Participant) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Participant) GetRole() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *AuditEvent_Participant) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *AuditEvent_Participant) GetUserId() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *AuditEvent_Participant) GetAltId() *datatypes_go_proto.String {
	if x != nil {
		return x.AltId
	}
	return nil
}

func (x *AuditEvent_Participant) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AuditEvent_Participant) GetRequestor() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Requestor
	}
	return nil
}

func (x *AuditEvent_Participant) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *AuditEvent_Participant) GetPolicy() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *AuditEvent_Participant) GetMedia() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *AuditEvent_Participant) GetNetwork() *AuditEvent_Participant_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *AuditEvent_Participant) GetPurposeOfUse() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.PurposeOfUse
	}
	return nil
}

// Application systems and processes
type AuditEvent_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Logical source location within the enterprise
	Site *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=site,proto3" json:"site,omitempty"`
	// The identity of source detecting the event
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The type of source where event originated
	Type []*datatypes_go_proto.Coding `protobuf:"bytes,6,rep,name=type,proto3" json:"type,omitempty"`
}

func (x *AuditEvent_Source) Reset() {
	*x = AuditEvent_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Source) ProtoMessage() {}

func (x *AuditEvent_Source) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Source.ProtoReflect.Descriptor instead.
func (*AuditEvent_Source) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{4, 2}
}

func (x *AuditEvent_Source) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Source) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Source) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Source) GetSite() *datatypes_go_proto.String {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *AuditEvent_Source) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *AuditEvent_Source) GetType() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

// Specific instances of data or objects that have been accessed
type AuditEvent_Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific instance of object (e.g. versioned)
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Specific instance of resource (e.g. versioned)
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	// Type of object involved
	Type *datatypes_go_proto.Coding `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// What role the Object played
	Role *datatypes_go_proto.Coding `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
	// Life-cycle stage for the object
	Lifecycle *datatypes_go_proto.Coding `protobuf:"bytes,8,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// Security labels applied to the object
	SecurityLabel []*datatypes_go_proto.Coding `protobuf:"bytes,9,rep,name=security_label,json=securityLabel,proto3" json:"security_label,omitempty"`
	// Instance-specific descriptor for Object
	Name *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Descriptive text
	Description *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// Actual query for object
	Query  *datatypes_go_proto.Base64Binary `protobuf:"bytes,12,opt,name=query,proto3" json:"query,omitempty"`
	Detail []*AuditEvent_Object_Detail      `protobuf:"bytes,13,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *AuditEvent_Object) Reset() {
	*x = AuditEvent_Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Object) ProtoMessage() {}

func (x *AuditEvent_Object) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Object.ProtoReflect.Descriptor instead.
func (*AuditEvent_Object) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{4, 3}
}

func (x *AuditEvent_Object) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Object) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Object) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Object) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *AuditEvent_Object) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *AuditEvent_Object) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AuditEvent_Object) GetRole() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *AuditEvent_Object) GetLifecycle() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *AuditEvent_Object) GetSecurityLabel() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.SecurityLabel
	}
	return nil
}

func (x *AuditEvent_Object) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AuditEvent_Object) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *AuditEvent_Object) GetQuery() *datatypes_go_proto.Base64Binary {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *AuditEvent_Object) GetDetail() []*AuditEvent_Object_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Logical network location for application activity
type AuditEvent_Participant_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier for the network access point of the user device
	Address *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// The type of network access point
	Type *codes_go_proto.AuditEventAgentNetworkTypeCode `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AuditEvent_Participant_Network) Reset() {
	*x = AuditEvent_Participant_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Participant_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Participant_Network) ProtoMessage() {}

func (x *AuditEvent_Participant_Network) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Participant_Network.ProtoReflect.Descriptor instead.
func (*AuditEvent_Participant_Network) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *AuditEvent_Participant_Network) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Participant_Network) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Participant_Network) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Participant_Network) GetAddress() *datatypes_go_proto.String {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AuditEvent_Participant_Network) GetType() *codes_go_proto.AuditEventAgentNetworkTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

// Additional Information about the Object
type AuditEvent_Object_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of the property
	Type *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Property value
	Value *datatypes_go_proto.Base64Binary `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AuditEvent_Object_Detail) Reset() {
	*x = AuditEvent_Object_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEvent_Object_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEvent_Object_Detail) ProtoMessage() {}

func (x *AuditEvent_Object_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEvent_Object_Detail.ProtoReflect.Descriptor instead.
func (*AuditEvent_Object_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{4, 3, 0}
}

func (x *AuditEvent_Object_Detail) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEvent_Object_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AuditEvent_Object_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *AuditEvent_Object_Detail) GetType() *datatypes_go_proto.String {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AuditEvent_Object_Detail) GetValue() *datatypes_go_proto.Base64Binary {
	if x != nil {
		return x.Value
	}
	return nil
}

// Links related to this Bundle
type Bundle_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// http://www.iana.org/assignments/link-relations/link-relations.xhtml
	Relation *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
	// Reference details for the link
	Url *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Bundle_Link) Reset() {
	*x = Bundle_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle_Link) ProtoMessage() {}

func (x *Bundle_Link) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle_Link.ProtoReflect.Descriptor instead.
func (*Bundle_Link) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Bundle_Link) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bundle_Link) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bundle_Link) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bundle_Link) GetRelation() *datatypes_go_proto.String {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *Bundle_Link) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

// Entry in the bundle - will have a resource, or information
type Bundle_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Links related to this entry
	Link []*Bundle_Link `protobuf:"bytes,4,rep,name=link,proto3" json:"link,omitempty"`
	// Absolute URL for resource (server address, or UUID/OID)
	FullUrl *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=full_url,json=fullUrl,proto3" json:"full_url,omitempty"`
	// A resource in the bundle
	Resource *ContainedResource     `protobuf:"bytes,6,opt,name=resource,proto3" json:"resource,omitempty"`
	Search   *Bundle_Entry_Search   `protobuf:"bytes,7,opt,name=search,proto3" json:"search,omitempty"`
	Request  *Bundle_Entry_Request  `protobuf:"bytes,8,opt,name=request,proto3" json:"request,omitempty"`
	Response *Bundle_Entry_Response `protobuf:"bytes,9,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *Bundle_Entry) Reset() {
	*x = Bundle_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle_Entry) ProtoMessage() {}

func (x *Bundle_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle_Entry.ProtoReflect.Descriptor instead.
func (*Bundle_Entry) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Bundle_Entry) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bundle_Entry) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bundle_Entry) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bundle_Entry) GetLink() []*Bundle_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Bundle_Entry) GetFullUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.FullUrl
	}
	return nil
}

func (x *Bundle_Entry) GetResource() *ContainedResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Bundle_Entry) GetSearch() *Bundle_Entry_Search {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *Bundle_Entry) GetRequest() *Bundle_Entry_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Bundle_Entry) GetResponse() *Bundle_Entry_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Search related information
type Bundle_Entry_Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// match | include | outcome - why this is in the result set
	Mode *codes_go_proto.SearchEntryModeCode `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Search ranking (between 0 and 1)
	Score *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Bundle_Entry_Search) Reset() {
	*x = Bundle_Entry_Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle_Entry_Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle_Entry_Search) ProtoMessage() {}

func (x *Bundle_Entry_Search) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle_Entry_Search.ProtoReflect.Descriptor instead.
func (*Bundle_Entry_Search) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{8, 1, 0}
}

func (x *Bundle_Entry_Search) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bundle_Entry_Search) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bundle_Entry_Search) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bundle_Entry_Search) GetMode() *codes_go_proto.SearchEntryModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Bundle_Entry_Search) GetScore() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Score
	}
	return nil
}

// Transaction Related Information
type Bundle_Entry_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// GET | POST | PUT | DELETE
	Method *codes_go_proto.HTTPVerbCode `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	// URL for HTTP equivalent of this entry
	Url *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// For managing cache currency
	IfNoneMatch *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=if_none_match,json=ifNoneMatch,proto3" json:"if_none_match,omitempty"`
	// For managing update contention
	IfModifiedSince *datatypes_go_proto.Instant `protobuf:"bytes,7,opt,name=if_modified_since,json=ifModifiedSince,proto3" json:"if_modified_since,omitempty"`
	// For managing update contention
	IfMatch *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=if_match,json=ifMatch,proto3" json:"if_match,omitempty"`
	// For conditional creates
	IfNoneExist *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=if_none_exist,json=ifNoneExist,proto3" json:"if_none_exist,omitempty"`
}

func (x *Bundle_Entry_Request) Reset() {
	*x = Bundle_Entry_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle_Entry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle_Entry_Request) ProtoMessage() {}

func (x *Bundle_Entry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle_Entry_Request.ProtoReflect.Descriptor instead.
func (*Bundle_Entry_Request) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{8, 1, 1}
}

func (x *Bundle_Entry_Request) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bundle_Entry_Request) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bundle_Entry_Request) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bundle_Entry_Request) GetMethod() *codes_go_proto.HTTPVerbCode {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Bundle_Entry_Request) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Bundle_Entry_Request) GetIfNoneMatch() *datatypes_go_proto.String {
	if x != nil {
		return x.IfNoneMatch
	}
	return nil
}

func (x *Bundle_Entry_Request) GetIfModifiedSince() *datatypes_go_proto.Instant {
	if x != nil {
		return x.IfModifiedSince
	}
	return nil
}

func (x *Bundle_Entry_Request) GetIfMatch() *datatypes_go_proto.String {
	if x != nil {
		return x.IfMatch
	}
	return nil
}

func (x *Bundle_Entry_Request) GetIfNoneExist() *datatypes_go_proto.String {
	if x != nil {
		return x.IfNoneExist
	}
	return nil
}

// Transaction Related Information
type Bundle_Entry_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Status return code for entry
	Status *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The location, if the operation returns a location
	Location *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	// The etag for the resource (if relevant)
	Etag *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=etag,proto3" json:"etag,omitempty"`
	// Server's date time modified
	LastModified *datatypes_go_proto.Instant `protobuf:"bytes,7,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
}

func (x *Bundle_Entry_Response) Reset() {
	*x = Bundle_Entry_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle_Entry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle_Entry_Response) ProtoMessage() {}

func (x *Bundle_Entry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle_Entry_Response.ProtoReflect.Descriptor instead.
func (*Bundle_Entry_Response) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{8, 1, 2}
}

func (x *Bundle_Entry_Response) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bundle_Entry_Response) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bundle_Entry_Response) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bundle_Entry_Response) GetStatus() *datatypes_go_proto.String {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Bundle_Entry_Response) GetLocation() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Bundle_Entry_Response) GetEtag() *datatypes_go_proto.String {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *Bundle_Entry_Response) GetLastModified() *datatypes_go_proto.Instant {
	if x != nil {
		return x.LastModified
	}
	return nil
}

// Plans related to this one
type CarePlan_RelatedPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// includes | replaces | fulfills
	Code *codes_go_proto.CarePlanRelationshipCode `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Plan relationship exists with
	Plan *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *CarePlan_RelatedPlan) Reset() {
	*x = CarePlan_RelatedPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlan_RelatedPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlan_RelatedPlan) ProtoMessage() {}

func (x *CarePlan_RelatedPlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlan_RelatedPlan.ProtoReflect.Descriptor instead.
func (*CarePlan_RelatedPlan) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CarePlan_RelatedPlan) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlan_RelatedPlan) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CarePlan_RelatedPlan) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CarePlan_RelatedPlan) GetCode() *codes_go_proto.CarePlanRelationshipCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *CarePlan_RelatedPlan) GetPlan() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Plan
	}
	return nil
}

// Who's involved in plan?
type CarePlan_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of involvement
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Who is involved
	Member *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *CarePlan_Participant) Reset() {
	*x = CarePlan_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlan_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlan_Participant) ProtoMessage() {}

func (x *CarePlan_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlan_Participant.ProtoReflect.Descriptor instead.
func (*CarePlan_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{9, 1}
}

func (x *CarePlan_Participant) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlan_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CarePlan_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CarePlan_Participant) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *CarePlan_Participant) GetMember() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Member
	}
	return nil
}

// Action to occur as part of plan
type CarePlan_Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Appointments, orders, etc.
	ActionResulting []*datatypes_go_proto.Reference `protobuf:"bytes,4,rep,name=action_resulting,json=actionResulting,proto3" json:"action_resulting,omitempty"`
	// Comments about the activity status/progress
	Progress []*datatypes_go_proto.Annotation `protobuf:"bytes,5,rep,name=progress,proto3" json:"progress,omitempty"`
	// Activity details defined in specific resource
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	Detail    *CarePlan_Activity_Detail     `protobuf:"bytes,7,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CarePlan_Activity) Reset() {
	*x = CarePlan_Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlan_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlan_Activity) ProtoMessage() {}

func (x *CarePlan_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlan_Activity.ProtoReflect.Descriptor instead.
func (*CarePlan_Activity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{9, 2}
}

func (x *CarePlan_Activity) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlan_Activity) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CarePlan_Activity) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CarePlan_Activity) GetActionResulting() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ActionResulting
	}
	return nil
}

func (x *CarePlan_Activity) GetProgress() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *CarePlan_Activity) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *CarePlan_Activity) GetDetail() *CarePlan_Activity_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// In-line definition of activity
type CarePlan_Activity_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// diet | drug | encounter | observation | procedure | supply | other
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Detail type of activity
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Why activity should be done
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Condition triggering need for activity
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,7,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Goals this activity relates to
	Goal []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=goal,proto3" json:"goal,omitempty"`
	// not-started | scheduled | in-progress | on-hold | completed | cancelled
	Status *codes_go_proto.CarePlanActivityStatusCode `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	// Reason for current status
	StatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Do NOT do
	Prohibited *datatypes_go_proto.Boolean         `protobuf:"bytes,11,opt,name=prohibited,proto3" json:"prohibited,omitempty"`
	Scheduled  *CarePlan_Activity_Detail_Scheduled `protobuf:"bytes,12,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	// Where it should happen
	Location *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
	// Who will be responsible?
	Performer []*datatypes_go_proto.Reference   `protobuf:"bytes,14,rep,name=performer,proto3" json:"performer,omitempty"`
	Product   *CarePlan_Activity_Detail_Product `protobuf:"bytes,15,opt,name=product,proto3" json:"product,omitempty"`
	// How to consume/day?
	DailyAmount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,16,opt,name=daily_amount,json=dailyAmount,proto3" json:"daily_amount,omitempty"`
	// How much to administer/supply/consume
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,17,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Extra info describing activity to perform
	Description *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CarePlan_Activity_Detail) Reset() {
	*x = CarePlan_Activity_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlan_Activity_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlan_Activity_Detail) ProtoMessage() {}

func (x *CarePlan_Activity_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlan_Activity_Detail.ProtoReflect.Descriptor instead.
func (*CarePlan_Activity_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{9, 2, 0}
}

func (x *CarePlan_Activity_Detail) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetGoal() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetStatus() *codes_go_proto.CarePlanActivityStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetProhibited() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Prohibited
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetScheduled() *CarePlan_Activity_Detail_Scheduled {
	if x != nil {
		return x.Scheduled
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetProduct() *CarePlan_Activity_Detail_Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetDailyAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.DailyAmount
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *CarePlan_Activity_Detail) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

// When activity is to occur
type CarePlan_Activity_Detail_Scheduled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scheduled:
	//	*CarePlan_Activity_Detail_Scheduled_Timing
	//	*CarePlan_Activity_Detail_Scheduled_Period
	//	*CarePlan_Activity_Detail_Scheduled_StringValue
	Scheduled isCarePlan_Activity_Detail_Scheduled_Scheduled `protobuf_oneof:"scheduled"`
}

func (x *CarePlan_Activity_Detail_Scheduled) Reset() {
	*x = CarePlan_Activity_Detail_Scheduled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlan_Activity_Detail_Scheduled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlan_Activity_Detail_Scheduled) ProtoMessage() {}

func (x *CarePlan_Activity_Detail_Scheduled) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlan_Activity_Detail_Scheduled.ProtoReflect.Descriptor instead.
func (*CarePlan_Activity_Detail_Scheduled) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{9, 2, 0, 0}
}

func (m *CarePlan_Activity_Detail_Scheduled) GetScheduled() isCarePlan_Activity_Detail_Scheduled_Scheduled {
	if m != nil {
		return m.Scheduled
	}
	return nil
}

func (x *CarePlan_Activity_Detail_Scheduled) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetScheduled().(*CarePlan_Activity_Detail_Scheduled_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *CarePlan_Activity_Detail_Scheduled) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetScheduled().(*CarePlan_Activity_Detail_Scheduled_Period); ok {
		return x.Period
	}
	return nil
}

func (x *CarePlan_Activity_Detail_Scheduled) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetScheduled().(*CarePlan_Activity_Detail_Scheduled_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isCarePlan_Activity_Detail_Scheduled_Scheduled interface {
	isCarePlan_Activity_Detail_Scheduled_Scheduled()
}

type CarePlan_Activity_Detail_Scheduled_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,1,opt,name=timing,proto3,oneof"`
}

type CarePlan_Activity_Detail_Scheduled_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type CarePlan_Activity_Detail_Scheduled_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*CarePlan_Activity_Detail_Scheduled_Timing) isCarePlan_Activity_Detail_Scheduled_Scheduled() {}

func (*CarePlan_Activity_Detail_Scheduled_Period) isCarePlan_Activity_Detail_Scheduled_Scheduled() {}

func (*CarePlan_Activity_Detail_Scheduled_StringValue) isCarePlan_Activity_Detail_Scheduled_Scheduled() {
}

// What is to be administered/supplied
type CarePlan_Activity_Detail_Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Product:
	//	*CarePlan_Activity_Detail_Product_CodeableConcept
	//	*CarePlan_Activity_Detail_Product_Reference
	Product isCarePlan_Activity_Detail_Product_Product `protobuf_oneof:"product"`
}

func (x *CarePlan_Activity_Detail_Product) Reset() {
	*x = CarePlan_Activity_Detail_Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlan_Activity_Detail_Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlan_Activity_Detail_Product) ProtoMessage() {}

func (x *CarePlan_Activity_Detail_Product) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlan_Activity_Detail_Product.ProtoReflect.Descriptor instead.
func (*CarePlan_Activity_Detail_Product) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{9, 2, 0, 1}
}

func (m *CarePlan_Activity_Detail_Product) GetProduct() isCarePlan_Activity_Detail_Product_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (x *CarePlan_Activity_Detail_Product) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetProduct().(*CarePlan_Activity_Detail_Product_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *CarePlan_Activity_Detail_Product) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetProduct().(*CarePlan_Activity_Detail_Product_Reference); ok {
		return x.Reference
	}
	return nil
}

type isCarePlan_Activity_Detail_Product_Product interface {
	isCarePlan_Activity_Detail_Product_Product()
}

type CarePlan_Activity_Detail_Product_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type CarePlan_Activity_Detail_Product_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*CarePlan_Activity_Detail_Product_CodeableConcept) isCarePlan_Activity_Detail_Product_Product() {
}

func (*CarePlan_Activity_Detail_Product_Reference) isCarePlan_Activity_Detail_Product_Product() {}

// Payee
type Claim_Payee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Party to be paid any benefits payable
	Type *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Provider who is the payee
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	// Organization who is the payee
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=organization,proto3" json:"organization,omitempty"`
	// Other person who is the payee
	Person *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=person,proto3" json:"person,omitempty"`
}

func (x *Claim_Payee) Reset() {
	*x = Claim_Payee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Payee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Payee) ProtoMessage() {}

func (x *Claim_Payee) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Payee.ProtoReflect.Descriptor instead.
func (*Claim_Payee) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Claim_Payee) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Payee) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Payee) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Payee) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim_Payee) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Claim_Payee) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Claim_Payee) GetPerson() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Person
	}
	return nil
}

// Diagnosis
type Claim_Diagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Sequence of diagnosis
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Patient's list of diagnosis
	Diagnosis *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
}

func (x *Claim_Diagnosis) Reset() {
	*x = Claim_Diagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Diagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Diagnosis) ProtoMessage() {}

func (x *Claim_Diagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Diagnosis.ProtoReflect.Descriptor instead.
func (*Claim_Diagnosis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Claim_Diagnosis) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Diagnosis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Diagnosis) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Diagnosis) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Diagnosis) GetDiagnosis() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

// Insurance or medical plan
type Claim_Coverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The focal Coverage
	Focal *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=focal,proto3" json:"focal,omitempty"`
	// Insurance information
	Coverage *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Business agreement
	BusinessArrangement *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=business_arrangement,json=businessArrangement,proto3" json:"business_arrangement,omitempty"`
	// Patient relationship to subscriber
	Relationship *datatypes_go_proto.Coding `protobuf:"bytes,8,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// Pre-Authorization/Determination Reference
	PreAuthRef []*datatypes_go_proto.String `protobuf:"bytes,9,rep,name=pre_auth_ref,json=preAuthRef,proto3" json:"pre_auth_ref,omitempty"`
	// Adjudication results
	ClaimResponse *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=claim_response,json=claimResponse,proto3" json:"claim_response,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
}

func (x *Claim_Coverage) Reset() {
	*x = Claim_Coverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Coverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Coverage) ProtoMessage() {}

func (x *Claim_Coverage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Coverage.ProtoReflect.Descriptor instead.
func (*Claim_Coverage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{10, 2}
}

func (x *Claim_Coverage) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Coverage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Coverage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Coverage) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Coverage) GetFocal() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Focal
	}
	return nil
}

func (x *Claim_Coverage) GetCoverage() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *Claim_Coverage) GetBusinessArrangement() *datatypes_go_proto.String {
	if x != nil {
		return x.BusinessArrangement
	}
	return nil
}

func (x *Claim_Coverage) GetRelationship() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *Claim_Coverage) GetPreAuthRef() []*datatypes_go_proto.String {
	if x != nil {
		return x.PreAuthRef
	}
	return nil
}

func (x *Claim_Coverage) GetClaimResponse() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ClaimResponse
	}
	return nil
}

func (x *Claim_Coverage) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

// Goods and Services
type Claim_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instance
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Group or type of product or service
	Type *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Responsible practitioner
	Provider *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
	// Diagnosis Link
	DiagnosisLinkId []*datatypes_go_proto.PositiveInt `protobuf:"bytes,7,rep,name=diagnosis_link_id,json=diagnosisLinkId,proto3" json:"diagnosis_link_id,omitempty"`
	// Item Code
	Service *datatypes_go_proto.Coding `protobuf:"bytes,8,opt,name=service,proto3" json:"service,omitempty"`
	// Date of Service
	ServiceDate *datatypes_go_proto.Date `protobuf:"bytes,9,opt,name=service_date,json=serviceDate,proto3" json:"service_date,omitempty"`
	// Count of Products or Services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per point
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Price scaling factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,12,opt,name=factor,proto3" json:"factor,omitempty"`
	// Difficulty scaling factor
	Points *datatypes_go_proto.Decimal `protobuf:"bytes,13,opt,name=points,proto3" json:"points,omitempty"`
	// Total item cost
	Net *datatypes_go_proto.Money `protobuf:"bytes,14,opt,name=net,proto3" json:"net,omitempty"`
	// Unique Device Identifier
	Udi *datatypes_go_proto.Coding `protobuf:"bytes,15,opt,name=udi,proto3" json:"udi,omitempty"`
	// Service Location
	BodySite *datatypes_go_proto.Coding `protobuf:"bytes,16,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Service Sub-location
	SubSite []*datatypes_go_proto.Coding `protobuf:"bytes,17,rep,name=sub_site,json=subSite,proto3" json:"sub_site,omitempty"`
	// Service/Product billing modifiers
	Modifier   []*datatypes_go_proto.Coding `protobuf:"bytes,18,rep,name=modifier,proto3" json:"modifier,omitempty"`
	Detail     []*Claim_Item_Detail         `protobuf:"bytes,19,rep,name=detail,proto3" json:"detail,omitempty"`
	Prosthesis *Claim_Item_Prosthesis       `protobuf:"bytes,20,opt,name=prosthesis,proto3" json:"prosthesis,omitempty"`
}

func (x *Claim_Item) Reset() {
	*x = Claim_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item) ProtoMessage() {}

func (x *Claim_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item.ProtoReflect.Descriptor instead.
func (*Claim_Item) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{10, 3}
}

func (x *Claim_Item) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Item) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Item) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Item) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Item) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim_Item) GetProvider() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Claim_Item) GetDiagnosisLinkId() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.DiagnosisLinkId
	}
	return nil
}

func (x *Claim_Item) GetService() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Claim_Item) GetServiceDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ServiceDate
	}
	return nil
}

func (x *Claim_Item) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Claim_Item) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *Claim_Item) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *Claim_Item) GetPoints() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Claim_Item) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Claim_Item) GetUdi() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Udi
	}
	return nil
}

func (x *Claim_Item) GetBodySite() *datatypes_go_proto.Coding {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Claim_Item) GetSubSite() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.SubSite
	}
	return nil
}

func (x *Claim_Item) GetModifier() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *Claim_Item) GetDetail() []*Claim_Item_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *Claim_Item) GetProsthesis() *Claim_Item_Prosthesis {
	if x != nil {
		return x.Prosthesis
	}
	return nil
}

// Only if type = oral
type Claim_MissingTeeth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Tooth Code
	Tooth *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=tooth,proto3" json:"tooth,omitempty"`
	// Reason for missing
	Reason *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// Date of Extraction
	ExtractionDate *datatypes_go_proto.Date `protobuf:"bytes,6,opt,name=extraction_date,json=extractionDate,proto3" json:"extraction_date,omitempty"`
}

func (x *Claim_MissingTeeth) Reset() {
	*x = Claim_MissingTeeth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_MissingTeeth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_MissingTeeth) ProtoMessage() {}

func (x *Claim_MissingTeeth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_MissingTeeth.ProtoReflect.Descriptor instead.
func (*Claim_MissingTeeth) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{10, 4}
}

func (x *Claim_MissingTeeth) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_MissingTeeth) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_MissingTeeth) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_MissingTeeth) GetTooth() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Tooth
	}
	return nil
}

func (x *Claim_MissingTeeth) GetReason() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Claim_MissingTeeth) GetExtractionDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ExtractionDate
	}
	return nil
}

// Additional items
type Claim_Item_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instance
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Group or type of product or service
	Type *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Additional item codes
	Service *datatypes_go_proto.Coding `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
	// Count of Products or Services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per point
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,8,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Price scaling factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,9,opt,name=factor,proto3" json:"factor,omitempty"`
	// Difficulty scaling factor
	Points *datatypes_go_proto.Decimal `protobuf:"bytes,10,opt,name=points,proto3" json:"points,omitempty"`
	// Total additional item cost
	Net *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=net,proto3" json:"net,omitempty"`
	// Unique Device Identifier
	Udi       *datatypes_go_proto.Coding     `protobuf:"bytes,12,opt,name=udi,proto3" json:"udi,omitempty"`
	SubDetail []*Claim_Item_Detail_SubDetail `protobuf:"bytes,13,rep,name=sub_detail,json=subDetail,proto3" json:"sub_detail,omitempty"`
}

func (x *Claim_Item_Detail) Reset() {
	*x = Claim_Item_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item_Detail) ProtoMessage() {}

func (x *Claim_Item_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item_Detail.ProtoReflect.Descriptor instead.
func (*Claim_Item_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{10, 3, 0}
}

func (x *Claim_Item_Detail) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Item_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Item_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Item_Detail) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Item_Detail) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim_Item_Detail) GetService() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Claim_Item_Detail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Claim_Item_Detail) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *Claim_Item_Detail) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *Claim_Item_Detail) GetPoints() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Claim_Item_Detail) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Claim_Item_Detail) GetUdi() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Udi
	}
	return nil
}

func (x *Claim_Item_Detail) GetSubDetail() []*Claim_Item_Detail_SubDetail {
	if x != nil {
		return x.SubDetail
	}
	return nil
}

// Prosthetic details
type Claim_Item_Prosthesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Is this the initial service
	Initial *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=initial,proto3" json:"initial,omitempty"`
	// Initial service Date
	PriorDate *datatypes_go_proto.Date `protobuf:"bytes,5,opt,name=prior_date,json=priorDate,proto3" json:"prior_date,omitempty"`
	// Prosthetic Material
	PriorMaterial *datatypes_go_proto.Coding `protobuf:"bytes,6,opt,name=prior_material,json=priorMaterial,proto3" json:"prior_material,omitempty"`
}

func (x *Claim_Item_Prosthesis) Reset() {
	*x = Claim_Item_Prosthesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item_Prosthesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item_Prosthesis) ProtoMessage() {}

func (x *Claim_Item_Prosthesis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item_Prosthesis.ProtoReflect.Descriptor instead.
func (*Claim_Item_Prosthesis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{10, 3, 1}
}

func (x *Claim_Item_Prosthesis) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Item_Prosthesis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Item_Prosthesis) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Item_Prosthesis) GetInitial() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Initial
	}
	return nil
}

func (x *Claim_Item_Prosthesis) GetPriorDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.PriorDate
	}
	return nil
}

func (x *Claim_Item_Prosthesis) GetPriorMaterial() *datatypes_go_proto.Coding {
	if x != nil {
		return x.PriorMaterial
	}
	return nil
}

// Additional items
type Claim_Item_Detail_SubDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instance
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Type of product or service
	Type *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Additional item codes
	Service *datatypes_go_proto.Coding `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
	// Count of Products or Services
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fee, charge or cost per point
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,8,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Price scaling factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,9,opt,name=factor,proto3" json:"factor,omitempty"`
	// Difficulty scaling factor
	Points *datatypes_go_proto.Decimal `protobuf:"bytes,10,opt,name=points,proto3" json:"points,omitempty"`
	// Net additional item cost
	Net *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=net,proto3" json:"net,omitempty"`
	// Unique Device Identifier
	Udi *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=udi,proto3" json:"udi,omitempty"`
}

func (x *Claim_Item_Detail_SubDetail) Reset() {
	*x = Claim_Item_Detail_SubDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim_Item_Detail_SubDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim_Item_Detail_SubDetail) ProtoMessage() {}

func (x *Claim_Item_Detail_SubDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim_Item_Detail_SubDetail.ProtoReflect.Descriptor instead.
func (*Claim_Item_Detail_SubDetail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{10, 3, 0, 0}
}

func (x *Claim_Item_Detail_SubDetail) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetService() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetPoints() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Claim_Item_Detail_SubDetail) GetUdi() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Udi
	}
	return nil
}

// Line items
type ClaimResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instance
	SequenceLinkId *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence_link_id,json=sequenceLinkId,proto3" json:"sequence_link_id,omitempty"`
	// List of note numbers which apply
	NoteNumber   []*datatypes_go_proto.PositiveInt  `protobuf:"bytes,5,rep,name=note_number,json=noteNumber,proto3" json:"note_number,omitempty"`
	Adjudication []*ClaimResponse_Item_Adjudication `protobuf:"bytes,6,rep,name=adjudication,proto3" json:"adjudication,omitempty"`
	Detail       []*ClaimResponse_Item_Detail       `protobuf:"bytes,7,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ClaimResponse_Item) Reset() {
	*x = ClaimResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_Item) ProtoMessage() {}

func (x *ClaimResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_Item.ProtoReflect.Descriptor instead.
func (*ClaimResponse_Item) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ClaimResponse_Item) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_Item) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_Item) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_Item) GetSequenceLinkId() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.SequenceLinkId
	}
	return nil
}

func (x *ClaimResponse_Item) GetNoteNumber() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.NoteNumber
	}
	return nil
}

func (x *ClaimResponse_Item) GetAdjudication() []*ClaimResponse_Item_Adjudication {
	if x != nil {
		return x.Adjudication
	}
	return nil
}

func (x *ClaimResponse_Item) GetDetail() []*ClaimResponse_Item_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Insurer added line items
type ClaimResponse_AddItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instances
	SequenceLinkId []*datatypes_go_proto.PositiveInt `protobuf:"bytes,4,rep,name=sequence_link_id,json=sequenceLinkId,proto3" json:"sequence_link_id,omitempty"`
	// Group, Service or Product
	Service *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	// Professional fee or Product charge
	Fee *datatypes_go_proto.Money `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	// List of note numbers which apply
	NoteNumberLinkId []*datatypes_go_proto.PositiveInt     `protobuf:"bytes,7,rep,name=note_number_link_id,json=noteNumberLinkId,proto3" json:"note_number_link_id,omitempty"`
	Adjudication     []*ClaimResponse_AddItem_Adjudication `protobuf:"bytes,8,rep,name=adjudication,proto3" json:"adjudication,omitempty"`
	Detail           []*ClaimResponse_AddItem_Detail       `protobuf:"bytes,9,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ClaimResponse_AddItem) Reset() {
	*x = ClaimResponse_AddItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_AddItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_AddItem) ProtoMessage() {}

func (x *ClaimResponse_AddItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_AddItem.ProtoReflect.Descriptor instead.
func (*ClaimResponse_AddItem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 1}
}

func (x *ClaimResponse_AddItem) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_AddItem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_AddItem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_AddItem) GetSequenceLinkId() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.SequenceLinkId
	}
	return nil
}

func (x *ClaimResponse_AddItem) GetService() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ClaimResponse_AddItem) GetFee() *datatypes_go_proto.Money {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *ClaimResponse_AddItem) GetNoteNumberLinkId() []*datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.NoteNumberLinkId
	}
	return nil
}

func (x *ClaimResponse_AddItem) GetAdjudication() []*ClaimResponse_AddItem_Adjudication {
	if x != nil {
		return x.Adjudication
	}
	return nil
}

func (x *ClaimResponse_AddItem) GetDetail() []*ClaimResponse_AddItem_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Processing errors
type ClaimResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Item sequence number
	SequenceLinkId *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence_link_id,json=sequenceLinkId,proto3" json:"sequence_link_id,omitempty"`
	// Detail sequence number
	DetailSequenceLinkId *datatypes_go_proto.PositiveInt `protobuf:"bytes,5,opt,name=detail_sequence_link_id,json=detailSequenceLinkId,proto3" json:"detail_sequence_link_id,omitempty"`
	// Subdetail sequence number
	SubdetailSequenceLinkId *datatypes_go_proto.PositiveInt `protobuf:"bytes,6,opt,name=subdetail_sequence_link_id,json=subdetailSequenceLinkId,proto3" json:"subdetail_sequence_link_id,omitempty"`
	// Error code detailing processing issues
	Code *datatypes_go_proto.Coding `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ClaimResponse_Error) Reset() {
	*x = ClaimResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_Error) ProtoMessage() {}

func (x *ClaimResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_Error.ProtoReflect.Descriptor instead.
func (*ClaimResponse_Error) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 2}
}

func (x *ClaimResponse_Error) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_Error) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_Error) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_Error) GetSequenceLinkId() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.SequenceLinkId
	}
	return nil
}

func (x *ClaimResponse_Error) GetDetailSequenceLinkId() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.DetailSequenceLinkId
	}
	return nil
}

func (x *ClaimResponse_Error) GetSubdetailSequenceLinkId() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.SubdetailSequenceLinkId
	}
	return nil
}

func (x *ClaimResponse_Error) GetCode() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

// Processing notes
type ClaimResponse_Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Note Number for this note
	Number *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// display | print | printoper
	Type *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Note explanatory text
	Text *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ClaimResponse_Note) Reset() {
	*x = ClaimResponse_Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_Note) ProtoMessage() {}

func (x *ClaimResponse_Note) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_Note.ProtoReflect.Descriptor instead.
func (*ClaimResponse_Note) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 3}
}

func (x *ClaimResponse_Note) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_Note) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_Note) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_Note) GetNumber() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *ClaimResponse_Note) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ClaimResponse_Note) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Insurance or medical plan
type ClaimResponse_Coverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instance identifier
	Sequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Is the focal Coverage
	Focal *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=focal,proto3" json:"focal,omitempty"`
	// Insurance information
	Coverage *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=coverage,proto3" json:"coverage,omitempty"`
	// Business agreement
	BusinessArrangement *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=business_arrangement,json=businessArrangement,proto3" json:"business_arrangement,omitempty"`
	// Patient relationship to subscriber
	Relationship *datatypes_go_proto.Coding `protobuf:"bytes,8,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// Pre-Authorization/Determination Reference
	PreAuthRef []*datatypes_go_proto.String `protobuf:"bytes,9,rep,name=pre_auth_ref,json=preAuthRef,proto3" json:"pre_auth_ref,omitempty"`
	// Adjudication results
	ClaimResponse *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=claim_response,json=claimResponse,proto3" json:"claim_response,omitempty"`
	// Original version
	OriginalRuleset *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=original_ruleset,json=originalRuleset,proto3" json:"original_ruleset,omitempty"`
}

func (x *ClaimResponse_Coverage) Reset() {
	*x = ClaimResponse_Coverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_Coverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_Coverage) ProtoMessage() {}

func (x *ClaimResponse_Coverage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_Coverage.ProtoReflect.Descriptor instead.
func (*ClaimResponse_Coverage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 4}
}

func (x *ClaimResponse_Coverage) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetFocal() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Focal
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetCoverage() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetBusinessArrangement() *datatypes_go_proto.String {
	if x != nil {
		return x.BusinessArrangement
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetRelationship() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetPreAuthRef() []*datatypes_go_proto.String {
	if x != nil {
		return x.PreAuthRef
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetClaimResponse() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ClaimResponse
	}
	return nil
}

func (x *ClaimResponse_Coverage) GetOriginalRuleset() *datatypes_go_proto.Coding {
	if x != nil {
		return x.OriginalRuleset
	}
	return nil
}

// Adjudication details
type ClaimResponse_Item_Adjudication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Adjudication category such as co-pay, eligible, benefit, etc.
	Code *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Monetary amount
	Amount *datatypes_go_proto.Money `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Non-monetary value
	Value *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClaimResponse_Item_Adjudication) Reset() {
	*x = ClaimResponse_Item_Adjudication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_Item_Adjudication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_Item_Adjudication) ProtoMessage() {}

func (x *ClaimResponse_Item_Adjudication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_Item_Adjudication.ProtoReflect.Descriptor instead.
func (*ClaimResponse_Item_Adjudication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 0, 0}
}

func (x *ClaimResponse_Item_Adjudication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_Item_Adjudication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_Item_Adjudication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_Item_Adjudication) GetCode() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ClaimResponse_Item_Adjudication) GetAmount() *datatypes_go_proto.Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ClaimResponse_Item_Adjudication) GetValue() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

// Detail line items
type ClaimResponse_Item_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instance
	SequenceLinkId *datatypes_go_proto.PositiveInt           `protobuf:"bytes,4,opt,name=sequence_link_id,json=sequenceLinkId,proto3" json:"sequence_link_id,omitempty"`
	Adjudication   []*ClaimResponse_Item_Detail_Adjudication `protobuf:"bytes,5,rep,name=adjudication,proto3" json:"adjudication,omitempty"`
	SubDetail      []*ClaimResponse_Item_Detail_SubDetail    `protobuf:"bytes,6,rep,name=sub_detail,json=subDetail,proto3" json:"sub_detail,omitempty"`
}

func (x *ClaimResponse_Item_Detail) Reset() {
	*x = ClaimResponse_Item_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_Item_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_Item_Detail) ProtoMessage() {}

func (x *ClaimResponse_Item_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_Item_Detail.ProtoReflect.Descriptor instead.
func (*ClaimResponse_Item_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 0, 1}
}

func (x *ClaimResponse_Item_Detail) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_Item_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_Item_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_Item_Detail) GetSequenceLinkId() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.SequenceLinkId
	}
	return nil
}

func (x *ClaimResponse_Item_Detail) GetAdjudication() []*ClaimResponse_Item_Detail_Adjudication {
	if x != nil {
		return x.Adjudication
	}
	return nil
}

func (x *ClaimResponse_Item_Detail) GetSubDetail() []*ClaimResponse_Item_Detail_SubDetail {
	if x != nil {
		return x.SubDetail
	}
	return nil
}

// Detail adjudication
type ClaimResponse_Item_Detail_Adjudication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Adjudication category such as co-pay, eligible, benefit, etc.
	Code *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Monetary amount
	Amount *datatypes_go_proto.Money `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Non-monetary value
	Value *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClaimResponse_Item_Detail_Adjudication) Reset() {
	*x = ClaimResponse_Item_Detail_Adjudication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_Item_Detail_Adjudication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_Item_Detail_Adjudication) ProtoMessage() {}

func (x *ClaimResponse_Item_Detail_Adjudication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_Item_Detail_Adjudication.ProtoReflect.Descriptor instead.
func (*ClaimResponse_Item_Detail_Adjudication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 0, 1, 0}
}

func (x *ClaimResponse_Item_Detail_Adjudication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_Adjudication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_Adjudication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_Adjudication) GetCode() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_Adjudication) GetAmount() *datatypes_go_proto.Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_Adjudication) GetValue() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

// Subdetail line items
type ClaimResponse_Item_Detail_SubDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instance
	SequenceLinkId *datatypes_go_proto.PositiveInt                     `protobuf:"bytes,4,opt,name=sequence_link_id,json=sequenceLinkId,proto3" json:"sequence_link_id,omitempty"`
	Adjudication   []*ClaimResponse_Item_Detail_SubDetail_Adjudication `protobuf:"bytes,5,rep,name=adjudication,proto3" json:"adjudication,omitempty"`
}

func (x *ClaimResponse_Item_Detail_SubDetail) Reset() {
	*x = ClaimResponse_Item_Detail_SubDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_Item_Detail_SubDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_Item_Detail_SubDetail) ProtoMessage() {}

func (x *ClaimResponse_Item_Detail_SubDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_Item_Detail_SubDetail.ProtoReflect.Descriptor instead.
func (*ClaimResponse_Item_Detail_SubDetail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 0, 1, 1}
}

func (x *ClaimResponse_Item_Detail_SubDetail) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_SubDetail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_SubDetail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_SubDetail) GetSequenceLinkId() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.SequenceLinkId
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_SubDetail) GetAdjudication() []*ClaimResponse_Item_Detail_SubDetail_Adjudication {
	if x != nil {
		return x.Adjudication
	}
	return nil
}

// Subdetail adjudication
type ClaimResponse_Item_Detail_SubDetail_Adjudication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Adjudication category such as co-pay, eligible, benefit, etc.
	Code *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Monetary amount
	Amount *datatypes_go_proto.Money `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Non-monetary value
	Value *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClaimResponse_Item_Detail_SubDetail_Adjudication) Reset() {
	*x = ClaimResponse_Item_Detail_SubDetail_Adjudication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_Item_Detail_SubDetail_Adjudication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_Item_Detail_SubDetail_Adjudication) ProtoMessage() {}

func (x *ClaimResponse_Item_Detail_SubDetail_Adjudication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_Item_Detail_SubDetail_Adjudication.ProtoReflect.Descriptor instead.
func (*ClaimResponse_Item_Detail_SubDetail_Adjudication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 0, 1, 1, 0}
}

func (x *ClaimResponse_Item_Detail_SubDetail_Adjudication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_SubDetail_Adjudication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_SubDetail_Adjudication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_SubDetail_Adjudication) GetCode() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_SubDetail_Adjudication) GetAmount() *datatypes_go_proto.Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ClaimResponse_Item_Detail_SubDetail_Adjudication) GetValue() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

// Added items adjudication
type ClaimResponse_AddItem_Adjudication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Adjudication category such as co-pay, eligible, benefit, etc.
	Code *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Monetary amount
	Amount *datatypes_go_proto.Money `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Non-monetary value
	Value *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClaimResponse_AddItem_Adjudication) Reset() {
	*x = ClaimResponse_AddItem_Adjudication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_AddItem_Adjudication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_AddItem_Adjudication) ProtoMessage() {}

func (x *ClaimResponse_AddItem_Adjudication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_AddItem_Adjudication.ProtoReflect.Descriptor instead.
func (*ClaimResponse_AddItem_Adjudication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 1, 0}
}

func (x *ClaimResponse_AddItem_Adjudication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_AddItem_Adjudication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_AddItem_Adjudication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_AddItem_Adjudication) GetCode() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ClaimResponse_AddItem_Adjudication) GetAmount() *datatypes_go_proto.Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ClaimResponse_AddItem_Adjudication) GetValue() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

// Added items details
type ClaimResponse_AddItem_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service or Product
	Service *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	// Professional fee or Product charge
	Fee          *datatypes_go_proto.Money                    `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
	Adjudication []*ClaimResponse_AddItem_Detail_Adjudication `protobuf:"bytes,6,rep,name=adjudication,proto3" json:"adjudication,omitempty"`
}

func (x *ClaimResponse_AddItem_Detail) Reset() {
	*x = ClaimResponse_AddItem_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_AddItem_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_AddItem_Detail) ProtoMessage() {}

func (x *ClaimResponse_AddItem_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_AddItem_Detail.ProtoReflect.Descriptor instead.
func (*ClaimResponse_AddItem_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 1, 1}
}

func (x *ClaimResponse_AddItem_Detail) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail) GetService() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail) GetFee() *datatypes_go_proto.Money {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail) GetAdjudication() []*ClaimResponse_AddItem_Detail_Adjudication {
	if x != nil {
		return x.Adjudication
	}
	return nil
}

// Added items detail adjudication
type ClaimResponse_AddItem_Detail_Adjudication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Adjudication category such as co-pay, eligible, benefit, etc.
	Code *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Monetary amount
	Amount *datatypes_go_proto.Money `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Non-monetary value
	Value *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClaimResponse_AddItem_Detail_Adjudication) Reset() {
	*x = ClaimResponse_AddItem_Detail_Adjudication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimResponse_AddItem_Detail_Adjudication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimResponse_AddItem_Detail_Adjudication) ProtoMessage() {}

func (x *ClaimResponse_AddItem_Detail_Adjudication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimResponse_AddItem_Detail_Adjudication.ProtoReflect.Descriptor instead.
func (*ClaimResponse_AddItem_Detail_Adjudication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{11, 1, 1, 0}
}

func (x *ClaimResponse_AddItem_Detail_Adjudication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail_Adjudication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail_Adjudication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail_Adjudication) GetCode() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail_Adjudication) GetAmount() *datatypes_go_proto.Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ClaimResponse_AddItem_Detail_Adjudication) GetValue() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

// Request or event that necessitated this assessment
type ClinicalImpression_Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Trigger:
	//	*ClinicalImpression_Trigger_CodeableConcept
	//	*ClinicalImpression_Trigger_Reference
	Trigger isClinicalImpression_Trigger_Trigger `protobuf_oneof:"trigger"`
}

func (x *ClinicalImpression_Trigger) Reset() {
	*x = ClinicalImpression_Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalImpression_Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalImpression_Trigger) ProtoMessage() {}

func (x *ClinicalImpression_Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalImpression_Trigger.ProtoReflect.Descriptor instead.
func (*ClinicalImpression_Trigger) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{12, 0}
}

func (m *ClinicalImpression_Trigger) GetTrigger() isClinicalImpression_Trigger_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (x *ClinicalImpression_Trigger) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetTrigger().(*ClinicalImpression_Trigger_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ClinicalImpression_Trigger) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetTrigger().(*ClinicalImpression_Trigger_Reference); ok {
		return x.Reference
	}
	return nil
}

type isClinicalImpression_Trigger_Trigger interface {
	isClinicalImpression_Trigger_Trigger()
}

type ClinicalImpression_Trigger_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ClinicalImpression_Trigger_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ClinicalImpression_Trigger_CodeableConcept) isClinicalImpression_Trigger_Trigger() {}

func (*ClinicalImpression_Trigger_Reference) isClinicalImpression_Trigger_Trigger() {}

// One or more sets of investigations (signs, symptions, etc.)
type ClinicalImpression_Investigations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A name/code for the set
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Record of a specific investigation
	Item []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *ClinicalImpression_Investigations) Reset() {
	*x = ClinicalImpression_Investigations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalImpression_Investigations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalImpression_Investigations) ProtoMessage() {}

func (x *ClinicalImpression_Investigations) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalImpression_Investigations.ProtoReflect.Descriptor instead.
func (*ClinicalImpression_Investigations) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ClinicalImpression_Investigations) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalImpression_Investigations) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalImpression_Investigations) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalImpression_Investigations) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ClinicalImpression_Investigations) GetItem() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Item
	}
	return nil
}

// Possible or likely findings and diagnoses
type ClinicalImpression_Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific text or code for finding
	Item *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// Which investigations support finding
	Cause *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (x *ClinicalImpression_Finding) Reset() {
	*x = ClinicalImpression_Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalImpression_Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalImpression_Finding) ProtoMessage() {}

func (x *ClinicalImpression_Finding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalImpression_Finding.ProtoReflect.Descriptor instead.
func (*ClinicalImpression_Finding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{12, 2}
}

func (x *ClinicalImpression_Finding) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalImpression_Finding) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalImpression_Finding) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalImpression_Finding) GetItem() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ClinicalImpression_Finding) GetCause() *datatypes_go_proto.String {
	if x != nil {
		return x.Cause
	}
	return nil
}

// Diagnosis considered not possible
type ClinicalImpression_RuledOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specific text of code for diagnosis
	Item *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// Grounds for elimination
	Reason *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ClinicalImpression_RuledOut) Reset() {
	*x = ClinicalImpression_RuledOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClinicalImpression_RuledOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClinicalImpression_RuledOut) ProtoMessage() {}

func (x *ClinicalImpression_RuledOut) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClinicalImpression_RuledOut.ProtoReflect.Descriptor instead.
func (*ClinicalImpression_RuledOut) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{12, 3}
}

func (x *ClinicalImpression_RuledOut) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClinicalImpression_RuledOut) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ClinicalImpression_RuledOut) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ClinicalImpression_RuledOut) GetItem() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ClinicalImpression_RuledOut) GetReason() *datatypes_go_proto.String {
	if x != nil {
		return x.Reason
	}
	return nil
}

// Message payload
type Communication_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *Communication_Payload_Content  `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Communication_Payload) Reset() {
	*x = Communication_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Communication_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Communication_Payload) ProtoMessage() {}

func (x *Communication_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Communication_Payload.ProtoReflect.Descriptor instead.
func (*Communication_Payload) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Communication_Payload) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Communication_Payload) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Communication_Payload) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Communication_Payload) GetContent() *Communication_Payload_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// Message part content
type Communication_Payload_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Communication_Payload_Content_StringValue
	//	*Communication_Payload_Content_Attachment
	//	*Communication_Payload_Content_Reference
	Content isCommunication_Payload_Content_Content `protobuf_oneof:"content"`
}

func (x *Communication_Payload_Content) Reset() {
	*x = Communication_Payload_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Communication_Payload_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Communication_Payload_Content) ProtoMessage() {}

func (x *Communication_Payload_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Communication_Payload_Content.ProtoReflect.Descriptor instead.
func (*Communication_Payload_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{13, 0, 0}
}

func (m *Communication_Payload_Content) GetContent() isCommunication_Payload_Content_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Communication_Payload_Content) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetContent().(*Communication_Payload_Content_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Communication_Payload_Content) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetContent().(*Communication_Payload_Content_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Communication_Payload_Content) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetContent().(*Communication_Payload_Content_Reference); ok {
		return x.Reference
	}
	return nil
}

type isCommunication_Payload_Content_Content interface {
	isCommunication_Payload_Content_Content()
}

type Communication_Payload_Content_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type Communication_Payload_Content_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,2,opt,name=attachment,proto3,oneof"`
}

type Communication_Payload_Content_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=reference,proto3,oneof"`
}

func (*Communication_Payload_Content_StringValue) isCommunication_Payload_Content_Content() {}

func (*Communication_Payload_Content_Attachment) isCommunication_Payload_Content_Content() {}

func (*Communication_Payload_Content_Reference) isCommunication_Payload_Content_Content() {}

// Message payload
type CommunicationRequest_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension       `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *CommunicationRequest_Payload_Content `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CommunicationRequest_Payload) Reset() {
	*x = CommunicationRequest_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequest_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequest_Payload) ProtoMessage() {}

func (x *CommunicationRequest_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequest_Payload.ProtoReflect.Descriptor instead.
func (*CommunicationRequest_Payload) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CommunicationRequest_Payload) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationRequest_Payload) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CommunicationRequest_Payload) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *CommunicationRequest_Payload) GetContent() *CommunicationRequest_Payload_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// When scheduled
type CommunicationRequest_Scheduled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scheduled:
	//	*CommunicationRequest_Scheduled_DateTime
	//	*CommunicationRequest_Scheduled_Period
	Scheduled isCommunicationRequest_Scheduled_Scheduled `protobuf_oneof:"scheduled"`
}

func (x *CommunicationRequest_Scheduled) Reset() {
	*x = CommunicationRequest_Scheduled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequest_Scheduled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequest_Scheduled) ProtoMessage() {}

func (x *CommunicationRequest_Scheduled) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequest_Scheduled.ProtoReflect.Descriptor instead.
func (*CommunicationRequest_Scheduled) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{14, 1}
}

func (m *CommunicationRequest_Scheduled) GetScheduled() isCommunicationRequest_Scheduled_Scheduled {
	if m != nil {
		return m.Scheduled
	}
	return nil
}

func (x *CommunicationRequest_Scheduled) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetScheduled().(*CommunicationRequest_Scheduled_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *CommunicationRequest_Scheduled) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetScheduled().(*CommunicationRequest_Scheduled_Period); ok {
		return x.Period
	}
	return nil
}

type isCommunicationRequest_Scheduled_Scheduled interface {
	isCommunicationRequest_Scheduled_Scheduled()
}

type CommunicationRequest_Scheduled_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type CommunicationRequest_Scheduled_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*CommunicationRequest_Scheduled_DateTime) isCommunicationRequest_Scheduled_Scheduled() {}

func (*CommunicationRequest_Scheduled_Period) isCommunicationRequest_Scheduled_Scheduled() {}

// Message part content
type CommunicationRequest_Payload_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*CommunicationRequest_Payload_Content_StringValue
	//	*CommunicationRequest_Payload_Content_Attachment
	//	*CommunicationRequest_Payload_Content_Reference
	Content isCommunicationRequest_Payload_Content_Content `protobuf_oneof:"content"`
}

func (x *CommunicationRequest_Payload_Content) Reset() {
	*x = CommunicationRequest_Payload_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequest_Payload_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequest_Payload_Content) ProtoMessage() {}

func (x *CommunicationRequest_Payload_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequest_Payload_Content.ProtoReflect.Descriptor instead.
func (*CommunicationRequest_Payload_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (m *CommunicationRequest_Payload_Content) GetContent() isCommunicationRequest_Payload_Content_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *CommunicationRequest_Payload_Content) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetContent().(*CommunicationRequest_Payload_Content_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *CommunicationRequest_Payload_Content) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetContent().(*CommunicationRequest_Payload_Content_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *CommunicationRequest_Payload_Content) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetContent().(*CommunicationRequest_Payload_Content_Reference); ok {
		return x.Reference
	}
	return nil
}

type isCommunicationRequest_Payload_Content_Content interface {
	isCommunicationRequest_Payload_Content_Content()
}

type CommunicationRequest_Payload_Content_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type CommunicationRequest_Payload_Content_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,2,opt,name=attachment,proto3,oneof"`
}

type CommunicationRequest_Payload_Content_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=reference,proto3,oneof"`
}

func (*CommunicationRequest_Payload_Content_StringValue) isCommunicationRequest_Payload_Content_Content() {
}

func (*CommunicationRequest_Payload_Content_Attachment) isCommunicationRequest_Payload_Content_Content() {
}

func (*CommunicationRequest_Payload_Content_Reference) isCommunicationRequest_Payload_Content_Content() {
}

// Attests to accuracy of composition
type Composition_Attester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// personal | professional | legal | official
	Mode []*codes_go_proto.CompositionAttestationModeCode `protobuf:"bytes,4,rep,name=mode,proto3" json:"mode,omitempty"`
	// When composition attested
	Time *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	// Who attested the composition
	Party *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *Composition_Attester) Reset() {
	*x = Composition_Attester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Composition_Attester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Composition_Attester) ProtoMessage() {}

func (x *Composition_Attester) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Composition_Attester.ProtoReflect.Descriptor instead.
func (*Composition_Attester) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Composition_Attester) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Composition_Attester) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Composition_Attester) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Composition_Attester) GetMode() []*codes_go_proto.CompositionAttestationModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Composition_Attester) GetTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Composition_Attester) GetParty() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Party
	}
	return nil
}

// The clinical service(s) being documented
type Composition_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code(s) that apply to the event being documented
	Code []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=code,proto3" json:"code,omitempty"`
	// The period covered by the documentation
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// The event(s) being documented
	Detail []*datatypes_go_proto.Reference `protobuf:"bytes,6,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *Composition_Event) Reset() {
	*x = Composition_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Composition_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Composition_Event) ProtoMessage() {}

func (x *Composition_Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Composition_Event.ProtoReflect.Descriptor instead.
func (*Composition_Event) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Composition_Event) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Composition_Event) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Composition_Event) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Composition_Event) GetCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Composition_Event) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Composition_Event) GetDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Composition is broken into sections
type Composition_Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Label for section (e.g. for ToC)
	Title *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Classification of section (recommended)
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Text summary of the section, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	// working | snapshot | changes
	Mode *codes_go_proto.ListModeCode `protobuf:"bytes,7,opt,name=mode,proto3" json:"mode,omitempty"`
	// Order of section entries
	OrderedBy *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=ordered_by,json=orderedBy,proto3" json:"ordered_by,omitempty"`
	// A reference to data that supports this section
	Entry []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=entry,proto3" json:"entry,omitempty"`
	// Why the section is empty
	EmptyReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=empty_reason,json=emptyReason,proto3" json:"empty_reason,omitempty"`
	// Nested Section
	Section []*Composition_Section `protobuf:"bytes,11,rep,name=section,proto3" json:"section,omitempty"`
}

func (x *Composition_Section) Reset() {
	*x = Composition_Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Composition_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Composition_Section) ProtoMessage() {}

func (x *Composition_Section) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Composition_Section.ProtoReflect.Descriptor instead.
func (*Composition_Section) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{15, 2}
}

func (x *Composition_Section) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Composition_Section) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Composition_Section) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Composition_Section) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Composition_Section) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Composition_Section) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Composition_Section) GetMode() *codes_go_proto.ListModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Composition_Section) GetOrderedBy() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OrderedBy
	}
	return nil
}

func (x *Composition_Section) GetEntry() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *Composition_Section) GetEmptyReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.EmptyReason
	}
	return nil
}

func (x *Composition_Section) GetSection() []*Composition_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

// Contact details of the publisher
type ConceptMap_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of a individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *ConceptMap_Contact) Reset() {
	*x = ConceptMap_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMap_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMap_Contact) ProtoMessage() {}

func (x *ConceptMap_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMap_Contact.ProtoReflect.Descriptor instead.
func (*ConceptMap_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ConceptMap_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConceptMap_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ConceptMap_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ConceptMap_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConceptMap_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// Identifies the source of the concepts which are being mapped
type ConceptMap_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ConceptMap_Source_Uri
	//	*ConceptMap_Source_Reference
	Source isConceptMap_Source_Source `protobuf_oneof:"source"`
}

func (x *ConceptMap_Source) Reset() {
	*x = ConceptMap_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMap_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMap_Source) ProtoMessage() {}

func (x *ConceptMap_Source) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMap_Source.ProtoReflect.Descriptor instead.
func (*ConceptMap_Source) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{16, 1}
}

func (m *ConceptMap_Source) GetSource() isConceptMap_Source_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ConceptMap_Source) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetSource().(*ConceptMap_Source_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ConceptMap_Source) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetSource().(*ConceptMap_Source_Reference); ok {
		return x.Reference
	}
	return nil
}

type isConceptMap_Source_Source interface {
	isConceptMap_Source_Source()
}

type ConceptMap_Source_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ConceptMap_Source_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ConceptMap_Source_Uri) isConceptMap_Source_Source() {}

func (*ConceptMap_Source_Reference) isConceptMap_Source_Source() {}

// Provides context to the mappings
type ConceptMap_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*ConceptMap_Target_Uri
	//	*ConceptMap_Target_Reference
	Target isConceptMap_Target_Target `protobuf_oneof:"target"`
}

func (x *ConceptMap_Target) Reset() {
	*x = ConceptMap_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMap_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMap_Target) ProtoMessage() {}

func (x *ConceptMap_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMap_Target.ProtoReflect.Descriptor instead.
func (*ConceptMap_Target) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{16, 2}
}

func (m *ConceptMap_Target) GetTarget() isConceptMap_Target_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *ConceptMap_Target) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetTarget().(*ConceptMap_Target_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ConceptMap_Target) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetTarget().(*ConceptMap_Target_Reference); ok {
		return x.Reference
	}
	return nil
}

type isConceptMap_Target_Target interface {
	isConceptMap_Target_Target()
}

type ConceptMap_Target_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ConceptMap_Target_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ConceptMap_Target_Uri) isConceptMap_Target_Target() {}

func (*ConceptMap_Target_Reference) isConceptMap_Target_Target() {}

// Mappings for a concept from the source set
type ConceptMap_Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code System (if value set crosses code systems)
	CodeSystem *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=code_system,json=codeSystem,proto3" json:"code_system,omitempty"`
	// Identifies element being mapped
	Code   *datatypes_go_proto.Code     `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Target []*ConceptMap_Element_Target `protobuf:"bytes,6,rep,name=target,proto3" json:"target,omitempty"`
}

func (x *ConceptMap_Element) Reset() {
	*x = ConceptMap_Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMap_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMap_Element) ProtoMessage() {}

func (x *ConceptMap_Element) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMap_Element.ProtoReflect.Descriptor instead.
func (*ConceptMap_Element) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{16, 3}
}

func (x *ConceptMap_Element) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConceptMap_Element) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ConceptMap_Element) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ConceptMap_Element) GetCodeSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.CodeSystem
	}
	return nil
}

func (x *ConceptMap_Element) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ConceptMap_Element) GetTarget() []*ConceptMap_Element_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

// Concept in target system for element
type ConceptMap_Element_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// System of the target (if necessary)
	CodeSystem *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=code_system,json=codeSystem,proto3" json:"code_system,omitempty"`
	// Code that identifies the target element
	Code *datatypes_go_proto.Code `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// equivalent | equal | wider | subsumes | narrower | specializes |
	// inexact | unmatched | disjoint
	Equivalence *codes_go_proto.ConceptMapEquivalenceCode `protobuf:"bytes,6,opt,name=equivalence,proto3" json:"equivalence,omitempty"`
	// Description of status/issues in mapping
	Comments  *datatypes_go_proto.String             `protobuf:"bytes,7,opt,name=comments,proto3" json:"comments,omitempty"`
	DependsOn []*ConceptMap_Element_Target_DependsOn `protobuf:"bytes,8,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	// Other concepts that this mapping also produces
	Product []*ConceptMap_Element_Target_DependsOn `protobuf:"bytes,9,rep,name=product,proto3" json:"product,omitempty"`
}

func (x *ConceptMap_Element_Target) Reset() {
	*x = ConceptMap_Element_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMap_Element_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMap_Element_Target) ProtoMessage() {}

func (x *ConceptMap_Element_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMap_Element_Target.ProtoReflect.Descriptor instead.
func (*ConceptMap_Element_Target) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{16, 3, 0}
}

func (x *ConceptMap_Element_Target) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConceptMap_Element_Target) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ConceptMap_Element_Target) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ConceptMap_Element_Target) GetCodeSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.CodeSystem
	}
	return nil
}

func (x *ConceptMap_Element_Target) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ConceptMap_Element_Target) GetEquivalence() *codes_go_proto.ConceptMapEquivalenceCode {
	if x != nil {
		return x.Equivalence
	}
	return nil
}

func (x *ConceptMap_Element_Target) GetComments() *datatypes_go_proto.String {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ConceptMap_Element_Target) GetDependsOn() []*ConceptMap_Element_Target_DependsOn {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *ConceptMap_Element_Target) GetProduct() []*ConceptMap_Element_Target_DependsOn {
	if x != nil {
		return x.Product
	}
	return nil
}

// Other elements required for this mapping (from context)
type ConceptMap_Element_Target_DependsOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to element/field/ValueSet mapping depends on
	Element *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=element,proto3" json:"element,omitempty"`
	// Code System (if necessary)
	CodeSystem *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=code_system,json=codeSystem,proto3" json:"code_system,omitempty"`
	// Value of the referenced element
	Code *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ConceptMap_Element_Target_DependsOn) Reset() {
	*x = ConceptMap_Element_Target_DependsOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMap_Element_Target_DependsOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMap_Element_Target_DependsOn) ProtoMessage() {}

func (x *ConceptMap_Element_Target_DependsOn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMap_Element_Target_DependsOn.ProtoReflect.Descriptor instead.
func (*ConceptMap_Element_Target_DependsOn) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{16, 3, 0, 0}
}

func (x *ConceptMap_Element_Target_DependsOn) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConceptMap_Element_Target_DependsOn) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ConceptMap_Element_Target_DependsOn) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ConceptMap_Element_Target_DependsOn) GetElement() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *ConceptMap_Element_Target_DependsOn) GetCodeSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.CodeSystem
	}
	return nil
}

func (x *ConceptMap_Element_Target_DependsOn) GetCode() *datatypes_go_proto.String {
	if x != nil {
		return x.Code
	}
	return nil
}

// Estimated or actual date,  date-time, or age
type Condition_Onset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Onset:
	//	*Condition_Onset_DateTime
	//	*Condition_Onset_Quantity
	//	*Condition_Onset_Period
	//	*Condition_Onset_Range
	//	*Condition_Onset_StringValue
	Onset isCondition_Onset_Onset `protobuf_oneof:"onset"`
}

func (x *Condition_Onset) Reset() {
	*x = Condition_Onset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Onset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Onset) ProtoMessage() {}

func (x *Condition_Onset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Onset.ProtoReflect.Descriptor instead.
func (*Condition_Onset) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{17, 0}
}

func (m *Condition_Onset) GetOnset() isCondition_Onset_Onset {
	if m != nil {
		return m.Onset
	}
	return nil
}

func (x *Condition_Onset) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetOnset().(*Condition_Onset_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Condition_Onset) GetQuantity() *datatypes_go_proto.Age {
	if x, ok := x.GetOnset().(*Condition_Onset_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Condition_Onset) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetOnset().(*Condition_Onset_Period); ok {
		return x.Period
	}
	return nil
}

func (x *Condition_Onset) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetOnset().(*Condition_Onset_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Condition_Onset) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetOnset().(*Condition_Onset_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isCondition_Onset_Onset interface {
	isCondition_Onset_Onset()
}

type Condition_Onset_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Condition_Onset_Quantity struct {
	Quantity *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type Condition_Onset_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type Condition_Onset_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type Condition_Onset_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*Condition_Onset_DateTime) isCondition_Onset_Onset() {}

func (*Condition_Onset_Quantity) isCondition_Onset_Onset() {}

func (*Condition_Onset_Period) isCondition_Onset_Onset() {}

func (*Condition_Onset_Range) isCondition_Onset_Onset() {}

func (*Condition_Onset_StringValue) isCondition_Onset_Onset() {}

// If/when in resolution/remission
type Condition_Abatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Abatement:
	//	*Condition_Abatement_DateTime
	//	*Condition_Abatement_Quantity
	//	*Condition_Abatement_Boolean
	//	*Condition_Abatement_Period
	//	*Condition_Abatement_Range
	//	*Condition_Abatement_StringValue
	Abatement isCondition_Abatement_Abatement `protobuf_oneof:"abatement"`
}

func (x *Condition_Abatement) Reset() {
	*x = Condition_Abatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Abatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Abatement) ProtoMessage() {}

func (x *Condition_Abatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Abatement.ProtoReflect.Descriptor instead.
func (*Condition_Abatement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{17, 1}
}

func (m *Condition_Abatement) GetAbatement() isCondition_Abatement_Abatement {
	if m != nil {
		return m.Abatement
	}
	return nil
}

func (x *Condition_Abatement) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetAbatement().(*Condition_Abatement_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Condition_Abatement) GetQuantity() *datatypes_go_proto.Age {
	if x, ok := x.GetAbatement().(*Condition_Abatement_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Condition_Abatement) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetAbatement().(*Condition_Abatement_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Condition_Abatement) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetAbatement().(*Condition_Abatement_Period); ok {
		return x.Period
	}
	return nil
}

func (x *Condition_Abatement) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetAbatement().(*Condition_Abatement_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Condition_Abatement) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetAbatement().(*Condition_Abatement_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isCondition_Abatement_Abatement interface {
	isCondition_Abatement_Abatement()
}

type Condition_Abatement_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Condition_Abatement_Quantity struct {
	Quantity *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type Condition_Abatement_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=boolean,proto3,oneof"`
}

type Condition_Abatement_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,4,opt,name=period,proto3,oneof"`
}

type Condition_Abatement_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

type Condition_Abatement_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=string_value,json=string,proto3,oneof"`
}

func (*Condition_Abatement_DateTime) isCondition_Abatement_Abatement() {}

func (*Condition_Abatement_Quantity) isCondition_Abatement_Abatement() {}

func (*Condition_Abatement_Boolean) isCondition_Abatement_Abatement() {}

func (*Condition_Abatement_Period) isCondition_Abatement_Abatement() {}

func (*Condition_Abatement_Range) isCondition_Abatement_Abatement() {}

func (*Condition_Abatement_StringValue) isCondition_Abatement_Abatement() {}

// Stage/grade, usually assessed formally
type Condition_Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Simple summary (disease specific)
	Summary *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	// Formal record of assessment
	Assessment []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=assessment,proto3" json:"assessment,omitempty"`
}

func (x *Condition_Stage) Reset() {
	*x = Condition_Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Stage) ProtoMessage() {}

func (x *Condition_Stage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Stage.ProtoReflect.Descriptor instead.
func (*Condition_Stage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{17, 2}
}

func (x *Condition_Stage) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Condition_Stage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Condition_Stage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Condition_Stage) GetSummary() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *Condition_Stage) GetAssessment() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Assessment
	}
	return nil
}

// Supporting evidence
type Condition_Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Manifestation/symptom
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Supporting information found elsewhere
	Detail []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *Condition_Evidence) Reset() {
	*x = Condition_Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Evidence) ProtoMessage() {}

func (x *Condition_Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Evidence.ProtoReflect.Descriptor instead.
func (*Condition_Evidence) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{17, 3}
}

func (x *Condition_Evidence) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Condition_Evidence) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Condition_Evidence) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Condition_Evidence) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Condition_Evidence) GetDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Contact details of the publisher
type Conformance_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of a individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *Conformance_Contact) Reset() {
	*x = Conformance_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Contact) ProtoMessage() {}

func (x *Conformance_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Contact.ProtoReflect.Descriptor instead.
func (*Conformance_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Conformance_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conformance_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// Software that is covered by this conformance statement
type Conformance_Software struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A name the software is known by
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Version covered by this statement
	Version *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// Date this version released
	ReleaseDate *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
}

func (x *Conformance_Software) Reset() {
	*x = Conformance_Software{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Software) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Software) ProtoMessage() {}

func (x *Conformance_Software) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Software.ProtoReflect.Descriptor instead.
func (*Conformance_Software) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 1}
}

func (x *Conformance_Software) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Software) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Software) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Software) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conformance_Software) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Conformance_Software) GetReleaseDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

// If this describes a specific instance
type Conformance_Implementation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Describes this specific instance
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Base URL for the installation
	Url *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Conformance_Implementation) Reset() {
	*x = Conformance_Implementation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Implementation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Implementation) ProtoMessage() {}

func (x *Conformance_Implementation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Implementation.ProtoReflect.Descriptor instead.
func (*Conformance_Implementation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 2}
}

func (x *Conformance_Implementation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Implementation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Implementation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Implementation) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Conformance_Implementation) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

// If the endpoint is a RESTful one
type Conformance_Rest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// client | server
	Mode *codes_go_proto.RestfulConformanceModeCode `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// General description of implementation
	Documentation *datatypes_go_proto.String      `protobuf:"bytes,5,opt,name=documentation,proto3" json:"documentation,omitempty"`
	Security      *Conformance_Rest_Security      `protobuf:"bytes,6,opt,name=security,proto3" json:"security,omitempty"`
	Resource      []*Conformance_Rest_Resource    `protobuf:"bytes,7,rep,name=resource,proto3" json:"resource,omitempty"`
	Interaction   []*Conformance_Rest_Interaction `protobuf:"bytes,8,rep,name=interaction,proto3" json:"interaction,omitempty"`
	// not-supported | batch | transaction | both
	TransactionMode *codes_go_proto.TransactionModeCode `protobuf:"bytes,9,opt,name=transaction_mode,json=transactionMode,proto3" json:"transaction_mode,omitempty"`
	// Search params for searching all resources
	SearchParam []*Conformance_Rest_Resource_SearchParam `protobuf:"bytes,10,rep,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
	Operation   []*Conformance_Rest_Operation            `protobuf:"bytes,11,rep,name=operation,proto3" json:"operation,omitempty"`
	// Compartments served/used by system
	Compartment []*datatypes_go_proto.Uri `protobuf:"bytes,12,rep,name=compartment,proto3" json:"compartment,omitempty"`
}

func (x *Conformance_Rest) Reset() {
	*x = Conformance_Rest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Rest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Rest) ProtoMessage() {}

func (x *Conformance_Rest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Rest.ProtoReflect.Descriptor instead.
func (*Conformance_Rest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 3}
}

func (x *Conformance_Rest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Rest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Rest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Rest) GetMode() *codes_go_proto.RestfulConformanceModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Conformance_Rest) GetDocumentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *Conformance_Rest) GetSecurity() *Conformance_Rest_Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Conformance_Rest) GetResource() []*Conformance_Rest_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Conformance_Rest) GetInteraction() []*Conformance_Rest_Interaction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *Conformance_Rest) GetTransactionMode() *codes_go_proto.TransactionModeCode {
	if x != nil {
		return x.TransactionMode
	}
	return nil
}

func (x *Conformance_Rest) GetSearchParam() []*Conformance_Rest_Resource_SearchParam {
	if x != nil {
		return x.SearchParam
	}
	return nil
}

func (x *Conformance_Rest) GetOperation() []*Conformance_Rest_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *Conformance_Rest) GetCompartment() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Compartment
	}
	return nil
}

// If messaging is supported
type Conformance_Messaging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Endpoint          []*Conformance_Messaging_Endpoint `protobuf:"bytes,4,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Reliable Message Cache Length (min)
	ReliableCache *datatypes_go_proto.UnsignedInt `protobuf:"bytes,5,opt,name=reliable_cache,json=reliableCache,proto3" json:"reliable_cache,omitempty"`
	// Messaging interface behavior details
	Documentation *datatypes_go_proto.String     `protobuf:"bytes,6,opt,name=documentation,proto3" json:"documentation,omitempty"`
	Event         []*Conformance_Messaging_Event `protobuf:"bytes,7,rep,name=event,proto3" json:"event,omitempty"`
}

func (x *Conformance_Messaging) Reset() {
	*x = Conformance_Messaging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Messaging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Messaging) ProtoMessage() {}

func (x *Conformance_Messaging) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Messaging.ProtoReflect.Descriptor instead.
func (*Conformance_Messaging) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 4}
}

func (x *Conformance_Messaging) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Messaging) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Messaging) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Messaging) GetEndpoint() []*Conformance_Messaging_Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Conformance_Messaging) GetReliableCache() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.ReliableCache
	}
	return nil
}

func (x *Conformance_Messaging) GetDocumentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *Conformance_Messaging) GetEvent() []*Conformance_Messaging_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Document definition
type Conformance_Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// producer | consumer
	Mode *codes_go_proto.DocumentModeCode `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Description of document support
	Documentation *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=documentation,proto3" json:"documentation,omitempty"`
	// Constraint on a resource used in the document
	Profile *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *Conformance_Document) Reset() {
	*x = Conformance_Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Document) ProtoMessage() {}

func (x *Conformance_Document) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Document.ProtoReflect.Descriptor instead.
func (*Conformance_Document) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 5}
}

func (x *Conformance_Document) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Document) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Document) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Document) GetMode() *codes_go_proto.DocumentModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Conformance_Document) GetDocumentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *Conformance_Document) GetProfile() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Information about security of implementation
type Conformance_Rest_Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Adds CORS Headers (http://enable-cors.org/)
	Cors *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=cors,proto3" json:"cors,omitempty"`
	// OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
	Service []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=service,proto3" json:"service,omitempty"`
	// General description of how security works
	Description *datatypes_go_proto.String               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Certificate []*Conformance_Rest_Security_Certificate `protobuf:"bytes,7,rep,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *Conformance_Rest_Security) Reset() {
	*x = Conformance_Rest_Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Rest_Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Rest_Security) ProtoMessage() {}

func (x *Conformance_Rest_Security) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Rest_Security.ProtoReflect.Descriptor instead.
func (*Conformance_Rest_Security) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 3, 0}
}

func (x *Conformance_Rest_Security) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Rest_Security) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Rest_Security) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Rest_Security) GetCors() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *Conformance_Rest_Security) GetService() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Conformance_Rest_Security) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Conformance_Rest_Security) GetCertificate() []*Conformance_Rest_Security_Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// Resource served on the REST interface
type Conformance_Rest_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A resource type that is supported
	Type *codes_go_proto.ResourceTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Base System profile for all uses of resource
	Profile     *datatypes_go_proto.Reference            `protobuf:"bytes,5,opt,name=profile,proto3" json:"profile,omitempty"`
	Interaction []*Conformance_Rest_Resource_Interaction `protobuf:"bytes,6,rep,name=interaction,proto3" json:"interaction,omitempty"`
	// no-version | versioned | versioned-update
	Versioning *codes_go_proto.ResourceVersionPolicyCode `protobuf:"bytes,7,opt,name=versioning,proto3" json:"versioning,omitempty"`
	// Whether vRead can return past versions
	ReadHistory *datatypes_go_proto.Boolean `protobuf:"bytes,8,opt,name=read_history,json=readHistory,proto3" json:"read_history,omitempty"`
	// If update can commit to a new identity
	UpdateCreate *datatypes_go_proto.Boolean `protobuf:"bytes,9,opt,name=update_create,json=updateCreate,proto3" json:"update_create,omitempty"`
	// If allows/uses conditional create
	ConditionalCreate *datatypes_go_proto.Boolean `protobuf:"bytes,10,opt,name=conditional_create,json=conditionalCreate,proto3" json:"conditional_create,omitempty"`
	// If allows/uses conditional update
	ConditionalUpdate *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=conditional_update,json=conditionalUpdate,proto3" json:"conditional_update,omitempty"`
	// not-supported | single | multiple - how conditional delete is supported
	ConditionalDelete *codes_go_proto.ConditionalDeleteStatusCode `protobuf:"bytes,12,opt,name=conditional_delete,json=conditionalDelete,proto3" json:"conditional_delete,omitempty"`
	// _include values supported by the server
	SearchInclude []*datatypes_go_proto.String `protobuf:"bytes,13,rep,name=search_include,json=searchInclude,proto3" json:"search_include,omitempty"`
	// _revinclude values supported by the server
	SearchRevInclude []*datatypes_go_proto.String             `protobuf:"bytes,14,rep,name=search_rev_include,json=searchRevInclude,proto3" json:"search_rev_include,omitempty"`
	SearchParam      []*Conformance_Rest_Resource_SearchParam `protobuf:"bytes,15,rep,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
}

func (x *Conformance_Rest_Resource) Reset() {
	*x = Conformance_Rest_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Rest_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Rest_Resource) ProtoMessage() {}

func (x *Conformance_Rest_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Rest_Resource.ProtoReflect.Descriptor instead.
func (*Conformance_Rest_Resource) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 3, 1}
}

func (x *Conformance_Rest_Resource) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetType() *codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetProfile() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetInteraction() []*Conformance_Rest_Resource_Interaction {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetVersioning() *codes_go_proto.ResourceVersionPolicyCode {
	if x != nil {
		return x.Versioning
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetReadHistory() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ReadHistory
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetUpdateCreate() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.UpdateCreate
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetConditionalCreate() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ConditionalCreate
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetConditionalUpdate() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ConditionalUpdate
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetConditionalDelete() *codes_go_proto.ConditionalDeleteStatusCode {
	if x != nil {
		return x.ConditionalDelete
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetSearchInclude() []*datatypes_go_proto.String {
	if x != nil {
		return x.SearchInclude
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetSearchRevInclude() []*datatypes_go_proto.String {
	if x != nil {
		return x.SearchRevInclude
	}
	return nil
}

func (x *Conformance_Rest_Resource) GetSearchParam() []*Conformance_Rest_Resource_SearchParam {
	if x != nil {
		return x.SearchParam
	}
	return nil
}

// What operations are supported?
type Conformance_Rest_Interaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// transaction | search-system | history-system
	Code *codes_go_proto.SystemRestfulInteractionCode `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Anything special about operation behavior
	Documentation *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=documentation,proto3" json:"documentation,omitempty"`
}

func (x *Conformance_Rest_Interaction) Reset() {
	*x = Conformance_Rest_Interaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Rest_Interaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Rest_Interaction) ProtoMessage() {}

func (x *Conformance_Rest_Interaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Rest_Interaction.ProtoReflect.Descriptor instead.
func (*Conformance_Rest_Interaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 3, 2}
}

func (x *Conformance_Rest_Interaction) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Rest_Interaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Rest_Interaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Rest_Interaction) GetCode() *codes_go_proto.SystemRestfulInteractionCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Conformance_Rest_Interaction) GetDocumentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

// Definition of an operation or a custom query
type Conformance_Rest_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name by which the operation/query is invoked
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The defined operation/query
	Definition *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *Conformance_Rest_Operation) Reset() {
	*x = Conformance_Rest_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Rest_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Rest_Operation) ProtoMessage() {}

func (x *Conformance_Rest_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Rest_Operation.ProtoReflect.Descriptor instead.
func (*Conformance_Rest_Operation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 3, 3}
}

func (x *Conformance_Rest_Operation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Rest_Operation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Rest_Operation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Rest_Operation) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conformance_Rest_Operation) GetDefinition() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

// Certificates associated with security profiles
type Conformance_Rest_Security_Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Mime type for certificate
	Type *datatypes_go_proto.MimeTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Actual certificate
	Blob *datatypes_go_proto.Base64Binary `protobuf:"bytes,5,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *Conformance_Rest_Security_Certificate) Reset() {
	*x = Conformance_Rest_Security_Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Rest_Security_Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Rest_Security_Certificate) ProtoMessage() {}

func (x *Conformance_Rest_Security_Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Rest_Security_Certificate.ProtoReflect.Descriptor instead.
func (*Conformance_Rest_Security_Certificate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 3, 0, 0}
}

func (x *Conformance_Rest_Security_Certificate) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Rest_Security_Certificate) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Rest_Security_Certificate) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Rest_Security_Certificate) GetType() *datatypes_go_proto.MimeTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Conformance_Rest_Security_Certificate) GetBlob() *datatypes_go_proto.Base64Binary {
	if x != nil {
		return x.Blob
	}
	return nil
}

// What operations are supported?
type Conformance_Rest_Resource_Interaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// read | vread | update | delete | history-instance | validate |
	// history-type | create | search-type
	Code *codes_go_proto.TypeRestfulInteractionCode `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Anything special about operation behavior
	Documentation *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=documentation,proto3" json:"documentation,omitempty"`
}

func (x *Conformance_Rest_Resource_Interaction) Reset() {
	*x = Conformance_Rest_Resource_Interaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Rest_Resource_Interaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Rest_Resource_Interaction) ProtoMessage() {}

func (x *Conformance_Rest_Resource_Interaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Rest_Resource_Interaction.ProtoReflect.Descriptor instead.
func (*Conformance_Rest_Resource_Interaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 3, 1, 0}
}

func (x *Conformance_Rest_Resource_Interaction) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Rest_Resource_Interaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Rest_Resource_Interaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Rest_Resource_Interaction) GetCode() *codes_go_proto.TypeRestfulInteractionCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Conformance_Rest_Resource_Interaction) GetDocumentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

// Search params supported by implementation
type Conformance_Rest_Resource_SearchParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of search parameter
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Source of definition for parameter
	Definition *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=definition,proto3" json:"definition,omitempty"`
	// number | date | string | token | reference | composite | quantity |
	// uri
	Type *codes_go_proto.SearchParamTypeCode `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Server-specific usage
	Documentation *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=documentation,proto3" json:"documentation,omitempty"`
	// Types of resource (if a resource reference)
	Target []*codes_go_proto.ResourceTypeCode `protobuf:"bytes,8,rep,name=target,proto3" json:"target,omitempty"`
	// missing | exact | contains | not | text | in | not-in | below | above
	// | type
	Modifier []*codes_go_proto.SearchModifierCodeCode `protobuf:"bytes,9,rep,name=modifier,proto3" json:"modifier,omitempty"`
	// Chained names supported
	Chain []*datatypes_go_proto.String `protobuf:"bytes,10,rep,name=chain,proto3" json:"chain,omitempty"`
}

func (x *Conformance_Rest_Resource_SearchParam) Reset() {
	*x = Conformance_Rest_Resource_SearchParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Rest_Resource_SearchParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Rest_Resource_SearchParam) ProtoMessage() {}

func (x *Conformance_Rest_Resource_SearchParam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Rest_Resource_SearchParam.ProtoReflect.Descriptor instead.
func (*Conformance_Rest_Resource_SearchParam) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 3, 1, 1}
}

func (x *Conformance_Rest_Resource_SearchParam) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Rest_Resource_SearchParam) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Rest_Resource_SearchParam) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Rest_Resource_SearchParam) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conformance_Rest_Resource_SearchParam) GetDefinition() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *Conformance_Rest_Resource_SearchParam) GetType() *codes_go_proto.SearchParamTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Conformance_Rest_Resource_SearchParam) GetDocumentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *Conformance_Rest_Resource_SearchParam) GetTarget() []*codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Conformance_Rest_Resource_SearchParam) GetModifier() []*codes_go_proto.SearchModifierCodeCode {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *Conformance_Rest_Resource_SearchParam) GetChain() []*datatypes_go_proto.String {
	if x != nil {
		return x.Chain
	}
	return nil
}

// A messaging service end-point
type Conformance_Messaging_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// http | ftp | mllp +
	Protocol *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Address of end-point
	Address *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Conformance_Messaging_Endpoint) Reset() {
	*x = Conformance_Messaging_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Messaging_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Messaging_Endpoint) ProtoMessage() {}

func (x *Conformance_Messaging_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Messaging_Endpoint.ProtoReflect.Descriptor instead.
func (*Conformance_Messaging_Endpoint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 4, 0}
}

func (x *Conformance_Messaging_Endpoint) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Messaging_Endpoint) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Messaging_Endpoint) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Messaging_Endpoint) GetProtocol() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Conformance_Messaging_Endpoint) GetAddress() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Address
	}
	return nil
}

// Declare support for this event
type Conformance_Messaging_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Event type
	Code *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Consequence | Currency | Notification
	Category *codes_go_proto.MessageSignificanceCategoryCode `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	// sender | receiver
	Mode *codes_go_proto.ConformanceEventModeCode `protobuf:"bytes,6,opt,name=mode,proto3" json:"mode,omitempty"`
	// Resource that's focus of message
	Focus *codes_go_proto.ResourceTypeCode `protobuf:"bytes,7,opt,name=focus,proto3" json:"focus,omitempty"`
	// Profile that describes the request
	Request *datatypes_go_proto.Reference `protobuf:"bytes,8,opt,name=request,proto3" json:"request,omitempty"`
	// Profile that describes the response
	Response *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=response,proto3" json:"response,omitempty"`
	// Endpoint-specific event documentation
	Documentation *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=documentation,proto3" json:"documentation,omitempty"`
}

func (x *Conformance_Messaging_Event) Reset() {
	*x = Conformance_Messaging_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conformance_Messaging_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conformance_Messaging_Event) ProtoMessage() {}

func (x *Conformance_Messaging_Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conformance_Messaging_Event.ProtoReflect.Descriptor instead.
func (*Conformance_Messaging_Event) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{18, 4, 1}
}

func (x *Conformance_Messaging_Event) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Conformance_Messaging_Event) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Conformance_Messaging_Event) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Conformance_Messaging_Event) GetCode() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Conformance_Messaging_Event) GetCategory() *codes_go_proto.MessageSignificanceCategoryCode {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Conformance_Messaging_Event) GetMode() *codes_go_proto.ConformanceEventModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Conformance_Messaging_Event) GetFocus() *codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *Conformance_Messaging_Event) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Conformance_Messaging_Event) GetResponse() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Conformance_Messaging_Event) GetDocumentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

// Contract Actor
type Contract_Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Contract Actor Type
	Entity *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=entity,proto3" json:"entity,omitempty"`
	// Contract  Actor Role
	Role []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=role,proto3" json:"role,omitempty"`
}

func (x *Contract_Actor) Reset() {
	*x = Contract_Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Actor) ProtoMessage() {}

func (x *Contract_Actor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Actor.ProtoReflect.Descriptor instead.
func (*Contract_Actor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Contract_Actor) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Actor) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Actor) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Actor) GetEntity() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Contract_Actor) GetRole() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

// Contract Valued Item
type Contract_ValuedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Entity            *Contract_ValuedItem_Entity     `protobuf:"bytes,4,opt,name=entity,proto3" json:"entity,omitempty"`
	// Contract Valued Item Identifier
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Contract Valued Item Effective Tiem
	EffectiveTime *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	// Count of Contract Valued Items
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Contract Valued Item fee, charge, or cost
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,8,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Contract Valued Item Price Scaling Factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,9,opt,name=factor,proto3" json:"factor,omitempty"`
	// Contract Valued Item Difficulty Scaling Factor
	Points *datatypes_go_proto.Decimal `protobuf:"bytes,10,opt,name=points,proto3" json:"points,omitempty"`
	// Total Contract Valued Item Value
	Net *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=net,proto3" json:"net,omitempty"`
}

func (x *Contract_ValuedItem) Reset() {
	*x = Contract_ValuedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_ValuedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_ValuedItem) ProtoMessage() {}

func (x *Contract_ValuedItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_ValuedItem.ProtoReflect.Descriptor instead.
func (*Contract_ValuedItem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 1}
}

func (x *Contract_ValuedItem) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_ValuedItem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_ValuedItem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_ValuedItem) GetEntity() *Contract_ValuedItem_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Contract_ValuedItem) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Contract_ValuedItem) GetEffectiveTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *Contract_ValuedItem) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Contract_ValuedItem) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *Contract_ValuedItem) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *Contract_ValuedItem) GetPoints() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Contract_ValuedItem) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

// Contract Signer
type Contract_Signer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Contract Signer Type
	Type *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Contract Signatory Party
	Party *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=party,proto3" json:"party,omitempty"`
	// Contract Documentation Signature
	Signature *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Contract_Signer) Reset() {
	*x = Contract_Signer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Signer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Signer) ProtoMessage() {}

func (x *Contract_Signer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Signer.ProtoReflect.Descriptor instead.
func (*Contract_Signer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 2}
}

func (x *Contract_Signer) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Signer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Signer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Signer) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract_Signer) GetParty() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *Contract_Signer) GetSignature() *datatypes_go_proto.String {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Contract Term List
type Contract_Term struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Contract Term identifier
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Contract Term Issue Date Time
	Issued *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=issued,proto3" json:"issued,omitempty"`
	// Contract Term Effective Time
	Applies *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=applies,proto3" json:"applies,omitempty"`
	// Contract Term Type
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// Contract Term Subtype
	SubType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	// Subject of this Contract Term
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`
	// Contract Term Action
	Action []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=action,proto3" json:"action,omitempty"`
	// Contract Term Action Reason
	ActionReason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,rep,name=action_reason,json=actionReason,proto3" json:"action_reason,omitempty"`
	Actor        []*Contract_Term_Actor                `protobuf:"bytes,12,rep,name=actor,proto3" json:"actor,omitempty"`
	// Human readable Contract term text
	Text       *datatypes_go_proto.String  `protobuf:"bytes,13,opt,name=text,proto3" json:"text,omitempty"`
	ValuedItem []*Contract_Term_ValuedItem `protobuf:"bytes,14,rep,name=valued_item,json=valuedItem,proto3" json:"valued_item,omitempty"`
	// Nested Contract Term Group
	Group []*Contract_Term `protobuf:"bytes,15,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *Contract_Term) Reset() {
	*x = Contract_Term{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term) ProtoMessage() {}

func (x *Contract_Term) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term.ProtoReflect.Descriptor instead.
func (*Contract_Term) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 3}
}

func (x *Contract_Term) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Contract_Term) GetIssued() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Contract_Term) GetApplies() *datatypes_go_proto.Period {
	if x != nil {
		return x.Applies
	}
	return nil
}

func (x *Contract_Term) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contract_Term) GetSubType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SubType
	}
	return nil
}

func (x *Contract_Term) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Contract_Term) GetAction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Contract_Term) GetActionReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ActionReason
	}
	return nil
}

func (x *Contract_Term) GetActor() []*Contract_Term_Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Contract_Term) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Contract_Term) GetValuedItem() []*Contract_Term_ValuedItem {
	if x != nil {
		return x.ValuedItem
	}
	return nil
}

func (x *Contract_Term) GetGroup() []*Contract_Term {
	if x != nil {
		return x.Group
	}
	return nil
}

// Binding Contract
type Contract_Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Binding:
	//	*Contract_Binding_Attachment
	//	*Contract_Binding_Reference
	Binding isContract_Binding_Binding `protobuf_oneof:"binding"`
}

func (x *Contract_Binding) Reset() {
	*x = Contract_Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Binding) ProtoMessage() {}

func (x *Contract_Binding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Binding.ProtoReflect.Descriptor instead.
func (*Contract_Binding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 4}
}

func (m *Contract_Binding) GetBinding() isContract_Binding_Binding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func (x *Contract_Binding) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetBinding().(*Contract_Binding_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Contract_Binding) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetBinding().(*Contract_Binding_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_Binding_Binding interface {
	isContract_Binding_Binding()
}

type Contract_Binding_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,1,opt,name=attachment,proto3,oneof"`
}

type Contract_Binding_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_Binding_Attachment) isContract_Binding_Binding() {}

func (*Contract_Binding_Reference) isContract_Binding_Binding() {}

// Contract Friendly Language
type Contract_Friendly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *Contract_Friendly_Content      `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Contract_Friendly) Reset() {
	*x = Contract_Friendly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Friendly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Friendly) ProtoMessage() {}

func (x *Contract_Friendly) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Friendly.ProtoReflect.Descriptor instead.
func (*Contract_Friendly) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 5}
}

func (x *Contract_Friendly) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Friendly) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Friendly) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Friendly) GetContent() *Contract_Friendly_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// Contract Legal Language
type Contract_Legal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *Contract_Legal_Content         `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Contract_Legal) Reset() {
	*x = Contract_Legal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Legal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Legal) ProtoMessage() {}

func (x *Contract_Legal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Legal.ProtoReflect.Descriptor instead.
func (*Contract_Legal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 6}
}

func (x *Contract_Legal) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Legal) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Legal) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Legal) GetContent() *Contract_Legal_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// Computable Contract Language
type Contract_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Content           *Contract_Rule_Content          `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Contract_Rule) Reset() {
	*x = Contract_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Rule) ProtoMessage() {}

func (x *Contract_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Rule.ProtoReflect.Descriptor instead.
func (*Contract_Rule) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 7}
}

func (x *Contract_Rule) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Rule) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Rule) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Rule) GetContent() *Contract_Rule_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// Contract Valued Item Type
type Contract_ValuedItem_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entity:
	//	*Contract_ValuedItem_Entity_CodeableConcept
	//	*Contract_ValuedItem_Entity_Reference
	Entity isContract_ValuedItem_Entity_Entity `protobuf_oneof:"entity"`
}

func (x *Contract_ValuedItem_Entity) Reset() {
	*x = Contract_ValuedItem_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_ValuedItem_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_ValuedItem_Entity) ProtoMessage() {}

func (x *Contract_ValuedItem_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_ValuedItem_Entity.ProtoReflect.Descriptor instead.
func (*Contract_ValuedItem_Entity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 1, 0}
}

func (m *Contract_ValuedItem_Entity) GetEntity() isContract_ValuedItem_Entity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *Contract_ValuedItem_Entity) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetEntity().(*Contract_ValuedItem_Entity_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Contract_ValuedItem_Entity) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetEntity().(*Contract_ValuedItem_Entity_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_ValuedItem_Entity_Entity interface {
	isContract_ValuedItem_Entity_Entity()
}

type Contract_ValuedItem_Entity_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Contract_ValuedItem_Entity_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_ValuedItem_Entity_CodeableConcept) isContract_ValuedItem_Entity_Entity() {}

func (*Contract_ValuedItem_Entity_Reference) isContract_ValuedItem_Entity_Entity() {}

// Contract Term Actor List
type Contract_Term_Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Contract Term Actor
	Entity *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=entity,proto3" json:"entity,omitempty"`
	// Contract Term Actor Role
	Role []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=role,proto3" json:"role,omitempty"`
}

func (x *Contract_Term_Actor) Reset() {
	*x = Contract_Term_Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_Actor) ProtoMessage() {}

func (x *Contract_Term_Actor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_Actor.ProtoReflect.Descriptor instead.
func (*Contract_Term_Actor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 3, 0}
}

func (x *Contract_Term_Actor) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_Actor) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_Actor) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_Actor) GetEntity() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Contract_Term_Actor) GetRole() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

// Contract Term Valued Item
type Contract_Term_ValuedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension  `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Entity            *Contract_Term_ValuedItem_Entity `protobuf:"bytes,4,opt,name=entity,proto3" json:"entity,omitempty"`
	// Contract Term Valued Item Identifier
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Contract Term Valued Item Effective Tiem
	EffectiveTime *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	// Contract Term Valued Item Count
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Contract Term Valued Item fee, charge, or cost
	UnitPrice *datatypes_go_proto.Money `protobuf:"bytes,8,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// Contract Term Valued Item Price Scaling Factor
	Factor *datatypes_go_proto.Decimal `protobuf:"bytes,9,opt,name=factor,proto3" json:"factor,omitempty"`
	// Contract Term Valued Item Difficulty Scaling Factor
	Points *datatypes_go_proto.Decimal `protobuf:"bytes,10,opt,name=points,proto3" json:"points,omitempty"`
	// Total Contract Term Valued Item Value
	Net *datatypes_go_proto.Money `protobuf:"bytes,11,opt,name=net,proto3" json:"net,omitempty"`
}

func (x *Contract_Term_ValuedItem) Reset() {
	*x = Contract_Term_ValuedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ValuedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ValuedItem) ProtoMessage() {}

func (x *Contract_Term_ValuedItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ValuedItem.ProtoReflect.Descriptor instead.
func (*Contract_Term_ValuedItem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 3, 1}
}

func (x *Contract_Term_ValuedItem) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetEntity() *Contract_Term_ValuedItem_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetEffectiveTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetUnitPrice() *datatypes_go_proto.Money {
	if x != nil {
		return x.UnitPrice
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetFactor() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetPoints() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Contract_Term_ValuedItem) GetNet() *datatypes_go_proto.Money {
	if x != nil {
		return x.Net
	}
	return nil
}

// Contract Term Valued Item Type
type Contract_Term_ValuedItem_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entity:
	//	*Contract_Term_ValuedItem_Entity_CodeableConcept
	//	*Contract_Term_ValuedItem_Entity_Reference
	Entity isContract_Term_ValuedItem_Entity_Entity `protobuf_oneof:"entity"`
}

func (x *Contract_Term_ValuedItem_Entity) Reset() {
	*x = Contract_Term_ValuedItem_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Term_ValuedItem_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Term_ValuedItem_Entity) ProtoMessage() {}

func (x *Contract_Term_ValuedItem_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Term_ValuedItem_Entity.ProtoReflect.Descriptor instead.
func (*Contract_Term_ValuedItem_Entity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 3, 1, 0}
}

func (m *Contract_Term_ValuedItem_Entity) GetEntity() isContract_Term_ValuedItem_Entity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *Contract_Term_ValuedItem_Entity) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetEntity().(*Contract_Term_ValuedItem_Entity_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Contract_Term_ValuedItem_Entity) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetEntity().(*Contract_Term_ValuedItem_Entity_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_Term_ValuedItem_Entity_Entity interface {
	isContract_Term_ValuedItem_Entity_Entity()
}

type Contract_Term_ValuedItem_Entity_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Contract_Term_ValuedItem_Entity_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_Term_ValuedItem_Entity_CodeableConcept) isContract_Term_ValuedItem_Entity_Entity() {}

func (*Contract_Term_ValuedItem_Entity_Reference) isContract_Term_ValuedItem_Entity_Entity() {}

// Easily comprehended representation of this Contract
type Contract_Friendly_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Contract_Friendly_Content_Attachment
	//	*Contract_Friendly_Content_Reference
	Content isContract_Friendly_Content_Content `protobuf_oneof:"content"`
}

func (x *Contract_Friendly_Content) Reset() {
	*x = Contract_Friendly_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Friendly_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Friendly_Content) ProtoMessage() {}

func (x *Contract_Friendly_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Friendly_Content.ProtoReflect.Descriptor instead.
func (*Contract_Friendly_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 5, 0}
}

func (m *Contract_Friendly_Content) GetContent() isContract_Friendly_Content_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Contract_Friendly_Content) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetContent().(*Contract_Friendly_Content_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Contract_Friendly_Content) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetContent().(*Contract_Friendly_Content_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_Friendly_Content_Content interface {
	isContract_Friendly_Content_Content()
}

type Contract_Friendly_Content_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,1,opt,name=attachment,proto3,oneof"`
}

type Contract_Friendly_Content_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_Friendly_Content_Attachment) isContract_Friendly_Content_Content() {}

func (*Contract_Friendly_Content_Reference) isContract_Friendly_Content_Content() {}

// Contract Legal Text
type Contract_Legal_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Contract_Legal_Content_Attachment
	//	*Contract_Legal_Content_Reference
	Content isContract_Legal_Content_Content `protobuf_oneof:"content"`
}

func (x *Contract_Legal_Content) Reset() {
	*x = Contract_Legal_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Legal_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Legal_Content) ProtoMessage() {}

func (x *Contract_Legal_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Legal_Content.ProtoReflect.Descriptor instead.
func (*Contract_Legal_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 6, 0}
}

func (m *Contract_Legal_Content) GetContent() isContract_Legal_Content_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Contract_Legal_Content) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetContent().(*Contract_Legal_Content_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Contract_Legal_Content) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetContent().(*Contract_Legal_Content_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_Legal_Content_Content interface {
	isContract_Legal_Content_Content()
}

type Contract_Legal_Content_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,1,opt,name=attachment,proto3,oneof"`
}

type Contract_Legal_Content_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_Legal_Content_Attachment) isContract_Legal_Content_Content() {}

func (*Contract_Legal_Content_Reference) isContract_Legal_Content_Content() {}

// Computable Contract Rules
type Contract_Rule_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Contract_Rule_Content_Attachment
	//	*Contract_Rule_Content_Reference
	Content isContract_Rule_Content_Content `protobuf_oneof:"content"`
}

func (x *Contract_Rule_Content) Reset() {
	*x = Contract_Rule_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Rule_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Rule_Content) ProtoMessage() {}

func (x *Contract_Rule_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Rule_Content.ProtoReflect.Descriptor instead.
func (*Contract_Rule_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{19, 7, 0}
}

func (m *Contract_Rule_Content) GetContent() isContract_Rule_Content_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Contract_Rule_Content) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetContent().(*Contract_Rule_Content_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Contract_Rule_Content) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetContent().(*Contract_Rule_Content_Reference); ok {
		return x.Reference
	}
	return nil
}

type isContract_Rule_Content_Content interface {
	isContract_Rule_Content_Content()
}

type Contract_Rule_Content_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,1,opt,name=attachment,proto3,oneof"`
}

type Contract_Rule_Content_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Contract_Rule_Content_Attachment) isContract_Rule_Content_Content() {}

func (*Contract_Rule_Content_Reference) isContract_Rule_Content_Content() {}

// Contact details of the publisher
type DataElement_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of a individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *DataElement_Contact) Reset() {
	*x = DataElement_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElement_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElement_Contact) ProtoMessage() {}

func (x *DataElement_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElement_Contact.ProtoReflect.Descriptor instead.
func (*DataElement_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{21, 0}
}

func (x *DataElement_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElement_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataElement_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DataElement_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DataElement_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// External specification mapped to
type DataElement_Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Internal id when this mapping is used
	Identity *datatypes_go_proto.Id `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	// Identifies what this mapping refers to
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	// Names what this mapping refers to
	Name *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Versions, Issues, Scope limitations etc.
	Comments *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *DataElement_Mapping) Reset() {
	*x = DataElement_Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElement_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElement_Mapping) ProtoMessage() {}

func (x *DataElement_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElement_Mapping.ProtoReflect.Descriptor instead.
func (*DataElement_Mapping) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{21, 1}
}

func (x *DataElement_Mapping) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElement_Mapping) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataElement_Mapping) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DataElement_Mapping) GetIdentity() *datatypes_go_proto.Id {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *DataElement_Mapping) GetUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *DataElement_Mapping) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DataElement_Mapping) GetComments() *datatypes_go_proto.String {
	if x != nil {
		return x.Comments
	}
	return nil
}

// Step taken to address
type DetectedIssue_Mitigation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// What mitigation?
	Action *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// Date committed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	// Who is committing?
	Author *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *DetectedIssue_Mitigation) Reset() {
	*x = DetectedIssue_Mitigation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectedIssue_Mitigation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedIssue_Mitigation) ProtoMessage() {}

func (x *DetectedIssue_Mitigation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedIssue_Mitigation.ProtoReflect.Descriptor instead.
func (*DetectedIssue_Mitigation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{22, 0}
}

func (x *DetectedIssue_Mitigation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DetectedIssue_Mitigation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DetectedIssue_Mitigation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DetectedIssue_Mitigation) GetAction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *DetectedIssue_Mitigation) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DetectedIssue_Mitigation) GetAuthor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

// Production specification of the component
type DeviceComponent_ProductionSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Specification type
	SpecType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=spec_type,json=specType,proto3" json:"spec_type,omitempty"`
	// Internal component unique identification
	ComponentId *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	// A printable string defining the component
	ProductionSpec *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=production_spec,json=productionSpec,proto3" json:"production_spec,omitempty"`
}

func (x *DeviceComponent_ProductionSpecification) Reset() {
	*x = DeviceComponent_ProductionSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceComponent_ProductionSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceComponent_ProductionSpecification) ProtoMessage() {}

func (x *DeviceComponent_ProductionSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceComponent_ProductionSpecification.ProtoReflect.Descriptor instead.
func (*DeviceComponent_ProductionSpecification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{24, 0}
}

func (x *DeviceComponent_ProductionSpecification) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceComponent_ProductionSpecification) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceComponent_ProductionSpecification) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceComponent_ProductionSpecification) GetSpecType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecType
	}
	return nil
}

func (x *DeviceComponent_ProductionSpecification) GetComponentId() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ComponentId
	}
	return nil
}

func (x *DeviceComponent_ProductionSpecification) GetProductionSpec() *datatypes_go_proto.String {
	if x != nil {
		return x.ProductionSpec
	}
	return nil
}

// Describes the calibrations that have been performed or that are required to
// be performed
type DeviceMetric_Calibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// unspecified | offset | gain | two-point
	Type *codes_go_proto.DeviceMetricCalibrationTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// not-calibrated | calibration-required | calibrated | unspecified
	State *codes_go_proto.DeviceMetricCalibrationStateCode `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Describes the time last calibration has been performed
	Time *datatypes_go_proto.Instant `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *DeviceMetric_Calibration) Reset() {
	*x = DeviceMetric_Calibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetric_Calibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetric_Calibration) ProtoMessage() {}

func (x *DeviceMetric_Calibration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetric_Calibration.ProtoReflect.Descriptor instead.
func (*DeviceMetric_Calibration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{25, 0}
}

func (x *DeviceMetric_Calibration) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceMetric_Calibration) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceMetric_Calibration) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DeviceMetric_Calibration) GetType() *codes_go_proto.DeviceMetricCalibrationTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DeviceMetric_Calibration) GetState() *codes_go_proto.DeviceMetricCalibrationStateCode {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DeviceMetric_Calibration) GetTime() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Time
	}
	return nil
}

// Target body site
type DeviceUseRequest_BodySite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BodySite:
	//	*DeviceUseRequest_BodySite_CodeableConcept
	//	*DeviceUseRequest_BodySite_Reference
	BodySite isDeviceUseRequest_BodySite_BodySite `protobuf_oneof:"body_site"`
}

func (x *DeviceUseRequest_BodySite) Reset() {
	*x = DeviceUseRequest_BodySite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseRequest_BodySite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseRequest_BodySite) ProtoMessage() {}

func (x *DeviceUseRequest_BodySite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseRequest_BodySite.ProtoReflect.Descriptor instead.
func (*DeviceUseRequest_BodySite) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{26, 0}
}

func (m *DeviceUseRequest_BodySite) GetBodySite() isDeviceUseRequest_BodySite_BodySite {
	if m != nil {
		return m.BodySite
	}
	return nil
}

func (x *DeviceUseRequest_BodySite) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetBodySite().(*DeviceUseRequest_BodySite_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *DeviceUseRequest_BodySite) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetBodySite().(*DeviceUseRequest_BodySite_Reference); ok {
		return x.Reference
	}
	return nil
}

type isDeviceUseRequest_BodySite_BodySite interface {
	isDeviceUseRequest_BodySite_BodySite()
}

type DeviceUseRequest_BodySite_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type DeviceUseRequest_BodySite_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*DeviceUseRequest_BodySite_CodeableConcept) isDeviceUseRequest_BodySite_BodySite() {}

func (*DeviceUseRequest_BodySite_Reference) isDeviceUseRequest_BodySite_BodySite() {}

// Schedule for use
type DeviceUseRequest_TimingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Timing:
	//	*DeviceUseRequest_TimingType_TimingValue
	//	*DeviceUseRequest_TimingType_Period
	//	*DeviceUseRequest_TimingType_DateTime
	Timing isDeviceUseRequest_TimingType_Timing `protobuf_oneof:"timing"`
}

func (x *DeviceUseRequest_TimingType) Reset() {
	*x = DeviceUseRequest_TimingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseRequest_TimingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseRequest_TimingType) ProtoMessage() {}

func (x *DeviceUseRequest_TimingType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseRequest_TimingType.ProtoReflect.Descriptor instead.
func (*DeviceUseRequest_TimingType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{26, 1}
}

func (m *DeviceUseRequest_TimingType) GetTiming() isDeviceUseRequest_TimingType_Timing {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (x *DeviceUseRequest_TimingType) GetTimingValue() *datatypes_go_proto.Timing {
	if x, ok := x.GetTiming().(*DeviceUseRequest_TimingType_TimingValue); ok {
		return x.TimingValue
	}
	return nil
}

func (x *DeviceUseRequest_TimingType) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetTiming().(*DeviceUseRequest_TimingType_Period); ok {
		return x.Period
	}
	return nil
}

func (x *DeviceUseRequest_TimingType) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetTiming().(*DeviceUseRequest_TimingType_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isDeviceUseRequest_TimingType_Timing interface {
	isDeviceUseRequest_TimingType_Timing()
}

type DeviceUseRequest_TimingType_TimingValue struct {
	TimingValue *datatypes_go_proto.Timing `protobuf:"bytes,1,opt,name=timing_value,json=timing,proto3,oneof"`
}

type DeviceUseRequest_TimingType_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type DeviceUseRequest_TimingType_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,3,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*DeviceUseRequest_TimingType_TimingValue) isDeviceUseRequest_TimingType_Timing() {}

func (*DeviceUseRequest_TimingType_Period) isDeviceUseRequest_TimingType_Timing() {}

func (*DeviceUseRequest_TimingType_DateTime) isDeviceUseRequest_TimingType_Timing() {}

// Target body site
type DeviceUseStatement_BodySite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BodySite:
	//	*DeviceUseStatement_BodySite_CodeableConcept
	//	*DeviceUseStatement_BodySite_Reference
	BodySite isDeviceUseStatement_BodySite_BodySite `protobuf_oneof:"body_site"`
}

func (x *DeviceUseStatement_BodySite) Reset() {
	*x = DeviceUseStatement_BodySite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseStatement_BodySite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseStatement_BodySite) ProtoMessage() {}

func (x *DeviceUseStatement_BodySite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseStatement_BodySite.ProtoReflect.Descriptor instead.
func (*DeviceUseStatement_BodySite) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{27, 0}
}

func (m *DeviceUseStatement_BodySite) GetBodySite() isDeviceUseStatement_BodySite_BodySite {
	if m != nil {
		return m.BodySite
	}
	return nil
}

func (x *DeviceUseStatement_BodySite) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetBodySite().(*DeviceUseStatement_BodySite_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *DeviceUseStatement_BodySite) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetBodySite().(*DeviceUseStatement_BodySite_Reference); ok {
		return x.Reference
	}
	return nil
}

type isDeviceUseStatement_BodySite_BodySite interface {
	isDeviceUseStatement_BodySite_BodySite()
}

type DeviceUseStatement_BodySite_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type DeviceUseStatement_BodySite_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*DeviceUseStatement_BodySite_CodeableConcept) isDeviceUseStatement_BodySite_BodySite() {}

func (*DeviceUseStatement_BodySite_Reference) isDeviceUseStatement_BodySite_BodySite() {}

type DeviceUseStatement_TimingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Timing:
	//	*DeviceUseStatement_TimingType_TimingValue
	//	*DeviceUseStatement_TimingType_Period
	//	*DeviceUseStatement_TimingType_DateTime
	Timing isDeviceUseStatement_TimingType_Timing `protobuf_oneof:"timing"`
}

func (x *DeviceUseStatement_TimingType) Reset() {
	*x = DeviceUseStatement_TimingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseStatement_TimingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseStatement_TimingType) ProtoMessage() {}

func (x *DeviceUseStatement_TimingType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseStatement_TimingType.ProtoReflect.Descriptor instead.
func (*DeviceUseStatement_TimingType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{27, 1}
}

func (m *DeviceUseStatement_TimingType) GetTiming() isDeviceUseStatement_TimingType_Timing {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (x *DeviceUseStatement_TimingType) GetTimingValue() *datatypes_go_proto.Timing {
	if x, ok := x.GetTiming().(*DeviceUseStatement_TimingType_TimingValue); ok {
		return x.TimingValue
	}
	return nil
}

func (x *DeviceUseStatement_TimingType) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetTiming().(*DeviceUseStatement_TimingType_Period); ok {
		return x.Period
	}
	return nil
}

func (x *DeviceUseStatement_TimingType) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetTiming().(*DeviceUseStatement_TimingType_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isDeviceUseStatement_TimingType_Timing interface {
	isDeviceUseStatement_TimingType_Timing()
}

type DeviceUseStatement_TimingType_TimingValue struct {
	TimingValue *datatypes_go_proto.Timing `protobuf:"bytes,1,opt,name=timing_value,json=timing,proto3,oneof"`
}

type DeviceUseStatement_TimingType_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type DeviceUseStatement_TimingType_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,3,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*DeviceUseStatement_TimingType_TimingValue) isDeviceUseStatement_TimingType_Timing() {}

func (*DeviceUseStatement_TimingType_Period) isDeviceUseStatement_TimingType_Timing() {}

func (*DeviceUseStatement_TimingType_DateTime) isDeviceUseStatement_TimingType_Timing() {}

// A list of events of interest in the lifecycle
type DiagnosticOrder_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// proposed | draft | planned | requested | received | accepted |
	// in-progress | review | completed | cancelled | suspended | rejected |
	// failed
	Status *codes_go_proto.DiagnosticOrderStatusCode `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// More information about the event and its context
	Description *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The date at which the event happened
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	// Who recorded or did this
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *DiagnosticOrder_Event) Reset() {
	*x = DiagnosticOrder_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticOrder_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticOrder_Event) ProtoMessage() {}

func (x *DiagnosticOrder_Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticOrder_Event.ProtoReflect.Descriptor instead.
func (*DiagnosticOrder_Event) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{28, 0}
}

func (x *DiagnosticOrder_Event) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticOrder_Event) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticOrder_Event) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DiagnosticOrder_Event) GetStatus() *codes_go_proto.DiagnosticOrderStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DiagnosticOrder_Event) GetDescription() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DiagnosticOrder_Event) GetDateTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *DiagnosticOrder_Event) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// The items the orderer requested
type DiagnosticOrder_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code to indicate the item (test or panel) being ordered
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// If this item relates to specific specimens
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,5,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Location of requested test (if applicable)
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// proposed | draft | planned | requested | received | accepted |
	// in-progress | review | completed | cancelled | suspended | rejected |
	// failed
	Status *codes_go_proto.DiagnosticOrderStatusCode `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// Events specific to this item
	Event []*DiagnosticOrder_Event `protobuf:"bytes,8,rep,name=event,proto3" json:"event,omitempty"`
}

func (x *DiagnosticOrder_Item) Reset() {
	*x = DiagnosticOrder_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticOrder_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticOrder_Item) ProtoMessage() {}

func (x *DiagnosticOrder_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticOrder_Item.ProtoReflect.Descriptor instead.
func (*DiagnosticOrder_Item) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{28, 1}
}

func (x *DiagnosticOrder_Item) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticOrder_Item) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticOrder_Item) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DiagnosticOrder_Item) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *DiagnosticOrder_Item) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *DiagnosticOrder_Item) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *DiagnosticOrder_Item) GetStatus() *codes_go_proto.DiagnosticOrderStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DiagnosticOrder_Item) GetEvent() []*DiagnosticOrder_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Clinically Relevant time/time-period for report
type DiagnosticReport_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*DiagnosticReport_Effective_DateTime
	//	*DiagnosticReport_Effective_Period
	Effective isDiagnosticReport_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *DiagnosticReport_Effective) Reset() {
	*x = DiagnosticReport_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReport_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReport_Effective) ProtoMessage() {}

func (x *DiagnosticReport_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReport_Effective.ProtoReflect.Descriptor instead.
func (*DiagnosticReport_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{29, 0}
}

func (m *DiagnosticReport_Effective) GetEffective() isDiagnosticReport_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *DiagnosticReport_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*DiagnosticReport_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *DiagnosticReport_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*DiagnosticReport_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isDiagnosticReport_Effective_Effective interface {
	isDiagnosticReport_Effective_Effective()
}

type DiagnosticReport_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type DiagnosticReport_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*DiagnosticReport_Effective_DateTime) isDiagnosticReport_Effective_Effective() {}

func (*DiagnosticReport_Effective_Period) isDiagnosticReport_Effective_Effective() {}

// Key images associated with this report
type DiagnosticReport_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *DiagnosticReport_Image) Reset() {
	*x = DiagnosticReport_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReport_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReport_Image) ProtoMessage() {}

func (x *DiagnosticReport_Image) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReport_Image.ProtoReflect.Descriptor instead.
func (*DiagnosticReport_Image) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{29, 1}
}

func (x *DiagnosticReport_Image) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReport_Image) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticReport_Image) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DiagnosticReport_Image) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *DiagnosticReport_Image) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

// The items included
type DocumentManifest_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	P                 *DocumentManifest_Content_P     `protobuf:"bytes,4,opt,name=p,proto3" json:"p,omitempty"`
}

func (x *DocumentManifest_Content) Reset() {
	*x = DocumentManifest_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentManifest_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentManifest_Content) ProtoMessage() {}

func (x *DocumentManifest_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentManifest_Content.ProtoReflect.Descriptor instead.
func (*DocumentManifest_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{30, 0}
}

func (x *DocumentManifest_Content) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentManifest_Content) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DocumentManifest_Content) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DocumentManifest_Content) GetP() *DocumentManifest_Content_P {
	if x != nil {
		return x.P
	}
	return nil
}

// Related things
type DocumentManifest_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifiers of things that are related
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Related Resource
	Ref *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *DocumentManifest_Related) Reset() {
	*x = DocumentManifest_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentManifest_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentManifest_Related) ProtoMessage() {}

func (x *DocumentManifest_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentManifest_Related.ProtoReflect.Descriptor instead.
func (*DocumentManifest_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{30, 1}
}

func (x *DocumentManifest_Related) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentManifest_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DocumentManifest_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DocumentManifest_Related) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DocumentManifest_Related) GetRef() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Ref
	}
	return nil
}

// Contents of this set of documents
type DocumentManifest_Content_P struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to P:
	//	*DocumentManifest_Content_P_Attachment
	//	*DocumentManifest_Content_P_Reference
	P isDocumentManifest_Content_P_P `protobuf_oneof:"p"`
}

func (x *DocumentManifest_Content_P) Reset() {
	*x = DocumentManifest_Content_P{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentManifest_Content_P) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentManifest_Content_P) ProtoMessage() {}

func (x *DocumentManifest_Content_P) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentManifest_Content_P.ProtoReflect.Descriptor instead.
func (*DocumentManifest_Content_P) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{30, 0, 0}
}

func (m *DocumentManifest_Content_P) GetP() isDocumentManifest_Content_P_P {
	if m != nil {
		return m.P
	}
	return nil
}

func (x *DocumentManifest_Content_P) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetP().(*DocumentManifest_Content_P_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *DocumentManifest_Content_P) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetP().(*DocumentManifest_Content_P_Reference); ok {
		return x.Reference
	}
	return nil
}

type isDocumentManifest_Content_P_P interface {
	isDocumentManifest_Content_P_P()
}

type DocumentManifest_Content_P_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,1,opt,name=attachment,proto3,oneof"`
}

type DocumentManifest_Content_P_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*DocumentManifest_Content_P_Attachment) isDocumentManifest_Content_P_P() {}

func (*DocumentManifest_Content_P_Reference) isDocumentManifest_Content_P_P() {}

// Relationships to other documents
type DocumentReference_RelatesTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// replaces | transforms | signs | appends
	Code *codes_go_proto.DocumentRelationshipTypeCode `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Target of the relationship
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *DocumentReference_RelatesTo) Reset() {
	*x = DocumentReference_RelatesTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentReference_RelatesTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentReference_RelatesTo) ProtoMessage() {}

func (x *DocumentReference_RelatesTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentReference_RelatesTo.ProtoReflect.Descriptor instead.
func (*DocumentReference_RelatesTo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{31, 0}
}

func (x *DocumentReference_RelatesTo) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentReference_RelatesTo) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DocumentReference_RelatesTo) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DocumentReference_RelatesTo) GetCode() *codes_go_proto.DocumentRelationshipTypeCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *DocumentReference_RelatesTo) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Document referenced
type DocumentReference_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Where to access the document
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,4,opt,name=attachment,proto3" json:"attachment,omitempty"`
	// Format/content rules for the document
	Format []*datatypes_go_proto.Coding `protobuf:"bytes,5,rep,name=format,proto3" json:"format,omitempty"`
}

func (x *DocumentReference_Content) Reset() {
	*x = DocumentReference_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentReference_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentReference_Content) ProtoMessage() {}

func (x *DocumentReference_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentReference_Content.ProtoReflect.Descriptor instead.
func (*DocumentReference_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{31, 1}
}

func (x *DocumentReference_Content) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentReference_Content) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DocumentReference_Content) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DocumentReference_Content) GetAttachment() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *DocumentReference_Content) GetFormat() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Format
	}
	return nil
}

// Clinical context of document
type DocumentReference_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Context of the document  content
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Main Clinical Acts Documented
	Event []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=event,proto3" json:"event,omitempty"`
	// Time of service that is being documented
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
	// Kind of facility where patient was seen
	FacilityType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=facility_type,json=facilityType,proto3" json:"facility_type,omitempty"`
	// Additional details about where the content was created (e.g. clinical
	// specialty)
	PracticeSetting *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=practice_setting,json=practiceSetting,proto3" json:"practice_setting,omitempty"`
	// Patient demographics from source
	SourcePatientInfo *datatypes_go_proto.Reference        `protobuf:"bytes,9,opt,name=source_patient_info,json=sourcePatientInfo,proto3" json:"source_patient_info,omitempty"`
	Related           []*DocumentReference_Context_Related `protobuf:"bytes,10,rep,name=related,proto3" json:"related,omitempty"`
}

func (x *DocumentReference_Context) Reset() {
	*x = DocumentReference_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentReference_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentReference_Context) ProtoMessage() {}

func (x *DocumentReference_Context) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentReference_Context.ProtoReflect.Descriptor instead.
func (*DocumentReference_Context) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{31, 2}
}

func (x *DocumentReference_Context) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentReference_Context) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DocumentReference_Context) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DocumentReference_Context) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *DocumentReference_Context) GetEvent() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *DocumentReference_Context) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *DocumentReference_Context) GetFacilityType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FacilityType
	}
	return nil
}

func (x *DocumentReference_Context) GetPracticeSetting() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PracticeSetting
	}
	return nil
}

func (x *DocumentReference_Context) GetSourcePatientInfo() *datatypes_go_proto.Reference {
	if x != nil {
		return x.SourcePatientInfo
	}
	return nil
}

func (x *DocumentReference_Context) GetRelated() []*DocumentReference_Context_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

// Related identifiers or resources
type DocumentReference_Context_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier of related objects or events
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Related Resource
	Ref *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *DocumentReference_Context_Related) Reset() {
	*x = DocumentReference_Context_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentReference_Context_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentReference_Context_Related) ProtoMessage() {}

func (x *DocumentReference_Context_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentReference_Context_Related.ProtoReflect.Descriptor instead.
func (*DocumentReference_Context_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{31, 2, 0}
}

func (x *DocumentReference_Context_Related) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentReference_Context_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DocumentReference_Context_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DocumentReference_Context_Related) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DocumentReference_Context_Related) GetRef() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Ref
	}
	return nil
}

// List of past encounter statuses
type Encounter_StatusHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// planned | arrived | in-progress | onleave | finished | cancelled
	Status *codes_go_proto.EncounterStateCode `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The time that the episode was in the specified status
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Encounter_StatusHistory) Reset() {
	*x = Encounter_StatusHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encounter_StatusHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encounter_StatusHistory) ProtoMessage() {}

func (x *Encounter_StatusHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encounter_StatusHistory.ProtoReflect.Descriptor instead.
func (*Encounter_StatusHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{35, 0}
}

func (x *Encounter_StatusHistory) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Encounter_StatusHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Encounter_StatusHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Encounter_StatusHistory) GetStatus() *codes_go_proto.EncounterStateCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Encounter_StatusHistory) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// List of participants involved in the encounter
type Encounter_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Role of participant in encounter
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	// Period of time during the encounter participant was present
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// Persons involved in the encounter other than the patient
	Individual *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=individual,proto3" json:"individual,omitempty"`
}

func (x *Encounter_Participant) Reset() {
	*x = Encounter_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encounter_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encounter_Participant) ProtoMessage() {}

func (x *Encounter_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encounter_Participant.ProtoReflect.Descriptor instead.
func (*Encounter_Participant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{35, 1}
}

func (x *Encounter_Participant) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Encounter_Participant) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Encounter_Participant) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Encounter_Participant) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Encounter_Participant) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Encounter_Participant) GetIndividual() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Individual
	}
	return nil
}

// Details about the admission to a healthcare service
type Encounter_Hospitalization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Pre-admission identifier
	PreAdmissionIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=pre_admission_identifier,json=preAdmissionIdentifier,proto3" json:"pre_admission_identifier,omitempty"`
	// The location from which the patient came before admission
	Origin *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// From where patient was admitted (physician referral, transfer)
	AdmitSource *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=admit_source,json=admitSource,proto3" json:"admit_source,omitempty"`
	// The admitting diagnosis as reported by admitting practitioner
	AdmittingDiagnosis []*datatypes_go_proto.Reference `protobuf:"bytes,7,rep,name=admitting_diagnosis,json=admittingDiagnosis,proto3" json:"admitting_diagnosis,omitempty"`
	// The type of hospital re-admission that has occurred (if any). If the
	// value is absent, then this is not identified as a readmission
	ReAdmission *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=re_admission,json=reAdmission,proto3" json:"re_admission,omitempty"`
	// Diet preferences reported by the patient
	DietPreference []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=diet_preference,json=dietPreference,proto3" json:"diet_preference,omitempty"`
	// Special courtesies (VIP, board member)
	SpecialCourtesy []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,rep,name=special_courtesy,json=specialCourtesy,proto3" json:"special_courtesy,omitempty"`
	// Wheelchair, translator, stretcher, etc.
	SpecialArrangement []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,rep,name=special_arrangement,json=specialArrangement,proto3" json:"special_arrangement,omitempty"`
	// Location to which the patient is discharged
	Destination *datatypes_go_proto.Reference `protobuf:"bytes,12,opt,name=destination,proto3" json:"destination,omitempty"`
	// Category or kind of location after discharge
	DischargeDisposition *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=discharge_disposition,json=dischargeDisposition,proto3" json:"discharge_disposition,omitempty"`
	// The final diagnosis given a patient before release from the hospital
	// after all testing, surgery, and workup are complete
	DischargeDiagnosis []*datatypes_go_proto.Reference `protobuf:"bytes,14,rep,name=discharge_diagnosis,json=dischargeDiagnosis,proto3" json:"discharge_diagnosis,omitempty"`
}

func (x *Encounter_Hospitalization) Reset() {
	*x = Encounter_Hospitalization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encounter_Hospitalization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encounter_Hospitalization) ProtoMessage() {}

func (x *Encounter_Hospitalization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encounter_Hospitalization.ProtoReflect.Descriptor instead.
func (*Encounter_Hospitalization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{35, 2}
}

func (x *Encounter_Hospitalization) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Encounter_Hospitalization) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Encounter_Hospitalization) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Encounter_Hospitalization) GetPreAdmissionIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.PreAdmissionIdentifier
	}
	return nil
}

func (x *Encounter_Hospitalization) GetOrigin() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Encounter_Hospitalization) GetAdmitSource() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdmitSource
	}
	return nil
}

func (x *Encounter_Hospitalization) GetAdmittingDiagnosis() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AdmittingDiagnosis
	}
	return nil
}

func (x *Encounter_Hospitalization) GetReAdmission() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReAdmission
	}
	return nil
}

func (x *Encounter_Hospitalization) GetDietPreference() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DietPreference
	}
	return nil
}

func (x *Encounter_Hospitalization) GetSpecialCourtesy() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialCourtesy
	}
	return nil
}

func (x *Encounter_Hospitalization) GetSpecialArrangement() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.SpecialArrangement
	}
	return nil
}

func (x *Encounter_Hospitalization) GetDestination() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Encounter_Hospitalization) GetDischargeDisposition() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DischargeDisposition
	}
	return nil
}

func (x *Encounter_Hospitalization) GetDischargeDiagnosis() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.DischargeDiagnosis
	}
	return nil
}

// List of locations where the patient has been
type Encounter_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Location the encounter takes place
	Location *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// planned | active | reserved | completed
	Status *codes_go_proto.EncounterLocationStatusCode `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Time period during which the patient was present at the location
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Encounter_Location) Reset() {
	*x = Encounter_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encounter_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encounter_Location) ProtoMessage() {}

func (x *Encounter_Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encounter_Location.ProtoReflect.Descriptor instead.
func (*Encounter_Location) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{35, 3}
}

func (x *Encounter_Location) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Encounter_Location) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Encounter_Location) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Encounter_Location) GetLocation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Encounter_Location) GetStatus() *codes_go_proto.EncounterLocationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Encounter_Location) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Past list of status codes
type EpisodeOfCare_StatusHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// planned | waitlist | active | onhold | finished | cancelled
	Status *codes_go_proto.EpisodeOfCareStatusCode `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Period for the status
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *EpisodeOfCare_StatusHistory) Reset() {
	*x = EpisodeOfCare_StatusHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOfCare_StatusHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOfCare_StatusHistory) ProtoMessage() {}

func (x *EpisodeOfCare_StatusHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOfCare_StatusHistory.ProtoReflect.Descriptor instead.
func (*EpisodeOfCare_StatusHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{38, 0}
}

func (x *EpisodeOfCare_StatusHistory) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeOfCare_StatusHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EpisodeOfCare_StatusHistory) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EpisodeOfCare_StatusHistory) GetStatus() *codes_go_proto.EpisodeOfCareStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EpisodeOfCare_StatusHistory) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Other practitioners facilitating this episode of care
type EpisodeOfCare_CareTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Role taken by this team member
	Role []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=role,proto3" json:"role,omitempty"`
	// Period of time for this role
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// The practitioner (or Organization) within the team
	Member *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *EpisodeOfCare_CareTeam) Reset() {
	*x = EpisodeOfCare_CareTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOfCare_CareTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOfCare_CareTeam) ProtoMessage() {}

func (x *EpisodeOfCare_CareTeam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOfCare_CareTeam.ProtoReflect.Descriptor instead.
func (*EpisodeOfCare_CareTeam) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{38, 1}
}

func (x *EpisodeOfCare_CareTeam) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EpisodeOfCare_CareTeam) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *EpisodeOfCare_CareTeam) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *EpisodeOfCare_CareTeam) GetRole() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *EpisodeOfCare_CareTeam) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *EpisodeOfCare_CareTeam) GetMember() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Member
	}
	return nil
}

// (approximate) date of birth
type FamilyMemberHistory_Born struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Born:
	//	*FamilyMemberHistory_Born_Period
	//	*FamilyMemberHistory_Born_Date
	//	*FamilyMemberHistory_Born_StringValue
	Born isFamilyMemberHistory_Born_Born `protobuf_oneof:"born"`
}

func (x *FamilyMemberHistory_Born) Reset() {
	*x = FamilyMemberHistory_Born{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistory_Born) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistory_Born) ProtoMessage() {}

func (x *FamilyMemberHistory_Born) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistory_Born.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistory_Born) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{40, 0}
}

func (m *FamilyMemberHistory_Born) GetBorn() isFamilyMemberHistory_Born_Born {
	if m != nil {
		return m.Born
	}
	return nil
}

func (x *FamilyMemberHistory_Born) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetBorn().(*FamilyMemberHistory_Born_Period); ok {
		return x.Period
	}
	return nil
}

func (x *FamilyMemberHistory_Born) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetBorn().(*FamilyMemberHistory_Born_Date); ok {
		return x.Date
	}
	return nil
}

func (x *FamilyMemberHistory_Born) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetBorn().(*FamilyMemberHistory_Born_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilyMemberHistory_Born_Born interface {
	isFamilyMemberHistory_Born_Born()
}

type FamilyMemberHistory_Born_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type FamilyMemberHistory_Born_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,2,opt,name=date,proto3,oneof"`
}

type FamilyMemberHistory_Born_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilyMemberHistory_Born_Period) isFamilyMemberHistory_Born_Born() {}

func (*FamilyMemberHistory_Born_Date) isFamilyMemberHistory_Born_Born() {}

func (*FamilyMemberHistory_Born_StringValue) isFamilyMemberHistory_Born_Born() {}

// (approximate) age
type FamilyMemberHistory_AgeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Age:
	//	*FamilyMemberHistory_AgeType_Quantity
	//	*FamilyMemberHistory_AgeType_Range
	//	*FamilyMemberHistory_AgeType_StringValue
	Age isFamilyMemberHistory_AgeType_Age `protobuf_oneof:"age"`
}

func (x *FamilyMemberHistory_AgeType) Reset() {
	*x = FamilyMemberHistory_AgeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistory_AgeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistory_AgeType) ProtoMessage() {}

func (x *FamilyMemberHistory_AgeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistory_AgeType.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistory_AgeType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{40, 1}
}

func (m *FamilyMemberHistory_AgeType) GetAge() isFamilyMemberHistory_AgeType_Age {
	if m != nil {
		return m.Age
	}
	return nil
}

func (x *FamilyMemberHistory_AgeType) GetQuantity() *datatypes_go_proto.Age {
	if x, ok := x.GetAge().(*FamilyMemberHistory_AgeType_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *FamilyMemberHistory_AgeType) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetAge().(*FamilyMemberHistory_AgeType_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilyMemberHistory_AgeType) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetAge().(*FamilyMemberHistory_AgeType_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilyMemberHistory_AgeType_Age interface {
	isFamilyMemberHistory_AgeType_Age()
}

type FamilyMemberHistory_AgeType_Quantity struct {
	Quantity *datatypes_go_proto.Age `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type FamilyMemberHistory_AgeType_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type FamilyMemberHistory_AgeType_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilyMemberHistory_AgeType_Quantity) isFamilyMemberHistory_AgeType_Age() {}

func (*FamilyMemberHistory_AgeType_Range) isFamilyMemberHistory_AgeType_Age() {}

func (*FamilyMemberHistory_AgeType_StringValue) isFamilyMemberHistory_AgeType_Age() {}

// Dead? How old/when?
type FamilyMemberHistory_Deceased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Deceased:
	//	*FamilyMemberHistory_Deceased_Boolean
	//	*FamilyMemberHistory_Deceased_Quantity
	//	*FamilyMemberHistory_Deceased_Range
	//	*FamilyMemberHistory_Deceased_Date
	//	*FamilyMemberHistory_Deceased_StringValue
	Deceased isFamilyMemberHistory_Deceased_Deceased `protobuf_oneof:"deceased"`
}

func (x *FamilyMemberHistory_Deceased) Reset() {
	*x = FamilyMemberHistory_Deceased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistory_Deceased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistory_Deceased) ProtoMessage() {}

func (x *FamilyMemberHistory_Deceased) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistory_Deceased.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistory_Deceased) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{40, 2}
}

func (m *FamilyMemberHistory_Deceased) GetDeceased() isFamilyMemberHistory_Deceased_Deceased {
	if m != nil {
		return m.Deceased
	}
	return nil
}

func (x *FamilyMemberHistory_Deceased) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetDeceased().(*FamilyMemberHistory_Deceased_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *FamilyMemberHistory_Deceased) GetQuantity() *datatypes_go_proto.Age {
	if x, ok := x.GetDeceased().(*FamilyMemberHistory_Deceased_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *FamilyMemberHistory_Deceased) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetDeceased().(*FamilyMemberHistory_Deceased_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilyMemberHistory_Deceased) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetDeceased().(*FamilyMemberHistory_Deceased_Date); ok {
		return x.Date
	}
	return nil
}

func (x *FamilyMemberHistory_Deceased) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetDeceased().(*FamilyMemberHistory_Deceased_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilyMemberHistory_Deceased_Deceased interface {
	isFamilyMemberHistory_Deceased_Deceased()
}

type FamilyMemberHistory_Deceased_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type FamilyMemberHistory_Deceased_Quantity struct {
	Quantity *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type FamilyMemberHistory_Deceased_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

type FamilyMemberHistory_Deceased_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type FamilyMemberHistory_Deceased_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilyMemberHistory_Deceased_Boolean) isFamilyMemberHistory_Deceased_Deceased() {}

func (*FamilyMemberHistory_Deceased_Quantity) isFamilyMemberHistory_Deceased_Deceased() {}

func (*FamilyMemberHistory_Deceased_Range) isFamilyMemberHistory_Deceased_Deceased() {}

func (*FamilyMemberHistory_Deceased_Date) isFamilyMemberHistory_Deceased_Deceased() {}

func (*FamilyMemberHistory_Deceased_StringValue) isFamilyMemberHistory_Deceased_Deceased() {}

// Condition that the related person had
type FamilyMemberHistory_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Condition suffered by relation
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// deceased | permanent disability | etc.
	Outcome *datatypes_go_proto.CodeableConcept  `protobuf:"bytes,5,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Onset   *FamilyMemberHistory_Condition_Onset `protobuf:"bytes,6,opt,name=onset,proto3" json:"onset,omitempty"`
	// Extra information about condition
	Note *datatypes_go_proto.Annotation `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *FamilyMemberHistory_Condition) Reset() {
	*x = FamilyMemberHistory_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistory_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistory_Condition) ProtoMessage() {}

func (x *FamilyMemberHistory_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistory_Condition.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistory_Condition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{40, 3}
}

func (x *FamilyMemberHistory_Condition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistory_Condition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *FamilyMemberHistory_Condition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *FamilyMemberHistory_Condition) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *FamilyMemberHistory_Condition) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *FamilyMemberHistory_Condition) GetOnset() *FamilyMemberHistory_Condition_Onset {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *FamilyMemberHistory_Condition) GetNote() *datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// When condition first manifested
type FamilyMemberHistory_Condition_Onset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Onset:
	//	*FamilyMemberHistory_Condition_Onset_Quantity
	//	*FamilyMemberHistory_Condition_Onset_Range
	//	*FamilyMemberHistory_Condition_Onset_Period
	//	*FamilyMemberHistory_Condition_Onset_StringValue
	Onset isFamilyMemberHistory_Condition_Onset_Onset `protobuf_oneof:"onset"`
}

func (x *FamilyMemberHistory_Condition_Onset) Reset() {
	*x = FamilyMemberHistory_Condition_Onset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistory_Condition_Onset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistory_Condition_Onset) ProtoMessage() {}

func (x *FamilyMemberHistory_Condition_Onset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistory_Condition_Onset.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistory_Condition_Onset) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{40, 3, 0}
}

func (m *FamilyMemberHistory_Condition_Onset) GetOnset() isFamilyMemberHistory_Condition_Onset_Onset {
	if m != nil {
		return m.Onset
	}
	return nil
}

func (x *FamilyMemberHistory_Condition_Onset) GetQuantity() *datatypes_go_proto.Age {
	if x, ok := x.GetOnset().(*FamilyMemberHistory_Condition_Onset_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *FamilyMemberHistory_Condition_Onset) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetOnset().(*FamilyMemberHistory_Condition_Onset_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilyMemberHistory_Condition_Onset) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetOnset().(*FamilyMemberHistory_Condition_Onset_Period); ok {
		return x.Period
	}
	return nil
}

func (x *FamilyMemberHistory_Condition_Onset) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetOnset().(*FamilyMemberHistory_Condition_Onset_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilyMemberHistory_Condition_Onset_Onset interface {
	isFamilyMemberHistory_Condition_Onset_Onset()
}

type FamilyMemberHistory_Condition_Onset_Quantity struct {
	Quantity *datatypes_go_proto.Age `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type FamilyMemberHistory_Condition_Onset_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type FamilyMemberHistory_Condition_Onset_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type FamilyMemberHistory_Condition_Onset_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilyMemberHistory_Condition_Onset_Quantity) isFamilyMemberHistory_Condition_Onset_Onset() {}

func (*FamilyMemberHistory_Condition_Onset_Range) isFamilyMemberHistory_Condition_Onset_Onset() {}

func (*FamilyMemberHistory_Condition_Onset_Period) isFamilyMemberHistory_Condition_Onset_Onset() {}

func (*FamilyMemberHistory_Condition_Onset_StringValue) isFamilyMemberHistory_Condition_Onset_Onset() {
}

// When goal pursuit begins
type Goal_Start struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Start:
	//	*Goal_Start_Date
	//	*Goal_Start_CodeableConcept
	Start isGoal_Start_Start `protobuf_oneof:"start"`
}

func (x *Goal_Start) Reset() {
	*x = Goal_Start{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goal_Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal_Start) ProtoMessage() {}

func (x *Goal_Start) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal_Start.ProtoReflect.Descriptor instead.
func (*Goal_Start) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{42, 0}
}

func (m *Goal_Start) GetStart() isGoal_Start_Start {
	if m != nil {
		return m.Start
	}
	return nil
}

func (x *Goal_Start) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetStart().(*Goal_Start_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Goal_Start) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetStart().(*Goal_Start_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isGoal_Start_Start interface {
	isGoal_Start_Start()
}

type Goal_Start_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type Goal_Start_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*Goal_Start_Date) isGoal_Start_Start() {}

func (*Goal_Start_CodeableConcept) isGoal_Start_Start() {}

// Reach goal on or before
type Goal_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*Goal_Target_Date
	//	*Goal_Target_Quantity
	Target isGoal_Target_Target `protobuf_oneof:"target"`
}

func (x *Goal_Target) Reset() {
	*x = Goal_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goal_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal_Target) ProtoMessage() {}

func (x *Goal_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal_Target.ProtoReflect.Descriptor instead.
func (*Goal_Target) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{42, 1}
}

func (m *Goal_Target) GetTarget() isGoal_Target_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Goal_Target) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetTarget().(*Goal_Target_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Goal_Target) GetQuantity() *datatypes_go_proto.Duration {
	if x, ok := x.GetTarget().(*Goal_Target_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isGoal_Target_Target interface {
	isGoal_Target_Target()
}

type Goal_Target_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type Goal_Target_Quantity struct {
	Quantity *datatypes_go_proto.Duration `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

func (*Goal_Target_Date) isGoal_Target_Target() {}

func (*Goal_Target_Quantity) isGoal_Target_Target() {}

// What was end result of goal?
type Goal_Outcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Result            *Goal_Outcome_Result            `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Goal_Outcome) Reset() {
	*x = Goal_Outcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goal_Outcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal_Outcome) ProtoMessage() {}

func (x *Goal_Outcome) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal_Outcome.ProtoReflect.Descriptor instead.
func (*Goal_Outcome) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{42, 2}
}

func (x *Goal_Outcome) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Goal_Outcome) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Goal_Outcome) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Goal_Outcome) GetResult() *Goal_Outcome_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// Code or observation that resulted from goal
type Goal_Outcome_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*Goal_Outcome_Result_CodeableConcept
	//	*Goal_Outcome_Result_Reference
	Result isGoal_Outcome_Result_Result `protobuf_oneof:"result"`
}

func (x *Goal_Outcome_Result) Reset() {
	*x = Goal_Outcome_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goal_Outcome_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goal_Outcome_Result) ProtoMessage() {}

func (x *Goal_Outcome_Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goal_Outcome_Result.ProtoReflect.Descriptor instead.
func (*Goal_Outcome_Result) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{42, 2, 0}
}

func (m *Goal_Outcome_Result) GetResult() isGoal_Outcome_Result_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Goal_Outcome_Result) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetResult().(*Goal_Outcome_Result_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Goal_Outcome_Result) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetResult().(*Goal_Outcome_Result_Reference); ok {
		return x.Reference
	}
	return nil
}

type isGoal_Outcome_Result_Result interface {
	isGoal_Outcome_Result_Result()
}

type Goal_Outcome_Result_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Goal_Outcome_Result_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Goal_Outcome_Result_CodeableConcept) isGoal_Outcome_Result_Result() {}

func (*Goal_Outcome_Result_Reference) isGoal_Outcome_Result_Result() {}

// Trait of group members
type Group_Characteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Kind of characteristic
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Group_Characteristic_Value         `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Group includes or excludes
	Exclude *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=exclude,proto3" json:"exclude,omitempty"`
	// Period over which characteristic is tested
	Period *datatypes_go_proto.Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Group_Characteristic) Reset() {
	*x = Group_Characteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group_Characteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group_Characteristic) ProtoMessage() {}

func (x *Group_Characteristic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group_Characteristic.ProtoReflect.Descriptor instead.
func (*Group_Characteristic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{43, 0}
}

func (x *Group_Characteristic) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Group_Characteristic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Group_Characteristic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Group_Characteristic) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Group_Characteristic) GetValue() *Group_Characteristic_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Group_Characteristic) GetExclude() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Exclude
	}
	return nil
}

func (x *Group_Characteristic) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Who or what is in group
type Group_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to the group member
	Entity *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=entity,proto3" json:"entity,omitempty"`
	// Period member belonged to the group
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// If member is no longer in group
	Inactive *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *Group_Member) Reset() {
	*x = Group_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group_Member) ProtoMessage() {}

func (x *Group_Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group_Member.ProtoReflect.Descriptor instead.
func (*Group_Member) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{43, 1}
}

func (x *Group_Member) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Group_Member) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Group_Member) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Group_Member) GetEntity() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Group_Member) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Group_Member) GetInactive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Inactive
	}
	return nil
}

// Value held by characteristic
type Group_Characteristic_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Group_Characteristic_Value_CodeableConcept
	//	*Group_Characteristic_Value_Boolean
	//	*Group_Characteristic_Value_Quantity
	//	*Group_Characteristic_Value_Range
	Value isGroup_Characteristic_Value_Value `protobuf_oneof:"value"`
}

func (x *Group_Characteristic_Value) Reset() {
	*x = Group_Characteristic_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group_Characteristic_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group_Characteristic_Value) ProtoMessage() {}

func (x *Group_Characteristic_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group_Characteristic_Value.ProtoReflect.Descriptor instead.
func (*Group_Characteristic_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{43, 0, 0}
}

func (m *Group_Characteristic_Value) GetValue() isGroup_Characteristic_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Group_Characteristic_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*Group_Characteristic_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Group_Characteristic_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*Group_Characteristic_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Group_Characteristic_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Group_Characteristic_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Group_Characteristic_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*Group_Characteristic_Value_Range); ok {
		return x.Range
	}
	return nil
}

type isGroup_Characteristic_Value_Value interface {
	isGroup_Characteristic_Value_Value()
}

type Group_Characteristic_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Group_Characteristic_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type Group_Characteristic_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

type Group_Characteristic_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

func (*Group_Characteristic_Value_CodeableConcept) isGroup_Characteristic_Value_Value() {}

func (*Group_Characteristic_Value_Boolean) isGroup_Characteristic_Value_Value() {}

func (*Group_Characteristic_Value_Quantity) isGroup_Characteristic_Value_Value() {}

func (*Group_Characteristic_Value_Range) isGroup_Characteristic_Value_Value() {}

// Specific service delivered or performed
type HealthcareService_ServiceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of service delivered or performed
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Specialties handled by the Service Site
	Specialty []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=specialty,proto3" json:"specialty,omitempty"`
}

func (x *HealthcareService_ServiceType) Reset() {
	*x = HealthcareService_ServiceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthcareService_ServiceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthcareService_ServiceType) ProtoMessage() {}

func (x *HealthcareService_ServiceType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthcareService_ServiceType.ProtoReflect.Descriptor instead.
func (*HealthcareService_ServiceType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{44, 0}
}

func (x *HealthcareService_ServiceType) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HealthcareService_ServiceType) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *HealthcareService_ServiceType) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *HealthcareService_ServiceType) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *HealthcareService_ServiceType) GetSpecialty() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Specialty
	}
	return nil
}

// Times the Service Site is available
type HealthcareService_AvailableTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// mon | tue | wed | thu | fri | sat | sun
	DaysOfWeek []*codes_go_proto.DaysOfWeekCode `protobuf:"bytes,4,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"`
	// Always available? e.g. 24 hour service
	AllDay *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=all_day,json=allDay,proto3" json:"all_day,omitempty"`
	// Opening time of day (ignored if allDay = true)
	AvailableStartTime *datatypes_go_proto.Time `protobuf:"bytes,6,opt,name=available_start_time,json=availableStartTime,proto3" json:"available_start_time,omitempty"`
	// Closing time of day (ignored if allDay = true)
	AvailableEndTime *datatypes_go_proto.Time `protobuf:"bytes,7,opt,name=available_end_time,json=availableEndTime,proto3" json:"available_end_time,omitempty"`
}

func (x *HealthcareService_AvailableTime) Reset() {
	*x = HealthcareService_AvailableTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthcareService_AvailableTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthcareService_AvailableTime) ProtoMessage() {}

func (x *HealthcareService_AvailableTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthcareService_AvailableTime.ProtoReflect.Descriptor instead.
func (*HealthcareService_AvailableTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{44, 1}
}

func (x *HealthcareService_AvailableTime) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HealthcareService_AvailableTime) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *HealthcareService_AvailableTime) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *HealthcareService_AvailableTime) GetDaysOfWeek() []*codes_go_proto.DaysOfWeekCode {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *HealthcareService_AvailableTime) GetAllDay() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.AllDay
	}
	return nil
}

func (x *HealthcareService_AvailableTime) GetAvailableStartTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.AvailableStartTime
	}
	return nil
}

func (x *HealthcareService_AvailableTime) GetAvailableEndTime() *datatypes_go_proto.Time {
	if x != nil {
		return x.AvailableEndTime
	}
	return nil
}

// Not available during this time due to provided reason
type HealthcareService_NotAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reason presented to the user explaining why time not available
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Service not availablefrom this date
	During *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=during,proto3" json:"during,omitempty"`
}

func (x *HealthcareService_NotAvailable) Reset() {
	*x = HealthcareService_NotAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthcareService_NotAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthcareService_NotAvailable) ProtoMessage() {}

func (x *HealthcareService_NotAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthcareService_NotAvailable.ProtoReflect.Descriptor instead.
func (*HealthcareService_NotAvailable) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{44, 2}
}

func (x *HealthcareService_NotAvailable) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HealthcareService_NotAvailable) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *HealthcareService_NotAvailable) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *HealthcareService_NotAvailable) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *HealthcareService_NotAvailable) GetDuring() *datatypes_go_proto.Period {
	if x != nil {
		return x.During
	}
	return nil
}

// Study identity of the selected instances
type ImagingObjectSelection_Study struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Study instance UID
	Uid *datatypes_go_proto.Oid `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// Retrieve study URL
	Url *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// Reference to ImagingStudy
	ImagingStudy *datatypes_go_proto.Reference          `protobuf:"bytes,6,opt,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Series       []*ImagingObjectSelection_Study_Series `protobuf:"bytes,7,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *ImagingObjectSelection_Study) Reset() {
	*x = ImagingObjectSelection_Study{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingObjectSelection_Study) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingObjectSelection_Study) ProtoMessage() {}

func (x *ImagingObjectSelection_Study) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingObjectSelection_Study.ProtoReflect.Descriptor instead.
func (*ImagingObjectSelection_Study) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{45, 0}
}

func (x *ImagingObjectSelection_Study) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImagingObjectSelection_Study) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImagingObjectSelection_Study) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImagingObjectSelection_Study) GetUid() *datatypes_go_proto.Oid {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ImagingObjectSelection_Study) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ImagingObjectSelection_Study) GetImagingStudy() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *ImagingObjectSelection_Study) GetSeries() []*ImagingObjectSelection_Study_Series {
	if x != nil {
		return x.Series
	}
	return nil
}

// Series identity of the selected instances
type ImagingObjectSelection_Study_Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Series instance UID
	Uid *datatypes_go_proto.Oid `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// Retrieve series URL
	Url      *datatypes_go_proto.Uri                         `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Instance []*ImagingObjectSelection_Study_Series_Instance `protobuf:"bytes,6,rep,name=instance,proto3" json:"instance,omitempty"`
}

func (x *ImagingObjectSelection_Study_Series) Reset() {
	*x = ImagingObjectSelection_Study_Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingObjectSelection_Study_Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingObjectSelection_Study_Series) ProtoMessage() {}

func (x *ImagingObjectSelection_Study_Series) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingObjectSelection_Study_Series.ProtoReflect.Descriptor instead.
func (*ImagingObjectSelection_Study_Series) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{45, 0, 0}
}

func (x *ImagingObjectSelection_Study_Series) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series) GetUid() *datatypes_go_proto.Oid {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series) GetInstance() []*ImagingObjectSelection_Study_Series_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

// The selected instance
type ImagingObjectSelection_Study_Series_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// SOP class UID of instance
	SopClass *datatypes_go_proto.Oid `protobuf:"bytes,4,opt,name=sop_class,json=sopClass,proto3" json:"sop_class,omitempty"`
	// Selected instance UID
	Uid *datatypes_go_proto.Oid `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// Retrieve instance URL
	Url    *datatypes_go_proto.Uri                                `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Frames []*ImagingObjectSelection_Study_Series_Instance_Frames `protobuf:"bytes,7,rep,name=frames,proto3" json:"frames,omitempty"`
}

func (x *ImagingObjectSelection_Study_Series_Instance) Reset() {
	*x = ImagingObjectSelection_Study_Series_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingObjectSelection_Study_Series_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingObjectSelection_Study_Series_Instance) ProtoMessage() {}

func (x *ImagingObjectSelection_Study_Series_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingObjectSelection_Study_Series_Instance.ProtoReflect.Descriptor instead.
func (*ImagingObjectSelection_Study_Series_Instance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{45, 0, 0, 0}
}

func (x *ImagingObjectSelection_Study_Series_Instance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance) GetSopClass() *datatypes_go_proto.Oid {
	if x != nil {
		return x.SopClass
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance) GetUid() *datatypes_go_proto.Oid {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance) GetFrames() []*ImagingObjectSelection_Study_Series_Instance_Frames {
	if x != nil {
		return x.Frames
	}
	return nil
}

// The frame set
type ImagingObjectSelection_Study_Series_Instance_Frames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Frame numbers
	FrameNumbers []*datatypes_go_proto.UnsignedInt `protobuf:"bytes,4,rep,name=frame_numbers,json=frameNumbers,proto3" json:"frame_numbers,omitempty"`
	// Retrieve frame URL
	Url *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ImagingObjectSelection_Study_Series_Instance_Frames) Reset() {
	*x = ImagingObjectSelection_Study_Series_Instance_Frames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingObjectSelection_Study_Series_Instance_Frames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingObjectSelection_Study_Series_Instance_Frames) ProtoMessage() {}

func (x *ImagingObjectSelection_Study_Series_Instance_Frames) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingObjectSelection_Study_Series_Instance_Frames.ProtoReflect.Descriptor instead.
func (*ImagingObjectSelection_Study_Series_Instance_Frames) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{45, 0, 0, 0, 0}
}

func (x *ImagingObjectSelection_Study_Series_Instance_Frames) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance_Frames) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance_Frames) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance_Frames) GetFrameNumbers() []*datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.FrameNumbers
	}
	return nil
}

func (x *ImagingObjectSelection_Study_Series_Instance_Frames) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

// Each study has one or more series of instances
type ImagingStudy_Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Numeric identifier of this series
	Number *datatypes_go_proto.UnsignedInt `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// The modality of the instances in the series
	Modality *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=modality,proto3" json:"modality,omitempty"`
	// Formal identifier for this series
	Uid *datatypes_go_proto.Oid `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	// A description of the series
	Description *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Number of Series Related Instances
	NumberOfInstances *datatypes_go_proto.UnsignedInt `protobuf:"bytes,8,opt,name=number_of_instances,json=numberOfInstances,proto3" json:"number_of_instances,omitempty"`
	// ONLINE | OFFLINE | NEARLINE | UNAVAILABLE
	Availability *codes_go_proto.InstanceAvailabilityCode `protobuf:"bytes,9,opt,name=availability,proto3" json:"availability,omitempty"`
	// Location of the referenced instance(s)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	// Body part examined
	BodySite *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Body part laterality
	Laterality *datatypes_go_proto.Coding `protobuf:"bytes,12,opt,name=laterality,proto3" json:"laterality,omitempty"`
	// When the series started
	Started  *datatypes_go_proto.DateTime    `protobuf:"bytes,13,opt,name=started,proto3" json:"started,omitempty"`
	Instance []*ImagingStudy_Series_Instance `protobuf:"bytes,14,rep,name=instance,proto3" json:"instance,omitempty"`
}

func (x *ImagingStudy_Series) Reset() {
	*x = ImagingStudy_Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingStudy_Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingStudy_Series) ProtoMessage() {}

func (x *ImagingStudy_Series) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingStudy_Series.ProtoReflect.Descriptor instead.
func (*ImagingStudy_Series) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{46, 0}
}

func (x *ImagingStudy_Series) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImagingStudy_Series) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImagingStudy_Series) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImagingStudy_Series) GetNumber() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *ImagingStudy_Series) GetModality() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Modality
	}
	return nil
}

func (x *ImagingStudy_Series) GetUid() *datatypes_go_proto.Oid {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ImagingStudy_Series) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ImagingStudy_Series) GetNumberOfInstances() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.NumberOfInstances
	}
	return nil
}

func (x *ImagingStudy_Series) GetAvailability() *codes_go_proto.InstanceAvailabilityCode {
	if x != nil {
		return x.Availability
	}
	return nil
}

func (x *ImagingStudy_Series) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ImagingStudy_Series) GetBodySite() *datatypes_go_proto.Coding {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *ImagingStudy_Series) GetLaterality() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Laterality
	}
	return nil
}

func (x *ImagingStudy_Series) GetStarted() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *ImagingStudy_Series) GetInstance() []*ImagingStudy_Series_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

// A single SOP instance from the series
type ImagingStudy_Series_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The number of this instance in the series
	Number *datatypes_go_proto.UnsignedInt `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// Formal identifier for this instance
	Uid *datatypes_go_proto.Oid `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// DICOM class type
	SopClass *datatypes_go_proto.Oid `protobuf:"bytes,6,opt,name=sop_class,json=sopClass,proto3" json:"sop_class,omitempty"`
	// Type of instance (image etc.)
	Type *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// Description of instance
	Title *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	// Content of the instance
	Content []*datatypes_go_proto.Attachment `protobuf:"bytes,9,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *ImagingStudy_Series_Instance) Reset() {
	*x = ImagingStudy_Series_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingStudy_Series_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingStudy_Series_Instance) ProtoMessage() {}

func (x *ImagingStudy_Series_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingStudy_Series_Instance.ProtoReflect.Descriptor instead.
func (*ImagingStudy_Series_Instance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{46, 0, 0}
}

func (x *ImagingStudy_Series_Instance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImagingStudy_Series_Instance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImagingStudy_Series_Instance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImagingStudy_Series_Instance) GetNumber() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *ImagingStudy_Series_Instance) GetUid() *datatypes_go_proto.Oid {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ImagingStudy_Series_Instance) GetSopClass() *datatypes_go_proto.Oid {
	if x != nil {
		return x.SopClass
	}
	return nil
}

func (x *ImagingStudy_Series_Instance) GetType() *datatypes_go_proto.String {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ImagingStudy_Series_Instance) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ImagingStudy_Series_Instance) GetContent() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.Content
	}
	return nil
}

// Administration/non-administration reasons
type Immunization_Explanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Why immunization occurred
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=reason,proto3" json:"reason,omitempty"`
	// Why immunization did not occur
	ReasonNotGiven []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=reason_not_given,json=reasonNotGiven,proto3" json:"reason_not_given,omitempty"`
}

func (x *Immunization_Explanation) Reset() {
	*x = Immunization_Explanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization_Explanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization_Explanation) ProtoMessage() {}

func (x *Immunization_Explanation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization_Explanation.ProtoReflect.Descriptor instead.
func (*Immunization_Explanation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{47, 0}
}

func (x *Immunization_Explanation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization_Explanation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Immunization_Explanation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Immunization_Explanation) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Immunization_Explanation) GetReasonNotGiven() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonNotGiven
	}
	return nil
}

// Details of a reaction that follows immunization
type Immunization_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// When reaction started
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Additional information on reaction
	Detail *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	// Indicates self-reported reaction
	Reported *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=reported,proto3" json:"reported,omitempty"`
}

func (x *Immunization_Reaction) Reset() {
	*x = Immunization_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization_Reaction) ProtoMessage() {}

func (x *Immunization_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization_Reaction.ProtoReflect.Descriptor instead.
func (*Immunization_Reaction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{47, 1}
}

func (x *Immunization_Reaction) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization_Reaction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Immunization_Reaction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Immunization_Reaction) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Immunization_Reaction) GetDetail() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *Immunization_Reaction) GetReported() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Reported
	}
	return nil
}

// What protocol was followed
type Immunization_VaccinationProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Dose number within series
	DoseSequence *datatypes_go_proto.PositiveInt `protobuf:"bytes,4,opt,name=dose_sequence,json=doseSequence,proto3" json:"dose_sequence,omitempty"`
	// Details of vaccine protocol
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Who is responsible for protocol
	Authority *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=authority,proto3" json:"authority,omitempty"`
	// Name of vaccine series
	Series *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=series,proto3" json:"series,omitempty"`
	// Recommended number of doses for immunity
	SeriesDoses *datatypes_go_proto.PositiveInt `protobuf:"bytes,8,opt,name=series_doses,json=seriesDoses,proto3" json:"series_doses,omitempty"`
	// Disease immunized against
	TargetDisease []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,rep,name=target_disease,json=targetDisease,proto3" json:"target_disease,omitempty"`
	// Indicates if dose counts towards immunity
	DoseStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=dose_status,json=doseStatus,proto3" json:"dose_status,omitempty"`
	// Why dose does (not) count
	DoseStatusReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=dose_status_reason,json=doseStatusReason,proto3" json:"dose_status_reason,omitempty"`
}

func (x *Immunization_VaccinationProtocol) Reset() {
	*x = Immunization_VaccinationProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Immunization_VaccinationProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immunization_VaccinationProtocol) ProtoMessage() {}

func (x *Immunization_VaccinationProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immunization_VaccinationProtocol.ProtoReflect.Descriptor instead.
func (*Immunization_VaccinationProtocol) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{47, 2}
}

func (x *Immunization_VaccinationProtocol) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetDoseSequence() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.DoseSequence
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetSeries() *datatypes_go_proto.String {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetSeriesDoses() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.SeriesDoses
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetTargetDisease() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.TargetDisease
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetDoseStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DoseStatus
	}
	return nil
}

func (x *Immunization_VaccinationProtocol) GetDoseStatusReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DoseStatusReason
	}
	return nil
}

// Vaccine administration recommendations
type ImmunizationRecommendation_Recommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Date recommendation created
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Vaccine recommendation applies to
	VaccineCode *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=vaccine_code,json=vaccineCode,proto3" json:"vaccine_code,omitempty"`
	// Recommended dose number
	DoseNumber *datatypes_go_proto.PositiveInt `protobuf:"bytes,6,opt,name=dose_number,json=doseNumber,proto3" json:"dose_number,omitempty"`
	// Vaccine administration status
	ForecastStatus *datatypes_go_proto.CodeableConcept                        `protobuf:"bytes,7,opt,name=forecast_status,json=forecastStatus,proto3" json:"forecast_status,omitempty"`
	DateCriterion  []*ImmunizationRecommendation_Recommendation_DateCriterion `protobuf:"bytes,8,rep,name=date_criterion,json=dateCriterion,proto3" json:"date_criterion,omitempty"`
	Protocol       *ImmunizationRecommendation_Recommendation_Protocol        `protobuf:"bytes,9,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Past immunizations supporting recommendation
	SupportingImmunization []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=supporting_immunization,json=supportingImmunization,proto3" json:"supporting_immunization,omitempty"`
	// Patient observations supporting recommendation
	SupportingPatientInformation []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=supporting_patient_information,json=supportingPatientInformation,proto3" json:"supporting_patient_information,omitempty"`
}

func (x *ImmunizationRecommendation_Recommendation) Reset() {
	*x = ImmunizationRecommendation_Recommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationRecommendation_Recommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationRecommendation_Recommendation) ProtoMessage() {}

func (x *ImmunizationRecommendation_Recommendation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationRecommendation_Recommendation.ProtoReflect.Descriptor instead.
func (*ImmunizationRecommendation_Recommendation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{48, 0}
}

func (x *ImmunizationRecommendation_Recommendation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetVaccineCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.VaccineCode
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetDoseNumber() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.DoseNumber
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetForecastStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ForecastStatus
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetDateCriterion() []*ImmunizationRecommendation_Recommendation_DateCriterion {
	if x != nil {
		return x.DateCriterion
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetProtocol() *ImmunizationRecommendation_Recommendation_Protocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetSupportingImmunization() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingImmunization
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation) GetSupportingPatientInformation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingPatientInformation
	}
	return nil
}

// Dates governing proposed immunization
type ImmunizationRecommendation_Recommendation_DateCriterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of date
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Recommended date
	Value *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ImmunizationRecommendation_Recommendation_DateCriterion) Reset() {
	*x = ImmunizationRecommendation_Recommendation_DateCriterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationRecommendation_Recommendation_DateCriterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationRecommendation_Recommendation_DateCriterion) ProtoMessage() {}

func (x *ImmunizationRecommendation_Recommendation_DateCriterion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationRecommendation_Recommendation_DateCriterion.ProtoReflect.Descriptor instead.
func (*ImmunizationRecommendation_Recommendation_DateCriterion) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{48, 0, 0}
}

func (x *ImmunizationRecommendation_Recommendation_DateCriterion) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_DateCriterion) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_DateCriterion) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_DateCriterion) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_DateCriterion) GetValue() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Value
	}
	return nil
}

// Protocol used by recommendation
type ImmunizationRecommendation_Recommendation_Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Dose number within sequence
	DoseSequence *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=dose_sequence,json=doseSequence,proto3" json:"dose_sequence,omitempty"`
	// Protocol details
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Who is responsible for protocol
	Authority *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=authority,proto3" json:"authority,omitempty"`
	// Name of vaccination series
	Series *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=series,proto3" json:"series,omitempty"`
}

func (x *ImmunizationRecommendation_Recommendation_Protocol) Reset() {
	*x = ImmunizationRecommendation_Recommendation_Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmunizationRecommendation_Recommendation_Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmunizationRecommendation_Recommendation_Protocol) ProtoMessage() {}

func (x *ImmunizationRecommendation_Recommendation_Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmunizationRecommendation_Recommendation_Protocol.ProtoReflect.Descriptor instead.
func (*ImmunizationRecommendation_Recommendation_Protocol) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{48, 0, 1}
}

func (x *ImmunizationRecommendation_Recommendation_Protocol) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_Protocol) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_Protocol) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_Protocol) GetDoseSequence() *datatypes_go_proto.Integer {
	if x != nil {
		return x.DoseSequence
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_Protocol) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_Protocol) GetAuthority() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *ImmunizationRecommendation_Recommendation_Protocol) GetSeries() *datatypes_go_proto.String {
	if x != nil {
		return x.Series
	}
	return nil
}

// Contact details of the publisher
type ImplementationGuide_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of a individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *ImplementationGuide_Contact) Reset() {
	*x = ImplementationGuide_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationGuide_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationGuide_Contact) ProtoMessage() {}

func (x *ImplementationGuide_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationGuide_Contact.ProtoReflect.Descriptor instead.
func (*ImplementationGuide_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{49, 0}
}

func (x *ImplementationGuide_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImplementationGuide_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImplementationGuide_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImplementationGuide_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ImplementationGuide_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// Another Implementation guide this depends on
type ImplementationGuide_Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// reference | inclusion
	Type *codes_go_proto.GuideDependencyTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Where to find dependency
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ImplementationGuide_Dependency) Reset() {
	*x = ImplementationGuide_Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationGuide_Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationGuide_Dependency) ProtoMessage() {}

func (x *ImplementationGuide_Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationGuide_Dependency.ProtoReflect.Descriptor instead.
func (*ImplementationGuide_Dependency) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{49, 1}
}

func (x *ImplementationGuide_Dependency) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImplementationGuide_Dependency) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImplementationGuide_Dependency) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImplementationGuide_Dependency) GetType() *codes_go_proto.GuideDependencyTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ImplementationGuide_Dependency) GetUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Uri
	}
	return nil
}

// Group of resources as used in .page.package
type ImplementationGuide_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name used .page.package
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable text describing the package
	Description *datatypes_go_proto.String              `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Resource    []*ImplementationGuide_Package_Resource `protobuf:"bytes,6,rep,name=resource,proto3" json:"resource,omitempty"`
}

func (x *ImplementationGuide_Package) Reset() {
	*x = ImplementationGuide_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationGuide_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationGuide_Package) ProtoMessage() {}

func (x *ImplementationGuide_Package) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationGuide_Package.ProtoReflect.Descriptor instead.
func (*ImplementationGuide_Package) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{49, 2}
}

func (x *ImplementationGuide_Package) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImplementationGuide_Package) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImplementationGuide_Package) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImplementationGuide_Package) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ImplementationGuide_Package) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ImplementationGuide_Package) GetResource() []*ImplementationGuide_Package_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

// Profiles that apply globally
type ImplementationGuide_Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type this profiles applies to
	Type *codes_go_proto.ResourceTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Profile that all resources must conform to
	Profile *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ImplementationGuide_Global) Reset() {
	*x = ImplementationGuide_Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationGuide_Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationGuide_Global) ProtoMessage() {}

func (x *ImplementationGuide_Global) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationGuide_Global.ProtoReflect.Descriptor instead.
func (*ImplementationGuide_Global) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{49, 3}
}

func (x *ImplementationGuide_Global) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImplementationGuide_Global) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImplementationGuide_Global) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImplementationGuide_Global) GetType() *codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ImplementationGuide_Global) GetProfile() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Page/Section in the Guide
type ImplementationGuide_Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Where to find that page
	Source *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Short name shown for navigational assistance
	Name *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// page | example | list | include | directory | dictionary | toc | resource
	Kind *codes_go_proto.GuidePageKindCode `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	// Kind of resource to include in the list
	Type []*codes_go_proto.ResourceTypeCode `protobuf:"bytes,7,rep,name=type,proto3" json:"type,omitempty"`
	// Name of package to include
	PackageValue []*datatypes_go_proto.String `protobuf:"bytes,8,rep,name=package_value,json=package,proto3" json:"package_value,omitempty"`
	// Format of the page (e.g. html, markdown, etc.)
	Format *datatypes_go_proto.MimeTypeCode `protobuf:"bytes,9,opt,name=format,proto3" json:"format,omitempty"`
	// Nested Pages / Sections
	Page []*ImplementationGuide_Page `protobuf:"bytes,10,rep,name=page,proto3" json:"page,omitempty"`
}

func (x *ImplementationGuide_Page) Reset() {
	*x = ImplementationGuide_Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationGuide_Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationGuide_Page) ProtoMessage() {}

func (x *ImplementationGuide_Page) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationGuide_Page.ProtoReflect.Descriptor instead.
func (*ImplementationGuide_Page) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{49, 4}
}

func (x *ImplementationGuide_Page) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImplementationGuide_Page) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImplementationGuide_Page) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImplementationGuide_Page) GetSource() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ImplementationGuide_Page) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ImplementationGuide_Page) GetKind() *codes_go_proto.GuidePageKindCode {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *ImplementationGuide_Page) GetType() []*codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ImplementationGuide_Page) GetPackageValue() []*datatypes_go_proto.String {
	if x != nil {
		return x.PackageValue
	}
	return nil
}

func (x *ImplementationGuide_Page) GetFormat() *datatypes_go_proto.MimeTypeCode {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ImplementationGuide_Page) GetPage() []*ImplementationGuide_Page {
	if x != nil {
		return x.Page
	}
	return nil
}

// Resource in the implementation guide
type ImplementationGuide_Package_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// example | terminology | profile | extension | dictionary | logical
	Purpose *codes_go_proto.GuideResourcePurposeCode `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Human Name for the resource
	Name *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Reason why included in guide
	Description *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Short code to identify the resource
	Acronym *datatypes_go_proto.String                   `protobuf:"bytes,7,opt,name=acronym,proto3" json:"acronym,omitempty"`
	Source  *ImplementationGuide_Package_Resource_Source `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	// Resource this is an example of (if applicable)
	ExampleFor *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=example_for,json=exampleFor,proto3" json:"example_for,omitempty"`
}

func (x *ImplementationGuide_Package_Resource) Reset() {
	*x = ImplementationGuide_Package_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationGuide_Package_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationGuide_Package_Resource) ProtoMessage() {}

func (x *ImplementationGuide_Package_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationGuide_Package_Resource.ProtoReflect.Descriptor instead.
func (*ImplementationGuide_Package_Resource) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{49, 2, 0}
}

func (x *ImplementationGuide_Package_Resource) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource) GetPurpose() *codes_go_proto.GuideResourcePurposeCode {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource) GetAcronym() *datatypes_go_proto.String {
	if x != nil {
		return x.Acronym
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource) GetSource() *ImplementationGuide_Package_Resource_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource) GetExampleFor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ExampleFor
	}
	return nil
}

// Location of the resource
type ImplementationGuide_Package_Resource_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*ImplementationGuide_Package_Resource_Source_Uri
	//	*ImplementationGuide_Package_Resource_Source_Reference
	Source isImplementationGuide_Package_Resource_Source_Source `protobuf_oneof:"source"`
}

func (x *ImplementationGuide_Package_Resource_Source) Reset() {
	*x = ImplementationGuide_Package_Resource_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationGuide_Package_Resource_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationGuide_Package_Resource_Source) ProtoMessage() {}

func (x *ImplementationGuide_Package_Resource_Source) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationGuide_Package_Resource_Source.ProtoReflect.Descriptor instead.
func (*ImplementationGuide_Package_Resource_Source) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{49, 2, 0, 0}
}

func (m *ImplementationGuide_Package_Resource_Source) GetSource() isImplementationGuide_Package_Resource_Source_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource_Source) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetSource().(*ImplementationGuide_Package_Resource_Source_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ImplementationGuide_Package_Resource_Source) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetSource().(*ImplementationGuide_Package_Resource_Source_Reference); ok {
		return x.Reference
	}
	return nil
}

type isImplementationGuide_Package_Resource_Source_Source interface {
	isImplementationGuide_Package_Resource_Source_Source()
}

type ImplementationGuide_Package_Resource_Source_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ImplementationGuide_Package_Resource_Source_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ImplementationGuide_Package_Resource_Source_Uri) isImplementationGuide_Package_Resource_Source_Source() {
}

func (*ImplementationGuide_Package_Resource_Source_Reference) isImplementationGuide_Package_Resource_Source_Source() {
}

// Entries in the list
type List_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Status/Workflow information about this item
	Flag *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=flag,proto3" json:"flag,omitempty"`
	// If this item is actually marked as deleted
	Deleted *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// When item added to list
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	// Actual entry
	Item *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *List_Entry) Reset() {
	*x = List_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List_Entry) ProtoMessage() {}

func (x *List_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List_Entry.ProtoReflect.Descriptor instead.
func (*List_Entry) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{50, 0}
}

func (x *List_Entry) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *List_Entry) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *List_Entry) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *List_Entry) GetFlag() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *List_Entry) GetDeleted() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *List_Entry) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *List_Entry) GetItem() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Item
	}
	return nil
}

// The absolute geographic location
type Location_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Longitude with WGS84 datum
	Longitude *datatypes_go_proto.Decimal `protobuf:"bytes,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Latitude with WGS84 datum
	Latitude *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Altitude with WGS84 datum
	Altitude *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (x *Location_Position) Reset() {
	*x = Location_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location_Position) ProtoMessage() {}

func (x *Location_Position) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location_Position.ProtoReflect.Descriptor instead.
func (*Location_Position) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{51, 0}
}

func (x *Location_Position) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Location_Position) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Location_Position) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Location_Position) GetLongitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Longitude
	}
	return nil
}

func (x *Location_Position) GetLatitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Latitude
	}
	return nil
}

func (x *Location_Position) GetAltitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Altitude
	}
	return nil
}

// Administrable medication details
type Medication_Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// powder | tablets | carton +
	Form       *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=form,proto3" json:"form,omitempty"`
	Ingredient []*Medication_Product_Ingredient    `protobuf:"bytes,5,rep,name=ingredient,proto3" json:"ingredient,omitempty"`
	Batch      []*Medication_Product_Batch         `protobuf:"bytes,6,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (x *Medication_Product) Reset() {
	*x = Medication_Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Medication_Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Medication_Product) ProtoMessage() {}

func (x *Medication_Product) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Medication_Product.ProtoReflect.Descriptor instead.
func (*Medication_Product) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{53, 0}
}

func (x *Medication_Product) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Medication_Product) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Medication_Product) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Medication_Product) GetForm() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *Medication_Product) GetIngredient() []*Medication_Product_Ingredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *Medication_Product) GetBatch() []*Medication_Product_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

// Details about packaged medications
type Medication_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// E.g. box, vial, blister-pack
	Container *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
	Content   []*Medication_Package_Content       `protobuf:"bytes,5,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *Medication_Package) Reset() {
	*x = Medication_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Medication_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Medication_Package) ProtoMessage() {}

func (x *Medication_Package) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Medication_Package.ProtoReflect.Descriptor instead.
func (*Medication_Package) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{53, 1}
}

func (x *Medication_Package) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Medication_Package) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Medication_Package) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Medication_Package) GetContainer() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Medication_Package) GetContent() []*Medication_Package_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// Active or inactive ingredient
type Medication_Product_Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The product contained
	Item *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// Quantity of ingredient present
	Amount *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Medication_Product_Ingredient) Reset() {
	*x = Medication_Product_Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Medication_Product_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Medication_Product_Ingredient) ProtoMessage() {}

func (x *Medication_Product_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Medication_Product_Ingredient.ProtoReflect.Descriptor instead.
func (*Medication_Product_Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{53, 0, 0}
}

func (x *Medication_Product_Ingredient) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Medication_Product_Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Medication_Product_Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Medication_Product_Ingredient) GetItem() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *Medication_Product_Ingredient) GetAmount() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Amount
	}
	return nil
}

type Medication_Product_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	LotNumber         *datatypes_go_proto.String      `protobuf:"bytes,4,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	ExpirationDate    *datatypes_go_proto.DateTime    `protobuf:"bytes,5,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *Medication_Product_Batch) Reset() {
	*x = Medication_Product_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Medication_Product_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Medication_Product_Batch) ProtoMessage() {}

func (x *Medication_Product_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Medication_Product_Batch.ProtoReflect.Descriptor instead.
func (*Medication_Product_Batch) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{53, 0, 1}
}

func (x *Medication_Product_Batch) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Medication_Product_Batch) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Medication_Product_Batch) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Medication_Product_Batch) GetLotNumber() *datatypes_go_proto.String {
	if x != nil {
		return x.LotNumber
	}
	return nil
}

func (x *Medication_Product_Batch) GetExpirationDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

// What is  in the package
type Medication_Package_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A product in the package
	Item *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=item,proto3" json:"item,omitempty"`
	// Quantity present in the package
	Amount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Medication_Package_Content) Reset() {
	*x = Medication_Package_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Medication_Package_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Medication_Package_Content) ProtoMessage() {}

func (x *Medication_Package_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Medication_Package_Content.ProtoReflect.Descriptor instead.
func (*Medication_Package_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{53, 1, 0}
}

func (x *Medication_Package_Content) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Medication_Package_Content) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Medication_Package_Content) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Medication_Package_Content) GetItem() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *Medication_Package_Content) GetAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Start and end time of administration
type MedicationAdministration_EffectiveTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EffectiveTime:
	//	*MedicationAdministration_EffectiveTime_DateTime
	//	*MedicationAdministration_EffectiveTime_Period
	EffectiveTime isMedicationAdministration_EffectiveTime_EffectiveTime `protobuf_oneof:"effective_time"`
}

func (x *MedicationAdministration_EffectiveTime) Reset() {
	*x = MedicationAdministration_EffectiveTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_EffectiveTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_EffectiveTime) ProtoMessage() {}

func (x *MedicationAdministration_EffectiveTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_EffectiveTime.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_EffectiveTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{54, 0}
}

func (m *MedicationAdministration_EffectiveTime) GetEffectiveTime() isMedicationAdministration_EffectiveTime_EffectiveTime {
	if m != nil {
		return m.EffectiveTime
	}
	return nil
}

func (x *MedicationAdministration_EffectiveTime) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffectiveTime().(*MedicationAdministration_EffectiveTime_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *MedicationAdministration_EffectiveTime) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffectiveTime().(*MedicationAdministration_EffectiveTime_Period); ok {
		return x.Period
	}
	return nil
}

type isMedicationAdministration_EffectiveTime_EffectiveTime interface {
	isMedicationAdministration_EffectiveTime_EffectiveTime()
}

type MedicationAdministration_EffectiveTime_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type MedicationAdministration_EffectiveTime_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*MedicationAdministration_EffectiveTime_DateTime) isMedicationAdministration_EffectiveTime_EffectiveTime() {
}

func (*MedicationAdministration_EffectiveTime_Period) isMedicationAdministration_EffectiveTime_EffectiveTime() {
}

// What was administered
type MedicationAdministration_Medication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Medication:
	//	*MedicationAdministration_Medication_CodeableConcept
	//	*MedicationAdministration_Medication_Reference
	Medication isMedicationAdministration_Medication_Medication `protobuf_oneof:"medication"`
}

func (x *MedicationAdministration_Medication) Reset() {
	*x = MedicationAdministration_Medication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_Medication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_Medication) ProtoMessage() {}

func (x *MedicationAdministration_Medication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_Medication.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_Medication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{54, 1}
}

func (m *MedicationAdministration_Medication) GetMedication() isMedicationAdministration_Medication_Medication {
	if m != nil {
		return m.Medication
	}
	return nil
}

func (x *MedicationAdministration_Medication) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetMedication().(*MedicationAdministration_Medication_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationAdministration_Medication) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetMedication().(*MedicationAdministration_Medication_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationAdministration_Medication_Medication interface {
	isMedicationAdministration_Medication_Medication()
}

type MedicationAdministration_Medication_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationAdministration_Medication_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationAdministration_Medication_CodeableConcept) isMedicationAdministration_Medication_Medication() {
}

func (*MedicationAdministration_Medication_Reference) isMedicationAdministration_Medication_Medication() {
}

// Details of how medication was taken
type MedicationAdministration_Dosage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Dosage Instructions
	Text *datatypes_go_proto.String            `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Site *MedicationAdministration_Dosage_Site `protobuf:"bytes,5,opt,name=site,proto3" json:"site,omitempty"`
	// Path of substance into body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=route,proto3" json:"route,omitempty"`
	// How drug was administered
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	// Amount administered in one dose
	Quantity *datatypes_go_proto.SimpleQuantity    `protobuf:"bytes,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Rate     *MedicationAdministration_Dosage_Rate `protobuf:"bytes,9,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *MedicationAdministration_Dosage) Reset() {
	*x = MedicationAdministration_Dosage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_Dosage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_Dosage) ProtoMessage() {}

func (x *MedicationAdministration_Dosage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_Dosage.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_Dosage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{54, 2}
}

func (x *MedicationAdministration_Dosage) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetSite() *MedicationAdministration_Dosage_Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MedicationAdministration_Dosage) GetRate() *MedicationAdministration_Dosage_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

// Body site administered to
type MedicationAdministration_Dosage_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Site:
	//	*MedicationAdministration_Dosage_Site_CodeableConcept
	//	*MedicationAdministration_Dosage_Site_Reference
	Site isMedicationAdministration_Dosage_Site_Site `protobuf_oneof:"site"`
}

func (x *MedicationAdministration_Dosage_Site) Reset() {
	*x = MedicationAdministration_Dosage_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_Dosage_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_Dosage_Site) ProtoMessage() {}

func (x *MedicationAdministration_Dosage_Site) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_Dosage_Site.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_Dosage_Site) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{54, 2, 0}
}

func (m *MedicationAdministration_Dosage_Site) GetSite() isMedicationAdministration_Dosage_Site_Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (x *MedicationAdministration_Dosage_Site) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetSite().(*MedicationAdministration_Dosage_Site_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationAdministration_Dosage_Site) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetSite().(*MedicationAdministration_Dosage_Site_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationAdministration_Dosage_Site_Site interface {
	isMedicationAdministration_Dosage_Site_Site()
}

type MedicationAdministration_Dosage_Site_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationAdministration_Dosage_Site_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationAdministration_Dosage_Site_CodeableConcept) isMedicationAdministration_Dosage_Site_Site() {
}

func (*MedicationAdministration_Dosage_Site_Reference) isMedicationAdministration_Dosage_Site_Site() {
}

// Dose quantity per unit of time
type MedicationAdministration_Dosage_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rate:
	//	*MedicationAdministration_Dosage_Rate_Ratio
	//	*MedicationAdministration_Dosage_Rate_Range
	Rate isMedicationAdministration_Dosage_Rate_Rate `protobuf_oneof:"rate"`
}

func (x *MedicationAdministration_Dosage_Rate) Reset() {
	*x = MedicationAdministration_Dosage_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministration_Dosage_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministration_Dosage_Rate) ProtoMessage() {}

func (x *MedicationAdministration_Dosage_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministration_Dosage_Rate.ProtoReflect.Descriptor instead.
func (*MedicationAdministration_Dosage_Rate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{54, 2, 1}
}

func (m *MedicationAdministration_Dosage_Rate) GetRate() isMedicationAdministration_Dosage_Rate_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (x *MedicationAdministration_Dosage_Rate) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetRate().(*MedicationAdministration_Dosage_Rate_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *MedicationAdministration_Dosage_Rate) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetRate().(*MedicationAdministration_Dosage_Rate_Range); ok {
		return x.Range
	}
	return nil
}

type isMedicationAdministration_Dosage_Rate_Rate interface {
	isMedicationAdministration_Dosage_Rate_Rate()
}

type MedicationAdministration_Dosage_Rate_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type MedicationAdministration_Dosage_Rate_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*MedicationAdministration_Dosage_Rate_Ratio) isMedicationAdministration_Dosage_Rate_Rate() {}

func (*MedicationAdministration_Dosage_Rate_Range) isMedicationAdministration_Dosage_Rate_Rate() {}

// What medication was supplied
type MedicationDispense_Medication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Medication:
	//	*MedicationDispense_Medication_CodeableConcept
	//	*MedicationDispense_Medication_Reference
	Medication isMedicationDispense_Medication_Medication `protobuf_oneof:"medication"`
}

func (x *MedicationDispense_Medication) Reset() {
	*x = MedicationDispense_Medication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_Medication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_Medication) ProtoMessage() {}

func (x *MedicationDispense_Medication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_Medication.ProtoReflect.Descriptor instead.
func (*MedicationDispense_Medication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{55, 0}
}

func (m *MedicationDispense_Medication) GetMedication() isMedicationDispense_Medication_Medication {
	if m != nil {
		return m.Medication
	}
	return nil
}

func (x *MedicationDispense_Medication) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetMedication().(*MedicationDispense_Medication_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationDispense_Medication) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetMedication().(*MedicationDispense_Medication_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationDispense_Medication_Medication interface {
	isMedicationDispense_Medication_Medication()
}

type MedicationDispense_Medication_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationDispense_Medication_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationDispense_Medication_CodeableConcept) isMedicationDispense_Medication_Medication() {}

func (*MedicationDispense_Medication_Reference) isMedicationDispense_Medication_Medication() {}

// Medicine administration instructions to the patient/caregiver
type MedicationDispense_DosageInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Dosage Instructions
	Text *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// E.g. "Take with food"
	AdditionalInstructions *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=additional_instructions,json=additionalInstructions,proto3" json:"additional_instructions,omitempty"`
	// When medication should be administered
	Timing   *datatypes_go_proto.Timing                     `protobuf:"bytes,6,opt,name=timing,proto3" json:"timing,omitempty"`
	AsNeeded *MedicationDispense_DosageInstruction_AsNeeded `protobuf:"bytes,7,opt,name=as_needed,json=asNeeded,proto3" json:"as_needed,omitempty"`
	Site     *MedicationDispense_DosageInstruction_Site     `protobuf:"bytes,8,opt,name=site,proto3" json:"site,omitempty"`
	// How drug should enter body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=route,proto3" json:"route,omitempty"`
	// Technique for administering medication
	Method *datatypes_go_proto.CodeableConcept        `protobuf:"bytes,10,opt,name=method,proto3" json:"method,omitempty"`
	Dose   *MedicationDispense_DosageInstruction_Dose `protobuf:"bytes,11,opt,name=dose,proto3" json:"dose,omitempty"`
	Rate   *MedicationDispense_DosageInstruction_Rate `protobuf:"bytes,12,opt,name=rate,proto3" json:"rate,omitempty"`
	// Upper limit on medication per unit of time
	MaxDosePerPeriod *datatypes_go_proto.Ratio `protobuf:"bytes,13,opt,name=max_dose_per_period,json=maxDosePerPeriod,proto3" json:"max_dose_per_period,omitempty"`
}

func (x *MedicationDispense_DosageInstruction) Reset() {
	*x = MedicationDispense_DosageInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_DosageInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_DosageInstruction) ProtoMessage() {}

func (x *MedicationDispense_DosageInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_DosageInstruction.ProtoReflect.Descriptor instead.
func (*MedicationDispense_DosageInstruction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{55, 1}
}

func (x *MedicationDispense_DosageInstruction) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetAdditionalInstructions() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdditionalInstructions
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetTiming() *datatypes_go_proto.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetAsNeeded() *MedicationDispense_DosageInstruction_AsNeeded {
	if x != nil {
		return x.AsNeeded
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetSite() *MedicationDispense_DosageInstruction_Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetDose() *MedicationDispense_DosageInstruction_Dose {
	if x != nil {
		return x.Dose
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetRate() *MedicationDispense_DosageInstruction_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction) GetMaxDosePerPeriod() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.MaxDosePerPeriod
	}
	return nil
}

// Deals with substitution of one medicine for another
type MedicationDispense_Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of substitution
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Why was substitution made
	Reason []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,rep,name=reason,proto3" json:"reason,omitempty"`
	// Who is responsible for the substitution
	ResponsibleParty []*datatypes_go_proto.Reference `protobuf:"bytes,6,rep,name=responsible_party,json=responsibleParty,proto3" json:"responsible_party,omitempty"`
}

func (x *MedicationDispense_Substitution) Reset() {
	*x = MedicationDispense_Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_Substitution) ProtoMessage() {}

func (x *MedicationDispense_Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_Substitution.ProtoReflect.Descriptor instead.
func (*MedicationDispense_Substitution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{55, 2}
}

func (x *MedicationDispense_Substitution) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetReason() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *MedicationDispense_Substitution) GetResponsibleParty() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ResponsibleParty
	}
	return nil
}

// Take "as needed" f(or x)
type MedicationDispense_DosageInstruction_AsNeeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AsNeeded:
	//	*MedicationDispense_DosageInstruction_AsNeeded_Boolean
	//	*MedicationDispense_DosageInstruction_AsNeeded_CodeableConcept
	AsNeeded isMedicationDispense_DosageInstruction_AsNeeded_AsNeeded `protobuf_oneof:"as_needed"`
}

func (x *MedicationDispense_DosageInstruction_AsNeeded) Reset() {
	*x = MedicationDispense_DosageInstruction_AsNeeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_DosageInstruction_AsNeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_DosageInstruction_AsNeeded) ProtoMessage() {}

func (x *MedicationDispense_DosageInstruction_AsNeeded) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_DosageInstruction_AsNeeded.ProtoReflect.Descriptor instead.
func (*MedicationDispense_DosageInstruction_AsNeeded) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{55, 1, 0}
}

func (m *MedicationDispense_DosageInstruction_AsNeeded) GetAsNeeded() isMedicationDispense_DosageInstruction_AsNeeded_AsNeeded {
	if m != nil {
		return m.AsNeeded
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction_AsNeeded) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetAsNeeded().(*MedicationDispense_DosageInstruction_AsNeeded_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction_AsNeeded) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetAsNeeded().(*MedicationDispense_DosageInstruction_AsNeeded_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isMedicationDispense_DosageInstruction_AsNeeded_AsNeeded interface {
	isMedicationDispense_DosageInstruction_AsNeeded_AsNeeded()
}

type MedicationDispense_DosageInstruction_AsNeeded_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type MedicationDispense_DosageInstruction_AsNeeded_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*MedicationDispense_DosageInstruction_AsNeeded_Boolean) isMedicationDispense_DosageInstruction_AsNeeded_AsNeeded() {
}

func (*MedicationDispense_DosageInstruction_AsNeeded_CodeableConcept) isMedicationDispense_DosageInstruction_AsNeeded_AsNeeded() {
}

// Body site to administer to
type MedicationDispense_DosageInstruction_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Site:
	//	*MedicationDispense_DosageInstruction_Site_CodeableConcept
	//	*MedicationDispense_DosageInstruction_Site_Reference
	Site isMedicationDispense_DosageInstruction_Site_Site `protobuf_oneof:"site"`
}

func (x *MedicationDispense_DosageInstruction_Site) Reset() {
	*x = MedicationDispense_DosageInstruction_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_DosageInstruction_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_DosageInstruction_Site) ProtoMessage() {}

func (x *MedicationDispense_DosageInstruction_Site) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_DosageInstruction_Site.ProtoReflect.Descriptor instead.
func (*MedicationDispense_DosageInstruction_Site) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{55, 1, 1}
}

func (m *MedicationDispense_DosageInstruction_Site) GetSite() isMedicationDispense_DosageInstruction_Site_Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction_Site) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetSite().(*MedicationDispense_DosageInstruction_Site_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction_Site) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetSite().(*MedicationDispense_DosageInstruction_Site_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationDispense_DosageInstruction_Site_Site interface {
	isMedicationDispense_DosageInstruction_Site_Site()
}

type MedicationDispense_DosageInstruction_Site_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationDispense_DosageInstruction_Site_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationDispense_DosageInstruction_Site_CodeableConcept) isMedicationDispense_DosageInstruction_Site_Site() {
}

func (*MedicationDispense_DosageInstruction_Site_Reference) isMedicationDispense_DosageInstruction_Site_Site() {
}

// Amount of medication per dose
type MedicationDispense_DosageInstruction_Dose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Dose:
	//	*MedicationDispense_DosageInstruction_Dose_Range
	//	*MedicationDispense_DosageInstruction_Dose_Quantity
	Dose isMedicationDispense_DosageInstruction_Dose_Dose `protobuf_oneof:"dose"`
}

func (x *MedicationDispense_DosageInstruction_Dose) Reset() {
	*x = MedicationDispense_DosageInstruction_Dose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_DosageInstruction_Dose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_DosageInstruction_Dose) ProtoMessage() {}

func (x *MedicationDispense_DosageInstruction_Dose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_DosageInstruction_Dose.ProtoReflect.Descriptor instead.
func (*MedicationDispense_DosageInstruction_Dose) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{55, 1, 2}
}

func (m *MedicationDispense_DosageInstruction_Dose) GetDose() isMedicationDispense_DosageInstruction_Dose_Dose {
	if m != nil {
		return m.Dose
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction_Dose) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetDose().(*MedicationDispense_DosageInstruction_Dose_Range); ok {
		return x.Range
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction_Dose) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetDose().(*MedicationDispense_DosageInstruction_Dose_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isMedicationDispense_DosageInstruction_Dose_Dose interface {
	isMedicationDispense_DosageInstruction_Dose_Dose()
}

type MedicationDispense_DosageInstruction_Dose_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,1,opt,name=range,proto3,oneof"`
}

type MedicationDispense_DosageInstruction_Dose_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

func (*MedicationDispense_DosageInstruction_Dose_Range) isMedicationDispense_DosageInstruction_Dose_Dose() {
}

func (*MedicationDispense_DosageInstruction_Dose_Quantity) isMedicationDispense_DosageInstruction_Dose_Dose() {
}

// Amount of medication per unit of time
type MedicationDispense_DosageInstruction_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rate:
	//	*MedicationDispense_DosageInstruction_Rate_Ratio
	//	*MedicationDispense_DosageInstruction_Rate_Range
	Rate isMedicationDispense_DosageInstruction_Rate_Rate `protobuf_oneof:"rate"`
}

func (x *MedicationDispense_DosageInstruction_Rate) Reset() {
	*x = MedicationDispense_DosageInstruction_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispense_DosageInstruction_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispense_DosageInstruction_Rate) ProtoMessage() {}

func (x *MedicationDispense_DosageInstruction_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispense_DosageInstruction_Rate.ProtoReflect.Descriptor instead.
func (*MedicationDispense_DosageInstruction_Rate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{55, 1, 3}
}

func (m *MedicationDispense_DosageInstruction_Rate) GetRate() isMedicationDispense_DosageInstruction_Rate_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction_Rate) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetRate().(*MedicationDispense_DosageInstruction_Rate_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *MedicationDispense_DosageInstruction_Rate) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetRate().(*MedicationDispense_DosageInstruction_Rate_Range); ok {
		return x.Range
	}
	return nil
}

type isMedicationDispense_DosageInstruction_Rate_Rate interface {
	isMedicationDispense_DosageInstruction_Rate_Rate()
}

type MedicationDispense_DosageInstruction_Rate_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type MedicationDispense_DosageInstruction_Rate_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*MedicationDispense_DosageInstruction_Rate_Ratio) isMedicationDispense_DosageInstruction_Rate_Rate() {
}

func (*MedicationDispense_DosageInstruction_Rate_Range) isMedicationDispense_DosageInstruction_Rate_Rate() {
}

// Reason or indication for writing the prescription
type MedicationOrder_Reason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//	*MedicationOrder_Reason_CodeableConcept
	//	*MedicationOrder_Reason_Reference
	Reason isMedicationOrder_Reason_Reason `protobuf_oneof:"reason"`
}

func (x *MedicationOrder_Reason) Reset() {
	*x = MedicationOrder_Reason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_Reason) ProtoMessage() {}

func (x *MedicationOrder_Reason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_Reason.ProtoReflect.Descriptor instead.
func (*MedicationOrder_Reason) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 0}
}

func (m *MedicationOrder_Reason) GetReason() isMedicationOrder_Reason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *MedicationOrder_Reason) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetReason().(*MedicationOrder_Reason_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationOrder_Reason) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetReason().(*MedicationOrder_Reason_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationOrder_Reason_Reason interface {
	isMedicationOrder_Reason_Reason()
}

type MedicationOrder_Reason_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationOrder_Reason_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationOrder_Reason_CodeableConcept) isMedicationOrder_Reason_Reason() {}

func (*MedicationOrder_Reason_Reference) isMedicationOrder_Reason_Reason() {}

// Medication to be taken
type MedicationOrder_Medication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Medication:
	//	*MedicationOrder_Medication_CodeableConcept
	//	*MedicationOrder_Medication_Reference
	Medication isMedicationOrder_Medication_Medication `protobuf_oneof:"medication"`
}

func (x *MedicationOrder_Medication) Reset() {
	*x = MedicationOrder_Medication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_Medication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_Medication) ProtoMessage() {}

func (x *MedicationOrder_Medication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_Medication.ProtoReflect.Descriptor instead.
func (*MedicationOrder_Medication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 1}
}

func (m *MedicationOrder_Medication) GetMedication() isMedicationOrder_Medication_Medication {
	if m != nil {
		return m.Medication
	}
	return nil
}

func (x *MedicationOrder_Medication) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetMedication().(*MedicationOrder_Medication_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationOrder_Medication) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetMedication().(*MedicationOrder_Medication_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationOrder_Medication_Medication interface {
	isMedicationOrder_Medication_Medication()
}

type MedicationOrder_Medication_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationOrder_Medication_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationOrder_Medication_CodeableConcept) isMedicationOrder_Medication_Medication() {}

func (*MedicationOrder_Medication_Reference) isMedicationOrder_Medication_Medication() {}

// How medication should be taken
type MedicationOrder_DosageInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Dosage instructions expressed as text
	Text *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Supplemental instructions - e.g. "with meals"
	AdditionalInstructions *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=additional_instructions,json=additionalInstructions,proto3" json:"additional_instructions,omitempty"`
	// When medication should be administered
	Timing   *datatypes_go_proto.Timing                  `protobuf:"bytes,6,opt,name=timing,proto3" json:"timing,omitempty"`
	AsNeeded *MedicationOrder_DosageInstruction_AsNeeded `protobuf:"bytes,7,opt,name=as_needed,json=asNeeded,proto3" json:"as_needed,omitempty"`
	Site     *MedicationOrder_DosageInstruction_Site     `protobuf:"bytes,8,opt,name=site,proto3" json:"site,omitempty"`
	// How drug should enter body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=route,proto3" json:"route,omitempty"`
	// Technique for administering medication
	Method *datatypes_go_proto.CodeableConcept     `protobuf:"bytes,10,opt,name=method,proto3" json:"method,omitempty"`
	Dose   *MedicationOrder_DosageInstruction_Dose `protobuf:"bytes,11,opt,name=dose,proto3" json:"dose,omitempty"`
	Rate   *MedicationOrder_DosageInstruction_Rate `protobuf:"bytes,12,opt,name=rate,proto3" json:"rate,omitempty"`
	// Upper limit on medication per unit of time
	MaxDosePerPeriod *datatypes_go_proto.Ratio `protobuf:"bytes,13,opt,name=max_dose_per_period,json=maxDosePerPeriod,proto3" json:"max_dose_per_period,omitempty"`
}

func (x *MedicationOrder_DosageInstruction) Reset() {
	*x = MedicationOrder_DosageInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_DosageInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_DosageInstruction) ProtoMessage() {}

func (x *MedicationOrder_DosageInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_DosageInstruction.ProtoReflect.Descriptor instead.
func (*MedicationOrder_DosageInstruction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 2}
}

func (x *MedicationOrder_DosageInstruction) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetAdditionalInstructions() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdditionalInstructions
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetTiming() *datatypes_go_proto.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetAsNeeded() *MedicationOrder_DosageInstruction_AsNeeded {
	if x != nil {
		return x.AsNeeded
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetSite() *MedicationOrder_DosageInstruction_Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetDose() *MedicationOrder_DosageInstruction_Dose {
	if x != nil {
		return x.Dose
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetRate() *MedicationOrder_DosageInstruction_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction) GetMaxDosePerPeriod() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.MaxDosePerPeriod
	}
	return nil
}

// Medication supply authorization
type MedicationOrder_DispenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension             `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Medication        *MedicationOrder_DispenseRequest_Medication `protobuf:"bytes,4,opt,name=medication,proto3" json:"medication,omitempty"`
	// Time period supply is authorized for
	ValidityPeriod *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	// Number of refills authorized
	NumberOfRepeatsAllowed *datatypes_go_proto.PositiveInt `protobuf:"bytes,6,opt,name=number_of_repeats_allowed,json=numberOfRepeatsAllowed,proto3" json:"number_of_repeats_allowed,omitempty"`
	// Amount of medication to supply per dispense
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Number of days supply per dispense
	ExpectedSupplyDuration *datatypes_go_proto.Duration `protobuf:"bytes,8,opt,name=expected_supply_duration,json=expectedSupplyDuration,proto3" json:"expected_supply_duration,omitempty"`
}

func (x *MedicationOrder_DispenseRequest) Reset() {
	*x = MedicationOrder_DispenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_DispenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_DispenseRequest) ProtoMessage() {}

func (x *MedicationOrder_DispenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_DispenseRequest.ProtoReflect.Descriptor instead.
func (*MedicationOrder_DispenseRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 3}
}

func (x *MedicationOrder_DispenseRequest) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationOrder_DispenseRequest) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationOrder_DispenseRequest) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationOrder_DispenseRequest) GetMedication() *MedicationOrder_DispenseRequest_Medication {
	if x != nil {
		return x.Medication
	}
	return nil
}

func (x *MedicationOrder_DispenseRequest) GetValidityPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

func (x *MedicationOrder_DispenseRequest) GetNumberOfRepeatsAllowed() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.NumberOfRepeatsAllowed
	}
	return nil
}

func (x *MedicationOrder_DispenseRequest) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MedicationOrder_DispenseRequest) GetExpectedSupplyDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.ExpectedSupplyDuration
	}
	return nil
}

// Any restrictions on medication substitution
type MedicationOrder_Substitution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// generic | formulary +
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Why should (not) substitution be made
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *MedicationOrder_Substitution) Reset() {
	*x = MedicationOrder_Substitution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_Substitution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_Substitution) ProtoMessage() {}

func (x *MedicationOrder_Substitution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_Substitution.ProtoReflect.Descriptor instead.
func (*MedicationOrder_Substitution) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 4}
}

func (x *MedicationOrder_Substitution) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationOrder_Substitution) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationOrder_Substitution) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationOrder_Substitution) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MedicationOrder_Substitution) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

// Take "as needed" (for x)
type MedicationOrder_DosageInstruction_AsNeeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AsNeeded:
	//	*MedicationOrder_DosageInstruction_AsNeeded_Boolean
	//	*MedicationOrder_DosageInstruction_AsNeeded_CodeableConcept
	AsNeeded isMedicationOrder_DosageInstruction_AsNeeded_AsNeeded `protobuf_oneof:"as_needed"`
}

func (x *MedicationOrder_DosageInstruction_AsNeeded) Reset() {
	*x = MedicationOrder_DosageInstruction_AsNeeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_DosageInstruction_AsNeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_DosageInstruction_AsNeeded) ProtoMessage() {}

func (x *MedicationOrder_DosageInstruction_AsNeeded) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_DosageInstruction_AsNeeded.ProtoReflect.Descriptor instead.
func (*MedicationOrder_DosageInstruction_AsNeeded) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 2, 0}
}

func (m *MedicationOrder_DosageInstruction_AsNeeded) GetAsNeeded() isMedicationOrder_DosageInstruction_AsNeeded_AsNeeded {
	if m != nil {
		return m.AsNeeded
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction_AsNeeded) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetAsNeeded().(*MedicationOrder_DosageInstruction_AsNeeded_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction_AsNeeded) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetAsNeeded().(*MedicationOrder_DosageInstruction_AsNeeded_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isMedicationOrder_DosageInstruction_AsNeeded_AsNeeded interface {
	isMedicationOrder_DosageInstruction_AsNeeded_AsNeeded()
}

type MedicationOrder_DosageInstruction_AsNeeded_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type MedicationOrder_DosageInstruction_AsNeeded_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*MedicationOrder_DosageInstruction_AsNeeded_Boolean) isMedicationOrder_DosageInstruction_AsNeeded_AsNeeded() {
}

func (*MedicationOrder_DosageInstruction_AsNeeded_CodeableConcept) isMedicationOrder_DosageInstruction_AsNeeded_AsNeeded() {
}

// Body site to administer to
type MedicationOrder_DosageInstruction_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Site:
	//	*MedicationOrder_DosageInstruction_Site_CodeableConcept
	//	*MedicationOrder_DosageInstruction_Site_Reference
	Site isMedicationOrder_DosageInstruction_Site_Site `protobuf_oneof:"site"`
}

func (x *MedicationOrder_DosageInstruction_Site) Reset() {
	*x = MedicationOrder_DosageInstruction_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_DosageInstruction_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_DosageInstruction_Site) ProtoMessage() {}

func (x *MedicationOrder_DosageInstruction_Site) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_DosageInstruction_Site.ProtoReflect.Descriptor instead.
func (*MedicationOrder_DosageInstruction_Site) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 2, 1}
}

func (m *MedicationOrder_DosageInstruction_Site) GetSite() isMedicationOrder_DosageInstruction_Site_Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction_Site) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetSite().(*MedicationOrder_DosageInstruction_Site_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction_Site) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetSite().(*MedicationOrder_DosageInstruction_Site_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationOrder_DosageInstruction_Site_Site interface {
	isMedicationOrder_DosageInstruction_Site_Site()
}

type MedicationOrder_DosageInstruction_Site_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationOrder_DosageInstruction_Site_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationOrder_DosageInstruction_Site_CodeableConcept) isMedicationOrder_DosageInstruction_Site_Site() {
}

func (*MedicationOrder_DosageInstruction_Site_Reference) isMedicationOrder_DosageInstruction_Site_Site() {
}

// Amount of medication per dose
type MedicationOrder_DosageInstruction_Dose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Dose:
	//	*MedicationOrder_DosageInstruction_Dose_Range
	//	*MedicationOrder_DosageInstruction_Dose_Quantity
	Dose isMedicationOrder_DosageInstruction_Dose_Dose `protobuf_oneof:"dose"`
}

func (x *MedicationOrder_DosageInstruction_Dose) Reset() {
	*x = MedicationOrder_DosageInstruction_Dose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_DosageInstruction_Dose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_DosageInstruction_Dose) ProtoMessage() {}

func (x *MedicationOrder_DosageInstruction_Dose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_DosageInstruction_Dose.ProtoReflect.Descriptor instead.
func (*MedicationOrder_DosageInstruction_Dose) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 2, 2}
}

func (m *MedicationOrder_DosageInstruction_Dose) GetDose() isMedicationOrder_DosageInstruction_Dose_Dose {
	if m != nil {
		return m.Dose
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction_Dose) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetDose().(*MedicationOrder_DosageInstruction_Dose_Range); ok {
		return x.Range
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction_Dose) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetDose().(*MedicationOrder_DosageInstruction_Dose_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isMedicationOrder_DosageInstruction_Dose_Dose interface {
	isMedicationOrder_DosageInstruction_Dose_Dose()
}

type MedicationOrder_DosageInstruction_Dose_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,1,opt,name=range,proto3,oneof"`
}

type MedicationOrder_DosageInstruction_Dose_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

func (*MedicationOrder_DosageInstruction_Dose_Range) isMedicationOrder_DosageInstruction_Dose_Dose() {
}

func (*MedicationOrder_DosageInstruction_Dose_Quantity) isMedicationOrder_DosageInstruction_Dose_Dose() {
}

// Amount of medication per unit of time
type MedicationOrder_DosageInstruction_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rate:
	//	*MedicationOrder_DosageInstruction_Rate_Ratio
	//	*MedicationOrder_DosageInstruction_Rate_Range
	Rate isMedicationOrder_DosageInstruction_Rate_Rate `protobuf_oneof:"rate"`
}

func (x *MedicationOrder_DosageInstruction_Rate) Reset() {
	*x = MedicationOrder_DosageInstruction_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_DosageInstruction_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_DosageInstruction_Rate) ProtoMessage() {}

func (x *MedicationOrder_DosageInstruction_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_DosageInstruction_Rate.ProtoReflect.Descriptor instead.
func (*MedicationOrder_DosageInstruction_Rate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 2, 3}
}

func (m *MedicationOrder_DosageInstruction_Rate) GetRate() isMedicationOrder_DosageInstruction_Rate_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction_Rate) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetRate().(*MedicationOrder_DosageInstruction_Rate_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *MedicationOrder_DosageInstruction_Rate) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetRate().(*MedicationOrder_DosageInstruction_Rate_Range); ok {
		return x.Range
	}
	return nil
}

type isMedicationOrder_DosageInstruction_Rate_Rate interface {
	isMedicationOrder_DosageInstruction_Rate_Rate()
}

type MedicationOrder_DosageInstruction_Rate_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type MedicationOrder_DosageInstruction_Rate_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*MedicationOrder_DosageInstruction_Rate_Ratio) isMedicationOrder_DosageInstruction_Rate_Rate() {
}

func (*MedicationOrder_DosageInstruction_Rate_Range) isMedicationOrder_DosageInstruction_Rate_Rate() {
}

// Product to be supplied
type MedicationOrder_DispenseRequest_Medication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Medication:
	//	*MedicationOrder_DispenseRequest_Medication_CodeableConcept
	//	*MedicationOrder_DispenseRequest_Medication_Reference
	Medication isMedicationOrder_DispenseRequest_Medication_Medication `protobuf_oneof:"medication"`
}

func (x *MedicationOrder_DispenseRequest_Medication) Reset() {
	*x = MedicationOrder_DispenseRequest_Medication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationOrder_DispenseRequest_Medication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationOrder_DispenseRequest_Medication) ProtoMessage() {}

func (x *MedicationOrder_DispenseRequest_Medication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationOrder_DispenseRequest_Medication.ProtoReflect.Descriptor instead.
func (*MedicationOrder_DispenseRequest_Medication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{56, 3, 0}
}

func (m *MedicationOrder_DispenseRequest_Medication) GetMedication() isMedicationOrder_DispenseRequest_Medication_Medication {
	if m != nil {
		return m.Medication
	}
	return nil
}

func (x *MedicationOrder_DispenseRequest_Medication) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetMedication().(*MedicationOrder_DispenseRequest_Medication_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationOrder_DispenseRequest_Medication) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetMedication().(*MedicationOrder_DispenseRequest_Medication_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationOrder_DispenseRequest_Medication_Medication interface {
	isMedicationOrder_DispenseRequest_Medication_Medication()
}

type MedicationOrder_DispenseRequest_Medication_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationOrder_DispenseRequest_Medication_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationOrder_DispenseRequest_Medication_CodeableConcept) isMedicationOrder_DispenseRequest_Medication_Medication() {
}

func (*MedicationOrder_DispenseRequest_Medication_Reference) isMedicationOrder_DispenseRequest_Medication_Medication() {
}

type MedicationStatement_ReasonForUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReasonForUse:
	//	*MedicationStatement_ReasonForUse_CodeableConcept
	//	*MedicationStatement_ReasonForUse_Reference
	ReasonForUse isMedicationStatement_ReasonForUse_ReasonForUse `protobuf_oneof:"reason_for_use"`
}

func (x *MedicationStatement_ReasonForUse) Reset() {
	*x = MedicationStatement_ReasonForUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatement_ReasonForUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatement_ReasonForUse) ProtoMessage() {}

func (x *MedicationStatement_ReasonForUse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatement_ReasonForUse.ProtoReflect.Descriptor instead.
func (*MedicationStatement_ReasonForUse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{57, 0}
}

func (m *MedicationStatement_ReasonForUse) GetReasonForUse() isMedicationStatement_ReasonForUse_ReasonForUse {
	if m != nil {
		return m.ReasonForUse
	}
	return nil
}

func (x *MedicationStatement_ReasonForUse) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetReasonForUse().(*MedicationStatement_ReasonForUse_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationStatement_ReasonForUse) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetReasonForUse().(*MedicationStatement_ReasonForUse_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationStatement_ReasonForUse_ReasonForUse interface {
	isMedicationStatement_ReasonForUse_ReasonForUse()
}

type MedicationStatement_ReasonForUse_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationStatement_ReasonForUse_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationStatement_ReasonForUse_CodeableConcept) isMedicationStatement_ReasonForUse_ReasonForUse() {
}

func (*MedicationStatement_ReasonForUse_Reference) isMedicationStatement_ReasonForUse_ReasonForUse() {
}

// Over what period was medication consumed?
type MedicationStatement_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*MedicationStatement_Effective_DateTime
	//	*MedicationStatement_Effective_Period
	Effective isMedicationStatement_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *MedicationStatement_Effective) Reset() {
	*x = MedicationStatement_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatement_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatement_Effective) ProtoMessage() {}

func (x *MedicationStatement_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatement_Effective.ProtoReflect.Descriptor instead.
func (*MedicationStatement_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{57, 1}
}

func (m *MedicationStatement_Effective) GetEffective() isMedicationStatement_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *MedicationStatement_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*MedicationStatement_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *MedicationStatement_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*MedicationStatement_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isMedicationStatement_Effective_Effective interface {
	isMedicationStatement_Effective_Effective()
}

type MedicationStatement_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type MedicationStatement_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*MedicationStatement_Effective_DateTime) isMedicationStatement_Effective_Effective() {}

func (*MedicationStatement_Effective_Period) isMedicationStatement_Effective_Effective() {}

// What medication was taken
type MedicationStatement_Medication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Medication:
	//	*MedicationStatement_Medication_CodeableConcept
	//	*MedicationStatement_Medication_Reference
	Medication isMedicationStatement_Medication_Medication `protobuf_oneof:"medication"`
}

func (x *MedicationStatement_Medication) Reset() {
	*x = MedicationStatement_Medication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatement_Medication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatement_Medication) ProtoMessage() {}

func (x *MedicationStatement_Medication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatement_Medication.ProtoReflect.Descriptor instead.
func (*MedicationStatement_Medication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{57, 2}
}

func (m *MedicationStatement_Medication) GetMedication() isMedicationStatement_Medication_Medication {
	if m != nil {
		return m.Medication
	}
	return nil
}

func (x *MedicationStatement_Medication) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetMedication().(*MedicationStatement_Medication_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationStatement_Medication) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetMedication().(*MedicationStatement_Medication_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationStatement_Medication_Medication interface {
	isMedicationStatement_Medication_Medication()
}

type MedicationStatement_Medication_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationStatement_Medication_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationStatement_Medication_CodeableConcept) isMedicationStatement_Medication_Medication() {
}

func (*MedicationStatement_Medication_Reference) isMedicationStatement_Medication_Medication() {}

// Details of how medication was taken
type MedicationStatement_Dosage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reported dosage information
	Text *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// When/how often was medication taken
	Timing   *datatypes_go_proto.Timing           `protobuf:"bytes,5,opt,name=timing,proto3" json:"timing,omitempty"`
	AsNeeded *MedicationStatement_Dosage_AsNeeded `protobuf:"bytes,6,opt,name=as_needed,json=asNeeded,proto3" json:"as_needed,omitempty"`
	Site     *MedicationStatement_Dosage_Site     `protobuf:"bytes,7,opt,name=site,proto3" json:"site,omitempty"`
	// How the medication entered the body
	Route *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=route,proto3" json:"route,omitempty"`
	// Technique used to administer medication
	Method   *datatypes_go_proto.CodeableConcept  `protobuf:"bytes,9,opt,name=method,proto3" json:"method,omitempty"`
	Quantity *MedicationStatement_Dosage_Quantity `protobuf:"bytes,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Rate     *MedicationStatement_Dosage_Rate     `protobuf:"bytes,11,opt,name=rate,proto3" json:"rate,omitempty"`
	// Maximum dose that was consumed per unit of time
	MaxDosePerPeriod *datatypes_go_proto.Ratio `protobuf:"bytes,12,opt,name=max_dose_per_period,json=maxDosePerPeriod,proto3" json:"max_dose_per_period,omitempty"`
}

func (x *MedicationStatement_Dosage) Reset() {
	*x = MedicationStatement_Dosage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatement_Dosage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatement_Dosage) ProtoMessage() {}

func (x *MedicationStatement_Dosage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatement_Dosage.ProtoReflect.Descriptor instead.
func (*MedicationStatement_Dosage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{57, 3}
}

func (x *MedicationStatement_Dosage) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetTiming() *datatypes_go_proto.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetAsNeeded() *MedicationStatement_Dosage_AsNeeded {
	if x != nil {
		return x.AsNeeded
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetSite() *MedicationStatement_Dosage_Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetRoute() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetQuantity() *MedicationStatement_Dosage_Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetRate() *MedicationStatement_Dosage_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *MedicationStatement_Dosage) GetMaxDosePerPeriod() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.MaxDosePerPeriod
	}
	return nil
}

// Take "as needed" (for x)
type MedicationStatement_Dosage_AsNeeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AsNeeded:
	//	*MedicationStatement_Dosage_AsNeeded_Boolean
	//	*MedicationStatement_Dosage_AsNeeded_CodeableConcept
	AsNeeded isMedicationStatement_Dosage_AsNeeded_AsNeeded `protobuf_oneof:"as_needed"`
}

func (x *MedicationStatement_Dosage_AsNeeded) Reset() {
	*x = MedicationStatement_Dosage_AsNeeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatement_Dosage_AsNeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatement_Dosage_AsNeeded) ProtoMessage() {}

func (x *MedicationStatement_Dosage_AsNeeded) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatement_Dosage_AsNeeded.ProtoReflect.Descriptor instead.
func (*MedicationStatement_Dosage_AsNeeded) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{57, 3, 0}
}

func (m *MedicationStatement_Dosage_AsNeeded) GetAsNeeded() isMedicationStatement_Dosage_AsNeeded_AsNeeded {
	if m != nil {
		return m.AsNeeded
	}
	return nil
}

func (x *MedicationStatement_Dosage_AsNeeded) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetAsNeeded().(*MedicationStatement_Dosage_AsNeeded_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *MedicationStatement_Dosage_AsNeeded) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetAsNeeded().(*MedicationStatement_Dosage_AsNeeded_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isMedicationStatement_Dosage_AsNeeded_AsNeeded interface {
	isMedicationStatement_Dosage_AsNeeded_AsNeeded()
}

type MedicationStatement_Dosage_AsNeeded_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type MedicationStatement_Dosage_AsNeeded_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*MedicationStatement_Dosage_AsNeeded_Boolean) isMedicationStatement_Dosage_AsNeeded_AsNeeded() {
}

func (*MedicationStatement_Dosage_AsNeeded_CodeableConcept) isMedicationStatement_Dosage_AsNeeded_AsNeeded() {
}

// Where (on body) medication is/was administered
type MedicationStatement_Dosage_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Site:
	//	*MedicationStatement_Dosage_Site_CodeableConcept
	//	*MedicationStatement_Dosage_Site_Reference
	Site isMedicationStatement_Dosage_Site_Site `protobuf_oneof:"site"`
}

func (x *MedicationStatement_Dosage_Site) Reset() {
	*x = MedicationStatement_Dosage_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatement_Dosage_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatement_Dosage_Site) ProtoMessage() {}

func (x *MedicationStatement_Dosage_Site) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatement_Dosage_Site.ProtoReflect.Descriptor instead.
func (*MedicationStatement_Dosage_Site) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{57, 3, 1}
}

func (m *MedicationStatement_Dosage_Site) GetSite() isMedicationStatement_Dosage_Site_Site {
	if m != nil {
		return m.Site
	}
	return nil
}

func (x *MedicationStatement_Dosage_Site) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetSite().(*MedicationStatement_Dosage_Site_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *MedicationStatement_Dosage_Site) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetSite().(*MedicationStatement_Dosage_Site_Reference); ok {
		return x.Reference
	}
	return nil
}

type isMedicationStatement_Dosage_Site_Site interface {
	isMedicationStatement_Dosage_Site_Site()
}

type MedicationStatement_Dosage_Site_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type MedicationStatement_Dosage_Site_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*MedicationStatement_Dosage_Site_CodeableConcept) isMedicationStatement_Dosage_Site_Site() {}

func (*MedicationStatement_Dosage_Site_Reference) isMedicationStatement_Dosage_Site_Site() {}

// Amount administered in one dose
type MedicationStatement_Dosage_Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Quantity:
	//	*MedicationStatement_Dosage_Quantity_QuantityValue
	//	*MedicationStatement_Dosage_Quantity_Range
	Quantity isMedicationStatement_Dosage_Quantity_Quantity `protobuf_oneof:"quantity"`
}

func (x *MedicationStatement_Dosage_Quantity) Reset() {
	*x = MedicationStatement_Dosage_Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatement_Dosage_Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatement_Dosage_Quantity) ProtoMessage() {}

func (x *MedicationStatement_Dosage_Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatement_Dosage_Quantity.ProtoReflect.Descriptor instead.
func (*MedicationStatement_Dosage_Quantity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{57, 3, 2}
}

func (m *MedicationStatement_Dosage_Quantity) GetQuantity() isMedicationStatement_Dosage_Quantity_Quantity {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (x *MedicationStatement_Dosage_Quantity) GetQuantityValue() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetQuantity().(*MedicationStatement_Dosage_Quantity_QuantityValue); ok {
		return x.QuantityValue
	}
	return nil
}

func (x *MedicationStatement_Dosage_Quantity) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetQuantity().(*MedicationStatement_Dosage_Quantity_Range); ok {
		return x.Range
	}
	return nil
}

type isMedicationStatement_Dosage_Quantity_Quantity interface {
	isMedicationStatement_Dosage_Quantity_Quantity()
}

type MedicationStatement_Dosage_Quantity_QuantityValue struct {
	QuantityValue *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,1,opt,name=quantity_value,json=quantity,proto3,oneof"`
}

type MedicationStatement_Dosage_Quantity_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*MedicationStatement_Dosage_Quantity_QuantityValue) isMedicationStatement_Dosage_Quantity_Quantity() {
}

func (*MedicationStatement_Dosage_Quantity_Range) isMedicationStatement_Dosage_Quantity_Quantity() {}

// Dose quantity per unit of time
type MedicationStatement_Dosage_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rate:
	//	*MedicationStatement_Dosage_Rate_Ratio
	//	*MedicationStatement_Dosage_Rate_Range
	Rate isMedicationStatement_Dosage_Rate_Rate `protobuf_oneof:"rate"`
}

func (x *MedicationStatement_Dosage_Rate) Reset() {
	*x = MedicationStatement_Dosage_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatement_Dosage_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatement_Dosage_Rate) ProtoMessage() {}

func (x *MedicationStatement_Dosage_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatement_Dosage_Rate.ProtoReflect.Descriptor instead.
func (*MedicationStatement_Dosage_Rate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{57, 3, 3}
}

func (m *MedicationStatement_Dosage_Rate) GetRate() isMedicationStatement_Dosage_Rate_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (x *MedicationStatement_Dosage_Rate) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetRate().(*MedicationStatement_Dosage_Rate_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *MedicationStatement_Dosage_Rate) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetRate().(*MedicationStatement_Dosage_Rate_Range); ok {
		return x.Range
	}
	return nil
}

type isMedicationStatement_Dosage_Rate_Rate interface {
	isMedicationStatement_Dosage_Rate_Rate()
}

type MedicationStatement_Dosage_Rate_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type MedicationStatement_Dosage_Rate_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*MedicationStatement_Dosage_Rate_Ratio) isMedicationStatement_Dosage_Rate_Rate() {}

func (*MedicationStatement_Dosage_Rate_Range) isMedicationStatement_Dosage_Rate_Rate() {}

// If this is a reply to prior message
type MessageHeader_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Id of original message
	Identifier *datatypes_go_proto.Id `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// ok | transient-error | fatal-error
	Code *codes_go_proto.ResponseTypeCode `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Specific list of hints/warnings/errors
	Details *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *MessageHeader_Response) Reset() {
	*x = MessageHeader_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader_Response) ProtoMessage() {}

func (x *MessageHeader_Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader_Response.ProtoReflect.Descriptor instead.
func (*MessageHeader_Response) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{58, 0}
}

func (x *MessageHeader_Response) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageHeader_Response) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MessageHeader_Response) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MessageHeader_Response) GetIdentifier() *datatypes_go_proto.Id {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *MessageHeader_Response) GetCode() *codes_go_proto.ResponseTypeCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MessageHeader_Response) GetDetails() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Details
	}
	return nil
}

// Message Source Application
type MessageHeader_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of system
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Name of software running the system
	Software *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=software,proto3" json:"software,omitempty"`
	// Version of software running
	Version *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	// Human contact for problems
	Contact *datatypes_go_proto.ContactPoint `protobuf:"bytes,7,opt,name=contact,proto3" json:"contact,omitempty"`
	// Actual message source address or id
	Endpoint *datatypes_go_proto.Uri `protobuf:"bytes,8,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *MessageHeader_Source) Reset() {
	*x = MessageHeader_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader_Source) ProtoMessage() {}

func (x *MessageHeader_Source) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader_Source.ProtoReflect.Descriptor instead.
func (*MessageHeader_Source) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{58, 1}
}

func (x *MessageHeader_Source) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageHeader_Source) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MessageHeader_Source) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MessageHeader_Source) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MessageHeader_Source) GetSoftware() *datatypes_go_proto.String {
	if x != nil {
		return x.Software
	}
	return nil
}

func (x *MessageHeader_Source) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *MessageHeader_Source) GetContact() *datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *MessageHeader_Source) GetEndpoint() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Message Destination Application(s)
type MessageHeader_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of system
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Particular delivery destination within the destination
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	// Actual destination address or id
	Endpoint *datatypes_go_proto.Uri `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *MessageHeader_Destination) Reset() {
	*x = MessageHeader_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeader_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader_Destination) ProtoMessage() {}

func (x *MessageHeader_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader_Destination.ProtoReflect.Descriptor instead.
func (*MessageHeader_Destination) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{58, 2}
}

func (x *MessageHeader_Destination) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageHeader_Destination) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MessageHeader_Destination) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MessageHeader_Destination) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MessageHeader_Destination) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *MessageHeader_Destination) GetEndpoint() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Contact details of the publisher
type NamingSystem_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of a individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *NamingSystem_Contact) Reset() {
	*x = NamingSystem_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystem_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystem_Contact) ProtoMessage() {}

func (x *NamingSystem_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystem_Contact.ProtoReflect.Descriptor instead.
func (*NamingSystem_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{59, 0}
}

func (x *NamingSystem_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamingSystem_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NamingSystem_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NamingSystem_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NamingSystem_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// Unique identifiers used for system
type NamingSystem_UniqueId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// oid | uuid | uri | other
	Type *codes_go_proto.NamingSystemIdentifierTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The unique identifier
	Value *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Is this the id that should be used for this type
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=preferred,proto3" json:"preferred,omitempty"`
	// When is identifier valid?
	Period *datatypes_go_proto.Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *NamingSystem_UniqueId) Reset() {
	*x = NamingSystem_UniqueId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystem_UniqueId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystem_UniqueId) ProtoMessage() {}

func (x *NamingSystem_UniqueId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystem_UniqueId.ProtoReflect.Descriptor instead.
func (*NamingSystem_UniqueId) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{59, 1}
}

func (x *NamingSystem_UniqueId) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamingSystem_UniqueId) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NamingSystem_UniqueId) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NamingSystem_UniqueId) GetType() *codes_go_proto.NamingSystemIdentifierTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NamingSystem_UniqueId) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *NamingSystem_UniqueId) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

func (x *NamingSystem_UniqueId) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Oral diet components
type NutritionOrder_OralDiet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of oral diet or diet restrictions that describe what can be consumed
	// orally
	Type []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	// Scheduled frequency of diet
	Schedule []*datatypes_go_proto.Timing        `protobuf:"bytes,5,rep,name=schedule,proto3" json:"schedule,omitempty"`
	Nutrient []*NutritionOrder_OralDiet_Nutrient `protobuf:"bytes,6,rep,name=nutrient,proto3" json:"nutrient,omitempty"`
	Texture  []*NutritionOrder_OralDiet_Texture  `protobuf:"bytes,7,rep,name=texture,proto3" json:"texture,omitempty"`
	// The required consistency of fluids and liquids provided to the patient
	FluidConsistencyType []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,rep,name=fluid_consistency_type,json=fluidConsistencyType,proto3" json:"fluid_consistency_type,omitempty"`
	// Instructions or additional information about the oral diet
	Instruction *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *NutritionOrder_OralDiet) Reset() {
	*x = NutritionOrder_OralDiet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_OralDiet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_OralDiet) ProtoMessage() {}

func (x *NutritionOrder_OralDiet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_OralDiet.ProtoReflect.Descriptor instead.
func (*NutritionOrder_OralDiet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{60, 0}
}

func (x *NutritionOrder_OralDiet) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetSchedule() []*datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetNutrient() []*NutritionOrder_OralDiet_Nutrient {
	if x != nil {
		return x.Nutrient
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetTexture() []*NutritionOrder_OralDiet_Texture {
	if x != nil {
		return x.Texture
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetFluidConsistencyType() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FluidConsistencyType
	}
	return nil
}

func (x *NutritionOrder_OralDiet) GetInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.Instruction
	}
	return nil
}

// Supplement components
type NutritionOrder_Supplement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of supplement product requested
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Product or brand name of the nutritional supplement
	ProductName *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Scheduled frequency of supplement
	Schedule []*datatypes_go_proto.Timing `protobuf:"bytes,6,rep,name=schedule,proto3" json:"schedule,omitempty"`
	// Amount of the nutritional supplement
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Instructions or additional information about the oral supplement
	Instruction *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *NutritionOrder_Supplement) Reset() {
	*x = NutritionOrder_Supplement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_Supplement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_Supplement) ProtoMessage() {}

func (x *NutritionOrder_Supplement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_Supplement.ProtoReflect.Descriptor instead.
func (*NutritionOrder_Supplement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{60, 1}
}

func (x *NutritionOrder_Supplement) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetSchedule() []*datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *NutritionOrder_Supplement) GetInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.Instruction
	}
	return nil
}

// Enteral formula components
type NutritionOrder_EnteralFormula struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of enteral or infant formula
	BaseFormulaType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=base_formula_type,json=baseFormulaType,proto3" json:"base_formula_type,omitempty"`
	// Product or brand name of the enteral or infant formula
	BaseFormulaProductName *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=base_formula_product_name,json=baseFormulaProductName,proto3" json:"base_formula_product_name,omitempty"`
	// Type of modular component to add to the feeding
	AdditiveType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=additive_type,json=additiveType,proto3" json:"additive_type,omitempty"`
	// Product or brand name of the modular additive
	AdditiveProductName *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=additive_product_name,json=additiveProductName,proto3" json:"additive_product_name,omitempty"`
	// Amount of energy per specified volume that is required
	CaloricDensity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,8,opt,name=caloric_density,json=caloricDensity,proto3" json:"caloric_density,omitempty"`
	// How the formula should enter the patient's gastrointestinal tract
	RouteofAdministration *datatypes_go_proto.CodeableConcept             `protobuf:"bytes,9,opt,name=routeof_administration,json=routeofAdministration,proto3" json:"routeof_administration,omitempty"`
	Administration        []*NutritionOrder_EnteralFormula_Administration `protobuf:"bytes,10,rep,name=administration,proto3" json:"administration,omitempty"`
	// Upper limit on formula volume per unit of time
	MaxVolumeToDeliver *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,11,opt,name=max_volume_to_deliver,json=maxVolumeToDeliver,proto3" json:"max_volume_to_deliver,omitempty"`
	// Formula feeding instructions expressed as text
	AdministrationInstruction *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=administration_instruction,json=administrationInstruction,proto3" json:"administration_instruction,omitempty"`
}

func (x *NutritionOrder_EnteralFormula) Reset() {
	*x = NutritionOrder_EnteralFormula{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_EnteralFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_EnteralFormula) ProtoMessage() {}

func (x *NutritionOrder_EnteralFormula) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_EnteralFormula.ProtoReflect.Descriptor instead.
func (*NutritionOrder_EnteralFormula) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{60, 2}
}

func (x *NutritionOrder_EnteralFormula) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetBaseFormulaType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BaseFormulaType
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetBaseFormulaProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.BaseFormulaProductName
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetAdditiveType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AdditiveType
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetAdditiveProductName() *datatypes_go_proto.String {
	if x != nil {
		return x.AdditiveProductName
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetCaloricDensity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.CaloricDensity
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetRouteofAdministration() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.RouteofAdministration
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetAdministration() []*NutritionOrder_EnteralFormula_Administration {
	if x != nil {
		return x.Administration
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetMaxVolumeToDeliver() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.MaxVolumeToDeliver
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula) GetAdministrationInstruction() *datatypes_go_proto.String {
	if x != nil {
		return x.AdministrationInstruction
	}
	return nil
}

// Required  nutrient modifications
type NutritionOrder_OralDiet_Nutrient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of nutrient that is being modified
	Modifier *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=modifier,proto3" json:"modifier,omitempty"`
	// Quantity of the specified nutrient
	Amount *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *NutritionOrder_OralDiet_Nutrient) Reset() {
	*x = NutritionOrder_OralDiet_Nutrient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_OralDiet_Nutrient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_OralDiet_Nutrient) ProtoMessage() {}

func (x *NutritionOrder_OralDiet_Nutrient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_OralDiet_Nutrient.ProtoReflect.Descriptor instead.
func (*NutritionOrder_OralDiet_Nutrient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{60, 0, 0}
}

func (x *NutritionOrder_OralDiet_Nutrient) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Nutrient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Nutrient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Nutrient) GetModifier() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Nutrient) GetAmount() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Required  texture modifications
type NutritionOrder_OralDiet_Texture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code to indicate how to alter the texture of the foods, e.g. pureed
	Modifier *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=modifier,proto3" json:"modifier,omitempty"`
	// Concepts that are used to identify an entity that is ingested for
	// nutritional purposes
	FoodType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=food_type,json=foodType,proto3" json:"food_type,omitempty"`
}

func (x *NutritionOrder_OralDiet_Texture) Reset() {
	*x = NutritionOrder_OralDiet_Texture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_OralDiet_Texture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_OralDiet_Texture) ProtoMessage() {}

func (x *NutritionOrder_OralDiet_Texture) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_OralDiet_Texture.ProtoReflect.Descriptor instead.
func (*NutritionOrder_OralDiet_Texture) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{60, 0, 1}
}

func (x *NutritionOrder_OralDiet_Texture) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Texture) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Texture) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Texture) GetModifier() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Modifier
	}
	return nil
}

func (x *NutritionOrder_OralDiet_Texture) GetFoodType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.FoodType
	}
	return nil
}

// Formula feeding instruction as structured data
type NutritionOrder_EnteralFormula_Administration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Scheduled frequency of enteral feeding
	Schedule *datatypes_go_proto.Timing `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The volume of formula to provide
	Quantity *datatypes_go_proto.SimpleQuantity                 `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Rate     *NutritionOrder_EnteralFormula_Administration_Rate `protobuf:"bytes,6,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *NutritionOrder_EnteralFormula_Administration) Reset() {
	*x = NutritionOrder_EnteralFormula_Administration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_EnteralFormula_Administration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_EnteralFormula_Administration) ProtoMessage() {}

func (x *NutritionOrder_EnteralFormula_Administration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_EnteralFormula_Administration.ProtoReflect.Descriptor instead.
func (*NutritionOrder_EnteralFormula_Administration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{60, 2, 0}
}

func (x *NutritionOrder_EnteralFormula_Administration) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetSchedule() *datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration) GetRate() *NutritionOrder_EnteralFormula_Administration_Rate {
	if x != nil {
		return x.Rate
	}
	return nil
}

// Speed with which the formula is provided per period of time
type NutritionOrder_EnteralFormula_Administration_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rate:
	//	*NutritionOrder_EnteralFormula_Administration_Rate_Quantity
	//	*NutritionOrder_EnteralFormula_Administration_Rate_Ratio
	Rate isNutritionOrder_EnteralFormula_Administration_Rate_Rate `protobuf_oneof:"rate"`
}

func (x *NutritionOrder_EnteralFormula_Administration_Rate) Reset() {
	*x = NutritionOrder_EnteralFormula_Administration_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NutritionOrder_EnteralFormula_Administration_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionOrder_EnteralFormula_Administration_Rate) ProtoMessage() {}

func (x *NutritionOrder_EnteralFormula_Administration_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionOrder_EnteralFormula_Administration_Rate.ProtoReflect.Descriptor instead.
func (*NutritionOrder_EnteralFormula_Administration_Rate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{60, 2, 0, 0}
}

func (m *NutritionOrder_EnteralFormula_Administration_Rate) GetRate() isNutritionOrder_EnteralFormula_Administration_Rate_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration_Rate) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x, ok := x.GetRate().(*NutritionOrder_EnteralFormula_Administration_Rate_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *NutritionOrder_EnteralFormula_Administration_Rate) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetRate().(*NutritionOrder_EnteralFormula_Administration_Rate_Ratio); ok {
		return x.Ratio
	}
	return nil
}

type isNutritionOrder_EnteralFormula_Administration_Rate_Rate interface {
	isNutritionOrder_EnteralFormula_Administration_Rate_Rate()
}

type NutritionOrder_EnteralFormula_Administration_Rate_Quantity struct {
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type NutritionOrder_EnteralFormula_Administration_Rate_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,2,opt,name=ratio,proto3,oneof"`
}

func (*NutritionOrder_EnteralFormula_Administration_Rate_Quantity) isNutritionOrder_EnteralFormula_Administration_Rate_Rate() {
}

func (*NutritionOrder_EnteralFormula_Administration_Rate_Ratio) isNutritionOrder_EnteralFormula_Administration_Rate_Rate() {
}

// Clinically relevant time/time-period for observation
type Observation_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Observation_Effective_DateTime
	//	*Observation_Effective_Period
	Effective isObservation_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Observation_Effective) Reset() {
	*x = Observation_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_Effective) ProtoMessage() {}

func (x *Observation_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_Effective.ProtoReflect.Descriptor instead.
func (*Observation_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{61, 0}
}

func (m *Observation_Effective) GetEffective() isObservation_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Observation_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Observation_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Observation_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Observation_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isObservation_Effective_Effective interface {
	isObservation_Effective_Effective()
}

type Observation_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Observation_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Observation_Effective_DateTime) isObservation_Effective_Effective() {}

func (*Observation_Effective_Period) isObservation_Effective_Effective() {}

// Actual result
type Observation_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Observation_Value_Quantity
	//	*Observation_Value_CodeableConcept
	//	*Observation_Value_StringValue
	//	*Observation_Value_Range
	//	*Observation_Value_Ratio
	//	*Observation_Value_SampledData
	//	*Observation_Value_Attachment
	//	*Observation_Value_Time
	//	*Observation_Value_DateTime
	//	*Observation_Value_Period
	Value isObservation_Value_Value `protobuf_oneof:"value"`
}

func (x *Observation_Value) Reset() {
	*x = Observation_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_Value) ProtoMessage() {}

func (x *Observation_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_Value.ProtoReflect.Descriptor instead.
func (*Observation_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{61, 1}
}

func (m *Observation_Value) GetValue() isObservation_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Observation_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Observation_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Observation_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*Observation_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Observation_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*Observation_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Observation_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*Observation_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Observation_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*Observation_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Observation_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*Observation_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Observation_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*Observation_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Observation_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*Observation_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Observation_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*Observation_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Observation_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*Observation_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isObservation_Value_Value interface {
	isObservation_Value_Value()
}

type Observation_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type Observation_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Observation_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Observation_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type Observation_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type Observation_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Observation_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type Observation_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type Observation_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Observation_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*Observation_Value_Quantity) isObservation_Value_Value() {}

func (*Observation_Value_CodeableConcept) isObservation_Value_Value() {}

func (*Observation_Value_StringValue) isObservation_Value_Value() {}

func (*Observation_Value_Range) isObservation_Value_Value() {}

func (*Observation_Value_Ratio) isObservation_Value_Value() {}

func (*Observation_Value_SampledData) isObservation_Value_Value() {}

func (*Observation_Value_Attachment) isObservation_Value_Value() {}

func (*Observation_Value_Time) isObservation_Value_Value() {}

func (*Observation_Value_DateTime) isObservation_Value_Value() {}

func (*Observation_Value_Period) isObservation_Value_Value() {}

// Provides guide for interpretation
type Observation_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Indicates the meaning/use of this range of this range
	Meaning *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=meaning,proto3" json:"meaning,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,7,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Observation_ReferenceRange) Reset() {
	*x = Observation_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_ReferenceRange) ProtoMessage() {}

func (x *Observation_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Observation_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{61, 2}
}

func (x *Observation_ReferenceRange) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Observation_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Observation_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Observation_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Observation_ReferenceRange) GetMeaning() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Meaning
	}
	return nil
}

func (x *Observation_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Observation_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Resource related to this observation
type Observation_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Observation_Related) Reset() {
	*x = Observation_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_Related) ProtoMessage() {}

func (x *Observation_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_Related.ProtoReflect.Descriptor instead.
func (*Observation_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{61, 3}
}

func (x *Observation_Related) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Observation_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Observation_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Observation_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Component results
type Observation_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Observation_Component_Value        `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Observation_ReferenceRange `protobuf:"bytes,7,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Observation_Component) Reset() {
	*x = Observation_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_Component) ProtoMessage() {}

func (x *Observation_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_Component.ProtoReflect.Descriptor instead.
func (*Observation_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{61, 4}
}

func (x *Observation_Component) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Observation_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Observation_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Observation_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Observation_Component) GetValue() *Observation_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Observation_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Observation_Component) GetReferenceRange() []*Observation_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type Observation_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Observation_Component_Value_Quantity
	//	*Observation_Component_Value_CodeableConcept
	//	*Observation_Component_Value_StringValue
	//	*Observation_Component_Value_Range
	//	*Observation_Component_Value_Ratio
	//	*Observation_Component_Value_SampledData
	//	*Observation_Component_Value_Attachment
	//	*Observation_Component_Value_Time
	//	*Observation_Component_Value_DateTime
	//	*Observation_Component_Value_Period
	Value isObservation_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Observation_Component_Value) Reset() {
	*x = Observation_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation_Component_Value) ProtoMessage() {}

func (x *Observation_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation_Component_Value.ProtoReflect.Descriptor instead.
func (*Observation_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{61, 4, 0}
}

func (m *Observation_Component_Value) GetValue() isObservation_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Observation_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Observation_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Observation_Component_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*Observation_Component_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Observation_Component_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*Observation_Component_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Observation_Component_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*Observation_Component_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Observation_Component_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*Observation_Component_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Observation_Component_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*Observation_Component_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Observation_Component_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*Observation_Component_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Observation_Component_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*Observation_Component_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Observation_Component_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*Observation_Component_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Observation_Component_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*Observation_Component_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isObservation_Component_Value_Value interface {
	isObservation_Component_Value_Value()
}

type Observation_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type Observation_Component_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Observation_Component_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Observation_Component_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type Observation_Component_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type Observation_Component_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Observation_Component_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type Observation_Component_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type Observation_Component_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Observation_Component_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*Observation_Component_Value_Quantity) isObservation_Component_Value_Value() {}

func (*Observation_Component_Value_CodeableConcept) isObservation_Component_Value_Value() {}

func (*Observation_Component_Value_StringValue) isObservation_Component_Value_Value() {}

func (*Observation_Component_Value_Range) isObservation_Component_Value_Value() {}

func (*Observation_Component_Value_Ratio) isObservation_Component_Value_Value() {}

func (*Observation_Component_Value_SampledData) isObservation_Component_Value_Value() {}

func (*Observation_Component_Value_Attachment) isObservation_Component_Value_Value() {}

func (*Observation_Component_Value_Time) isObservation_Component_Value_Value() {}

func (*Observation_Component_Value_DateTime) isObservation_Component_Value_Value() {}

func (*Observation_Component_Value_Period) isObservation_Component_Value_Value() {}

// Contact details of the publisher
type OperationDefinition_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of a individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *OperationDefinition_Contact) Reset() {
	*x = OperationDefinition_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDefinition_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDefinition_Contact) ProtoMessage() {}

func (x *OperationDefinition_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDefinition_Contact.ProtoReflect.Descriptor instead.
func (*OperationDefinition_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{62, 0}
}

func (x *OperationDefinition_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationDefinition_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *OperationDefinition_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *OperationDefinition_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OperationDefinition_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// Parameters for the operation/query
type OperationDefinition_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name in Parameters.parameter.name or in URL
	Name *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// in | out
	Use *codes_go_proto.OperationParameterUseCode `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// Minimum Cardinality
	Min *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum Cardinality (a number or *)
	Max *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=max,proto3" json:"max,omitempty"`
	// Description of meaning/use
	Documentation *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=documentation,proto3" json:"documentation,omitempty"`
	// What type this parameter has
	Type *datatypes_go_proto.Code `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// Profile on the type
	Profile *datatypes_go_proto.Reference          `protobuf:"bytes,10,opt,name=profile,proto3" json:"profile,omitempty"`
	Binding *OperationDefinition_Parameter_Binding `protobuf:"bytes,11,opt,name=binding,proto3" json:"binding,omitempty"`
	// Parts of a Tuple Parameter
	Part []*OperationDefinition_Parameter `protobuf:"bytes,12,rep,name=part,proto3" json:"part,omitempty"`
}

func (x *OperationDefinition_Parameter) Reset() {
	*x = OperationDefinition_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDefinition_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDefinition_Parameter) ProtoMessage() {}

func (x *OperationDefinition_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDefinition_Parameter.ProtoReflect.Descriptor instead.
func (*OperationDefinition_Parameter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{62, 1}
}

func (x *OperationDefinition_Parameter) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetName() *datatypes_go_proto.Code {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetUse() *codes_go_proto.OperationParameterUseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetMin() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetMax() *datatypes_go_proto.String {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetDocumentation() *datatypes_go_proto.String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetType() *datatypes_go_proto.Code {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetProfile() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetBinding() *OperationDefinition_Parameter_Binding {
	if x != nil {
		return x.Binding
	}
	return nil
}

func (x *OperationDefinition_Parameter) GetPart() []*OperationDefinition_Parameter {
	if x != nil {
		return x.Part
	}
	return nil
}

// ValueSet details if this is coded
type OperationDefinition_Parameter_Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// required | extensible | preferred | example
	Strength *codes_go_proto.BindingStrengthCode             `protobuf:"bytes,4,opt,name=strength,proto3" json:"strength,omitempty"`
	ValueSet *OperationDefinition_Parameter_Binding_ValueSet `protobuf:"bytes,5,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *OperationDefinition_Parameter_Binding) Reset() {
	*x = OperationDefinition_Parameter_Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDefinition_Parameter_Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDefinition_Parameter_Binding) ProtoMessage() {}

func (x *OperationDefinition_Parameter_Binding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDefinition_Parameter_Binding.ProtoReflect.Descriptor instead.
func (*OperationDefinition_Parameter_Binding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{62, 1, 0}
}

func (x *OperationDefinition_Parameter_Binding) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationDefinition_Parameter_Binding) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *OperationDefinition_Parameter_Binding) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *OperationDefinition_Parameter_Binding) GetStrength() *codes_go_proto.BindingStrengthCode {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *OperationDefinition_Parameter_Binding) GetValueSet() *OperationDefinition_Parameter_Binding_ValueSet {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

// Source of value set
type OperationDefinition_Parameter_Binding_ValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueSet:
	//	*OperationDefinition_Parameter_Binding_ValueSet_Uri
	//	*OperationDefinition_Parameter_Binding_ValueSet_Reference
	ValueSet isOperationDefinition_Parameter_Binding_ValueSet_ValueSet `protobuf_oneof:"value_set"`
}

func (x *OperationDefinition_Parameter_Binding_ValueSet) Reset() {
	*x = OperationDefinition_Parameter_Binding_ValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDefinition_Parameter_Binding_ValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDefinition_Parameter_Binding_ValueSet) ProtoMessage() {}

func (x *OperationDefinition_Parameter_Binding_ValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDefinition_Parameter_Binding_ValueSet.ProtoReflect.Descriptor instead.
func (*OperationDefinition_Parameter_Binding_ValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{62, 1, 0, 0}
}

func (m *OperationDefinition_Parameter_Binding_ValueSet) GetValueSet() isOperationDefinition_Parameter_Binding_ValueSet_ValueSet {
	if m != nil {
		return m.ValueSet
	}
	return nil
}

func (x *OperationDefinition_Parameter_Binding_ValueSet) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValueSet().(*OperationDefinition_Parameter_Binding_ValueSet_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *OperationDefinition_Parameter_Binding_ValueSet) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValueSet().(*OperationDefinition_Parameter_Binding_ValueSet_Reference); ok {
		return x.Reference
	}
	return nil
}

type isOperationDefinition_Parameter_Binding_ValueSet_ValueSet interface {
	isOperationDefinition_Parameter_Binding_ValueSet_ValueSet()
}

type OperationDefinition_Parameter_Binding_ValueSet_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type OperationDefinition_Parameter_Binding_ValueSet_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*OperationDefinition_Parameter_Binding_ValueSet_Uri) isOperationDefinition_Parameter_Binding_ValueSet_ValueSet() {
}

func (*OperationDefinition_Parameter_Binding_ValueSet_Reference) isOperationDefinition_Parameter_Binding_ValueSet_ValueSet() {
}

// A single issue associated with the action
type OperationOutcome_Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// fatal | error | warning | information
	Severity *codes_go_proto.IssueSeverityCode `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`
	// Error or warning code
	Code *codes_go_proto.IssueTypeCode `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Additional details about the error
	Details *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	// Additional diagnostic information about the issue
	Diagnostics *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// XPath of element(s) related to issue
	Location []*datatypes_go_proto.String `protobuf:"bytes,8,rep,name=location,proto3" json:"location,omitempty"`
}

func (x *OperationOutcome_Issue) Reset() {
	*x = OperationOutcome_Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationOutcome_Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationOutcome_Issue) ProtoMessage() {}

func (x *OperationOutcome_Issue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationOutcome_Issue.ProtoReflect.Descriptor instead.
func (*OperationOutcome_Issue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{63, 0}
}

func (x *OperationOutcome_Issue) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationOutcome_Issue) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *OperationOutcome_Issue) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *OperationOutcome_Issue) GetSeverity() *codes_go_proto.IssueSeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *OperationOutcome_Issue) GetCode() *codes_go_proto.IssueTypeCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *OperationOutcome_Issue) GetDetails() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OperationOutcome_Issue) GetDiagnostics() *datatypes_go_proto.String {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *OperationOutcome_Issue) GetLocation() []*datatypes_go_proto.String {
	if x != nil {
		return x.Location
	}
	return nil
}

// Text - why the order was made
type Order_Reason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//	*Order_Reason_CodeableConcept
	//	*Order_Reason_Reference
	Reason isOrder_Reason_Reason `protobuf_oneof:"reason"`
}

func (x *Order_Reason) Reset() {
	*x = Order_Reason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order_Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order_Reason) ProtoMessage() {}

func (x *Order_Reason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order_Reason.ProtoReflect.Descriptor instead.
func (*Order_Reason) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{64, 0}
}

func (m *Order_Reason) GetReason() isOrder_Reason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *Order_Reason) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetReason().(*Order_Reason_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Order_Reason) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetReason().(*Order_Reason_Reference); ok {
		return x.Reference
	}
	return nil
}

type isOrder_Reason_Reason interface {
	isOrder_Reason_Reason()
}

type Order_Reason_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Order_Reason_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Order_Reason_CodeableConcept) isOrder_Reason_Reason() {}

func (*Order_Reason_Reference) isOrder_Reason_Reason() {}

// When order should be fulfilled
type Order_When struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code specifies when request should be done. The code may simply be a
	// priority code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// A formal schedule
	Schedule *datatypes_go_proto.Timing `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *Order_When) Reset() {
	*x = Order_When{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order_When) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order_When) ProtoMessage() {}

func (x *Order_When) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order_When.ProtoReflect.Descriptor instead.
func (*Order_When) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{64, 1}
}

func (x *Order_When) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Order_When) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Order_When) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Order_When) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Order_When) GetSchedule() *datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// Contact for the organization for a certain purpose
type Organization_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The type of contact
	Purpose *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// A name associated with the contact
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details (telephone, email, etc.)  for a contact
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,6,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Visiting or postal addresses for the contact
	Address *datatypes_go_proto.Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Organization_Contact) Reset() {
	*x = Organization_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization_Contact) ProtoMessage() {}

func (x *Organization_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization_Contact.ProtoReflect.Descriptor instead.
func (*Organization_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{66, 0}
}

func (x *Organization_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Organization_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Organization_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Organization_Contact) GetPurpose() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *Organization_Contact) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Organization_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *Organization_Contact) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

// Operation Parameter
type Parameters_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name from the definition
	Name  *datatypes_go_proto.String  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Value *Parameters_Parameter_Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// If parameter is a whole resource
	Resource *ContainedResource `protobuf:"bytes,6,opt,name=resource,proto3" json:"resource,omitempty"`
	// Named part of a parameter (e.g. Tuple)
	Part []*Parameters_Parameter `protobuf:"bytes,7,rep,name=part,proto3" json:"part,omitempty"`
}

func (x *Parameters_Parameter) Reset() {
	*x = Parameters_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters_Parameter) ProtoMessage() {}

func (x *Parameters_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters_Parameter.ProtoReflect.Descriptor instead.
func (*Parameters_Parameter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{67, 0}
}

func (x *Parameters_Parameter) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Parameters_Parameter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Parameters_Parameter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Parameters_Parameter) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Parameters_Parameter) GetValue() *Parameters_Parameter_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Parameters_Parameter) GetResource() *ContainedResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Parameters_Parameter) GetPart() []*Parameters_Parameter {
	if x != nil {
		return x.Part
	}
	return nil
}

// If parameter is a data type
type Parameters_Parameter_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Parameters_Parameter_Value_Boolean
	//	*Parameters_Parameter_Value_Integer
	//	*Parameters_Parameter_Value_Decimal
	//	*Parameters_Parameter_Value_Base64Binary
	//	*Parameters_Parameter_Value_Instant
	//	*Parameters_Parameter_Value_StringValue
	//	*Parameters_Parameter_Value_Uri
	//	*Parameters_Parameter_Value_Date
	//	*Parameters_Parameter_Value_DateTime
	//	*Parameters_Parameter_Value_Time
	//	*Parameters_Parameter_Value_Code
	//	*Parameters_Parameter_Value_Oid
	//	*Parameters_Parameter_Value_Id
	//	*Parameters_Parameter_Value_UnsignedInt
	//	*Parameters_Parameter_Value_PositiveInt
	//	*Parameters_Parameter_Value_Markdown
	//	*Parameters_Parameter_Value_Annotation
	//	*Parameters_Parameter_Value_Attachment
	//	*Parameters_Parameter_Value_Identifier
	//	*Parameters_Parameter_Value_CodeableConcept
	//	*Parameters_Parameter_Value_Coding
	//	*Parameters_Parameter_Value_Quantity
	//	*Parameters_Parameter_Value_Range
	//	*Parameters_Parameter_Value_Period
	//	*Parameters_Parameter_Value_Ratio
	//	*Parameters_Parameter_Value_SampledData
	//	*Parameters_Parameter_Value_Signature
	//	*Parameters_Parameter_Value_HumanName
	//	*Parameters_Parameter_Value_Address
	//	*Parameters_Parameter_Value_ContactPoint
	//	*Parameters_Parameter_Value_Timing
	//	*Parameters_Parameter_Value_Reference
	//	*Parameters_Parameter_Value_Meta
	Value isParameters_Parameter_Value_Value `protobuf_oneof:"value"`
}

func (x *Parameters_Parameter_Value) Reset() {
	*x = Parameters_Parameter_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters_Parameter_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters_Parameter_Value) ProtoMessage() {}

func (x *Parameters_Parameter_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters_Parameter_Value.ProtoReflect.Descriptor instead.
func (*Parameters_Parameter_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{67, 0, 0}
}

func (m *Parameters_Parameter_Value) GetValue() isParameters_Parameter_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Code); ok {
		return x.Code
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Period); ok {
		return x.Period
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Address); ok {
		return x.Address
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *Parameters_Parameter_Value) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetValue().(*Parameters_Parameter_Value_Meta); ok {
		return x.Meta
	}
	return nil
}

type isParameters_Parameter_Value_Value interface {
	isParameters_Parameter_Value_Value()
}

type Parameters_Parameter_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Parameters_Parameter_Value_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

type Parameters_Parameter_Value_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=decimal,proto3,oneof"`
}

type Parameters_Parameter_Value_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,4,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type Parameters_Parameter_Value_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,5,opt,name=instant,proto3,oneof"`
}

type Parameters_Parameter_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=string_value,json=string,proto3,oneof"`
}

type Parameters_Parameter_Value_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,7,opt,name=uri,proto3,oneof"`
}

type Parameters_Parameter_Value_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,8,opt,name=date,proto3,oneof"`
}

type Parameters_Parameter_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Parameters_Parameter_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,10,opt,name=time,proto3,oneof"`
}

type Parameters_Parameter_Value_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,11,opt,name=code,proto3,oneof"`
}

type Parameters_Parameter_Value_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type Parameters_Parameter_Value_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,13,opt,name=id,proto3,oneof"`
}

type Parameters_Parameter_Value_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type Parameters_Parameter_Value_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,15,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type Parameters_Parameter_Value_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,16,opt,name=markdown,proto3,oneof"`
}

type Parameters_Parameter_Value_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,17,opt,name=annotation,proto3,oneof"`
}

type Parameters_Parameter_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,18,opt,name=attachment,proto3,oneof"`
}

type Parameters_Parameter_Value_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,19,opt,name=identifier,proto3,oneof"`
}

type Parameters_Parameter_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Parameters_Parameter_Value_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,21,opt,name=coding,proto3,oneof"`
}

type Parameters_Parameter_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,22,opt,name=quantity,proto3,oneof"`
}

type Parameters_Parameter_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,23,opt,name=range,proto3,oneof"`
}

type Parameters_Parameter_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,24,opt,name=period,proto3,oneof"`
}

type Parameters_Parameter_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,25,opt,name=ratio,proto3,oneof"`
}

type Parameters_Parameter_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,26,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Parameters_Parameter_Value_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,27,opt,name=signature,proto3,oneof"`
}

type Parameters_Parameter_Value_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,28,opt,name=human_name,json=humanName,proto3,oneof"`
}

type Parameters_Parameter_Value_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,29,opt,name=address,proto3,oneof"`
}

type Parameters_Parameter_Value_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,30,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type Parameters_Parameter_Value_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,31,opt,name=timing,proto3,oneof"`
}

type Parameters_Parameter_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=reference,proto3,oneof"`
}

type Parameters_Parameter_Value_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,33,opt,name=meta,proto3,oneof"`
}

func (*Parameters_Parameter_Value_Boolean) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Integer) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Decimal) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Base64Binary) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Instant) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_StringValue) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Uri) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Date) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_DateTime) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Time) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Code) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Oid) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Id) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_UnsignedInt) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_PositiveInt) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Markdown) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Annotation) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Attachment) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Identifier) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_CodeableConcept) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Coding) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Quantity) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Range) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Period) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Ratio) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_SampledData) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Signature) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_HumanName) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Address) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_ContactPoint) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Timing) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Reference) isParameters_Parameter_Value_Value() {}

func (*Parameters_Parameter_Value_Meta) isParameters_Parameter_Value_Value() {}

// Indicates if the individual is deceased or not
type Patient_Deceased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Deceased:
	//	*Patient_Deceased_Boolean
	//	*Patient_Deceased_DateTime
	Deceased isPatient_Deceased_Deceased `protobuf_oneof:"deceased"`
}

func (x *Patient_Deceased) Reset() {
	*x = Patient_Deceased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient_Deceased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient_Deceased) ProtoMessage() {}

func (x *Patient_Deceased) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient_Deceased.ProtoReflect.Descriptor instead.
func (*Patient_Deceased) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{68, 0}
}

func (m *Patient_Deceased) GetDeceased() isPatient_Deceased_Deceased {
	if m != nil {
		return m.Deceased
	}
	return nil
}

func (x *Patient_Deceased) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetDeceased().(*Patient_Deceased_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Patient_Deceased) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetDeceased().(*Patient_Deceased_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isPatient_Deceased_Deceased interface {
	isPatient_Deceased_Deceased()
}

type Patient_Deceased_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Patient_Deceased_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*Patient_Deceased_Boolean) isPatient_Deceased_Deceased() {}

func (*Patient_Deceased_DateTime) isPatient_Deceased_Deceased() {}

// Whether patient is part of a multiple birth
type Patient_MultipleBirth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MultipleBirth:
	//	*Patient_MultipleBirth_Boolean
	//	*Patient_MultipleBirth_Integer
	MultipleBirth isPatient_MultipleBirth_MultipleBirth `protobuf_oneof:"multiple_birth"`
}

func (x *Patient_MultipleBirth) Reset() {
	*x = Patient_MultipleBirth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient_MultipleBirth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient_MultipleBirth) ProtoMessage() {}

func (x *Patient_MultipleBirth) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient_MultipleBirth.ProtoReflect.Descriptor instead.
func (*Patient_MultipleBirth) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{68, 1}
}

func (m *Patient_MultipleBirth) GetMultipleBirth() isPatient_MultipleBirth_MultipleBirth {
	if m != nil {
		return m.MultipleBirth
	}
	return nil
}

func (x *Patient_MultipleBirth) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetMultipleBirth().(*Patient_MultipleBirth_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Patient_MultipleBirth) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetMultipleBirth().(*Patient_MultipleBirth_Integer); ok {
		return x.Integer
	}
	return nil
}

type isPatient_MultipleBirth_MultipleBirth interface {
	isPatient_MultipleBirth_MultipleBirth()
}

type Patient_MultipleBirth_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type Patient_MultipleBirth_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

func (*Patient_MultipleBirth_Boolean) isPatient_MultipleBirth_MultipleBirth() {}

func (*Patient_MultipleBirth_Integer) isPatient_MultipleBirth_MultipleBirth() {}

// A contact party (e.g. guardian, partner, friend) for the patient
type Patient_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The kind of relationship
	Relationship []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=relationship,proto3" json:"relationship,omitempty"`
	// A name associated with the contact person
	Name *datatypes_go_proto.HumanName `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// A contact detail for the person
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,6,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Address for the contact person
	Address *datatypes_go_proto.Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// male | female | other | unknown
	Gender *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	// Organization that is associated with the contact
	Organization *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=organization,proto3" json:"organization,omitempty"`
	// The period during which this contact person or organization is valid to
	// be contacted relating to this patient
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Patient_Contact) Reset() {
	*x = Patient_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient_Contact) ProtoMessage() {}

func (x *Patient_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient_Contact.ProtoReflect.Descriptor instead.
func (*Patient_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{68, 2}
}

func (x *Patient_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Patient_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Patient_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Patient_Contact) GetRelationship() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *Patient_Contact) GetName() *datatypes_go_proto.HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Patient_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *Patient_Contact) GetAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Patient_Contact) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *Patient_Contact) GetOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Patient_Contact) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// This patient is known to be an animal (non-human)
type Patient_Animal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// E.g. Dog, Cow
	Species *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=species,proto3" json:"species,omitempty"`
	// E.g. Poodle, Angus
	Breed *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=breed,proto3" json:"breed,omitempty"`
	// E.g. Neutered, Intact
	GenderStatus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=gender_status,json=genderStatus,proto3" json:"gender_status,omitempty"`
}

func (x *Patient_Animal) Reset() {
	*x = Patient_Animal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient_Animal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient_Animal) ProtoMessage() {}

func (x *Patient_Animal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient_Animal.ProtoReflect.Descriptor instead.
func (*Patient_Animal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{68, 3}
}

func (x *Patient_Animal) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Patient_Animal) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Patient_Animal) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Patient_Animal) GetSpecies() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Species
	}
	return nil
}

func (x *Patient_Animal) GetBreed() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Breed
	}
	return nil
}

func (x *Patient_Animal) GetGenderStatus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.GenderStatus
	}
	return nil
}

// A list of Languages which may be used to communicate with the patient about
// his or her health
type Patient_Communication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The language which can be used to communicate with the patient about his
	// or her health
	Language *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Language preference indicator
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=preferred,proto3" json:"preferred,omitempty"`
}

func (x *Patient_Communication) Reset() {
	*x = Patient_Communication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient_Communication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient_Communication) ProtoMessage() {}

func (x *Patient_Communication) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient_Communication.ProtoReflect.Descriptor instead.
func (*Patient_Communication) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{68, 4}
}

func (x *Patient_Communication) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Patient_Communication) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Patient_Communication) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Patient_Communication) GetLanguage() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Patient_Communication) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

// Link to another patient resource that concerns the same actual person
type Patient_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The other patient resource that the link refers to
	Other *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=other,proto3" json:"other,omitempty"`
	// replace | refer | seealso - type of link
	Type *codes_go_proto.LinkTypeCode `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Patient_Link) Reset() {
	*x = Patient_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient_Link) ProtoMessage() {}

func (x *Patient_Link) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient_Link.ProtoReflect.Descriptor instead.
func (*Patient_Link) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{68, 5}
}

func (x *Patient_Link) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Patient_Link) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Patient_Link) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Patient_Link) GetOther() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *Patient_Link) GetType() *codes_go_proto.LinkTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

// Details
type PaymentReconciliation_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type code
	Type *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Claim
	Request *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	// Claim Response
	Responce *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=responce,proto3" json:"responce,omitempty"`
	// Submitter
	Submitter *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=submitter,proto3" json:"submitter,omitempty"`
	// Payee
	Payee *datatypes_go_proto.Reference `protobuf:"bytes,8,opt,name=payee,proto3" json:"payee,omitempty"`
	// Invoice date
	Date *datatypes_go_proto.Date `protobuf:"bytes,9,opt,name=date,proto3" json:"date,omitempty"`
	// Detail amount
	Amount *datatypes_go_proto.Money `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PaymentReconciliation_Detail) Reset() {
	*x = PaymentReconciliation_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentReconciliation_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentReconciliation_Detail) ProtoMessage() {}

func (x *PaymentReconciliation_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentReconciliation_Detail.ProtoReflect.Descriptor instead.
func (*PaymentReconciliation_Detail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{70, 0}
}

func (x *PaymentReconciliation_Detail) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PaymentReconciliation_Detail) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PaymentReconciliation_Detail) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PaymentReconciliation_Detail) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PaymentReconciliation_Detail) GetRequest() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PaymentReconciliation_Detail) GetResponce() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Responce
	}
	return nil
}

func (x *PaymentReconciliation_Detail) GetSubmitter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Submitter
	}
	return nil
}

func (x *PaymentReconciliation_Detail) GetPayee() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Payee
	}
	return nil
}

func (x *PaymentReconciliation_Detail) GetDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *PaymentReconciliation_Detail) GetAmount() *datatypes_go_proto.Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Note text
type PaymentReconciliation_Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// display | print | printoper
	Type *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Notes text
	Text *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PaymentReconciliation_Note) Reset() {
	*x = PaymentReconciliation_Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentReconciliation_Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentReconciliation_Note) ProtoMessage() {}

func (x *PaymentReconciliation_Note) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentReconciliation_Note.ProtoReflect.Descriptor instead.
func (*PaymentReconciliation_Note) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{70, 1}
}

func (x *PaymentReconciliation_Note) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PaymentReconciliation_Note) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PaymentReconciliation_Note) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *PaymentReconciliation_Note) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PaymentReconciliation_Note) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Link to a resource that concerns the same actual person
type Person_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The resource to which this actual person is associated
	Target *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	// level1 | level2 | level3 | level4
	Assurance *codes_go_proto.IdentityAssuranceLevelCode `protobuf:"bytes,5,opt,name=assurance,proto3" json:"assurance,omitempty"`
}

func (x *Person_Link) Reset() {
	*x = Person_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person_Link) ProtoMessage() {}

func (x *Person_Link) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person_Link.ProtoReflect.Descriptor instead.
func (*Person_Link) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{71, 0}
}

func (x *Person_Link) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Person_Link) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Person_Link) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Person_Link) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Person_Link) GetAssurance() *codes_go_proto.IdentityAssuranceLevelCode {
	if x != nil {
		return x.Assurance
	}
	return nil
}

// Roles/organizations the practitioner is associated with
type Practitioner_PractitionerRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Organization where the roles are performed
	ManagingOrganization *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=managing_organization,json=managingOrganization,proto3" json:"managing_organization,omitempty"`
	// Roles which this practitioner may perform
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// Specific specialty of the practitioner
	Specialty []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,rep,name=specialty,proto3" json:"specialty,omitempty"`
	// The period during which the practitioner is authorized to perform in
	// these role(s)
	Period *datatypes_go_proto.Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
	// The location(s) at which this practitioner provides care
	Location []*datatypes_go_proto.Reference `protobuf:"bytes,8,rep,name=location,proto3" json:"location,omitempty"`
	// The list of healthcare services that this worker provides for this role's
	// Organization/Location(s)
	HealthcareService []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=healthcare_service,json=healthcareService,proto3" json:"healthcare_service,omitempty"`
}

func (x *Practitioner_PractitionerRole) Reset() {
	*x = Practitioner_PractitionerRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Practitioner_PractitionerRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Practitioner_PractitionerRole) ProtoMessage() {}

func (x *Practitioner_PractitionerRole) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Practitioner_PractitionerRole.ProtoReflect.Descriptor instead.
func (*Practitioner_PractitionerRole) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{72, 0}
}

func (x *Practitioner_PractitionerRole) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Practitioner_PractitionerRole) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Practitioner_PractitionerRole) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Practitioner_PractitionerRole) GetManagingOrganization() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ManagingOrganization
	}
	return nil
}

func (x *Practitioner_PractitionerRole) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Practitioner_PractitionerRole) GetSpecialty() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Specialty
	}
	return nil
}

func (x *Practitioner_PractitionerRole) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Practitioner_PractitionerRole) GetLocation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Practitioner_PractitionerRole) GetHealthcareService() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.HealthcareService
	}
	return nil
}

// Qualifications obtained by training and certification
type Practitioner_Qualification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// An identifier for this qualification for the practitioner
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Coded representation of the qualification
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Period during which the qualification is valid
	Period *datatypes_go_proto.Period `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty"`
	// Organization that regulates and issues the qualification
	Issuer *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *Practitioner_Qualification) Reset() {
	*x = Practitioner_Qualification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Practitioner_Qualification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Practitioner_Qualification) ProtoMessage() {}

func (x *Practitioner_Qualification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Practitioner_Qualification.ProtoReflect.Descriptor instead.
func (*Practitioner_Qualification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{72, 1}
}

func (x *Practitioner_Qualification) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Practitioner_Qualification) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Practitioner_Qualification) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Practitioner_Qualification) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Practitioner_Qualification) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Practitioner_Qualification) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Practitioner_Qualification) GetIssuer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Issuer
	}
	return nil
}

// Reason procedure performed
type Procedure_Reason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//	*Procedure_Reason_CodeableConcept
	//	*Procedure_Reason_Reference
	Reason isProcedure_Reason_Reason `protobuf_oneof:"reason"`
}

func (x *Procedure_Reason) Reset() {
	*x = Procedure_Reason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Procedure_Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Procedure_Reason) ProtoMessage() {}

func (x *Procedure_Reason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Procedure_Reason.ProtoReflect.Descriptor instead.
func (*Procedure_Reason) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{73, 0}
}

func (m *Procedure_Reason) GetReason() isProcedure_Reason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *Procedure_Reason) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetReason().(*Procedure_Reason_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Procedure_Reason) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetReason().(*Procedure_Reason_Reference); ok {
		return x.Reference
	}
	return nil
}

type isProcedure_Reason_Reason interface {
	isProcedure_Reason_Reason()
}

type Procedure_Reason_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Procedure_Reason_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Procedure_Reason_CodeableConcept) isProcedure_Reason_Reason() {}

func (*Procedure_Reason_Reference) isProcedure_Reason_Reason() {}

// The people who performed the procedure
type Procedure_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The reference to the practitioner
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=actor,proto3" json:"actor,omitempty"`
	// The role the actor was in
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Procedure_Performer) Reset() {
	*x = Procedure_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Procedure_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Procedure_Performer) ProtoMessage() {}

func (x *Procedure_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Procedure_Performer.ProtoReflect.Descriptor instead.
func (*Procedure_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{73, 1}
}

func (x *Procedure_Performer) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Procedure_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Procedure_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Procedure_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Procedure_Performer) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

// Date/Period the procedure was performed
type Procedure_Performed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Performed:
	//	*Procedure_Performed_DateTime
	//	*Procedure_Performed_Period
	Performed isProcedure_Performed_Performed `protobuf_oneof:"performed"`
}

func (x *Procedure_Performed) Reset() {
	*x = Procedure_Performed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Procedure_Performed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Procedure_Performed) ProtoMessage() {}

func (x *Procedure_Performed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Procedure_Performed.ProtoReflect.Descriptor instead.
func (*Procedure_Performed) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{73, 2}
}

func (m *Procedure_Performed) GetPerformed() isProcedure_Performed_Performed {
	if m != nil {
		return m.Performed
	}
	return nil
}

func (x *Procedure_Performed) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetPerformed().(*Procedure_Performed_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Procedure_Performed) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetPerformed().(*Procedure_Performed_Period); ok {
		return x.Period
	}
	return nil
}

type isProcedure_Performed_Performed interface {
	isProcedure_Performed_Performed()
}

type Procedure_Performed_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Procedure_Performed_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Procedure_Performed_DateTime) isProcedure_Performed_Performed() {}

func (*Procedure_Performed_Period) isProcedure_Performed_Performed() {}

// Device changed in procedure
type Procedure_FocalDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Kind of change to device
	Action *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// Device that was changed
	Manipulated *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=manipulated,proto3" json:"manipulated,omitempty"`
}

func (x *Procedure_FocalDevice) Reset() {
	*x = Procedure_FocalDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Procedure_FocalDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Procedure_FocalDevice) ProtoMessage() {}

func (x *Procedure_FocalDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Procedure_FocalDevice.ProtoReflect.Descriptor instead.
func (*Procedure_FocalDevice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{73, 3}
}

func (x *Procedure_FocalDevice) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Procedure_FocalDevice) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Procedure_FocalDevice) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Procedure_FocalDevice) GetAction() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Procedure_FocalDevice) GetManipulated() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Manipulated
	}
	return nil
}

// Why procedure should occur
type ProcedureRequest_Reason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//	*ProcedureRequest_Reason_CodeableConcept
	//	*ProcedureRequest_Reason_Reference
	Reason isProcedureRequest_Reason_Reason `protobuf_oneof:"reason"`
}

func (x *ProcedureRequest_Reason) Reset() {
	*x = ProcedureRequest_Reason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequest_Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequest_Reason) ProtoMessage() {}

func (x *ProcedureRequest_Reason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequest_Reason.ProtoReflect.Descriptor instead.
func (*ProcedureRequest_Reason) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{74, 0}
}

func (m *ProcedureRequest_Reason) GetReason() isProcedureRequest_Reason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *ProcedureRequest_Reason) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetReason().(*ProcedureRequest_Reason_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ProcedureRequest_Reason) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetReason().(*ProcedureRequest_Reason_Reference); ok {
		return x.Reference
	}
	return nil
}

type isProcedureRequest_Reason_Reason interface {
	isProcedureRequest_Reason_Reason()
}

type ProcedureRequest_Reason_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ProcedureRequest_Reason_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ProcedureRequest_Reason_CodeableConcept) isProcedureRequest_Reason_Reason() {}

func (*ProcedureRequest_Reason_Reference) isProcedureRequest_Reason_Reason() {}

// When procedure should occur
type ProcedureRequest_Scheduled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scheduled:
	//	*ProcedureRequest_Scheduled_DateTime
	//	*ProcedureRequest_Scheduled_Period
	//	*ProcedureRequest_Scheduled_Timing
	Scheduled isProcedureRequest_Scheduled_Scheduled `protobuf_oneof:"scheduled"`
}

func (x *ProcedureRequest_Scheduled) Reset() {
	*x = ProcedureRequest_Scheduled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequest_Scheduled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequest_Scheduled) ProtoMessage() {}

func (x *ProcedureRequest_Scheduled) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequest_Scheduled.ProtoReflect.Descriptor instead.
func (*ProcedureRequest_Scheduled) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{74, 1}
}

func (m *ProcedureRequest_Scheduled) GetScheduled() isProcedureRequest_Scheduled_Scheduled {
	if m != nil {
		return m.Scheduled
	}
	return nil
}

func (x *ProcedureRequest_Scheduled) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetScheduled().(*ProcedureRequest_Scheduled_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ProcedureRequest_Scheduled) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetScheduled().(*ProcedureRequest_Scheduled_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ProcedureRequest_Scheduled) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetScheduled().(*ProcedureRequest_Scheduled_Timing); ok {
		return x.Timing
	}
	return nil
}

type isProcedureRequest_Scheduled_Scheduled interface {
	isProcedureRequest_Scheduled_Scheduled()
}

type ProcedureRequest_Scheduled_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ProcedureRequest_Scheduled_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type ProcedureRequest_Scheduled_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=timing,proto3,oneof"`
}

func (*ProcedureRequest_Scheduled_DateTime) isProcedureRequest_Scheduled_Scheduled() {}

func (*ProcedureRequest_Scheduled_Period) isProcedureRequest_Scheduled_Scheduled() {}

func (*ProcedureRequest_Scheduled_Timing) isProcedureRequest_Scheduled_Scheduled() {}

// Preconditions for procedure
type ProcedureRequest_AsNeeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AsNeeded:
	//	*ProcedureRequest_AsNeeded_Boolean
	//	*ProcedureRequest_AsNeeded_CodeableConcept
	AsNeeded isProcedureRequest_AsNeeded_AsNeeded `protobuf_oneof:"as_needed"`
}

func (x *ProcedureRequest_AsNeeded) Reset() {
	*x = ProcedureRequest_AsNeeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequest_AsNeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequest_AsNeeded) ProtoMessage() {}

func (x *ProcedureRequest_AsNeeded) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequest_AsNeeded.ProtoReflect.Descriptor instead.
func (*ProcedureRequest_AsNeeded) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{74, 2}
}

func (m *ProcedureRequest_AsNeeded) GetAsNeeded() isProcedureRequest_AsNeeded_AsNeeded {
	if m != nil {
		return m.AsNeeded
	}
	return nil
}

func (x *ProcedureRequest_AsNeeded) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetAsNeeded().(*ProcedureRequest_AsNeeded_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ProcedureRequest_AsNeeded) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetAsNeeded().(*ProcedureRequest_AsNeeded_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isProcedureRequest_AsNeeded_AsNeeded interface {
	isProcedureRequest_AsNeeded_AsNeeded()
}

type ProcedureRequest_AsNeeded_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type ProcedureRequest_AsNeeded_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*ProcedureRequest_AsNeeded_Boolean) isProcedureRequest_AsNeeded_AsNeeded() {}

func (*ProcedureRequest_AsNeeded_CodeableConcept) isProcedureRequest_AsNeeded_AsNeeded() {}

// Items to re-adjudicate
type ProcessRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Service instance
	SequenceLinkId *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=sequence_link_id,json=sequenceLinkId,proto3" json:"sequence_link_id,omitempty"`
}

func (x *ProcessRequest_Item) Reset() {
	*x = ProcessRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRequest_Item) ProtoMessage() {}

func (x *ProcessRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRequest_Item.ProtoReflect.Descriptor instead.
func (*ProcessRequest_Item) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{75, 0}
}

func (x *ProcessRequest_Item) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcessRequest_Item) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProcessRequest_Item) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProcessRequest_Item) GetSequenceLinkId() *datatypes_go_proto.Integer {
	if x != nil {
		return x.SequenceLinkId
	}
	return nil
}

// Notes
type ProcessResponse_Notes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// display | print | printoper
	Type *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Notes text
	Text *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ProcessResponse_Notes) Reset() {
	*x = ProcessResponse_Notes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessResponse_Notes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessResponse_Notes) ProtoMessage() {}

func (x *ProcessResponse_Notes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessResponse_Notes.ProtoReflect.Descriptor instead.
func (*ProcessResponse_Notes) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{76, 0}
}

func (x *ProcessResponse_Notes) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcessResponse_Notes) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProcessResponse_Notes) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProcessResponse_Notes) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ProcessResponse_Notes) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Agents involved in creating resource
type Provenance_Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// What the agents involvement was
	Role *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Individual, device or organization playing role
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
	// Authorization-system identifier for the agent
	UserId       *datatypes_go_proto.Identifier   `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RelatedAgent []*Provenance_Agent_RelatedAgent `protobuf:"bytes,7,rep,name=related_agent,json=relatedAgent,proto3" json:"related_agent,omitempty"`
}

func (x *Provenance_Agent) Reset() {
	*x = Provenance_Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provenance_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenance_Agent) ProtoMessage() {}

func (x *Provenance_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenance_Agent.ProtoReflect.Descriptor instead.
func (*Provenance_Agent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{77, 0}
}

func (x *Provenance_Agent) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Provenance_Agent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Provenance_Agent) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Provenance_Agent) GetRole() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Provenance_Agent) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Provenance_Agent) GetUserId() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *Provenance_Agent) GetRelatedAgent() []*Provenance_Agent_RelatedAgent {
	if x != nil {
		return x.RelatedAgent
	}
	return nil
}

// An entity used in this activity
type Provenance_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// derivation | revision | quotation | source
	Role *codes_go_proto.ProvenanceEntityRoleCode `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// The type of resource in this entity
	Type *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Identity of entity
	Reference *datatypes_go_proto.Uri `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	// Human description of entity
	Display *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=display,proto3" json:"display,omitempty"`
	// Entity is attributed to this agent
	Agent *Provenance_Agent `protobuf:"bytes,8,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *Provenance_Entity) Reset() {
	*x = Provenance_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provenance_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenance_Entity) ProtoMessage() {}

func (x *Provenance_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenance_Entity.ProtoReflect.Descriptor instead.
func (*Provenance_Entity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{77, 1}
}

func (x *Provenance_Entity) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Provenance_Entity) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Provenance_Entity) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Provenance_Entity) GetRole() *codes_go_proto.ProvenanceEntityRoleCode {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Provenance_Entity) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Provenance_Entity) GetReference() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Provenance_Entity) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Provenance_Entity) GetAgent() *Provenance_Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

// Track delegation between agents
type Provenance_Agent_RelatedAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of relationship between agents
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Reference to other agent in this resource by identifier
	Target *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Provenance_Agent_RelatedAgent) Reset() {
	*x = Provenance_Agent_RelatedAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provenance_Agent_RelatedAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provenance_Agent_RelatedAgent) ProtoMessage() {}

func (x *Provenance_Agent_RelatedAgent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provenance_Agent_RelatedAgent.ProtoReflect.Descriptor instead.
func (*Provenance_Agent_RelatedAgent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{77, 0, 0}
}

func (x *Provenance_Agent_RelatedAgent) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Provenance_Agent_RelatedAgent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Provenance_Agent_RelatedAgent) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Provenance_Agent_RelatedAgent) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Provenance_Agent_RelatedAgent) GetTarget() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Target
	}
	return nil
}

// Grouped questions
type Questionnaire_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// To link questionnaire with questionnaire response
	LinkId *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Name to be displayed for group
	Title *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// Concept that represents this section in a questionnaire
	Concept []*datatypes_go_proto.Coding `protobuf:"bytes,6,rep,name=concept,proto3" json:"concept,omitempty"`
	// Additional text for the group
	Text *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	// Whether the group must be included in data results
	Required *datatypes_go_proto.Boolean `protobuf:"bytes,8,opt,name=required,proto3" json:"required,omitempty"`
	// Whether the group may repeat
	Repeats *datatypes_go_proto.Boolean `protobuf:"bytes,9,opt,name=repeats,proto3" json:"repeats,omitempty"`
	// Nested questionnaire group
	Group    []*Questionnaire_Group          `protobuf:"bytes,10,rep,name=group,proto3" json:"group,omitempty"`
	Question []*Questionnaire_Group_Question `protobuf:"bytes,11,rep,name=question,proto3" json:"question,omitempty"`
}

func (x *Questionnaire_Group) Reset() {
	*x = Questionnaire_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Group) ProtoMessage() {}

func (x *Questionnaire_Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Group.ProtoReflect.Descriptor instead.
func (*Questionnaire_Group) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{78, 0}
}

func (x *Questionnaire_Group) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Group) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Questionnaire_Group) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Questionnaire_Group) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *Questionnaire_Group) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Questionnaire_Group) GetConcept() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *Questionnaire_Group) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Questionnaire_Group) GetRequired() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *Questionnaire_Group) GetRepeats() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Repeats
	}
	return nil
}

func (x *Questionnaire_Group) GetGroup() []*Questionnaire_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Questionnaire_Group) GetQuestion() []*Questionnaire_Group_Question {
	if x != nil {
		return x.Question
	}
	return nil
}

// Questions in this group
type Questionnaire_Group_Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// To link questionnaire with questionnaire response
	LinkId *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Concept that represents this question on a questionnaire
	Concept []*datatypes_go_proto.Coding `protobuf:"bytes,5,rep,name=concept,proto3" json:"concept,omitempty"`
	// Text of the question as it is shown to the user
	Text *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	// boolean | decimal | integer | date | dateTime +
	Type *codes_go_proto.AnswerFormatCode `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// Whether the question must be answered in data results
	Required *datatypes_go_proto.Boolean `protobuf:"bytes,8,opt,name=required,proto3" json:"required,omitempty"`
	// Whether the question  can have multiple answers
	Repeats *datatypes_go_proto.Boolean `protobuf:"bytes,9,opt,name=repeats,proto3" json:"repeats,omitempty"`
	// Valueset containing permitted answers
	Options *datatypes_go_proto.Reference `protobuf:"bytes,10,opt,name=options,proto3" json:"options,omitempty"`
	// Permitted answer
	Option []*datatypes_go_proto.Coding `protobuf:"bytes,11,rep,name=option,proto3" json:"option,omitempty"`
	// Nested questionnaire group
	Group []*Questionnaire_Group `protobuf:"bytes,12,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *Questionnaire_Group_Question) Reset() {
	*x = Questionnaire_Group_Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questionnaire_Group_Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questionnaire_Group_Question) ProtoMessage() {}

func (x *Questionnaire_Group_Question) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questionnaire_Group_Question.ProtoReflect.Descriptor instead.
func (*Questionnaire_Group_Question) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{78, 0, 0}
}

func (x *Questionnaire_Group_Question) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetConcept() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetType() *codes_go_proto.AnswerFormatCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetRequired() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetRepeats() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Repeats
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetOptions() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetOption() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *Questionnaire_Group_Question) GetGroup() []*Questionnaire_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

// Grouped questions
type QuestionnaireResponse_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Corresponding group within Questionnaire
	LinkId *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Name for this group
	Title *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// Additional text for the group
	Text *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	// The subject this group's answers are about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	// Nested questionnaire response group
	Group    []*QuestionnaireResponse_Group          `protobuf:"bytes,8,rep,name=group,proto3" json:"group,omitempty"`
	Question []*QuestionnaireResponse_Group_Question `protobuf:"bytes,9,rep,name=question,proto3" json:"question,omitempty"`
}

func (x *QuestionnaireResponse_Group) Reset() {
	*x = QuestionnaireResponse_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponse_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponse_Group) ProtoMessage() {}

func (x *QuestionnaireResponse_Group) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponse_Group.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponse_Group) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{79, 0}
}

func (x *QuestionnaireResponse_Group) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponse_Group) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QuestionnaireResponse_Group) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QuestionnaireResponse_Group) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *QuestionnaireResponse_Group) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *QuestionnaireResponse_Group) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QuestionnaireResponse_Group) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QuestionnaireResponse_Group) GetGroup() []*QuestionnaireResponse_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *QuestionnaireResponse_Group) GetQuestion() []*QuestionnaireResponse_Group_Question {
	if x != nil {
		return x.Question
	}
	return nil
}

// Questions in this group
type QuestionnaireResponse_Group_Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Corresponding question within Questionnaire
	LinkId *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	// Text of the question as it is shown to the user
	Text   *datatypes_go_proto.String                     `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	Answer []*QuestionnaireResponse_Group_Question_Answer `protobuf:"bytes,6,rep,name=answer,proto3" json:"answer,omitempty"`
}

func (x *QuestionnaireResponse_Group_Question) Reset() {
	*x = QuestionnaireResponse_Group_Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponse_Group_Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponse_Group_Question) ProtoMessage() {}

func (x *QuestionnaireResponse_Group_Question) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponse_Group_Question.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponse_Group_Question) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{79, 0, 0}
}

func (x *QuestionnaireResponse_Group_Question) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question) GetLinkId() *datatypes_go_proto.String {
	if x != nil {
		return x.LinkId
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question) GetAnswer() []*QuestionnaireResponse_Group_Question_Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

// The response(s) to the question
type QuestionnaireResponse_Group_Question_Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension                    `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Value             *QuestionnaireResponse_Group_Question_Answer_Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Nested questionnaire group
	Group []*QuestionnaireResponse_Group `protobuf:"bytes,5,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *QuestionnaireResponse_Group_Question_Answer) Reset() {
	*x = QuestionnaireResponse_Group_Question_Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponse_Group_Question_Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponse_Group_Question_Answer) ProtoMessage() {}

func (x *QuestionnaireResponse_Group_Question_Answer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponse_Group_Question_Answer.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponse_Group_Question_Answer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{79, 0, 0, 0}
}

func (x *QuestionnaireResponse_Group_Question_Answer) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer) GetValue() *QuestionnaireResponse_Group_Question_Answer_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer) GetGroup() []*QuestionnaireResponse_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

// Single-valued answer to the question
type QuestionnaireResponse_Group_Question_Answer_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Boolean
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Decimal
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Integer
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Date
	//	*QuestionnaireResponse_Group_Question_Answer_Value_DateTime
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Instant
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Time
	//	*QuestionnaireResponse_Group_Question_Answer_Value_StringValue
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Uri
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Attachment
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Coding
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Quantity
	//	*QuestionnaireResponse_Group_Question_Answer_Value_Reference
	Value isQuestionnaireResponse_Group_Question_Answer_Value_Value `protobuf_oneof:"value"`
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) Reset() {
	*x = QuestionnaireResponse_Group_Question_Answer_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponse_Group_Question_Answer_Value) ProtoMessage() {}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponse_Group_Question_Answer_Value.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponse_Group_Question_Answer_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{79, 0, 0, 0, 0}
}

func (m *QuestionnaireResponse_Group_Question_Answer_Value) GetValue() isQuestionnaireResponse_Group_Question_Answer_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *QuestionnaireResponse_Group_Question_Answer_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*QuestionnaireResponse_Group_Question_Answer_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQuestionnaireResponse_Group_Question_Answer_Value_Value interface {
	isQuestionnaireResponse_Group_Question_Answer_Value_Value()
}

type QuestionnaireResponse_Group_Question_Answer_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,2,opt,name=decimal,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=integer,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,6,opt,name=instant,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,7,opt,name=time,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=string_value,json=string,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=uri,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,10,opt,name=attachment,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,11,opt,name=coding,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,12,opt,name=quantity,proto3,oneof"`
}

type QuestionnaireResponse_Group_Question_Answer_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=reference,proto3,oneof"`
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Boolean) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Decimal) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Integer) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Date) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_DateTime) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Instant) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Time) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_StringValue) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Uri) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Attachment) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Coding) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Quantity) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

func (*QuestionnaireResponse_Group_Question_Answer_Value_Reference) isQuestionnaireResponse_Group_Question_Answer_Value_Value() {
}

// Outcome predicted
type RiskAssessment_Prediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Possible outcome for the subject
	Outcome     *datatypes_go_proto.CodeableConcept    `protobuf:"bytes,4,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Probability *RiskAssessment_Prediction_Probability `protobuf:"bytes,5,opt,name=probability,proto3" json:"probability,omitempty"`
	// Relative likelihood
	RelativeRisk *datatypes_go_proto.Decimal     `protobuf:"bytes,6,opt,name=relative_risk,json=relativeRisk,proto3" json:"relative_risk,omitempty"`
	When         *RiskAssessment_Prediction_When `protobuf:"bytes,7,opt,name=when,proto3" json:"when,omitempty"`
	// Explanation of prediction
	Rationale *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=rationale,proto3" json:"rationale,omitempty"`
}

func (x *RiskAssessment_Prediction) Reset() {
	*x = RiskAssessment_Prediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskAssessment_Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAssessment_Prediction) ProtoMessage() {}

func (x *RiskAssessment_Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAssessment_Prediction.ProtoReflect.Descriptor instead.
func (*RiskAssessment_Prediction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{83, 0}
}

func (x *RiskAssessment_Prediction) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RiskAssessment_Prediction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *RiskAssessment_Prediction) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *RiskAssessment_Prediction) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *RiskAssessment_Prediction) GetProbability() *RiskAssessment_Prediction_Probability {
	if x != nil {
		return x.Probability
	}
	return nil
}

func (x *RiskAssessment_Prediction) GetRelativeRisk() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.RelativeRisk
	}
	return nil
}

func (x *RiskAssessment_Prediction) GetWhen() *RiskAssessment_Prediction_When {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *RiskAssessment_Prediction) GetRationale() *datatypes_go_proto.String {
	if x != nil {
		return x.Rationale
	}
	return nil
}

// Likelihood of specified outcome
type RiskAssessment_Prediction_Probability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Probability:
	//	*RiskAssessment_Prediction_Probability_Decimal
	//	*RiskAssessment_Prediction_Probability_Range
	//	*RiskAssessment_Prediction_Probability_CodeableConcept
	Probability isRiskAssessment_Prediction_Probability_Probability `protobuf_oneof:"probability"`
}

func (x *RiskAssessment_Prediction_Probability) Reset() {
	*x = RiskAssessment_Prediction_Probability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskAssessment_Prediction_Probability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAssessment_Prediction_Probability) ProtoMessage() {}

func (x *RiskAssessment_Prediction_Probability) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAssessment_Prediction_Probability.ProtoReflect.Descriptor instead.
func (*RiskAssessment_Prediction_Probability) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{83, 0, 0}
}

func (m *RiskAssessment_Prediction_Probability) GetProbability() isRiskAssessment_Prediction_Probability_Probability {
	if m != nil {
		return m.Probability
	}
	return nil
}

func (x *RiskAssessment_Prediction_Probability) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetProbability().(*RiskAssessment_Prediction_Probability_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *RiskAssessment_Prediction_Probability) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetProbability().(*RiskAssessment_Prediction_Probability_Range); ok {
		return x.Range
	}
	return nil
}

func (x *RiskAssessment_Prediction_Probability) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetProbability().(*RiskAssessment_Prediction_Probability_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isRiskAssessment_Prediction_Probability_Probability interface {
	isRiskAssessment_Prediction_Probability_Probability()
}

type RiskAssessment_Prediction_Probability_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,1,opt,name=decimal,proto3,oneof"`
}

type RiskAssessment_Prediction_Probability_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type RiskAssessment_Prediction_Probability_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*RiskAssessment_Prediction_Probability_Decimal) isRiskAssessment_Prediction_Probability_Probability() {
}

func (*RiskAssessment_Prediction_Probability_Range) isRiskAssessment_Prediction_Probability_Probability() {
}

func (*RiskAssessment_Prediction_Probability_CodeableConcept) isRiskAssessment_Prediction_Probability_Probability() {
}

// Timeframe or age range
type RiskAssessment_Prediction_When struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to When:
	//	*RiskAssessment_Prediction_When_Period
	//	*RiskAssessment_Prediction_When_Range
	When isRiskAssessment_Prediction_When_When `protobuf_oneof:"when"`
}

func (x *RiskAssessment_Prediction_When) Reset() {
	*x = RiskAssessment_Prediction_When{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskAssessment_Prediction_When) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskAssessment_Prediction_When) ProtoMessage() {}

func (x *RiskAssessment_Prediction_When) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskAssessment_Prediction_When.ProtoReflect.Descriptor instead.
func (*RiskAssessment_Prediction_When) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{83, 0, 1}
}

func (m *RiskAssessment_Prediction_When) GetWhen() isRiskAssessment_Prediction_When_When {
	if m != nil {
		return m.When
	}
	return nil
}

func (x *RiskAssessment_Prediction_When) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetWhen().(*RiskAssessment_Prediction_When_Period); ok {
		return x.Period
	}
	return nil
}

func (x *RiskAssessment_Prediction_When) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetWhen().(*RiskAssessment_Prediction_When_Range); ok {
		return x.Range
	}
	return nil
}

type isRiskAssessment_Prediction_When_When interface {
	isRiskAssessment_Prediction_When_When()
}

type RiskAssessment_Prediction_When_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type RiskAssessment_Prediction_When_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

func (*RiskAssessment_Prediction_When_Period) isRiskAssessment_Prediction_When_When() {}

func (*RiskAssessment_Prediction_When_Range) isRiskAssessment_Prediction_When_When() {}

// Contact details of the publisher
type SearchParameter_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of a individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *SearchParameter_Contact) Reset() {
	*x = SearchParameter_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParameter_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParameter_Contact) ProtoMessage() {}

func (x *SearchParameter_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParameter_Contact.ProtoReflect.Descriptor instead.
func (*SearchParameter_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{85, 0}
}

func (x *SearchParameter_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchParameter_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SearchParameter_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SearchParameter_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SearchParameter_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// Collection details
type Specimen_Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Who collected the specimen
	Collector *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=collector,proto3" json:"collector,omitempty"`
	// Collector comments
	Comment   []*datatypes_go_proto.String   `protobuf:"bytes,5,rep,name=comment,proto3" json:"comment,omitempty"`
	Collected *Specimen_Collection_Collected `protobuf:"bytes,6,opt,name=collected,proto3" json:"collected,omitempty"`
	// The quantity of specimen collected
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Technique used to perform collection
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=method,proto3" json:"method,omitempty"`
	// Anatomical collection site
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,9,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
}

func (x *Specimen_Collection) Reset() {
	*x = Specimen_Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Collection) ProtoMessage() {}

func (x *Specimen_Collection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Collection.ProtoReflect.Descriptor instead.
func (*Specimen_Collection) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{87, 0}
}

func (x *Specimen_Collection) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen_Collection) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Specimen_Collection) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Specimen_Collection) GetCollector() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Collector
	}
	return nil
}

func (x *Specimen_Collection) GetComment() []*datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Specimen_Collection) GetCollected() *Specimen_Collection_Collected {
	if x != nil {
		return x.Collected
	}
	return nil
}

func (x *Specimen_Collection) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Specimen_Collection) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Specimen_Collection) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

// Treatment and processing step details
type Specimen_Treatment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Textual description of procedure
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates the treatment or processing step  applied to the specimen
	Procedure *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=procedure,proto3" json:"procedure,omitempty"`
	// Material used in the processing step
	Additive []*datatypes_go_proto.Reference `protobuf:"bytes,6,rep,name=additive,proto3" json:"additive,omitempty"`
}

func (x *Specimen_Treatment) Reset() {
	*x = Specimen_Treatment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Treatment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Treatment) ProtoMessage() {}

func (x *Specimen_Treatment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Treatment.ProtoReflect.Descriptor instead.
func (*Specimen_Treatment) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{87, 1}
}

func (x *Specimen_Treatment) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen_Treatment) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Specimen_Treatment) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Specimen_Treatment) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Specimen_Treatment) GetProcedure() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Procedure
	}
	return nil
}

func (x *Specimen_Treatment) GetAdditive() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Additive
	}
	return nil
}

// Direct container of specimen (tube/slide, etc.)
type Specimen_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Id for the container
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,4,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Textual description of the container
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Kind of container directly associated with specimen
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Container volume or size
	Capacity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,7,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Quantity of specimen within container
	SpecimenQuantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,8,opt,name=specimen_quantity,json=specimenQuantity,proto3" json:"specimen_quantity,omitempty"`
	Additive         *Specimen_Container_Additive       `protobuf:"bytes,9,opt,name=additive,proto3" json:"additive,omitempty"`
}

func (x *Specimen_Container) Reset() {
	*x = Specimen_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Container) ProtoMessage() {}

func (x *Specimen_Container) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Container.ProtoReflect.Descriptor instead.
func (*Specimen_Container) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{87, 2}
}

func (x *Specimen_Container) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Specimen_Container) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Specimen_Container) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Specimen_Container) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Specimen_Container) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Specimen_Container) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Specimen_Container) GetCapacity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *Specimen_Container) GetSpecimenQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.SpecimenQuantity
	}
	return nil
}

func (x *Specimen_Container) GetAdditive() *Specimen_Container_Additive {
	if x != nil {
		return x.Additive
	}
	return nil
}

// Collection time
type Specimen_Collection_Collected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Collected:
	//	*Specimen_Collection_Collected_DateTime
	//	*Specimen_Collection_Collected_Period
	Collected isSpecimen_Collection_Collected_Collected `protobuf_oneof:"collected"`
}

func (x *Specimen_Collection_Collected) Reset() {
	*x = Specimen_Collection_Collected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Collection_Collected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Collection_Collected) ProtoMessage() {}

func (x *Specimen_Collection_Collected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Collection_Collected.ProtoReflect.Descriptor instead.
func (*Specimen_Collection_Collected) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{87, 0, 0}
}

func (m *Specimen_Collection_Collected) GetCollected() isSpecimen_Collection_Collected_Collected {
	if m != nil {
		return m.Collected
	}
	return nil
}

func (x *Specimen_Collection_Collected) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetCollected().(*Specimen_Collection_Collected_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Specimen_Collection_Collected) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetCollected().(*Specimen_Collection_Collected_Period); ok {
		return x.Period
	}
	return nil
}

type isSpecimen_Collection_Collected_Collected interface {
	isSpecimen_Collection_Collected_Collected()
}

type Specimen_Collection_Collected_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Specimen_Collection_Collected_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Specimen_Collection_Collected_DateTime) isSpecimen_Collection_Collected_Collected() {}

func (*Specimen_Collection_Collected_Period) isSpecimen_Collection_Collected_Collected() {}

// Additive associated with container
type Specimen_Container_Additive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Additive:
	//	*Specimen_Container_Additive_CodeableConcept
	//	*Specimen_Container_Additive_Reference
	Additive isSpecimen_Container_Additive_Additive `protobuf_oneof:"additive"`
}

func (x *Specimen_Container_Additive) Reset() {
	*x = Specimen_Container_Additive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specimen_Container_Additive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specimen_Container_Additive) ProtoMessage() {}

func (x *Specimen_Container_Additive) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specimen_Container_Additive.ProtoReflect.Descriptor instead.
func (*Specimen_Container_Additive) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{87, 2, 0}
}

func (m *Specimen_Container_Additive) GetAdditive() isSpecimen_Container_Additive_Additive {
	if m != nil {
		return m.Additive
	}
	return nil
}

func (x *Specimen_Container_Additive) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetAdditive().(*Specimen_Container_Additive_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Specimen_Container_Additive) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetAdditive().(*Specimen_Container_Additive_Reference); ok {
		return x.Reference
	}
	return nil
}

type isSpecimen_Container_Additive_Additive interface {
	isSpecimen_Container_Additive_Additive()
}

type Specimen_Container_Additive_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Specimen_Container_Additive_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Specimen_Container_Additive_CodeableConcept) isSpecimen_Container_Additive_Additive() {}

func (*Specimen_Container_Additive_Reference) isSpecimen_Container_Additive_Additive() {}

// Contact details of the publisher
type StructureDefinition_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of a individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *StructureDefinition_Contact) Reset() {
	*x = StructureDefinition_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_Contact) ProtoMessage() {}

func (x *StructureDefinition_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_Contact.ProtoReflect.Descriptor instead.
func (*StructureDefinition_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{88, 0}
}

func (x *StructureDefinition_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StructureDefinition_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// External specification that the content is mapped to
type StructureDefinition_Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Internal id when this mapping is used
	Identity *datatypes_go_proto.Id `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	// Identifies what this mapping refers to
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	// Names what this mapping refers to
	Name *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Versions, Issues, Scope limitations etc.
	Comments *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *StructureDefinition_Mapping) Reset() {
	*x = StructureDefinition_Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_Mapping) ProtoMessage() {}

func (x *StructureDefinition_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_Mapping.ProtoReflect.Descriptor instead.
func (*StructureDefinition_Mapping) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{88, 1}
}

func (x *StructureDefinition_Mapping) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetIdentity() *datatypes_go_proto.Id {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *StructureDefinition_Mapping) GetComments() *datatypes_go_proto.String {
	if x != nil {
		return x.Comments
	}
	return nil
}

// Snapshot view of the structure
type StructureDefinition_Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Definition of elements in the resource (if no StructureDefinition)
	Element []*metadatatypes_go_proto.ElementDefinition `protobuf:"bytes,4,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *StructureDefinition_Snapshot) Reset() {
	*x = StructureDefinition_Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_Snapshot) ProtoMessage() {}

func (x *StructureDefinition_Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_Snapshot.ProtoReflect.Descriptor instead.
func (*StructureDefinition_Snapshot) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{88, 2}
}

func (x *StructureDefinition_Snapshot) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_Snapshot) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition_Snapshot) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition_Snapshot) GetElement() []*metadatatypes_go_proto.ElementDefinition {
	if x != nil {
		return x.Element
	}
	return nil
}

// Differential view of the structure
type StructureDefinition_Differential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Definition of elements in the resource (if no StructureDefinition)
	Element []*metadatatypes_go_proto.ElementDefinition `protobuf:"bytes,4,rep,name=element,proto3" json:"element,omitempty"`
}

func (x *StructureDefinition_Differential) Reset() {
	*x = StructureDefinition_Differential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinition_Differential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinition_Differential) ProtoMessage() {}

func (x *StructureDefinition_Differential) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinition_Differential.ProtoReflect.Descriptor instead.
func (*StructureDefinition_Differential) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{88, 3}
}

func (x *StructureDefinition_Differential) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinition_Differential) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *StructureDefinition_Differential) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *StructureDefinition_Differential) GetElement() []*metadatatypes_go_proto.ElementDefinition {
	if x != nil {
		return x.Element
	}
	return nil
}

// The channel on which to report matches to the criteria
type Subscription_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// rest-hook | websocket | email | sms | message
	Type *codes_go_proto.SubscriptionChannelTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Where the channel points to
	Endpoint *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Mimetype to send, or blank for no payload
	Payload *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	// Usage depends on the channel type
	Header *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *Subscription_Channel) Reset() {
	*x = Subscription_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription_Channel) ProtoMessage() {}

func (x *Subscription_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription_Channel.ProtoReflect.Descriptor instead.
func (*Subscription_Channel) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{89, 0}
}

func (x *Subscription_Channel) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Subscription_Channel) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Subscription_Channel) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Subscription_Channel) GetType() *codes_go_proto.SubscriptionChannelTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Subscription_Channel) GetEndpoint() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Subscription_Channel) GetPayload() *datatypes_go_proto.String {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Subscription_Channel) GetHeader() *datatypes_go_proto.String {
	if x != nil {
		return x.Header
	}
	return nil
}

// If this describes a specific package/container of the substance
type Substance_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifier of the package/container
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// When no longer valid to use
	Expiry *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// Amount of substance in the package
	Quantity *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Substance_Instance) Reset() {
	*x = Substance_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Substance_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Substance_Instance) ProtoMessage() {}

func (x *Substance_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Substance_Instance.ProtoReflect.Descriptor instead.
func (*Substance_Instance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{90, 0}
}

func (x *Substance_Instance) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Substance_Instance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Substance_Instance) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Substance_Instance) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Substance_Instance) GetExpiry() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *Substance_Instance) GetQuantity() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

// Composition information about the substance
type Substance_Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Optional amount (concentration)
	Quantity *datatypes_go_proto.Ratio `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// A component of the substance
	Substance *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=substance,proto3" json:"substance,omitempty"`
}

func (x *Substance_Ingredient) Reset() {
	*x = Substance_Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Substance_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Substance_Ingredient) ProtoMessage() {}

func (x *Substance_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Substance_Ingredient.ProtoReflect.Descriptor instead.
func (*Substance_Ingredient) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{90, 1}
}

func (x *Substance_Ingredient) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Substance_Ingredient) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Substance_Ingredient) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Substance_Ingredient) GetQuantity() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Substance_Ingredient) GetSubstance() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Substance
	}
	return nil
}

// Why the supply item was requested
type SupplyRequest_Reason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//	*SupplyRequest_Reason_CodeableConcept
	//	*SupplyRequest_Reason_Reference
	Reason isSupplyRequest_Reason_Reason `protobuf_oneof:"reason"`
}

func (x *SupplyRequest_Reason) Reset() {
	*x = SupplyRequest_Reason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyRequest_Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyRequest_Reason) ProtoMessage() {}

func (x *SupplyRequest_Reason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyRequest_Reason.ProtoReflect.Descriptor instead.
func (*SupplyRequest_Reason) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{92, 0}
}

func (m *SupplyRequest_Reason) GetReason() isSupplyRequest_Reason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *SupplyRequest_Reason) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetReason().(*SupplyRequest_Reason_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *SupplyRequest_Reason) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetReason().(*SupplyRequest_Reason_Reference); ok {
		return x.Reference
	}
	return nil
}

type isSupplyRequest_Reason_Reason interface {
	isSupplyRequest_Reason_Reason()
}

type SupplyRequest_Reason_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type SupplyRequest_Reason_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*SupplyRequest_Reason_CodeableConcept) isSupplyRequest_Reason_Reason() {}

func (*SupplyRequest_Reason_Reference) isSupplyRequest_Reason_Reason() {}

// When the request should be fulfilled
type SupplyRequest_When struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Fulfilment code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Formal fulfillment schedule
	Schedule *datatypes_go_proto.Timing `protobuf:"bytes,5,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *SupplyRequest_When) Reset() {
	*x = SupplyRequest_When{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyRequest_When) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyRequest_When) ProtoMessage() {}

func (x *SupplyRequest_When) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyRequest_When.ProtoReflect.Descriptor instead.
func (*SupplyRequest_When) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{92, 1}
}

func (x *SupplyRequest_When) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SupplyRequest_When) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SupplyRequest_When) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *SupplyRequest_When) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *SupplyRequest_When) GetSchedule() *datatypes_go_proto.Timing {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// Contact details of the publisher
type TestScript_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of a individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *TestScript_Contact) Reset() {
	*x = TestScript_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Contact) ProtoMessage() {}

func (x *TestScript_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Contact.ProtoReflect.Descriptor instead.
func (*TestScript_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 0}
}

func (x *TestScript_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TestScript_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// Required capability that is assumed to function correctly on the FHIR
// server being tested
type TestScript_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension   `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Link              []*TestScript_Metadata_Link       `protobuf:"bytes,4,rep,name=link,proto3" json:"link,omitempty"`
	Capability        []*TestScript_Metadata_Capability `protobuf:"bytes,5,rep,name=capability,proto3" json:"capability,omitempty"`
}

func (x *TestScript_Metadata) Reset() {
	*x = TestScript_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Metadata) ProtoMessage() {}

func (x *TestScript_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Metadata.ProtoReflect.Descriptor instead.
func (*TestScript_Metadata) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 1}
}

func (x *TestScript_Metadata) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Metadata) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Metadata) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Metadata) GetLink() []*TestScript_Metadata_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *TestScript_Metadata) GetCapability() []*TestScript_Metadata_Capability {
	if x != nil {
		return x.Capability
	}
	return nil
}

// Fixture in the test script - by reference (uri)
type TestScript_Fixture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Whether or not to implicitly create the fixture during setup
	Autocreate *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=autocreate,proto3" json:"autocreate,omitempty"`
	// Whether or not to implicitly delete the fixture during teardown
	Autodelete *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=autodelete,proto3" json:"autodelete,omitempty"`
	// Reference of the resource
	Resource *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *TestScript_Fixture) Reset() {
	*x = TestScript_Fixture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Fixture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Fixture) ProtoMessage() {}

func (x *TestScript_Fixture) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Fixture.ProtoReflect.Descriptor instead.
func (*TestScript_Fixture) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 2}
}

func (x *TestScript_Fixture) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Fixture) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Fixture) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Fixture) GetAutocreate() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Autocreate
	}
	return nil
}

func (x *TestScript_Fixture) GetAutodelete() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Autodelete
	}
	return nil
}

func (x *TestScript_Fixture) GetResource() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Resource
	}
	return nil
}

// Placeholder for evaluated elements
type TestScript_Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Descriptive name for this variable
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// HTTP header field name for source
	HeaderField *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=header_field,json=headerField,proto3" json:"header_field,omitempty"`
	// XPath or JSONPath against the fixture body
	Path *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	// Fixture Id of source expression or headerField within this variable
	SourceId *datatypes_go_proto.Id `protobuf:"bytes,7,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *TestScript_Variable) Reset() {
	*x = TestScript_Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Variable) ProtoMessage() {}

func (x *TestScript_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Variable.ProtoReflect.Descriptor instead.
func (*TestScript_Variable) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 3}
}

func (x *TestScript_Variable) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Variable) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Variable) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Variable) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TestScript_Variable) GetHeaderField() *datatypes_go_proto.String {
	if x != nil {
		return x.HeaderField
	}
	return nil
}

func (x *TestScript_Variable) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TestScript_Variable) GetSourceId() *datatypes_go_proto.Id {
	if x != nil {
		return x.SourceId
	}
	return nil
}

// A series of required setup operations before tests are executed
type TestScript_Setup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Capabilities  that are assumed to function correctly on the FHIR server
	// being tested
	Metadata *TestScript_Metadata       `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Action   []*TestScript_Setup_Action `protobuf:"bytes,5,rep,name=action,proto3" json:"action,omitempty"`
}

func (x *TestScript_Setup) Reset() {
	*x = TestScript_Setup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Setup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Setup) ProtoMessage() {}

func (x *TestScript_Setup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Setup.ProtoReflect.Descriptor instead.
func (*TestScript_Setup) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 4}
}

func (x *TestScript_Setup) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Setup) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Setup) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Setup) GetMetadata() *TestScript_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TestScript_Setup) GetAction() []*TestScript_Setup_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

// A test in this script
type TestScript_Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Tracking/logging name of this test
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Tracking/reporting short description of the test
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Capabilities  that are expected to function correctly on the FHIR server
	// being tested
	Metadata *TestScript_Metadata      `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Action   []*TestScript_Test_Action `protobuf:"bytes,7,rep,name=action,proto3" json:"action,omitempty"`
}

func (x *TestScript_Test) Reset() {
	*x = TestScript_Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Test) ProtoMessage() {}

func (x *TestScript_Test) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Test.ProtoReflect.Descriptor instead.
func (*TestScript_Test) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 5}
}

func (x *TestScript_Test) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Test) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Test) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Test) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TestScript_Test) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TestScript_Test) GetMetadata() *TestScript_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TestScript_Test) GetAction() []*TestScript_Test_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

// A series of required clean up steps
type TestScript_Teardown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Action            []*TestScript_Teardown_Action   `protobuf:"bytes,4,rep,name=action,proto3" json:"action,omitempty"`
}

func (x *TestScript_Teardown) Reset() {
	*x = TestScript_Teardown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Teardown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Teardown) ProtoMessage() {}

func (x *TestScript_Teardown) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Teardown.ProtoReflect.Descriptor instead.
func (*TestScript_Teardown) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 6}
}

func (x *TestScript_Teardown) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Teardown) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Teardown) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Teardown) GetAction() []*TestScript_Teardown_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

// Links to the FHIR specification
type TestScript_Metadata_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// URL to the specification
	Url *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// Short description
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *TestScript_Metadata_Link) Reset() {
	*x = TestScript_Metadata_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Metadata_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Metadata_Link) ProtoMessage() {}

func (x *TestScript_Metadata_Link) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Metadata_Link.ProtoReflect.Descriptor instead.
func (*TestScript_Metadata_Link) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 1, 0}
}

func (x *TestScript_Metadata_Link) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Metadata_Link) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Metadata_Link) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Metadata_Link) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *TestScript_Metadata_Link) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

// Capabilities  that are assumed to function correctly on the FHIR server
// being tested
type TestScript_Metadata_Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Are the capabilities required?
	Required *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=required,proto3" json:"required,omitempty"`
	// Are the capabilities validated?
	Validated *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=validated,proto3" json:"validated,omitempty"`
	// The expected capabilities of the server
	Description *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Which server these requirements apply to
	Destination *datatypes_go_proto.Integer `protobuf:"bytes,7,opt,name=destination,proto3" json:"destination,omitempty"`
	// Links to the FHIR specification
	Link []*datatypes_go_proto.Uri `protobuf:"bytes,8,rep,name=link,proto3" json:"link,omitempty"`
	// Required Conformance
	Conformance *datatypes_go_proto.Reference `protobuf:"bytes,9,opt,name=conformance,proto3" json:"conformance,omitempty"`
}

func (x *TestScript_Metadata_Capability) Reset() {
	*x = TestScript_Metadata_Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Metadata_Capability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Metadata_Capability) ProtoMessage() {}

func (x *TestScript_Metadata_Capability) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Metadata_Capability.ProtoReflect.Descriptor instead.
func (*TestScript_Metadata_Capability) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 1, 1}
}

func (x *TestScript_Metadata_Capability) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Metadata_Capability) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Metadata_Capability) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Metadata_Capability) GetRequired() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *TestScript_Metadata_Capability) GetValidated() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Validated
	}
	return nil
}

func (x *TestScript_Metadata_Capability) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TestScript_Metadata_Capability) GetDestination() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *TestScript_Metadata_Capability) GetLink() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *TestScript_Metadata_Capability) GetConformance() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Conformance
	}
	return nil
}

// A setup operation or assert to perform
type TestScript_Setup_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension    `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	Operation         *TestScript_Setup_Action_Operation `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
	AssertValue       *TestScript_Setup_Action_Assert    `protobuf:"bytes,5,opt,name=assert_value,json=assert,proto3" json:"assert_value,omitempty"`
}

func (x *TestScript_Setup_Action) Reset() {
	*x = TestScript_Setup_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Setup_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Setup_Action) ProtoMessage() {}

func (x *TestScript_Setup_Action) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Setup_Action.ProtoReflect.Descriptor instead.
func (*TestScript_Setup_Action) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 4, 0}
}

func (x *TestScript_Setup_Action) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Setup_Action) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Setup_Action) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Setup_Action) GetOperation() *TestScript_Setup_Action_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *TestScript_Setup_Action) GetAssertValue() *TestScript_Setup_Action_Assert {
	if x != nil {
		return x.AssertValue
	}
	return nil
}

// The setup operation to perform
type TestScript_Setup_Action_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The setup operation type that will be executed
	Type *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource type
	Resource *codes_go_proto.FHIRDefinedTypeCode `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	// Tracking/logging operation label
	Label *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// Tracking/reporting operation description
	Description *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// xml | json
	Accept *codes_go_proto.ContentTypeCode `protobuf:"bytes,8,opt,name=accept,proto3" json:"accept,omitempty"`
	// xml | json
	ContentType *codes_go_proto.ContentTypeCode `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Which server to perform the operation on
	Destination *datatypes_go_proto.Integer `protobuf:"bytes,10,opt,name=destination,proto3" json:"destination,omitempty"`
	// Whether or not to send the request url in encoded format
	EncodeRequestUrl *datatypes_go_proto.Boolean `protobuf:"bytes,11,opt,name=encode_request_url,json=encodeRequestUrl,proto3" json:"encode_request_url,omitempty"`
	// Explicitly defined path parameters
	Params        *datatypes_go_proto.String                         `protobuf:"bytes,12,opt,name=params,proto3" json:"params,omitempty"`
	RequestHeader []*TestScript_Setup_Action_Operation_RequestHeader `protobuf:"bytes,13,rep,name=request_header,json=requestHeader,proto3" json:"request_header,omitempty"`
	// Fixture Id of mapped response
	ResponseId *datatypes_go_proto.Id `protobuf:"bytes,14,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	// Fixture Id of body for PUT and POST requests
	SourceId *datatypes_go_proto.Id `protobuf:"bytes,15,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// Id of fixture used for extracting the [id],  [type], and [vid] for
	// GET requests
	TargetId *datatypes_go_proto.Id `protobuf:"bytes,16,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Request URL
	Url *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *TestScript_Setup_Action_Operation) Reset() {
	*x = TestScript_Setup_Action_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Setup_Action_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Setup_Action_Operation) ProtoMessage() {}

func (x *TestScript_Setup_Action_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Setup_Action_Operation.ProtoReflect.Descriptor instead.
func (*TestScript_Setup_Action_Operation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 4, 0, 0}
}

func (x *TestScript_Setup_Action_Operation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetType() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetResource() *codes_go_proto.FHIRDefinedTypeCode {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetAccept() *codes_go_proto.ContentTypeCode {
	if x != nil {
		return x.Accept
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetContentType() *codes_go_proto.ContentTypeCode {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetDestination() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetEncodeRequestUrl() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.EncodeRequestUrl
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetParams() *datatypes_go_proto.String {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetRequestHeader() []*TestScript_Setup_Action_Operation_RequestHeader {
	if x != nil {
		return x.RequestHeader
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetResponseId() *datatypes_go_proto.Id {
	if x != nil {
		return x.ResponseId
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetSourceId() *datatypes_go_proto.Id {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetTargetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.TargetId
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation) GetUrl() *datatypes_go_proto.String {
	if x != nil {
		return x.Url
	}
	return nil
}

// The assertion to perform
type TestScript_Setup_Action_Assert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Tracking/logging assertion label
	Label *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// Tracking/reporting assertion description
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// response | request
	Direction *codes_go_proto.AssertionDirectionTypeCode `protobuf:"bytes,6,opt,name=direction,proto3" json:"direction,omitempty"`
	// Id of fixture used to compare the "sourceId/path" evaluations to
	CompareToSourceId *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=compare_to_source_id,json=compareToSourceId,proto3" json:"compare_to_source_id,omitempty"`
	// XPath or JSONPath expression against fixture used to compare the
	// "sourceId/path" evaluations to
	CompareToSourcePath *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=compare_to_source_path,json=compareToSourcePath,proto3" json:"compare_to_source_path,omitempty"`
	// xml | json
	ContentType *codes_go_proto.ContentTypeCode `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// HTTP header field name
	HeaderField *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=header_field,json=headerField,proto3" json:"header_field,omitempty"`
	// Fixture Id of minimum content resource
	MinimumId *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=minimum_id,json=minimumId,proto3" json:"minimum_id,omitempty"`
	// Perform validation on navigation links?
	NavigationLinks *datatypes_go_proto.Boolean `protobuf:"bytes,12,opt,name=navigation_links,json=navigationLinks,proto3" json:"navigation_links,omitempty"`
	// equals | notEquals | in | notIn | greaterThan | lessThan | empty |
	// notEmpty | contains | notContains
	Operator *codes_go_proto.AssertionOperatorTypeCode `protobuf:"bytes,13,opt,name=operator,proto3" json:"operator,omitempty"`
	// XPath or JSONPath expression
	Path *datatypes_go_proto.String `protobuf:"bytes,14,opt,name=path,proto3" json:"path,omitempty"`
	// Resource type
	Resource *codes_go_proto.FHIRDefinedTypeCode `protobuf:"bytes,15,opt,name=resource,proto3" json:"resource,omitempty"`
	// okay | created | noContent | notModified | bad | forbidden | notFound
	// | methodNotAllowed | conflict | gone | preconditionFailed |
	// unprocessable
	Response *codes_go_proto.AssertionResponseTypesCode `protobuf:"bytes,16,opt,name=response,proto3" json:"response,omitempty"`
	// HTTP response code to test
	ResponseCode *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// Fixture Id of source expression or headerField
	SourceId *datatypes_go_proto.Id `protobuf:"bytes,18,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// Profile Id of validation profile reference
	ValidateProfileId *datatypes_go_proto.Id `protobuf:"bytes,19,opt,name=validate_profile_id,json=validateProfileId,proto3" json:"validate_profile_id,omitempty"`
	// The value to compare to
	Value *datatypes_go_proto.String `protobuf:"bytes,20,opt,name=value,proto3" json:"value,omitempty"`
	// Will this assert produce a warning only on error?
	WarningOnly *datatypes_go_proto.Boolean `protobuf:"bytes,21,opt,name=warning_only,json=warningOnly,proto3" json:"warning_only,omitempty"`
}

func (x *TestScript_Setup_Action_Assert) Reset() {
	*x = TestScript_Setup_Action_Assert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Setup_Action_Assert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Setup_Action_Assert) ProtoMessage() {}

func (x *TestScript_Setup_Action_Assert) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Setup_Action_Assert.ProtoReflect.Descriptor instead.
func (*TestScript_Setup_Action_Assert) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 4, 0, 1}
}

func (x *TestScript_Setup_Action_Assert) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetDirection() *codes_go_proto.AssertionDirectionTypeCode {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetCompareToSourceId() *datatypes_go_proto.String {
	if x != nil {
		return x.CompareToSourceId
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetCompareToSourcePath() *datatypes_go_proto.String {
	if x != nil {
		return x.CompareToSourcePath
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetContentType() *codes_go_proto.ContentTypeCode {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetHeaderField() *datatypes_go_proto.String {
	if x != nil {
		return x.HeaderField
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetMinimumId() *datatypes_go_proto.String {
	if x != nil {
		return x.MinimumId
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetNavigationLinks() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.NavigationLinks
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetOperator() *codes_go_proto.AssertionOperatorTypeCode {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetResource() *codes_go_proto.FHIRDefinedTypeCode {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetResponse() *codes_go_proto.AssertionResponseTypesCode {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetResponseCode() *datatypes_go_proto.String {
	if x != nil {
		return x.ResponseCode
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetSourceId() *datatypes_go_proto.Id {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetValidateProfileId() *datatypes_go_proto.Id {
	if x != nil {
		return x.ValidateProfileId
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TestScript_Setup_Action_Assert) GetWarningOnly() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.WarningOnly
	}
	return nil
}

// Each operation can have one ore more header elements
type TestScript_Setup_Action_Operation_RequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// HTTP header field name
	Field *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
	// HTTP headerfield value
	Value *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TestScript_Setup_Action_Operation_RequestHeader) Reset() {
	*x = TestScript_Setup_Action_Operation_RequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Setup_Action_Operation_RequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Setup_Action_Operation_RequestHeader) ProtoMessage() {}

func (x *TestScript_Setup_Action_Operation_RequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Setup_Action_Operation_RequestHeader.ProtoReflect.Descriptor instead.
func (*TestScript_Setup_Action_Operation_RequestHeader) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 4, 0, 0, 0}
}

func (x *TestScript_Setup_Action_Operation_RequestHeader) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation_RequestHeader) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation_RequestHeader) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation_RequestHeader) GetField() *datatypes_go_proto.String {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *TestScript_Setup_Action_Operation_RequestHeader) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// A test operation or assert to perform
type TestScript_Test_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The setup operation to perform
	Operation *TestScript_Setup_Action_Operation `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
	// The setup assertion to perform
	AssertValue *TestScript_Setup_Action_Assert `protobuf:"bytes,5,opt,name=assert_value,json=assert,proto3" json:"assert_value,omitempty"`
}

func (x *TestScript_Test_Action) Reset() {
	*x = TestScript_Test_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Test_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Test_Action) ProtoMessage() {}

func (x *TestScript_Test_Action) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Test_Action.ProtoReflect.Descriptor instead.
func (*TestScript_Test_Action) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 5, 0}
}

func (x *TestScript_Test_Action) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Test_Action) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Test_Action) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Test_Action) GetOperation() *TestScript_Setup_Action_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *TestScript_Test_Action) GetAssertValue() *TestScript_Setup_Action_Assert {
	if x != nil {
		return x.AssertValue
	}
	return nil
}

// One or more teardown operations to perform
type TestScript_Teardown_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The teardown operation to perform
	Operation *TestScript_Setup_Action_Operation `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *TestScript_Teardown_Action) Reset() {
	*x = TestScript_Teardown_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScript_Teardown_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScript_Teardown_Action) ProtoMessage() {}

func (x *TestScript_Teardown_Action) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScript_Teardown_Action.ProtoReflect.Descriptor instead.
func (*TestScript_Teardown_Action) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{93, 6, 0}
}

func (x *TestScript_Teardown_Action) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TestScript_Teardown_Action) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TestScript_Teardown_Action) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *TestScript_Teardown_Action) GetOperation() *TestScript_Setup_Action_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Contact details of the publisher
type ValueSet_Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name of an individual to contact
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or publisher
	Telecom []*datatypes_go_proto.ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *ValueSet_Contact) Reset() {
	*x = ValueSet_Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Contact) ProtoMessage() {}

func (x *ValueSet_Contact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Contact.ProtoReflect.Descriptor instead.
func (*ValueSet_Contact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 0}
}

func (x *ValueSet_Contact) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Contact) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Contact) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Contact) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ValueSet_Contact) GetTelecom() []*datatypes_go_proto.ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// An inline code system, which is part of this value set
type ValueSet_CodeSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// URI to identify the code system (e.g. in Coding.system)
	System *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=system,proto3" json:"system,omitempty"`
	// Version (for use in Coding.version)
	Version *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// If code comparison is case sensitive
	CaseSensitive *datatypes_go_proto.Boolean    `protobuf:"bytes,6,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	Concept       []*ValueSet_CodeSystem_Concept `protobuf:"bytes,7,rep,name=concept,proto3" json:"concept,omitempty"`
}

func (x *ValueSet_CodeSystem) Reset() {
	*x = ValueSet_CodeSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_CodeSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_CodeSystem) ProtoMessage() {}

func (x *ValueSet_CodeSystem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_CodeSystem.ProtoReflect.Descriptor instead.
func (*ValueSet_CodeSystem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 1}
}

func (x *ValueSet_CodeSystem) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_CodeSystem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_CodeSystem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_CodeSystem) GetSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *ValueSet_CodeSystem) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ValueSet_CodeSystem) GetCaseSensitive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.CaseSensitive
	}
	return nil
}

func (x *ValueSet_CodeSystem) GetConcept() []*ValueSet_CodeSystem_Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

// When value set includes codes from elsewhere
type ValueSet_Compose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Import the contents of another value set
	Import  []*datatypes_go_proto.Uri   `protobuf:"bytes,4,rep,name=import,proto3" json:"import,omitempty"`
	Include []*ValueSet_Compose_Include `protobuf:"bytes,5,rep,name=include,proto3" json:"include,omitempty"`
	// Explicitly exclude codes
	Exclude []*ValueSet_Compose_Include `protobuf:"bytes,6,rep,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *ValueSet_Compose) Reset() {
	*x = ValueSet_Compose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose) ProtoMessage() {}

func (x *ValueSet_Compose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 2}
}

func (x *ValueSet_Compose) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Compose) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Compose) GetImport() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Import
	}
	return nil
}

func (x *ValueSet_Compose) GetInclude() []*ValueSet_Compose_Include {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *ValueSet_Compose) GetExclude() []*ValueSet_Compose_Include {
	if x != nil {
		return x.Exclude
	}
	return nil
}

// Used when the value set is "expanded"
type ValueSet_Expansion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Uniquely identifies this expansion
	Identifier *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Time ValueSet expansion happened
	Timestamp *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Total number of codes in the expansion
	Total *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=total,proto3" json:"total,omitempty"`
	// Offset at which this resource starts
	Offset    *datatypes_go_proto.Integer     `protobuf:"bytes,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Parameter []*ValueSet_Expansion_Parameter `protobuf:"bytes,8,rep,name=parameter,proto3" json:"parameter,omitempty"`
	Contains  []*ValueSet_Expansion_Contains  `protobuf:"bytes,9,rep,name=contains,proto3" json:"contains,omitempty"`
}

func (x *ValueSet_Expansion) Reset() {
	*x = ValueSet_Expansion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion) ProtoMessage() {}

func (x *ValueSet_Expansion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 3}
}

func (x *ValueSet_Expansion) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Expansion) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Expansion) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Expansion) GetIdentifier() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ValueSet_Expansion) GetTimestamp() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ValueSet_Expansion) GetTotal() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *ValueSet_Expansion) GetOffset() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ValueSet_Expansion) GetParameter() []*ValueSet_Expansion_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ValueSet_Expansion) GetContains() []*ValueSet_Expansion_Contains {
	if x != nil {
		return x.Contains
	}
	return nil
}

// Concepts in the code system
type ValueSet_CodeSystem_Concept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code that identifies concept
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// If this code is not for use as a real concept
	Abstract *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=abstract,proto3" json:"abstract,omitempty"`
	// Text to display to the user
	Display *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	// Formal definition
	Definition  *datatypes_go_proto.String                 `protobuf:"bytes,7,opt,name=definition,proto3" json:"definition,omitempty"`
	Designation []*ValueSet_CodeSystem_Concept_Designation `protobuf:"bytes,8,rep,name=designation,proto3" json:"designation,omitempty"`
	// Child Concepts (is-a/contains/categorizes)
	Concept []*ValueSet_CodeSystem_Concept `protobuf:"bytes,9,rep,name=concept,proto3" json:"concept,omitempty"`
}

func (x *ValueSet_CodeSystem_Concept) Reset() {
	*x = ValueSet_CodeSystem_Concept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_CodeSystem_Concept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_CodeSystem_Concept) ProtoMessage() {}

func (x *ValueSet_CodeSystem_Concept) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_CodeSystem_Concept.ProtoReflect.Descriptor instead.
func (*ValueSet_CodeSystem_Concept) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 1, 0}
}

func (x *ValueSet_CodeSystem_Concept) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept) GetAbstract() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept) GetDefinition() *datatypes_go_proto.String {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept) GetDesignation() []*ValueSet_CodeSystem_Concept_Designation {
	if x != nil {
		return x.Designation
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept) GetConcept() []*ValueSet_CodeSystem_Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

// Additional representations for the concept
type ValueSet_CodeSystem_Concept_Designation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Human language of the designation
	Language *datatypes_go_proto.AllLanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Details how this designation would be used
	Use *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// The text value for this designation
	Value *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueSet_CodeSystem_Concept_Designation) Reset() {
	*x = ValueSet_CodeSystem_Concept_Designation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_CodeSystem_Concept_Designation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_CodeSystem_Concept_Designation) ProtoMessage() {}

func (x *ValueSet_CodeSystem_Concept_Designation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_CodeSystem_Concept_Designation.ProtoReflect.Descriptor instead.
func (*ValueSet_CodeSystem_Concept_Designation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 1, 0, 0}
}

func (x *ValueSet_CodeSystem_Concept_Designation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept_Designation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept_Designation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept_Designation) GetLanguage() *datatypes_go_proto.AllLanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept_Designation) GetUse() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *ValueSet_CodeSystem_Concept_Designation) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// Include one or more codes from a code system
type ValueSet_Compose_Include struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The system the codes come from
	System *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=system,proto3" json:"system,omitempty"`
	// Specific version of the code system referred to
	Version *datatypes_go_proto.String          `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Concept []*ValueSet_Compose_Include_Concept `protobuf:"bytes,6,rep,name=concept,proto3" json:"concept,omitempty"`
	Filter  []*ValueSet_Compose_Include_Filter  `protobuf:"bytes,7,rep,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ValueSet_Compose_Include) Reset() {
	*x = ValueSet_Compose_Include{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose_Include) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose_Include) ProtoMessage() {}

func (x *ValueSet_Compose_Include) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose_Include.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose_Include) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 2, 0}
}

func (x *ValueSet_Compose_Include) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose_Include) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Compose_Include) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Compose_Include) GetSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *ValueSet_Compose_Include) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ValueSet_Compose_Include) GetConcept() []*ValueSet_Compose_Include_Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *ValueSet_Compose_Include) GetFilter() []*ValueSet_Compose_Include_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// A concept defined in the system
type ValueSet_Compose_Include_Concept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code or expression from system
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Test to display for this code for this value set
	Display *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=display,proto3" json:"display,omitempty"`
	// Additional representations for this valueset
	Designation []*ValueSet_CodeSystem_Concept_Designation `protobuf:"bytes,6,rep,name=designation,proto3" json:"designation,omitempty"`
}

func (x *ValueSet_Compose_Include_Concept) Reset() {
	*x = ValueSet_Compose_Include_Concept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose_Include_Concept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose_Include_Concept) ProtoMessage() {}

func (x *ValueSet_Compose_Include_Concept) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose_Include_Concept.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose_Include_Concept) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 2, 0, 0}
}

func (x *ValueSet_Compose_Include_Concept) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose_Include_Concept) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Compose_Include_Concept) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Compose_Include_Concept) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Compose_Include_Concept) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *ValueSet_Compose_Include_Concept) GetDesignation() []*ValueSet_CodeSystem_Concept_Designation {
	if x != nil {
		return x.Designation
	}
	return nil
}

// Select codes/concepts by their properties (including relationships)
type ValueSet_Compose_Include_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A property defined by the code system
	Property *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=property,proto3" json:"property,omitempty"`
	// = | is-a | is-not-a | regex | in | not-in
	Op *codes_go_proto.FilterOperatorCode `protobuf:"bytes,5,opt,name=op,proto3" json:"op,omitempty"`
	// Code from the system, or regex criteria
	Value *datatypes_go_proto.Code `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueSet_Compose_Include_Filter) Reset() {
	*x = ValueSet_Compose_Include_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Compose_Include_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Compose_Include_Filter) ProtoMessage() {}

func (x *ValueSet_Compose_Include_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Compose_Include_Filter.ProtoReflect.Descriptor instead.
func (*ValueSet_Compose_Include_Filter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 2, 0, 1}
}

func (x *ValueSet_Compose_Include_Filter) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Compose_Include_Filter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Compose_Include_Filter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Compose_Include_Filter) GetProperty() *datatypes_go_proto.Code {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *ValueSet_Compose_Include_Filter) GetOp() *codes_go_proto.FilterOperatorCode {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *ValueSet_Compose_Include_Filter) GetValue() *datatypes_go_proto.Code {
	if x != nil {
		return x.Value
	}
	return nil
}

// Parameter that controlled the expansion process
type ValueSet_Expansion_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name as assigned by the server
	Name  *datatypes_go_proto.String          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Value *ValueSet_Expansion_Parameter_Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueSet_Expansion_Parameter) Reset() {
	*x = ValueSet_Expansion_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Parameter) ProtoMessage() {}

func (x *ValueSet_Expansion_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Parameter.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Parameter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 3, 0}
}

func (x *ValueSet_Expansion_Parameter) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter) GetValue() *ValueSet_Expansion_Parameter_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Codes in the value set
type ValueSet_Expansion_Contains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// System value for the code
	System *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=system,proto3" json:"system,omitempty"`
	// If user cannot select this entry
	Abstract *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=abstract,proto3" json:"abstract,omitempty"`
	// Version in which this code/display is defined
	Version *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	// Code - if blank, this is not a selectable code
	Code *datatypes_go_proto.Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	// User display for the concept
	Display *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=display,proto3" json:"display,omitempty"`
	// Codes contained under this entry
	Contains []*ValueSet_Expansion_Contains `protobuf:"bytes,9,rep,name=contains,proto3" json:"contains,omitempty"`
}

func (x *ValueSet_Expansion_Contains) Reset() {
	*x = ValueSet_Expansion_Contains{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Contains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Contains) ProtoMessage() {}

func (x *ValueSet_Expansion_Contains) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Contains.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Contains) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 3, 1}
}

func (x *ValueSet_Expansion_Contains) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetAbstract() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *ValueSet_Expansion_Contains) GetContains() []*ValueSet_Expansion_Contains {
	if x != nil {
		return x.Contains
	}
	return nil
}

// Value of the named parameter
type ValueSet_Expansion_Parameter_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ValueSet_Expansion_Parameter_Value_StringValue
	//	*ValueSet_Expansion_Parameter_Value_Boolean
	//	*ValueSet_Expansion_Parameter_Value_Integer
	//	*ValueSet_Expansion_Parameter_Value_Decimal
	//	*ValueSet_Expansion_Parameter_Value_Uri
	//	*ValueSet_Expansion_Parameter_Value_Code
	Value isValueSet_Expansion_Parameter_Value_Value `protobuf_oneof:"value"`
}

func (x *ValueSet_Expansion_Parameter_Value) Reset() {
	*x = ValueSet_Expansion_Parameter_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet_Expansion_Parameter_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet_Expansion_Parameter_Value) ProtoMessage() {}

func (x *ValueSet_Expansion_Parameter_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet_Expansion_Parameter_Value.ProtoReflect.Descriptor instead.
func (*ValueSet_Expansion_Parameter_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{94, 3, 0, 0}
}

func (m *ValueSet_Expansion_Parameter_Value) GetValue() isValueSet_Expansion_Parameter_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*ValueSet_Expansion_Parameter_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*ValueSet_Expansion_Parameter_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_Value) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetValue().(*ValueSet_Expansion_Parameter_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_Value) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetValue().(*ValueSet_Expansion_Parameter_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_Value) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValue().(*ValueSet_Expansion_Parameter_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ValueSet_Expansion_Parameter_Value) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetValue().(*ValueSet_Expansion_Parameter_Value_Code); ok {
		return x.Code
	}
	return nil
}

type isValueSet_Expansion_Parameter_Value_Value interface {
	isValueSet_Expansion_Parameter_Value_Value()
}

type ValueSet_Expansion_Parameter_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_Value_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=integer,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_Value_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,4,opt,name=decimal,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_Value_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=uri,proto3,oneof"`
}

type ValueSet_Expansion_Parameter_Value_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,6,opt,name=code,proto3,oneof"`
}

func (*ValueSet_Expansion_Parameter_Value_StringValue) isValueSet_Expansion_Parameter_Value_Value() {}

func (*ValueSet_Expansion_Parameter_Value_Boolean) isValueSet_Expansion_Parameter_Value_Value() {}

func (*ValueSet_Expansion_Parameter_Value_Integer) isValueSet_Expansion_Parameter_Value_Value() {}

func (*ValueSet_Expansion_Parameter_Value_Decimal) isValueSet_Expansion_Parameter_Value_Value() {}

func (*ValueSet_Expansion_Parameter_Value_Uri) isValueSet_Expansion_Parameter_Value_Value() {}

func (*ValueSet_Expansion_Parameter_Value_Code) isValueSet_Expansion_Parameter_Value_Value() {}

// Reason or indication for writing the prescription
type VisionPrescription_Reason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//	*VisionPrescription_Reason_CodeableConcept
	//	*VisionPrescription_Reason_Reference
	Reason isVisionPrescription_Reason_Reason `protobuf_oneof:"reason"`
}

func (x *VisionPrescription_Reason) Reset() {
	*x = VisionPrescription_Reason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionPrescription_Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionPrescription_Reason) ProtoMessage() {}

func (x *VisionPrescription_Reason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionPrescription_Reason.ProtoReflect.Descriptor instead.
func (*VisionPrescription_Reason) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{95, 0}
}

func (m *VisionPrescription_Reason) GetReason() isVisionPrescription_Reason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *VisionPrescription_Reason) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetReason().(*VisionPrescription_Reason_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *VisionPrescription_Reason) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetReason().(*VisionPrescription_Reason_Reference); ok {
		return x.Reference
	}
	return nil
}

type isVisionPrescription_Reason_Reason interface {
	isVisionPrescription_Reason_Reason()
}

type VisionPrescription_Reason_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type VisionPrescription_Reason_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*VisionPrescription_Reason_CodeableConcept) isVisionPrescription_Reason_Reason() {}

func (*VisionPrescription_Reason_Reference) isVisionPrescription_Reason_Reason() {}

// Vision supply authorization
type VisionPrescription_Dispense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Product to be supplied
	Product *datatypes_go_proto.Coding `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`
	// right | left
	Eye *codes_go_proto.VisionEyesCode `protobuf:"bytes,5,opt,name=eye,proto3" json:"eye,omitempty"`
	// Lens sphere
	Sphere *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=sphere,proto3" json:"sphere,omitempty"`
	// Lens cylinder
	Cylinder *datatypes_go_proto.Decimal `protobuf:"bytes,7,opt,name=cylinder,proto3" json:"cylinder,omitempty"`
	// Lens axis
	Axis *datatypes_go_proto.Integer `protobuf:"bytes,8,opt,name=axis,proto3" json:"axis,omitempty"`
	// Lens prism
	Prism *datatypes_go_proto.Decimal `protobuf:"bytes,9,opt,name=prism,proto3" json:"prism,omitempty"`
	// up | down | in | out
	Base *codes_go_proto.VisionBaseCode `protobuf:"bytes,10,opt,name=base,proto3" json:"base,omitempty"`
	// Lens add
	Add *datatypes_go_proto.Decimal `protobuf:"bytes,11,opt,name=add,proto3" json:"add,omitempty"`
	// Contact lens power
	Power *datatypes_go_proto.Decimal `protobuf:"bytes,12,opt,name=power,proto3" json:"power,omitempty"`
	// Contact lens back curvature
	BackCurve *datatypes_go_proto.Decimal `protobuf:"bytes,13,opt,name=back_curve,json=backCurve,proto3" json:"back_curve,omitempty"`
	// Contact lens diameter
	Diameter *datatypes_go_proto.Decimal `protobuf:"bytes,14,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// Lens wear duration
	Duration *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,15,opt,name=duration,proto3" json:"duration,omitempty"`
	// Lens add
	Color *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=color,proto3" json:"color,omitempty"`
	// Lens add
	Brand *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=brand,proto3" json:"brand,omitempty"`
	// Notes for coatings
	Notes *datatypes_go_proto.String `protobuf:"bytes,18,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *VisionPrescription_Dispense) Reset() {
	*x = VisionPrescription_Dispense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionPrescription_Dispense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionPrescription_Dispense) ProtoMessage() {}

func (x *VisionPrescription_Dispense) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionPrescription_Dispense.ProtoReflect.Descriptor instead.
func (*VisionPrescription_Dispense) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP(), []int{95, 1}
}

func (x *VisionPrescription_Dispense) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetProduct() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetEye() *codes_go_proto.VisionEyesCode {
	if x != nil {
		return x.Eye
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetSphere() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Sphere
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetCylinder() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Cylinder
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetAxis() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Axis
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetPrism() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Prism
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetBase() *codes_go_proto.VisionBaseCode {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetAdd() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetPower() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Power
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetBackCurve() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.BackCurve
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetDiameter() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Diameter
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetDuration() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetColor() *datatypes_go_proto.String {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetBrand() *datatypes_go_proto.String {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *VisionPrescription_Dispense) GetNotes() *datatypes_go_proto.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

var File_proto_google_fhir_proto_dstu2_resources_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_dstu2_resources_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf2, 0x0a, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x38, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x62, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xde, 0x13, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9f, 0x06, 0x0a,
	0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0d, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12,
	0x53, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x3a, 0x46,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd2, 0x0f, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x4f,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x0f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x1a, 0xcd, 0x04, 0x0a, 0x0b, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x63,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x0a, 0x0a, 0x13,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x63,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x12, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x47, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x23, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x59, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0xa8, 0x05, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4f, 0x66,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0xc2, 0x0a, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6c, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x61, 0x6c, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x51, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x45, 0x0a,
	0x0e, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4f,
	0x66, 0x55, 0x73, 0x65, 0x1a, 0xd3, 0x02, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x81, 0x03, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa1,
	0x09, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x1a, 0xcc, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0xc6, 0x07, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x6e, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x22, 0xca, 0x03, 0x0a, 0x06,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0xe4, 0x07, 0x0a, 0x08, 0x42, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x22,
	0x81, 0x17, 0x0a, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x3b, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0xc5, 0x02, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0xcd, 0x0f, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x37, 0x0a,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x07, 0x66,
	0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xc4, 0x02, 0x0a, 0x06, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x1a, 0xde, 0x04, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72,
	0x62, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a,
	0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x4c, 0x0a, 0x11, 0x69, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x0f, 0x69, 0x66, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x69, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x0d,
	0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x6e, 0x65, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x1a, 0xc3, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x22, 0xc9, 0x28, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f,
	0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04,
	0x47, 0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xe4, 0x02, 0x0a, 0x0b,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x1a, 0x90, 0x03, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xa9, 0x14, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0xb7, 0x02, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0xf4, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x49,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xb5, 0x0e, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x47,
	0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x12,
	0x59, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd7, 0x01, 0x0a,
	0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x1a, 0xd8, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x63, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x22,
	0xda, 0x3f, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12,
	0x50, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x75, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2d, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x65, 0x52, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x09, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x52, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x65, 0x74, 0x68, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x65, 0x74, 0x68, 0x52, 0x0c, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x65, 0x74, 0x68, 0x1a, 0xf9, 0x03, 0x0a, 0x05, 0x50,
	0x61, 0x79, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x5a, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x1a, 0xde, 0x02, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x1a, 0xbc, 0x06, 0x0a, 0x08, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x54, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x1a, 0xf5, 0x19, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x11,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x6e,
	0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x31, 0x0a,
	0x03, 0x75, 0x64, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x75, 0x64, 0x69,
	0x12, 0x3c, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x73, 0x75, 0x62, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x73, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x73, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x73, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x1a, 0xbd, 0x0c, 0x0a, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x41, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x6e, 0x65,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x03,
	0x75, 0x64, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x75, 0x64, 0x69, 0x12,
	0x53, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x73, 0x75, 0x62, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x1a, 0xf4, 0x05, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x75, 0x64, 0x69, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x75, 0x64, 0x69, 0x1a, 0x90, 0x03, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x73, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x1a, 0x90,
	0x03, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x65, 0x74, 0x68, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x74, 0x68,
	0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0xdc, 0x43, 0x0a,
	0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0b, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x61, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x12, 0x75, 0x6e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x11, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x44,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x4d,
	0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a,
	0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x8f, 0x14, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xfd, 0x02,
	0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfb, 0x0c,
	0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x10, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x63, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x64, 0x6a,
	0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x53, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x73, 0x75, 0x62, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x1a, 0xfd, 0x02, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x94, 0x06, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x0c,
	0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61,
	0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfd, 0x02, 0x0a, 0x0c,
	0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xbf, 0x0e, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x53,
	0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x1a, 0xfd, 0x02, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xa7, 0x06, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x66, 0x0a, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfd, 0x02,
	0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x96, 0x04,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x17, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x52, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x52, 0x17, 0x73, 0x75, 0x62, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xf0, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xbc, 0x06, 0x0a, 0x08, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x66, 0x6f, 0x63,
	0x61, 0x6c, 0x12, 0x54, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x66, 0x12, 0x5e, 0x0a, 0x0e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x1c, 0x0a, 0x12,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x18, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x27, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x4d, 0x0a,
	0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x07, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x66, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x3d, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0xbb, 0x02, 0x0a,
	0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x82, 0x02, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0xd9, 0x01, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x9c, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc7, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x1a, 0xae, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x5b,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x1a, 0xc8, 0x02, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x1a, 0xcb, 0x02, 0x0a,
	0x08, 0x52, 0x75, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xc6, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x9d, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x5b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x48, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x65,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1a, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xa0, 0x04, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xf8, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x13, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x92, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x74, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x55, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f,
	0x6e, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x1a, 0xa7, 0x04, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0xf8, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x9d,
	0x01, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x3a, 0x48,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdf, 0x19, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x44,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x64, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x52, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc5, 0x03, 0x0a, 0x08, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x6b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x31, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x1a, 0x8c, 0x03, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x4a, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xdb, 0x05, 0x0a, 0x07,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x1d, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3d,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x4d, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d,
	0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4a, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d,
	0x61, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xc1, 0x02, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d,
	0x1a, 0xb9, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x6b, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x27, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xb9, 0x01, 0x0a,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x6b, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x27, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xac, 0x0b, 0x0a, 0x07, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x1a, 0xa0, 0x08, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5b,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e,
	0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x12, 0x56, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61,
	0x70, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x1a, 0x91, 0x03, 0x0a, 0x09, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a,
	0x63, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x22, 0xcb, 0x19, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x5f, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x71, 0x0a, 0x13, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x05, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0xca, 0x02, 0x0a, 0x05, 0x4f, 0x6e, 0x73, 0x65,
	0x74, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x1a, 0x90, 0x03, 0x0a, 0x09, 0x41, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x39,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x62,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x93, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x3f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xd6, 0x02,
	0x0a, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x4d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x49, 0x0a,
	0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x52, 0x08,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x66, 0x68, 0x69, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x0b, 0x66, 0x68, 0x69, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a,
	0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x45, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x57, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x19, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x04, 0x72, 0x65, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x52, 0x04, 0x72, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xc1, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x1a, 0x8a, 0x03, 0x0a, 0x08, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xcd, 0x02, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x8d, 0x25, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x51, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xb3, 0x06, 0x0a, 0x08, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x42,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0xc5, 0x02, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x1a,
	0xc6, 0x11, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x19, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x68,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x45, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x76, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0xe7, 0x02, 0x0a, 0x0b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xa2, 0x05, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0xe9, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xef, 0x02, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x63, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xdc, 0x0c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x72,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x1a, 0xd1, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xfb, 0x05, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x54, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x5d,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb9, 0x03, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x3a, 0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xcb, 0x3d, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x4a, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x40, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x4d, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x43, 0x0a, 0x07,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x46, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x52,
	0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x52, 0x05, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x1a, 0xd3, 0x03, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0xc9, 0x01, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x8c, 0x01, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x9c, 0x07, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x6e, 0x65,
	0x74, 0x1a, 0xc5, 0x01, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0xd5, 0x03, 0x0a, 0x06, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x4a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x1a, 0xea, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0xd3, 0x03, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0xc9, 0x01, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x8c, 0x01, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0xa1, 0x07, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x1a, 0xc5, 0x01, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0xed,
	0x01, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x43, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x92,
	0x04, 0x0a, 0x08, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0xed, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x43,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0x8c, 0x04, 0x0a, 0x05, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x1a, 0xed, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x43, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x1a, 0xdd, 0x03, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a,
	0xc0, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x22, 0xde, 0x0b, 0x0a, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x03, 0x62, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x73, 0x75, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x4e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x22, 0xfa, 0x11, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x44, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x52,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xc1, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74,
	0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x1a, 0xae, 0x03, 0x0a,
	0x07, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3f, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcd,
	0x0d, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x4d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d,
	0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9f, 0x03, 0x0a, 0x0a, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a, 0x41, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0xdc,
	0x0c, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x39,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x12, 0x31, 0x0a, 0x03, 0x75, 0x64, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x03, 0x75, 0x64, 0x69, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x3a, 0x3a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xf3, 0x0e,
	0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x48,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x62, 0x0a, 0x15, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x61, 0x73, 0x6d, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x7b, 0x0a, 0x18, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0xb4, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x43,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x22, 0x94, 0x0e, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x44, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x12,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x53, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xa4, 0x03, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0xd0, 0x0f, 0x0a, 0x10, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x4e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x72, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x70, 0x72, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xca, 0x01, 0x0a, 0x08,
	0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x1a, 0xdc, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x98, 0x0d,
	0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x77, 0x68, 0x65,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x08, 0x77,
	0x68, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x4f,
	0x6e, 0x12, 0x51, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x1a, 0xca, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x1a, 0xdc, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x15, 0x0a, 0x0f, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x51, 0x0a,
	0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x37, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x37,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x8b, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xb7, 0x04, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x3a,
	0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x87, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x76, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x09,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x2a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x7e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x40, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x77, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x2e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x75, 0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x16, 0x49, 0x6d, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12,
	0x45, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x1a, 0x9d, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xcf, 0x02, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x11, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x8b,
	0x13, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x36, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x1a, 0xc4, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x01, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x01, 0x70, 0x1a,
	0xab, 0x01, 0x0a, 0x01, 0x50, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x03, 0x0a, 0x01, 0x70, 0x1a, 0xd6, 0x02,
	0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x22, 0x99, 0x1e, 0x0a,
	0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x36, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x8c, 0x01,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x09,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69,
	0x61, 0x6e, 0x12, 0x6e, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x6f, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x09, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x54, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a,
	0xfb, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1d, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xd1, 0x02,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x1a, 0xcd, 0x08, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x66,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f,
	0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x61, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x54, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x1a, 0xd6, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xdc, 0x04, 0x0a, 0x0e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x48, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xf0, 0xec, 0xc5, 0xe6, 0x06, 0x01, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xe7, 0x08, 0x0a, 0x12, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xf8, 0x0a, 0x0a, 0x13, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x56, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x23, 0x0a,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x63, 0x61, 0x72, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43,
	0x61, 0x72, 0x65, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61,
	0x72, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x15, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x39,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x68, 0x6f,
	0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x1a, 0xdf, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xb1, 0x03, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x69, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x25, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x1a, 0x9c, 0x09,
	0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x16, 0x70, 0x72, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x4a, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4b,
	0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b,
	0x61, 0x64, 0x6d, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x61,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0b, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x0f, 0x64, 0x69, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0e, 0x64, 0x69, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x72, 0x74, 0x65, 0x73, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x72, 0x74, 0x65, 0x73, 0x79, 0x12, 0x59, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x54, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x1a, 0xa9, 0x03, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xdb, 0x0a, 0x0a, 0x11, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x08, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x3a, 0x45,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf5, 0x0a, 0x0a, 0x12, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x14, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf0, 0x11,
	0x0a, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x15, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x64, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0xe4,
	0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xa5, 0x03, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x60, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x24, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x41, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65,
	0x22, 0xed, 0x0a, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x14, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x48, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x22, 0x9d, 0x17, 0x0a, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x54, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x49, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x04, 0x62, 0x6f, 0x72, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x42, 0x6f,
	0x72, 0x6e, 0x52, 0x04, 0x62, 0x6f, 0x72, 0x6e, 0x12, 0x46, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x51, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x52, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xc7, 0x01, 0x0a, 0x04, 0x42, 0x6f, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x72, 0x6e, 0x1a, 0xcd, 0x01, 0x0a,
	0x07, 0x41, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x1a, 0xc6, 0x02, 0x0a,
	0x08, 0x44, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x64, 0x65, 0x63,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x1a, 0xef, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x52, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x05, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x88, 0x02, 0x0a,
	0x05, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0xf4, 0x09, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x8e, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x79, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x3d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x38, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xd8, 0x13, 0x0a, 0x04, 0x47, 0x6f, 0x61, 0x6c,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2a, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x49, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0xb9, 0x01, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x77, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x52, 0x69, 0x73, 0x6b,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x1a,
	0xa4, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x55,
	0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x90, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xdc, 0x03, 0x0a, 0x07, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xc8, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x55, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x38, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x47, 0x6f,
	0x61, 0x6c, 0x22, 0xc1, 0x12, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x55,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x91, 0x06, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a,
	0xa6, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3f,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd0, 0x03, 0x0a, 0x06, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a,
	0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x39, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xd8, 0x1b, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x42, 0x79, 0x12, 0x53, 0x0a, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x12, 0x57, 0x0a, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x5e, 0x0a, 0x16,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0b,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x10, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3e, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x0a,
	0x14, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x13, 0x61,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x58, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xdd, 0x02, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x1a, 0xf5, 0x03, 0x0a, 0x0d,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x6c,
	0x6c, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61,
	0x6c, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0xd4, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x06, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0xf1, 0x16, 0x0a, 0x16, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a,
	0x05, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x1a, 0xc4, 0x0d, 0x0a, 0x05, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x5b, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0xd5, 0x09, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x69,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xbd, 0x06, 0x0a, 0x08, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x6f, 0x70, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x64, 0x0a, 0x06, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x1a, 0xd5, 0x02, 0x0a, 0x06, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a, 0x4a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x19, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x69, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x56, 0x0a, 0x10, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x11, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x51, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xef, 0x0b, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69,
	0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5c, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x11, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xb0, 0x04, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x6f,
	0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x22, 0xf5, 0x1d, 0x0a, 0x0c, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b,
	0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4c,
	0x0a, 0x0d, 0x77, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0b, 0x77, 0x61, 0x73, 0x4e, 0x6f, 0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x5a, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x64, 0x6f, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x14, 0x76,
	0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x13, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0xe5, 0x02, 0x0a, 0x0b, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x47, 0x69, 0x76, 0x65,
	0x6e, 0x1a, 0x90, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x1a, 0xc9, 0x06, 0x0a, 0x13, 0x56, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x0d, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x6f,
	0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x64, 0x6f,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x64, 0x6f, 0x73, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10,
	0x64, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb1, 0x15, 0x0a, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xb4, 0x0e, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x76, 0x61, 0x63, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x63,
	0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x64, 0x6f, 0x73, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x59, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x77, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x6f, 0x0a, 0x17,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x93, 0x01,
	0x0a, 0x1e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x29, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xd8, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xe5,
	0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x0d, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x4e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x25, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3d,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x68, 0x69, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x0b, 0x66, 0x68, 0x69, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x57, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5c, 0x0a, 0x0d, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x1a, 0xc1, 0x02, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x1a, 0xd4,
	0x02, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x1a, 0xee, 0x09, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xbd, 0x06, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x63, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x61, 0x63, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x64, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x19, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x1a, 0xa0, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xf0, 0x02, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x1f, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x91, 0x05, 0x0a, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x3a, 0x47, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x22, 0xbe, 0x0f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x67, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x2b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x1a, 0xc8, 0x03, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x14, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x3a, 0x38, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb2, 0x0e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74,
	0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x15, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x1a, 0x98, 0x03, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x3a, 0x3c,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x0b, 0x0a,
	0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x52, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x3c, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x22, 0xea, 0x15, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x69, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x5a, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x4b, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0xea, 0x08,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x56, 0x0a, 0x0a, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xe5, 0x02, 0x0a, 0x0a, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x25, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0xd5, 0x02, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xc1, 0x05, 0x0a, 0x07, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a,
	0xdc, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x16, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x3f, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x3e,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2,
	0x18, 0x0a, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x5d, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0d, 0x77, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x77, 0x61, 0x73, 0x4e, 0x6f,
	0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x6e, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x06,
	0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xa6,
	0x01, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x54, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb9, 0x07, 0x0a, 0x06, 0x44, 0x6f,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3e,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x1a, 0x86, 0x01, 0x0a,
	0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x36, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x4c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x21, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a,
	0x09, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x72, 0x12, 0x74, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0b,
	0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x5e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x0c, 0x77, 0x68, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x4b,
	0x0a, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x77, 0x68, 0x65,
	0x6e, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x12, 0x64, 0x6f, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x80, 0x0d, 0x0a, 0x11, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x61, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x16, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x63,
	0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x56, 0x0a,
	0x04, 0x64, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73, 0x65, 0x52,
	0x04, 0x64, 0x6f, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x44,
	0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xb4, 0x01, 0x0a,
	0x08, 0x41, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x1a, 0xc1, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x1a, 0x95, 0x01, 0x0a, 0x04, 0x44, 0x6f, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x1a,
	0x86, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xbd, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x22, 0xed, 0x27, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x69, 0x0a, 0x12, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x59, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x12, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x15, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc6, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xcf, 0x01,
	0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0xf4, 0x0c, 0x0a, 0x11, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x61, 0x0a, 0x17,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x37, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x52, 0x08, 0x61, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x04, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12,
	0x3e, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x40, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x73, 0x65,
	0x52, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44,
	0x6f, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x73,
	0x65, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xb4, 0x01, 0x0a, 0x08, 0x41,
	0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x1a, 0xc1, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x73, 0x69, 0x74, 0x65, 0x1a, 0x95, 0x01, 0x0a, 0x04, 0x44, 0x6f, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x6f, 0x73, 0x65, 0x1a, 0x86, 0x01,
	0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x36,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xd7, 0x06, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5f, 0x0a, 0x19, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x5b, 0x0a, 0x18, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xcf,
	0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xd8, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x43, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x8f, 0x1e, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x77, 0x61,
	0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x0b, 0x77, 0x61, 0x73, 0x4e, 0x6f, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x12, 0x5f, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x69, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06,
	0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xd4, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x1a, 0x9d, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x84, 0x0c, 0x0a, 0x06, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a,
	0x09, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x52, 0x08,
	0x61, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x58, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x4c, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x4d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x44, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a,
	0xb4, 0x01, 0x0a, 0x08, 0x41, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x73, 0x5f,
	0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0xc1, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x1a, 0xa3, 0x01, 0x0a, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x1a, 0x86, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x8c, 0x16, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x64, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x24, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xae, 0x03,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xfa,
	0x03, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x39, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x90, 0x03, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x3a, 0x41,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x8d, 0x12, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x53, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x42, 0x79, 0x1a,
	0xc1, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x1a, 0xd9, 0x03, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a,
	0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0x94, 0x28, 0x0a, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6d, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x16, 0x66, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x15, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x6f, 0x72, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x65, 0x74, 0x52, 0x08, 0x6f, 0x72,
	0x61, 0x6c, 0x44, 0x69, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x0e, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x1a, 0xc6, 0x0a, 0x0a, 0x08,
	0x4f, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x65, 0x74, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x07,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x65, 0x74, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x5e, 0x0a, 0x16, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x66, 0x6c, 0x75, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xd3, 0x02, 0x0a, 0x08, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xd8, 0x02, 0x0a, 0x07, 0x54, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x09, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x95, 0x04, 0x0a, 0x0a, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd5, 0x0c, 0x0a,
	0x0e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x62, 0x61, 0x73,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6f, 0x72,
	0x69, 0x63, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6f, 0x72,
	0x69, 0x63, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x16, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x6f, 0x66, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x0e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x15, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x19, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xcc, 0x04, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x95, 0x01, 0x0a,
	0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xa5, 0x28, 0x0a, 0x0b, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x51, 0x0a,
	0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x12, 0x5a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5c, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x1a, 0x9d, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0xa5, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x55,
	0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf5, 0x03, 0x0a, 0x0e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3b, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x89, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x6e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x32, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a,
	0xbd, 0x09, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x56, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xa5, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa3, 0x1c, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x19, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0xc1, 0x02, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x1a, 0xfc,
	0x0a, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x03, 0x75, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x45,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x19, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x58, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x04, 0x70,
	0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x1a, 0xb3, 0x04, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x6c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x1a, 0xa5, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x3a, 0x47, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x09, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x1a, 0xa1, 0x04, 0x0a,
	0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x41, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xdb, 0x0d, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x71,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x33, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x30, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x57,
	0x68, 0x65, 0x6e, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xc5, 0x01, 0x0a, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x52, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x1a, 0xc3, 0x02, 0x0a, 0x04, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0xf7, 0x08, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4f, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x11, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x30, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x53, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x41, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2,
	0x0c, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c,
	0x65, 0x63, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x4f, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x4f,
	0x66, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0xc4, 0x03, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65,
	0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x17, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0xb4, 0x14, 0x0a, 0x09, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x70, 0x61,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x1a, 0xd1, 0x10,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x49, 0x0a,
	0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55,
	0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x82, 0x1f, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f,
	0x6d, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07,
	0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x49, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x45, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x52, 0x0d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x06, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6d, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x6b, 0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x9e, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x63,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x1a, 0xa5, 0x01, 0x0a, 0x0d, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x1a, 0xae, 0x05, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x36, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74,
	0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x1a, 0xa5, 0x03, 0x0a, 0x06, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x62,
	0x72, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xdf, 0x02, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x1a, 0xda, 0x02, 0x0a,
	0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xcb, 0x0a, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x22, 0xa8, 0x15, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x5a, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x61, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x69, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x04,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x47, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xb4, 0x05, 0x0a, 0x06, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x54, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0xb2, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x3a, 0x49, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x86, 0x0d, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c,
	0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x49, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x39, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x6b, 0x0a, 0x15, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x9e, 0x03, 0x0a, 0x04,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x61, 0x73, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x81, 0x14, 0x0a, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x49, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x11, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x10, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xbc, 0x05, 0x0a, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x15, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0xe5, 0x03, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x22, 0xc5, 0x1a, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x5c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6e, 0x6f, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x12, 0x5a, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x12, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x09,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x51,
	0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x75, 0x70, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x12, 0x8c,
	0x01, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x4e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x2e, 0x46, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b,
	0x66, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2b, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64,
	0x1a, 0xc6, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x8b, 0x03, 0x0a, 0x09, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x9d, 0x01, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x1a, 0xeb, 0x02, 0x0a, 0x0b, 0x46, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0b, 0x6d,
	0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x22, 0xca, 0x12, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x5c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x39, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x09,
	0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12,
	0x7c, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x3e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x51, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x1a, 0xc6, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xd8, 0x01, 0x0a, 0x09, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x1a, 0xb4, 0x01, 0x0a, 0x08, 0x41, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x3a, 0x44, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xd1, 0x0f, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x6e, 0x75, 0x6c, 0x6c, 0x69,
	0x66, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x39,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x1a, 0x9c, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49,
	0x64, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbf, 0x0e, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x5a, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x69, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x44, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xb3, 0x02, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x15, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x4e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x85,
	0x07, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x50, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a,
	0xd4, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x96, 0x04, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x42, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3f,
	0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x3a,
	0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xb2, 0x14, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x74,
	0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x4c, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xb8, 0x0b, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x51, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfa, 0x05, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x22, 0xc1, 0x1c, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x7a, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x3e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xc4, 0x11, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x59, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xdd, 0x0c,
	0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5c, 0x0a, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x1a, 0xc1, 0x09, 0x0a, 0x06, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0xc6, 0x06, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x07,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x49, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x0e, 0x0a, 0x0f, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x44, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x73, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x31, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x16,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x0f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xec, 0x09, 0x0a, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65,
	0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x49, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x39, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0xb9, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a,
	0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xf0, 0xec, 0xc5, 0xe6, 0x06, 0x01, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0xa5, 0x12, 0x0a, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x18, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x60, 0x0a,
	0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x73,
	0x12, 0x52, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6d, 0x69, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xcf, 0x07, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x4b, 0x0a, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x68,
	0x65, 0x6e, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x1a, 0xf1, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x55, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x89, 0x01, 0x0a, 0x04,
	0x57, 0x68, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x69, 0x73,
	0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfa, 0x07, 0x0a, 0x08,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0xa3, 0x01,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x69, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0f,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x8d, 0x0f, 0x0a, 0x0f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x78, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x78, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4c,
	0x0a, 0x0b, 0x78, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x58, 0x50,
	0x61, 0x74, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x78, 0x70, 0x61, 0x74, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a,
	0xc1, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65,
	0x63, 0x6f, 0x6d, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xeb, 0x08, 0x0a, 0x04, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0e,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x42, 0x75, 0x73, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x40, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x38, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0xfd, 0x1a, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x39,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0xa3, 0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x43,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x1a, 0x9d, 0x01, 0x0a,
	0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0xa9, 0x03, 0x0a,
	0x09, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x46, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xcd, 0x06, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x08, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xca, 0x01, 0x0a, 0x08,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x3c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x22, 0xe0, 0x1c, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3d,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x66,
	0x68, 0x69, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x0b,
	0x66, 0x68, 0x69, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x07, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x57, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x50, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x5d,
	0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0xc1, 0x02,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f,
	0x6d, 0x1a, 0xae, 0x03, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x9a, 0x02, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x9e, 0x02, 0x0a, 0x0c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x0c, 0x0a, 0x0c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x31, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x1a, 0xd3, 0x03, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x37, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x0d, 0x0a, 0x09,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x91, 0x03, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0xe3, 0x02, 0x0a, 0x0a,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x15, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xa7, 0x0b, 0x0a, 0x0e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x43, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x2b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x52, 0x0a, 0x08, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0c, 0x77, 0x68, 0x65, 0x6e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x3a, 0x42, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x22, 0xf2, 0x0e, 0x0a, 0x0d, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x31, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3c, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x72,
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x52, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x1a, 0xc5,
	0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xc3, 0x02, 0x0a, 0x04, 0x57, 0x68, 0x65, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3b, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x41, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xd2, 0x4b, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3f, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x05, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0xc1, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74,
	0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x1a, 0xa1, 0x0a, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0xc3, 0x02, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe4, 0x04, 0x0a, 0x0a, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x9f, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x1a, 0xbc, 0x03, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x1a, 0xf9, 0x1c, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x91, 0x1a, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x1a, 0xca, 0x0b, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x41, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6f, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x1a, 0xcf, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc6, 0x0b, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x54, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x0f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x11,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0xd9, 0x06,
	0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfb, 0x02, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x1a, 0xc8, 0x04, 0x0a, 0x08, 0x54, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x54, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa4, 0x02,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x22, 0xc4, 0x39, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x44, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3e, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xc1, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x1a, 0xe9, 0x0b, 0x0a, 0x0a, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x63, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x1a, 0xfe, 0x07, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x08,
	0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x87, 0x03, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc3, 0x0d, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x07, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x1a, 0xa5, 0x0a, 0x0a, 0x07, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x39,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x50,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0xa5, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x62, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x2e,
	0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8f, 0x03, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x3b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x90, 0x0f, 0x0a, 0x09, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x1a, 0xda, 0x05, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xfa, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xbb, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x50, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x3a, 0x3c, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0x8d, 0x13, 0x0a, 0x12,
	0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12,
	0x4b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x1a, 0xc6, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xc2,
	0x08, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x39, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x79,
	0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x65, 0x79, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x73,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x63, 0x79, 0x6c, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x78, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x52, 0x04, 0x61, 0x78, 0x69, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x73, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x72, 0x69, 0x73,
	0x6d, 0x12, 0x3b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x61,
	0x64, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x64,
	0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x3a, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x5e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x48, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x14, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x06,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4f,
	0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x64, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x59, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f,
	0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x55, 0x0a, 0x10, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x58, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x12, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x65, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x14, 0x65, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5b,
	0x0a, 0x12, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x12, 0x65, 0x0a,
	0x16, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x12, 0x62, 0x0a, 0x15, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x13, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a,
	0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x67, 0x6f,
	0x61, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5b, 0x0a, 0x12, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x76, 0x0a, 0x1b, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48,
	0x00, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x45, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x14, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0d,
	0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x52, 0x0a, 0x0f, 0x6e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e,
	0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x11, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x12, 0x67, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x61, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4f, 0x0a,
	0x0e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x5c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x71, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x67,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_dstu2_resources_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_dstu2_resources_proto_rawDescData = file_proto_google_fhir_proto_dstu2_resources_proto_rawDesc
)

func file_proto_google_fhir_proto_dstu2_resources_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_dstu2_resources_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_dstu2_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_dstu2_resources_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_dstu2_resources_proto_rawDescData
}

var file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 390)
var file_proto_google_fhir_proto_dstu2_resources_proto_goTypes = []interface{}{
	(*Account)(nil),                                // 0: google.fhir.dstu2.proto.Account
	(*AllergyIntolerance)(nil),                     // 1: google.fhir.dstu2.proto.AllergyIntolerance
	(*Appointment)(nil),                            // 2: google.fhir.dstu2.proto.Appointment
	(*AppointmentResponse)(nil),                    // 3: google.fhir.dstu2.proto.AppointmentResponse
	(*AuditEvent)(nil),                             // 4: google.fhir.dstu2.proto.AuditEvent
	(*Basic)(nil),                                  // 5: google.fhir.dstu2.proto.Basic
	(*Binary)(nil),                                 // 6: google.fhir.dstu2.proto.Binary
	(*BodySite)(nil),                               // 7: google.fhir.dstu2.proto.BodySite
	(*Bundle)(nil),                                 // 8: google.fhir.dstu2.proto.Bundle
	(*CarePlan)(nil),                               // 9: google.fhir.dstu2.proto.CarePlan
	(*Claim)(nil),                                  // 10: google.fhir.dstu2.proto.Claim
	(*ClaimResponse)(nil),                          // 11: google.fhir.dstu2.proto.ClaimResponse
	(*ClinicalImpression)(nil),                     // 12: google.fhir.dstu2.proto.ClinicalImpression
	(*Communication)(nil),                          // 13: google.fhir.dstu2.proto.Communication
	(*CommunicationRequest)(nil),                   // 14: google.fhir.dstu2.proto.CommunicationRequest
	(*Composition)(nil),                            // 15: google.fhir.dstu2.proto.Composition
	(*ConceptMap)(nil),                             // 16: google.fhir.dstu2.proto.ConceptMap
	(*Condition)(nil),                              // 17: google.fhir.dstu2.proto.Condition
	(*Conformance)(nil),                            // 18: google.fhir.dstu2.proto.Conformance
	(*Contract)(nil),                               // 19: google.fhir.dstu2.proto.Contract
	(*Coverage)(nil),                               // 20: google.fhir.dstu2.proto.Coverage
	(*DataElement)(nil),                            // 21: google.fhir.dstu2.proto.DataElement
	(*DetectedIssue)(nil),                          // 22: google.fhir.dstu2.proto.DetectedIssue
	(*Device)(nil),                                 // 23: google.fhir.dstu2.proto.Device
	(*DeviceComponent)(nil),                        // 24: google.fhir.dstu2.proto.DeviceComponent
	(*DeviceMetric)(nil),                           // 25: google.fhir.dstu2.proto.DeviceMetric
	(*DeviceUseRequest)(nil),                       // 26: google.fhir.dstu2.proto.DeviceUseRequest
	(*DeviceUseStatement)(nil),                     // 27: google.fhir.dstu2.proto.DeviceUseStatement
	(*DiagnosticOrder)(nil),                        // 28: google.fhir.dstu2.proto.DiagnosticOrder
	(*DiagnosticReport)(nil),                       // 29: google.fhir.dstu2.proto.DiagnosticReport
	(*DocumentManifest)(nil),                       // 30: google.fhir.dstu2.proto.DocumentManifest
	(*DocumentReference)(nil),                      // 31: google.fhir.dstu2.proto.DocumentReference
	(*DomainResource)(nil),                         // 32: google.fhir.dstu2.proto.DomainResource
	(*EligibilityRequest)(nil),                     // 33: google.fhir.dstu2.proto.EligibilityRequest
	(*EligibilityResponse)(nil),                    // 34: google.fhir.dstu2.proto.EligibilityResponse
	(*Encounter)(nil),                              // 35: google.fhir.dstu2.proto.Encounter
	(*EnrollmentRequest)(nil),                      // 36: google.fhir.dstu2.proto.EnrollmentRequest
	(*EnrollmentResponse)(nil),                     // 37: google.fhir.dstu2.proto.EnrollmentResponse
	(*EpisodeOfCare)(nil),                          // 38: google.fhir.dstu2.proto.EpisodeOfCare
	(*ExplanationOfBenefit)(nil),                   // 39: google.fhir.dstu2.proto.ExplanationOfBenefit
	(*FamilyMemberHistory)(nil),                    // 40: google.fhir.dstu2.proto.FamilyMemberHistory
	(*Flag)(nil),                                   // 41: google.fhir.dstu2.proto.Flag
	(*Goal)(nil),                                   // 42: google.fhir.dstu2.proto.Goal
	(*Group)(nil),                                  // 43: google.fhir.dstu2.proto.Group
	(*HealthcareService)(nil),                      // 44: google.fhir.dstu2.proto.HealthcareService
	(*ImagingObjectSelection)(nil),                 // 45: google.fhir.dstu2.proto.ImagingObjectSelection
	(*ImagingStudy)(nil),                           // 46: google.fhir.dstu2.proto.ImagingStudy
	(*Immunization)(nil),                           // 47: google.fhir.dstu2.proto.Immunization
	(*ImmunizationRecommendation)(nil),             // 48: google.fhir.dstu2.proto.ImmunizationRecommendation
	(*ImplementationGuide)(nil),                    // 49: google.fhir.dstu2.proto.ImplementationGuide
	(*List)(nil),                                   // 50: google.fhir.dstu2.proto.List
	(*Location)(nil),                               // 51: google.fhir.dstu2.proto.Location
	(*Media)(nil),                                  // 52: google.fhir.dstu2.proto.Media
	(*Medication)(nil),                             // 53: google.fhir.dstu2.proto.Medication
	(*MedicationAdministration)(nil),               // 54: google.fhir.dstu2.proto.MedicationAdministration
	(*MedicationDispense)(nil),                     // 55: google.fhir.dstu2.proto.MedicationDispense
	(*MedicationOrder)(nil),                        // 56: google.fhir.dstu2.proto.MedicationOrder
	(*MedicationStatement)(nil),                    // 57: google.fhir.dstu2.proto.MedicationStatement
	(*MessageHeader)(nil),                          // 58: google.fhir.dstu2.proto.MessageHeader
	(*NamingSystem)(nil),                           // 59: google.fhir.dstu2.proto.NamingSystem
	(*NutritionOrder)(nil),                         // 60: google.fhir.dstu2.proto.NutritionOrder
	(*Observation)(nil),                            // 61: google.fhir.dstu2.proto.Observation
	(*OperationDefinition)(nil),                    // 62: google.fhir.dstu2.proto.OperationDefinition
	(*OperationOutcome)(nil),                       // 63: google.fhir.dstu2.proto.OperationOutcome
	(*Order)(nil),                                  // 64: google.fhir.dstu2.proto.Order
	(*OrderResponse)(nil),                          // 65: google.fhir.dstu2.proto.OrderResponse
	(*Organization)(nil),                           // 66: google.fhir.dstu2.proto.Organization
	(*Parameters)(nil),                             // 67: google.fhir.dstu2.proto.Parameters
	(*Patient)(nil),                                // 68: google.fhir.dstu2.proto.Patient
	(*PaymentNotice)(nil),                          // 69: google.fhir.dstu2.proto.PaymentNotice
	(*PaymentReconciliation)(nil),                  // 70: google.fhir.dstu2.proto.PaymentReconciliation
	(*Person)(nil),                                 // 71: google.fhir.dstu2.proto.Person
	(*Practitioner)(nil),                           // 72: google.fhir.dstu2.proto.Practitioner
	(*Procedure)(nil),                              // 73: google.fhir.dstu2.proto.Procedure
	(*ProcedureRequest)(nil),                       // 74: google.fhir.dstu2.proto.ProcedureRequest
	(*ProcessRequest)(nil),                         // 75: google.fhir.dstu2.proto.ProcessRequest
	(*ProcessResponse)(nil),                        // 76: google.fhir.dstu2.proto.ProcessResponse
	(*Provenance)(nil),                             // 77: google.fhir.dstu2.proto.Provenance
	(*Questionnaire)(nil),                          // 78: google.fhir.dstu2.proto.Questionnaire
	(*QuestionnaireResponse)(nil),                  // 79: google.fhir.dstu2.proto.QuestionnaireResponse
	(*ReferralRequest)(nil),                        // 80: google.fhir.dstu2.proto.ReferralRequest
	(*RelatedPerson)(nil),                          // 81: google.fhir.dstu2.proto.RelatedPerson
	(*Resource)(nil),                               // 82: google.fhir.dstu2.proto.Resource
	(*RiskAssessment)(nil),                         // 83: google.fhir.dstu2.proto.RiskAssessment
	(*Schedule)(nil),                               // 84: google.fhir.dstu2.proto.Schedule
	(*SearchParameter)(nil),                        // 85: google.fhir.dstu2.proto.SearchParameter
	(*Slot)(nil),                                   // 86: google.fhir.dstu2.proto.Slot
	(*Specimen)(nil),                               // 87: google.fhir.dstu2.proto.Specimen
	(*StructureDefinition)(nil),                    // 88: google.fhir.dstu2.proto.StructureDefinition
	(*Subscription)(nil),                           // 89: google.fhir.dstu2.proto.Subscription
	(*Substance)(nil),                              // 90: google.fhir.dstu2.proto.Substance
	(*SupplyDelivery)(nil),                         // 91: google.fhir.dstu2.proto.SupplyDelivery
	(*SupplyRequest)(nil),                          // 92: google.fhir.dstu2.proto.SupplyRequest
	(*TestScript)(nil),                             // 93: google.fhir.dstu2.proto.TestScript
	(*ValueSet)(nil),                               // 94: google.fhir.dstu2.proto.ValueSet
	(*VisionPrescription)(nil),                     // 95: google.fhir.dstu2.proto.VisionPrescription
	(*ContainedResource)(nil),                      // 96: google.fhir.dstu2.proto.ContainedResource
	(*AllergyIntolerance_Reaction)(nil),            // 97: google.fhir.dstu2.proto.AllergyIntolerance.Reaction
	(*Appointment_Participant)(nil),                // 98: google.fhir.dstu2.proto.Appointment.Participant
	(*AuditEvent_Event)(nil),                       // 99: google.fhir.dstu2.proto.AuditEvent.Event
	(*AuditEvent_Participant)(nil),                 // 100: google.fhir.dstu2.proto.AuditEvent.Participant
	(*AuditEvent_Source)(nil),                      // 101: google.fhir.dstu2.proto.AuditEvent.Source
	(*AuditEvent_Object)(nil),                      // 102: google.fhir.dstu2.proto.AuditEvent.Object
	(*AuditEvent_Participant_Network)(nil),         // 103: google.fhir.dstu2.proto.AuditEvent.Participant.Network
	(*AuditEvent_Object_Detail)(nil),               // 104: google.fhir.dstu2.proto.AuditEvent.Object.Detail
	(*Bundle_Link)(nil),                            // 105: google.fhir.dstu2.proto.Bundle.Link
	(*Bundle_Entry)(nil),                           // 106: google.fhir.dstu2.proto.Bundle.Entry
	(*Bundle_Entry_Search)(nil),                    // 107: google.fhir.dstu2.proto.Bundle.Entry.Search
	(*Bundle_Entry_Request)(nil),                   // 108: google.fhir.dstu2.proto.Bundle.Entry.Request
	(*Bundle_Entry_Response)(nil),                  // 109: google.fhir.dstu2.proto.Bundle.Entry.Response
	(*CarePlan_RelatedPlan)(nil),                   // 110: google.fhir.dstu2.proto.CarePlan.RelatedPlan
	(*CarePlan_Participant)(nil),                   // 111: google.fhir.dstu2.proto.CarePlan.Participant
	(*CarePlan_Activity)(nil),                      // 112: google.fhir.dstu2.proto.CarePlan.Activity
	(*CarePlan_Activity_Detail)(nil),               // 113: google.fhir.dstu2.proto.CarePlan.Activity.Detail
	(*CarePlan_Activity_Detail_Scheduled)(nil),     // 114: google.fhir.dstu2.proto.CarePlan.Activity.Detail.Scheduled
	(*CarePlan_Activity_Detail_Product)(nil),       // 115: google.fhir.dstu2.proto.CarePlan.Activity.Detail.Product
	(*Claim_Payee)(nil),                            // 116: google.fhir.dstu2.proto.Claim.Payee
	(*Claim_Diagnosis)(nil),                        // 117: google.fhir.dstu2.proto.Claim.Diagnosis
	(*Claim_Coverage)(nil),                         // 118: google.fhir.dstu2.proto.Claim.Coverage
	(*Claim_Item)(nil),                             // 119: google.fhir.dstu2.proto.Claim.Item
	(*Claim_MissingTeeth)(nil),                     // 120: google.fhir.dstu2.proto.Claim.MissingTeeth
	(*Claim_Item_Detail)(nil),                      // 121: google.fhir.dstu2.proto.Claim.Item.Detail
	(*Claim_Item_Prosthesis)(nil),                  // 122: google.fhir.dstu2.proto.Claim.Item.Prosthesis
	(*Claim_Item_Detail_SubDetail)(nil),            // 123: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail
	(*ClaimResponse_Item)(nil),                     // 124: google.fhir.dstu2.proto.ClaimResponse.Item
	(*ClaimResponse_AddItem)(nil),                  // 125: google.fhir.dstu2.proto.ClaimResponse.AddItem
	(*ClaimResponse_Error)(nil),                    // 126: google.fhir.dstu2.proto.ClaimResponse.Error
	(*ClaimResponse_Note)(nil),                     // 127: google.fhir.dstu2.proto.ClaimResponse.Note
	(*ClaimResponse_Coverage)(nil),                 // 128: google.fhir.dstu2.proto.ClaimResponse.Coverage
	(*ClaimResponse_Item_Adjudication)(nil),        // 129: google.fhir.dstu2.proto.ClaimResponse.Item.Adjudication
	(*ClaimResponse_Item_Detail)(nil),              // 130: google.fhir.dstu2.proto.ClaimResponse.Item.Detail
	(*ClaimResponse_Item_Detail_Adjudication)(nil), // 131: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.Adjudication
	(*ClaimResponse_Item_Detail_SubDetail)(nil),    // 132: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail
	(*ClaimResponse_Item_Detail_SubDetail_Adjudication)(nil),        // 133: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.Adjudication
	(*ClaimResponse_AddItem_Adjudication)(nil),                      // 134: google.fhir.dstu2.proto.ClaimResponse.AddItem.Adjudication
	(*ClaimResponse_AddItem_Detail)(nil),                            // 135: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail
	(*ClaimResponse_AddItem_Detail_Adjudication)(nil),               // 136: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.Adjudication
	(*ClinicalImpression_Trigger)(nil),                              // 137: google.fhir.dstu2.proto.ClinicalImpression.Trigger
	(*ClinicalImpression_Investigations)(nil),                       // 138: google.fhir.dstu2.proto.ClinicalImpression.Investigations
	(*ClinicalImpression_Finding)(nil),                              // 139: google.fhir.dstu2.proto.ClinicalImpression.Finding
	(*ClinicalImpression_RuledOut)(nil),                             // 140: google.fhir.dstu2.proto.ClinicalImpression.RuledOut
	(*Communication_Payload)(nil),                                   // 141: google.fhir.dstu2.proto.Communication.Payload
	(*Communication_Payload_Content)(nil),                           // 142: google.fhir.dstu2.proto.Communication.Payload.Content
	(*CommunicationRequest_Payload)(nil),                            // 143: google.fhir.dstu2.proto.CommunicationRequest.Payload
	(*CommunicationRequest_Scheduled)(nil),                          // 144: google.fhir.dstu2.proto.CommunicationRequest.Scheduled
	(*CommunicationRequest_Payload_Content)(nil),                    // 145: google.fhir.dstu2.proto.CommunicationRequest.Payload.Content
	(*Composition_Attester)(nil),                                    // 146: google.fhir.dstu2.proto.Composition.Attester
	(*Composition_Event)(nil),                                       // 147: google.fhir.dstu2.proto.Composition.Event
	(*Composition_Section)(nil),                                     // 148: google.fhir.dstu2.proto.Composition.Section
	(*ConceptMap_Contact)(nil),                                      // 149: google.fhir.dstu2.proto.ConceptMap.Contact
	(*ConceptMap_Source)(nil),                                       // 150: google.fhir.dstu2.proto.ConceptMap.Source
	(*ConceptMap_Target)(nil),                                       // 151: google.fhir.dstu2.proto.ConceptMap.Target
	(*ConceptMap_Element)(nil),                                      // 152: google.fhir.dstu2.proto.ConceptMap.Element
	(*ConceptMap_Element_Target)(nil),                               // 153: google.fhir.dstu2.proto.ConceptMap.Element.Target
	(*ConceptMap_Element_Target_DependsOn)(nil),                     // 154: google.fhir.dstu2.proto.ConceptMap.Element.Target.DependsOn
	(*Condition_Onset)(nil),                                         // 155: google.fhir.dstu2.proto.Condition.Onset
	(*Condition_Abatement)(nil),                                     // 156: google.fhir.dstu2.proto.Condition.Abatement
	(*Condition_Stage)(nil),                                         // 157: google.fhir.dstu2.proto.Condition.Stage
	(*Condition_Evidence)(nil),                                      // 158: google.fhir.dstu2.proto.Condition.Evidence
	(*Conformance_Contact)(nil),                                     // 159: google.fhir.dstu2.proto.Conformance.Contact
	(*Conformance_Software)(nil),                                    // 160: google.fhir.dstu2.proto.Conformance.Software
	(*Conformance_Implementation)(nil),                              // 161: google.fhir.dstu2.proto.Conformance.Implementation
	(*Conformance_Rest)(nil),                                        // 162: google.fhir.dstu2.proto.Conformance.Rest
	(*Conformance_Messaging)(nil),                                   // 163: google.fhir.dstu2.proto.Conformance.Messaging
	(*Conformance_Document)(nil),                                    // 164: google.fhir.dstu2.proto.Conformance.Document
	(*Conformance_Rest_Security)(nil),                               // 165: google.fhir.dstu2.proto.Conformance.Rest.Security
	(*Conformance_Rest_Resource)(nil),                               // 166: google.fhir.dstu2.proto.Conformance.Rest.Resource
	(*Conformance_Rest_Interaction)(nil),                            // 167: google.fhir.dstu2.proto.Conformance.Rest.Interaction
	(*Conformance_Rest_Operation)(nil),                              // 168: google.fhir.dstu2.proto.Conformance.Rest.Operation
	(*Conformance_Rest_Security_Certificate)(nil),                   // 169: google.fhir.dstu2.proto.Conformance.Rest.Security.Certificate
	(*Conformance_Rest_Resource_Interaction)(nil),                   // 170: google.fhir.dstu2.proto.Conformance.Rest.Resource.Interaction
	(*Conformance_Rest_Resource_SearchParam)(nil),                   // 171: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam
	(*Conformance_Messaging_Endpoint)(nil),                          // 172: google.fhir.dstu2.proto.Conformance.Messaging.Endpoint
	(*Conformance_Messaging_Event)(nil),                             // 173: google.fhir.dstu2.proto.Conformance.Messaging.Event
	(*Contract_Actor)(nil),                                          // 174: google.fhir.dstu2.proto.Contract.Actor
	(*Contract_ValuedItem)(nil),                                     // 175: google.fhir.dstu2.proto.Contract.ValuedItem
	(*Contract_Signer)(nil),                                         // 176: google.fhir.dstu2.proto.Contract.Signer
	(*Contract_Term)(nil),                                           // 177: google.fhir.dstu2.proto.Contract.Term
	(*Contract_Binding)(nil),                                        // 178: google.fhir.dstu2.proto.Contract.Binding
	(*Contract_Friendly)(nil),                                       // 179: google.fhir.dstu2.proto.Contract.Friendly
	(*Contract_Legal)(nil),                                          // 180: google.fhir.dstu2.proto.Contract.Legal
	(*Contract_Rule)(nil),                                           // 181: google.fhir.dstu2.proto.Contract.Rule
	(*Contract_ValuedItem_Entity)(nil),                              // 182: google.fhir.dstu2.proto.Contract.ValuedItem.Entity
	(*Contract_Term_Actor)(nil),                                     // 183: google.fhir.dstu2.proto.Contract.Term.Actor
	(*Contract_Term_ValuedItem)(nil),                                // 184: google.fhir.dstu2.proto.Contract.Term.ValuedItem
	(*Contract_Term_ValuedItem_Entity)(nil),                         // 185: google.fhir.dstu2.proto.Contract.Term.ValuedItem.Entity
	(*Contract_Friendly_Content)(nil),                               // 186: google.fhir.dstu2.proto.Contract.Friendly.Content
	(*Contract_Legal_Content)(nil),                                  // 187: google.fhir.dstu2.proto.Contract.Legal.Content
	(*Contract_Rule_Content)(nil),                                   // 188: google.fhir.dstu2.proto.Contract.Rule.Content
	(*DataElement_Contact)(nil),                                     // 189: google.fhir.dstu2.proto.DataElement.Contact
	(*DataElement_Mapping)(nil),                                     // 190: google.fhir.dstu2.proto.DataElement.Mapping
	(*DetectedIssue_Mitigation)(nil),                                // 191: google.fhir.dstu2.proto.DetectedIssue.Mitigation
	(*DeviceComponent_ProductionSpecification)(nil),                 // 192: google.fhir.dstu2.proto.DeviceComponent.ProductionSpecification
	(*DeviceMetric_Calibration)(nil),                                // 193: google.fhir.dstu2.proto.DeviceMetric.Calibration
	(*DeviceUseRequest_BodySite)(nil),                               // 194: google.fhir.dstu2.proto.DeviceUseRequest.BodySite
	(*DeviceUseRequest_TimingType)(nil),                             // 195: google.fhir.dstu2.proto.DeviceUseRequest.TimingType
	(*DeviceUseStatement_BodySite)(nil),                             // 196: google.fhir.dstu2.proto.DeviceUseStatement.BodySite
	(*DeviceUseStatement_TimingType)(nil),                           // 197: google.fhir.dstu2.proto.DeviceUseStatement.TimingType
	(*DiagnosticOrder_Event)(nil),                                   // 198: google.fhir.dstu2.proto.DiagnosticOrder.Event
	(*DiagnosticOrder_Item)(nil),                                    // 199: google.fhir.dstu2.proto.DiagnosticOrder.Item
	(*DiagnosticReport_Effective)(nil),                              // 200: google.fhir.dstu2.proto.DiagnosticReport.Effective
	(*DiagnosticReport_Image)(nil),                                  // 201: google.fhir.dstu2.proto.DiagnosticReport.Image
	(*DocumentManifest_Content)(nil),                                // 202: google.fhir.dstu2.proto.DocumentManifest.Content
	(*DocumentManifest_Related)(nil),                                // 203: google.fhir.dstu2.proto.DocumentManifest.Related
	(*DocumentManifest_Content_P)(nil),                              // 204: google.fhir.dstu2.proto.DocumentManifest.Content.P
	(*DocumentReference_RelatesTo)(nil),                             // 205: google.fhir.dstu2.proto.DocumentReference.RelatesTo
	(*DocumentReference_Content)(nil),                               // 206: google.fhir.dstu2.proto.DocumentReference.Content
	(*DocumentReference_Context)(nil),                               // 207: google.fhir.dstu2.proto.DocumentReference.Context
	(*DocumentReference_Context_Related)(nil),                       // 208: google.fhir.dstu2.proto.DocumentReference.Context.Related
	(*Encounter_StatusHistory)(nil),                                 // 209: google.fhir.dstu2.proto.Encounter.StatusHistory
	(*Encounter_Participant)(nil),                                   // 210: google.fhir.dstu2.proto.Encounter.Participant
	(*Encounter_Hospitalization)(nil),                               // 211: google.fhir.dstu2.proto.Encounter.Hospitalization
	(*Encounter_Location)(nil),                                      // 212: google.fhir.dstu2.proto.Encounter.Location
	(*EpisodeOfCare_StatusHistory)(nil),                             // 213: google.fhir.dstu2.proto.EpisodeOfCare.StatusHistory
	(*EpisodeOfCare_CareTeam)(nil),                                  // 214: google.fhir.dstu2.proto.EpisodeOfCare.CareTeam
	(*FamilyMemberHistory_Born)(nil),                                // 215: google.fhir.dstu2.proto.FamilyMemberHistory.Born
	(*FamilyMemberHistory_AgeType)(nil),                             // 216: google.fhir.dstu2.proto.FamilyMemberHistory.AgeType
	(*FamilyMemberHistory_Deceased)(nil),                            // 217: google.fhir.dstu2.proto.FamilyMemberHistory.Deceased
	(*FamilyMemberHistory_Condition)(nil),                           // 218: google.fhir.dstu2.proto.FamilyMemberHistory.Condition
	(*FamilyMemberHistory_Condition_Onset)(nil),                     // 219: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.Onset
	(*Goal_Start)(nil),                                              // 220: google.fhir.dstu2.proto.Goal.Start
	(*Goal_Target)(nil),                                             // 221: google.fhir.dstu2.proto.Goal.Target
	(*Goal_Outcome)(nil),                                            // 222: google.fhir.dstu2.proto.Goal.Outcome
	(*Goal_Outcome_Result)(nil),                                     // 223: google.fhir.dstu2.proto.Goal.Outcome.Result
	(*Group_Characteristic)(nil),                                    // 224: google.fhir.dstu2.proto.Group.Characteristic
	(*Group_Member)(nil),                                            // 225: google.fhir.dstu2.proto.Group.Member
	(*Group_Characteristic_Value)(nil),                              // 226: google.fhir.dstu2.proto.Group.Characteristic.Value
	(*HealthcareService_ServiceType)(nil),                           // 227: google.fhir.dstu2.proto.HealthcareService.ServiceType
	(*HealthcareService_AvailableTime)(nil),                         // 228: google.fhir.dstu2.proto.HealthcareService.AvailableTime
	(*HealthcareService_NotAvailable)(nil),                          // 229: google.fhir.dstu2.proto.HealthcareService.NotAvailable
	(*ImagingObjectSelection_Study)(nil),                            // 230: google.fhir.dstu2.proto.ImagingObjectSelection.Study
	(*ImagingObjectSelection_Study_Series)(nil),                     // 231: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series
	(*ImagingObjectSelection_Study_Series_Instance)(nil),            // 232: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance
	(*ImagingObjectSelection_Study_Series_Instance_Frames)(nil),     // 233: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.Frames
	(*ImagingStudy_Series)(nil),                                     // 234: google.fhir.dstu2.proto.ImagingStudy.Series
	(*ImagingStudy_Series_Instance)(nil),                            // 235: google.fhir.dstu2.proto.ImagingStudy.Series.Instance
	(*Immunization_Explanation)(nil),                                // 236: google.fhir.dstu2.proto.Immunization.Explanation
	(*Immunization_Reaction)(nil),                                   // 237: google.fhir.dstu2.proto.Immunization.Reaction
	(*Immunization_VaccinationProtocol)(nil),                        // 238: google.fhir.dstu2.proto.Immunization.VaccinationProtocol
	(*ImmunizationRecommendation_Recommendation)(nil),               // 239: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation
	(*ImmunizationRecommendation_Recommendation_DateCriterion)(nil), // 240: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.DateCriterion
	(*ImmunizationRecommendation_Recommendation_Protocol)(nil),      // 241: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.Protocol
	(*ImplementationGuide_Contact)(nil),                             // 242: google.fhir.dstu2.proto.ImplementationGuide.Contact
	(*ImplementationGuide_Dependency)(nil),                          // 243: google.fhir.dstu2.proto.ImplementationGuide.Dependency
	(*ImplementationGuide_Package)(nil),                             // 244: google.fhir.dstu2.proto.ImplementationGuide.Package
	(*ImplementationGuide_Global)(nil),                              // 245: google.fhir.dstu2.proto.ImplementationGuide.Global
	(*ImplementationGuide_Page)(nil),                                // 246: google.fhir.dstu2.proto.ImplementationGuide.Page
	(*ImplementationGuide_Package_Resource)(nil),                    // 247: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource
	(*ImplementationGuide_Package_Resource_Source)(nil),             // 248: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.Source
	(*List_Entry)(nil),                                              // 249: google.fhir.dstu2.proto.List.Entry
	(*Location_Position)(nil),                                       // 250: google.fhir.dstu2.proto.Location.Position
	(*Medication_Product)(nil),                                      // 251: google.fhir.dstu2.proto.Medication.Product
	(*Medication_Package)(nil),                                      // 252: google.fhir.dstu2.proto.Medication.Package
	(*Medication_Product_Ingredient)(nil),                           // 253: google.fhir.dstu2.proto.Medication.Product.Ingredient
	(*Medication_Product_Batch)(nil),                                // 254: google.fhir.dstu2.proto.Medication.Product.Batch
	(*Medication_Package_Content)(nil),                              // 255: google.fhir.dstu2.proto.Medication.Package.Content
	(*MedicationAdministration_EffectiveTime)(nil),                  // 256: google.fhir.dstu2.proto.MedicationAdministration.EffectiveTime
	(*MedicationAdministration_Medication)(nil),                     // 257: google.fhir.dstu2.proto.MedicationAdministration.Medication
	(*MedicationAdministration_Dosage)(nil),                         // 258: google.fhir.dstu2.proto.MedicationAdministration.Dosage
	(*MedicationAdministration_Dosage_Site)(nil),                    // 259: google.fhir.dstu2.proto.MedicationAdministration.Dosage.Site
	(*MedicationAdministration_Dosage_Rate)(nil),                    // 260: google.fhir.dstu2.proto.MedicationAdministration.Dosage.Rate
	(*MedicationDispense_Medication)(nil),                           // 261: google.fhir.dstu2.proto.MedicationDispense.Medication
	(*MedicationDispense_DosageInstruction)(nil),                    // 262: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction
	(*MedicationDispense_Substitution)(nil),                         // 263: google.fhir.dstu2.proto.MedicationDispense.Substitution
	(*MedicationDispense_DosageInstruction_AsNeeded)(nil),           // 264: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.AsNeeded
	(*MedicationDispense_DosageInstruction_Site)(nil),               // 265: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Site
	(*MedicationDispense_DosageInstruction_Dose)(nil),               // 266: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Dose
	(*MedicationDispense_DosageInstruction_Rate)(nil),               // 267: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Rate
	(*MedicationOrder_Reason)(nil),                                  // 268: google.fhir.dstu2.proto.MedicationOrder.Reason
	(*MedicationOrder_Medication)(nil),                              // 269: google.fhir.dstu2.proto.MedicationOrder.Medication
	(*MedicationOrder_DosageInstruction)(nil),                       // 270: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction
	(*MedicationOrder_DispenseRequest)(nil),                         // 271: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest
	(*MedicationOrder_Substitution)(nil),                            // 272: google.fhir.dstu2.proto.MedicationOrder.Substitution
	(*MedicationOrder_DosageInstruction_AsNeeded)(nil),              // 273: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.AsNeeded
	(*MedicationOrder_DosageInstruction_Site)(nil),                  // 274: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Site
	(*MedicationOrder_DosageInstruction_Dose)(nil),                  // 275: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Dose
	(*MedicationOrder_DosageInstruction_Rate)(nil),                  // 276: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Rate
	(*MedicationOrder_DispenseRequest_Medication)(nil),              // 277: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.Medication
	(*MedicationStatement_ReasonForUse)(nil),                        // 278: google.fhir.dstu2.proto.MedicationStatement.ReasonForUse
	(*MedicationStatement_Effective)(nil),                           // 279: google.fhir.dstu2.proto.MedicationStatement.Effective
	(*MedicationStatement_Medication)(nil),                          // 280: google.fhir.dstu2.proto.MedicationStatement.Medication
	(*MedicationStatement_Dosage)(nil),                              // 281: google.fhir.dstu2.proto.MedicationStatement.Dosage
	(*MedicationStatement_Dosage_AsNeeded)(nil),                     // 282: google.fhir.dstu2.proto.MedicationStatement.Dosage.AsNeeded
	(*MedicationStatement_Dosage_Site)(nil),                         // 283: google.fhir.dstu2.proto.MedicationStatement.Dosage.Site
	(*MedicationStatement_Dosage_Quantity)(nil),                     // 284: google.fhir.dstu2.proto.MedicationStatement.Dosage.Quantity
	(*MedicationStatement_Dosage_Rate)(nil),                         // 285: google.fhir.dstu2.proto.MedicationStatement.Dosage.Rate
	(*MessageHeader_Response)(nil),                                  // 286: google.fhir.dstu2.proto.MessageHeader.Response
	(*MessageHeader_Source)(nil),                                    // 287: google.fhir.dstu2.proto.MessageHeader.Source
	(*MessageHeader_Destination)(nil),                               // 288: google.fhir.dstu2.proto.MessageHeader.Destination
	(*NamingSystem_Contact)(nil),                                    // 289: google.fhir.dstu2.proto.NamingSystem.Contact
	(*NamingSystem_UniqueId)(nil),                                   // 290: google.fhir.dstu2.proto.NamingSystem.UniqueId
	(*NutritionOrder_OralDiet)(nil),                                 // 291: google.fhir.dstu2.proto.NutritionOrder.OralDiet
	(*NutritionOrder_Supplement)(nil),                               // 292: google.fhir.dstu2.proto.NutritionOrder.Supplement
	(*NutritionOrder_EnteralFormula)(nil),                           // 293: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula
	(*NutritionOrder_OralDiet_Nutrient)(nil),                        // 294: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Nutrient
	(*NutritionOrder_OralDiet_Texture)(nil),                         // 295: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Texture
	(*NutritionOrder_EnteralFormula_Administration)(nil),            // 296: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration
	(*NutritionOrder_EnteralFormula_Administration_Rate)(nil),       // 297: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.Rate
	(*Observation_Effective)(nil),                                   // 298: google.fhir.dstu2.proto.Observation.Effective
	(*Observation_Value)(nil),                                       // 299: google.fhir.dstu2.proto.Observation.Value
	(*Observation_ReferenceRange)(nil),                              // 300: google.fhir.dstu2.proto.Observation.ReferenceRange
	(*Observation_Related)(nil),                                     // 301: google.fhir.dstu2.proto.Observation.Related
	(*Observation_Component)(nil),                                   // 302: google.fhir.dstu2.proto.Observation.Component
	(*Observation_Component_Value)(nil),                             // 303: google.fhir.dstu2.proto.Observation.Component.Value
	(*OperationDefinition_Contact)(nil),                             // 304: google.fhir.dstu2.proto.OperationDefinition.Contact
	(*OperationDefinition_Parameter)(nil),                           // 305: google.fhir.dstu2.proto.OperationDefinition.Parameter
	(*OperationDefinition_Parameter_Binding)(nil),                   // 306: google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding
	(*OperationDefinition_Parameter_Binding_ValueSet)(nil),          // 307: google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding.ValueSet
	(*OperationOutcome_Issue)(nil),                                  // 308: google.fhir.dstu2.proto.OperationOutcome.Issue
	(*Order_Reason)(nil),                                            // 309: google.fhir.dstu2.proto.Order.Reason
	(*Order_When)(nil),                                              // 310: google.fhir.dstu2.proto.Order.When
	(*Organization_Contact)(nil),                                    // 311: google.fhir.dstu2.proto.Organization.Contact
	(*Parameters_Parameter)(nil),                                    // 312: google.fhir.dstu2.proto.Parameters.Parameter
	(*Parameters_Parameter_Value)(nil),                              // 313: google.fhir.dstu2.proto.Parameters.Parameter.Value
	(*Patient_Deceased)(nil),                                        // 314: google.fhir.dstu2.proto.Patient.Deceased
	(*Patient_MultipleBirth)(nil),                                   // 315: google.fhir.dstu2.proto.Patient.MultipleBirth
	(*Patient_Contact)(nil),                                         // 316: google.fhir.dstu2.proto.Patient.Contact
	(*Patient_Animal)(nil),                                          // 317: google.fhir.dstu2.proto.Patient.Animal
	(*Patient_Communication)(nil),                                   // 318: google.fhir.dstu2.proto.Patient.Communication
	(*Patient_Link)(nil),                                            // 319: google.fhir.dstu2.proto.Patient.Link
	(*PaymentReconciliation_Detail)(nil),                            // 320: google.fhir.dstu2.proto.PaymentReconciliation.Detail
	(*PaymentReconciliation_Note)(nil),                              // 321: google.fhir.dstu2.proto.PaymentReconciliation.Note
	(*Person_Link)(nil),                                             // 322: google.fhir.dstu2.proto.Person.Link
	(*Practitioner_PractitionerRole)(nil),                           // 323: google.fhir.dstu2.proto.Practitioner.PractitionerRole
	(*Practitioner_Qualification)(nil),                              // 324: google.fhir.dstu2.proto.Practitioner.Qualification
	(*Procedure_Reason)(nil),                                        // 325: google.fhir.dstu2.proto.Procedure.Reason
	(*Procedure_Performer)(nil),                                     // 326: google.fhir.dstu2.proto.Procedure.Performer
	(*Procedure_Performed)(nil),                                     // 327: google.fhir.dstu2.proto.Procedure.Performed
	(*Procedure_FocalDevice)(nil),                                   // 328: google.fhir.dstu2.proto.Procedure.FocalDevice
	(*ProcedureRequest_Reason)(nil),                                 // 329: google.fhir.dstu2.proto.ProcedureRequest.Reason
	(*ProcedureRequest_Scheduled)(nil),                              // 330: google.fhir.dstu2.proto.ProcedureRequest.Scheduled
	(*ProcedureRequest_AsNeeded)(nil),                               // 331: google.fhir.dstu2.proto.ProcedureRequest.AsNeeded
	(*ProcessRequest_Item)(nil),                                     // 332: google.fhir.dstu2.proto.ProcessRequest.Item
	(*ProcessResponse_Notes)(nil),                                   // 333: google.fhir.dstu2.proto.ProcessResponse.Notes
	(*Provenance_Agent)(nil),                                        // 334: google.fhir.dstu2.proto.Provenance.Agent
	(*Provenance_Entity)(nil),                                       // 335: google.fhir.dstu2.proto.Provenance.Entity
	(*Provenance_Agent_RelatedAgent)(nil),                           // 336: google.fhir.dstu2.proto.Provenance.Agent.RelatedAgent
	(*Questionnaire_Group)(nil),                                     // 337: google.fhir.dstu2.proto.Questionnaire.Group
	(*Questionnaire_Group_Question)(nil),                            // 338: google.fhir.dstu2.proto.Questionnaire.Group.Question
	(*QuestionnaireResponse_Group)(nil),                             // 339: google.fhir.dstu2.proto.QuestionnaireResponse.Group
	(*QuestionnaireResponse_Group_Question)(nil),                    // 340: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question
	(*QuestionnaireResponse_Group_Question_Answer)(nil),             // 341: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer
	(*QuestionnaireResponse_Group_Question_Answer_Value)(nil),       // 342: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value
	(*RiskAssessment_Prediction)(nil),                               // 343: google.fhir.dstu2.proto.RiskAssessment.Prediction
	(*RiskAssessment_Prediction_Probability)(nil),                   // 344: google.fhir.dstu2.proto.RiskAssessment.Prediction.Probability
	(*RiskAssessment_Prediction_When)(nil),                          // 345: google.fhir.dstu2.proto.RiskAssessment.Prediction.When
	(*SearchParameter_Contact)(nil),                                 // 346: google.fhir.dstu2.proto.SearchParameter.Contact
	(*Specimen_Collection)(nil),                                     // 347: google.fhir.dstu2.proto.Specimen.Collection
	(*Specimen_Treatment)(nil),                                      // 348: google.fhir.dstu2.proto.Specimen.Treatment
	(*Specimen_Container)(nil),                                      // 349: google.fhir.dstu2.proto.Specimen.Container
	(*Specimen_Collection_Collected)(nil),                           // 350: google.fhir.dstu2.proto.Specimen.Collection.Collected
	(*Specimen_Container_Additive)(nil),                             // 351: google.fhir.dstu2.proto.Specimen.Container.Additive
	(*StructureDefinition_Contact)(nil),                             // 352: google.fhir.dstu2.proto.StructureDefinition.Contact
	(*StructureDefinition_Mapping)(nil),                             // 353: google.fhir.dstu2.proto.StructureDefinition.Mapping
	(*StructureDefinition_Snapshot)(nil),                            // 354: google.fhir.dstu2.proto.StructureDefinition.Snapshot
	(*StructureDefinition_Differential)(nil),                        // 355: google.fhir.dstu2.proto.StructureDefinition.Differential
	(*Subscription_Channel)(nil),                                    // 356: google.fhir.dstu2.proto.Subscription.Channel
	(*Substance_Instance)(nil),                                      // 357: google.fhir.dstu2.proto.Substance.Instance
	(*Substance_Ingredient)(nil),                                    // 358: google.fhir.dstu2.proto.Substance.Ingredient
	(*SupplyRequest_Reason)(nil),                                    // 359: google.fhir.dstu2.proto.SupplyRequest.Reason
	(*SupplyRequest_When)(nil),                                      // 360: google.fhir.dstu2.proto.SupplyRequest.When
	(*TestScript_Contact)(nil),                                      // 361: google.fhir.dstu2.proto.TestScript.Contact
	(*TestScript_Metadata)(nil),                                     // 362: google.fhir.dstu2.proto.TestScript.Metadata
	(*TestScript_Fixture)(nil),                                      // 363: google.fhir.dstu2.proto.TestScript.Fixture
	(*TestScript_Variable)(nil),                                     // 364: google.fhir.dstu2.proto.TestScript.Variable
	(*TestScript_Setup)(nil),                                        // 365: google.fhir.dstu2.proto.TestScript.Setup
	(*TestScript_Test)(nil),                                         // 366: google.fhir.dstu2.proto.TestScript.Test
	(*TestScript_Teardown)(nil),                                     // 367: google.fhir.dstu2.proto.TestScript.Teardown
	(*TestScript_Metadata_Link)(nil),                                // 368: google.fhir.dstu2.proto.TestScript.Metadata.Link
	(*TestScript_Metadata_Capability)(nil),                          // 369: google.fhir.dstu2.proto.TestScript.Metadata.Capability
	(*TestScript_Setup_Action)(nil),                                 // 370: google.fhir.dstu2.proto.TestScript.Setup.Action
	(*TestScript_Setup_Action_Operation)(nil),                       // 371: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation
	(*TestScript_Setup_Action_Assert)(nil),                          // 372: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert
	(*TestScript_Setup_Action_Operation_RequestHeader)(nil),         // 373: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.RequestHeader
	(*TestScript_Test_Action)(nil),                                  // 374: google.fhir.dstu2.proto.TestScript.Test.Action
	(*TestScript_Teardown_Action)(nil),                              // 375: google.fhir.dstu2.proto.TestScript.Teardown.Action
	(*ValueSet_Contact)(nil),                                        // 376: google.fhir.dstu2.proto.ValueSet.Contact
	(*ValueSet_CodeSystem)(nil),                                     // 377: google.fhir.dstu2.proto.ValueSet.CodeSystem
	(*ValueSet_Compose)(nil),                                        // 378: google.fhir.dstu2.proto.ValueSet.Compose
	(*ValueSet_Expansion)(nil),                                      // 379: google.fhir.dstu2.proto.ValueSet.Expansion
	(*ValueSet_CodeSystem_Concept)(nil),                             // 380: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept
	(*ValueSet_CodeSystem_Concept_Designation)(nil),                 // 381: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.Designation
	(*ValueSet_Compose_Include)(nil),                                // 382: google.fhir.dstu2.proto.ValueSet.Compose.Include
	(*ValueSet_Compose_Include_Concept)(nil),                        // 383: google.fhir.dstu2.proto.ValueSet.Compose.Include.Concept
	(*ValueSet_Compose_Include_Filter)(nil),                         // 384: google.fhir.dstu2.proto.ValueSet.Compose.Include.Filter
	(*ValueSet_Expansion_Parameter)(nil),                            // 385: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter
	(*ValueSet_Expansion_Contains)(nil),                             // 386: google.fhir.dstu2.proto.ValueSet.Expansion.Contains
	(*ValueSet_Expansion_Parameter_Value)(nil),                      // 387: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.Value
	(*VisionPrescription_Reason)(nil),                               // 388: google.fhir.dstu2.proto.VisionPrescription.Reason
	(*VisionPrescription_Dispense)(nil),                             // 389: google.fhir.dstu2.proto.VisionPrescription.Dispense
	(*datatypes_go_proto.Id)(nil),                                   // 390: google.fhir.dstu2.proto.Id
	(*datatypes_go_proto.Meta)(nil),                                 // 391: google.fhir.dstu2.proto.Meta
	(*datatypes_go_proto.Uri)(nil),                                  // 392: google.fhir.dstu2.proto.Uri
	(*datatypes_go_proto.AllLanguageCode)(nil),                      // 393: google.fhir.dstu2.proto.AllLanguageCode
	(*metadatatypes_go_proto.Narrative)(nil),                        // 394: google.fhir.dstu2.proto.Narrative
	(*datatypes_go_proto.Extension)(nil),                            // 395: google.fhir.dstu2.proto.Extension
	(*datatypes_go_proto.Identifier)(nil),                           // 396: google.fhir.dstu2.proto.Identifier
	(*datatypes_go_proto.String)(nil),                               // 397: google.fhir.dstu2.proto.String
	(*datatypes_go_proto.CodeableConcept)(nil),                      // 398: google.fhir.dstu2.proto.CodeableConcept
	(*datatypes_go_proto.Code)(nil),                                 // 399: google.fhir.dstu2.proto.Code
	(*datatypes_go_proto.Period)(nil),                               // 400: google.fhir.dstu2.proto.Period
	(*datatypes_go_proto.Coding)(nil),                               // 401: google.fhir.dstu2.proto.Coding
	(*datatypes_go_proto.Money)(nil),                                // 402: google.fhir.dstu2.proto.Money
	(*datatypes_go_proto.Reference)(nil),                            // 403: google.fhir.dstu2.proto.Reference
	(*datatypes_go_proto.DateTime)(nil),                             // 404: google.fhir.dstu2.proto.DateTime
	(*codes_go_proto.AllergyIntoleranceStatusCode)(nil),             // 405: google.fhir.dstu2.proto.AllergyIntoleranceStatusCode
	(*codes_go_proto.AllergyIntoleranceCriticalityCode)(nil),        // 406: google.fhir.dstu2.proto.AllergyIntoleranceCriticalityCode
	(*codes_go_proto.AllergyIntoleranceTypeCode)(nil),               // 407: google.fhir.dstu2.proto.AllergyIntoleranceTypeCode
	(*codes_go_proto.AllergyIntoleranceCategoryCode)(nil),           // 408: google.fhir.dstu2.proto.AllergyIntoleranceCategoryCode
	(*datatypes_go_proto.Annotation)(nil),                           // 409: google.fhir.dstu2.proto.Annotation
	(*codes_go_proto.AppointmentStatusCode)(nil),                    // 410: google.fhir.dstu2.proto.AppointmentStatusCode
	(*datatypes_go_proto.UnsignedInt)(nil),                          // 411: google.fhir.dstu2.proto.UnsignedInt
	(*datatypes_go_proto.Instant)(nil),                              // 412: google.fhir.dstu2.proto.Instant
	(*datatypes_go_proto.PositiveInt)(nil),                          // 413: google.fhir.dstu2.proto.PositiveInt
	(*codes_go_proto.ParticipantStatusCode)(nil),                    // 414: google.fhir.dstu2.proto.ParticipantStatusCode
	(*datatypes_go_proto.Date)(nil),                                 // 415: google.fhir.dstu2.proto.Date
	(*datatypes_go_proto.MimeTypeCode)(nil),                         // 416: google.fhir.dstu2.proto.MimeTypeCode
	(*datatypes_go_proto.Base64Binary)(nil),                         // 417: google.fhir.dstu2.proto.Base64Binary
	(*datatypes_go_proto.Attachment)(nil),                           // 418: google.fhir.dstu2.proto.Attachment
	(*codes_go_proto.BundleTypeCode)(nil),                           // 419: google.fhir.dstu2.proto.BundleTypeCode
	(*datatypes_go_proto.Signature)(nil),                            // 420: google.fhir.dstu2.proto.Signature
	(*codes_go_proto.CarePlanStatusCode)(nil),                       // 421: google.fhir.dstu2.proto.CarePlanStatusCode
	(*codes_go_proto.ClaimTypeCode)(nil),                            // 422: google.fhir.dstu2.proto.ClaimTypeCode
	(*codes_go_proto.UseCode)(nil),                                  // 423: google.fhir.dstu2.proto.UseCode
	(*codes_go_proto.RemittanceOutcomeCode)(nil),                    // 424: google.fhir.dstu2.proto.RemittanceOutcomeCode
	(*codes_go_proto.ClinicalImpressionStatusCode)(nil),             // 425: google.fhir.dstu2.proto.ClinicalImpressionStatusCode
	(*codes_go_proto.CommunicationStatusCode)(nil),                  // 426: google.fhir.dstu2.proto.CommunicationStatusCode
	(*codes_go_proto.CommunicationRequestStatusCode)(nil),           // 427: google.fhir.dstu2.proto.CommunicationRequestStatusCode
	(*codes_go_proto.CompositionStatusCode)(nil),                    // 428: google.fhir.dstu2.proto.CompositionStatusCode
	(*codes_go_proto.ConfidentialityClassificationCode)(nil),        // 429: google.fhir.dstu2.proto.ConfidentialityClassificationCode
	(*codes_go_proto.ConformanceResourceStatusCode)(nil),            // 430: google.fhir.dstu2.proto.ConformanceResourceStatusCode
	(*datatypes_go_proto.Boolean)(nil),                              // 431: google.fhir.dstu2.proto.Boolean
	(*codes_go_proto.ConditionVerificationStatusCode)(nil),          // 432: google.fhir.dstu2.proto.ConditionVerificationStatusCode
	(*codes_go_proto.ConformanceStatementKindCode)(nil),             // 433: google.fhir.dstu2.proto.ConformanceStatementKindCode
	(*codes_go_proto.UnknownContentCodeCode)(nil),                   // 434: google.fhir.dstu2.proto.UnknownContentCodeCode
	(*codes_go_proto.DataElementStringencyCode)(nil),                // 435: google.fhir.dstu2.proto.DataElementStringencyCode
	(*metadatatypes_go_proto.ElementDefinition)(nil),                // 436: google.fhir.dstu2.proto.ElementDefinition
	(*codes_go_proto.DetectedIssueSeverityCode)(nil),                // 437: google.fhir.dstu2.proto.DetectedIssueSeverityCode
	(*codes_go_proto.DeviceStatusCode)(nil),                         // 438: google.fhir.dstu2.proto.DeviceStatusCode
	(*datatypes_go_proto.ContactPoint)(nil),                         // 439: google.fhir.dstu2.proto.ContactPoint
	(*codes_go_proto.MeasmntPrincipleCode)(nil),                     // 440: google.fhir.dstu2.proto.MeasmntPrincipleCode
	(*codes_go_proto.DeviceMetricOperationalStatusCode)(nil),        // 441: google.fhir.dstu2.proto.DeviceMetricOperationalStatusCode
	(*codes_go_proto.DeviceMetricColorCode)(nil),                    // 442: google.fhir.dstu2.proto.DeviceMetricColorCode
	(*codes_go_proto.DeviceMetricCategoryCode)(nil),                 // 443: google.fhir.dstu2.proto.DeviceMetricCategoryCode
	(*datatypes_go_proto.Timing)(nil),                               // 444: google.fhir.dstu2.proto.Timing
	(*codes_go_proto.DeviceUseRequestStatusCode)(nil),               // 445: google.fhir.dstu2.proto.DeviceUseRequestStatusCode
	(*codes_go_proto.DeviceUseRequestPriorityCode)(nil),             // 446: google.fhir.dstu2.proto.DeviceUseRequestPriorityCode
	(*codes_go_proto.DiagnosticOrderStatusCode)(nil),                // 447: google.fhir.dstu2.proto.DiagnosticOrderStatusCode
	(*codes_go_proto.DiagnosticOrderPriorityCode)(nil),              // 448: google.fhir.dstu2.proto.DiagnosticOrderPriorityCode
	(*codes_go_proto.DiagnosticReportStatusCode)(nil),               // 449: google.fhir.dstu2.proto.DiagnosticReportStatusCode
	(*codes_go_proto.DocumentReferenceStatusCode)(nil),              // 450: google.fhir.dstu2.proto.DocumentReferenceStatusCode
	(*codes_go_proto.EncounterStateCode)(nil),                       // 451: google.fhir.dstu2.proto.EncounterStateCode
	(*codes_go_proto.EncounterClassCode)(nil),                       // 452: google.fhir.dstu2.proto.EncounterClassCode
	(*datatypes_go_proto.Duration)(nil),                             // 453: google.fhir.dstu2.proto.Duration
	(*codes_go_proto.EpisodeOfCareStatusCode)(nil),                  // 454: google.fhir.dstu2.proto.EpisodeOfCareStatusCode
	(*codes_go_proto.FamilyHistoryStatusCode)(nil),                  // 455: google.fhir.dstu2.proto.FamilyHistoryStatusCode
	(*codes_go_proto.AdministrativeGenderCode)(nil),                 // 456: google.fhir.dstu2.proto.AdministrativeGenderCode
	(*codes_go_proto.FlagStatusCode)(nil),                           // 457: google.fhir.dstu2.proto.FlagStatusCode
	(*codes_go_proto.GoalStatusCode)(nil),                           // 458: google.fhir.dstu2.proto.GoalStatusCode
	(*codes_go_proto.GroupTypeCode)(nil),                            // 459: google.fhir.dstu2.proto.GroupTypeCode
	(*datatypes_go_proto.Oid)(nil),                                  // 460: google.fhir.dstu2.proto.Oid
	(*codes_go_proto.InstanceAvailabilityCode)(nil),                 // 461: google.fhir.dstu2.proto.InstanceAvailabilityCode
	(*codes_go_proto.MedicationAdministrationStatusCode)(nil),       // 462: google.fhir.dstu2.proto.MedicationAdministrationStatusCode
	(*datatypes_go_proto.SimpleQuantity)(nil),                       // 463: google.fhir.dstu2.proto.SimpleQuantity
	(*codes_go_proto.ListStatusCode)(nil),                           // 464: google.fhir.dstu2.proto.ListStatusCode
	(*codes_go_proto.ListModeCode)(nil),                             // 465: google.fhir.dstu2.proto.ListModeCode
	(*codes_go_proto.LocationStatusCode)(nil),                       // 466: google.fhir.dstu2.proto.LocationStatusCode
	(*codes_go_proto.LocationModeCode)(nil),                         // 467: google.fhir.dstu2.proto.LocationModeCode
	(*datatypes_go_proto.Address)(nil),                              // 468: google.fhir.dstu2.proto.Address
	(*codes_go_proto.DigitalMediaTypeCode)(nil),                     // 469: google.fhir.dstu2.proto.DigitalMediaTypeCode
	(*codes_go_proto.MedicationDispenseStatusCode)(nil),             // 470: google.fhir.dstu2.proto.MedicationDispenseStatusCode
	(*codes_go_proto.MedicationOrderStatusCode)(nil),                // 471: google.fhir.dstu2.proto.MedicationOrderStatusCode
	(*codes_go_proto.MedicationStatementStatusCode)(nil),            // 472: google.fhir.dstu2.proto.MedicationStatementStatusCode
	(*codes_go_proto.NamingSystemTypeCode)(nil),                     // 473: google.fhir.dstu2.proto.NamingSystemTypeCode
	(*codes_go_proto.NutritionOrderStatusCode)(nil),                 // 474: google.fhir.dstu2.proto.NutritionOrderStatusCode
	(*codes_go_proto.ObservationStatusCode)(nil),                    // 475: google.fhir.dstu2.proto.ObservationStatusCode
	(*codes_go_proto.OperationKindCode)(nil),                        // 476: google.fhir.dstu2.proto.OperationKindCode
	(*codes_go_proto.ResourceTypeCode)(nil),                         // 477: google.fhir.dstu2.proto.ResourceTypeCode
	(*codes_go_proto.OrderStatusCode)(nil),                          // 478: google.fhir.dstu2.proto.OrderStatusCode
	(*datatypes_go_proto.HumanName)(nil),                            // 479: google.fhir.dstu2.proto.HumanName
	(*codes_go_proto.ProcedureStatusCode)(nil),                      // 480: google.fhir.dstu2.proto.ProcedureStatusCode
	(*codes_go_proto.ProcedureRequestStatusCode)(nil),               // 481: google.fhir.dstu2.proto.ProcedureRequestStatusCode
	(*codes_go_proto.ProcedureRequestPriorityCode)(nil),             // 482: google.fhir.dstu2.proto.ProcedureRequestPriorityCode
	(*codes_go_proto.ActionListCode)(nil),                           // 483: google.fhir.dstu2.proto.ActionListCode
	(*codes_go_proto.QuestionnaireStatusCode)(nil),                  // 484: google.fhir.dstu2.proto.QuestionnaireStatusCode
	(*codes_go_proto.QuestionnaireResponseStatusCode)(nil),          // 485: google.fhir.dstu2.proto.QuestionnaireResponseStatusCode
	(*codes_go_proto.ReferralStatusCode)(nil),                       // 486: google.fhir.dstu2.proto.ReferralStatusCode
	(*codes_go_proto.SearchParamTypeCode)(nil),                      // 487: google.fhir.dstu2.proto.SearchParamTypeCode
	(*codes_go_proto.XPathUsageTypeCode)(nil),                       // 488: google.fhir.dstu2.proto.XPathUsageTypeCode
	(*codes_go_proto.SlotStatusCode)(nil),                           // 489: google.fhir.dstu2.proto.SlotStatusCode
	(*codes_go_proto.SpecimenStatusCode)(nil),                       // 490: google.fhir.dstu2.proto.SpecimenStatusCode
	(*codes_go_proto.StructureDefinitionKindCode)(nil),              // 491: google.fhir.dstu2.proto.StructureDefinitionKindCode
	(*codes_go_proto.FHIRDefinedTypeCode)(nil),                      // 492: google.fhir.dstu2.proto.FHIRDefinedTypeCode
	(*codes_go_proto.ExtensionContextCode)(nil),                     // 493: google.fhir.dstu2.proto.ExtensionContextCode
	(*codes_go_proto.SubscriptionStatusCode)(nil),                   // 494: google.fhir.dstu2.proto.SubscriptionStatusCode
	(*codes_go_proto.SupplyDeliveryStatusCode)(nil),                 // 495: google.fhir.dstu2.proto.SupplyDeliveryStatusCode
	(*codes_go_proto.SupplyRequestStatusCode)(nil),                  // 496: google.fhir.dstu2.proto.SupplyRequestStatusCode
	(*codes_go_proto.AllergyIntoleranceCertaintyCode)(nil),          // 497: google.fhir.dstu2.proto.AllergyIntoleranceCertaintyCode
	(*codes_go_proto.AllergyIntoleranceSeverityCode)(nil),           // 498: google.fhir.dstu2.proto.AllergyIntoleranceSeverityCode
	(*codes_go_proto.ParticipantRequiredCode)(nil),                  // 499: google.fhir.dstu2.proto.ParticipantRequiredCode
	(*codes_go_proto.ParticipationStatusCode)(nil),                  // 500: google.fhir.dstu2.proto.ParticipationStatusCode
	(*codes_go_proto.AuditEventActionCode)(nil),                     // 501: google.fhir.dstu2.proto.AuditEventActionCode
	(*codes_go_proto.AuditEventOutcomeCode)(nil),                    // 502: google.fhir.dstu2.proto.AuditEventOutcomeCode
	(*codes_go_proto.AuditEventAgentNetworkTypeCode)(nil),           // 503: google.fhir.dstu2.proto.AuditEventAgentNetworkTypeCode
	(*codes_go_proto.SearchEntryModeCode)(nil),                      // 504: google.fhir.dstu2.proto.SearchEntryModeCode
	(*datatypes_go_proto.Decimal)(nil),                              // 505: google.fhir.dstu2.proto.Decimal
	(*codes_go_proto.HTTPVerbCode)(nil),                             // 506: google.fhir.dstu2.proto.HTTPVerbCode
	(*codes_go_proto.CarePlanRelationshipCode)(nil),                 // 507: google.fhir.dstu2.proto.CarePlanRelationshipCode
	(*codes_go_proto.CarePlanActivityStatusCode)(nil),               // 508: google.fhir.dstu2.proto.CarePlanActivityStatusCode
	(*codes_go_proto.CompositionAttestationModeCode)(nil),           // 509: google.fhir.dstu2.proto.CompositionAttestationModeCode
	(*codes_go_proto.ConceptMapEquivalenceCode)(nil),                // 510: google.fhir.dstu2.proto.ConceptMapEquivalenceCode
	(*datatypes_go_proto.Age)(nil),                                  // 511: google.fhir.dstu2.proto.Age
	(*datatypes_go_proto.Range)(nil),                                // 512: google.fhir.dstu2.proto.Range
	(*codes_go_proto.RestfulConformanceModeCode)(nil),               // 513: google.fhir.dstu2.proto.RestfulConformanceModeCode
	(*codes_go_proto.TransactionModeCode)(nil),                      // 514: google.fhir.dstu2.proto.TransactionModeCode
	(*codes_go_proto.DocumentModeCode)(nil),                         // 515: google.fhir.dstu2.proto.DocumentModeCode
	(*codes_go_proto.ResourceVersionPolicyCode)(nil),                // 516: google.fhir.dstu2.proto.ResourceVersionPolicyCode
	(*codes_go_proto.ConditionalDeleteStatusCode)(nil),              // 517: google.fhir.dstu2.proto.ConditionalDeleteStatusCode
	(*codes_go_proto.SystemRestfulInteractionCode)(nil),             // 518: google.fhir.dstu2.proto.SystemRestfulInteractionCode
	(*codes_go_proto.TypeRestfulInteractionCode)(nil),               // 519: google.fhir.dstu2.proto.TypeRestfulInteractionCode
	(*codes_go_proto.SearchModifierCodeCode)(nil),                   // 520: google.fhir.dstu2.proto.SearchModifierCodeCode
	(*codes_go_proto.MessageSignificanceCategoryCode)(nil),          // 521: google.fhir.dstu2.proto.MessageSignificanceCategoryCode
	(*codes_go_proto.ConformanceEventModeCode)(nil),                 // 522: google.fhir.dstu2.proto.ConformanceEventModeCode
	(*codes_go_proto.DeviceMetricCalibrationTypeCode)(nil),          // 523: google.fhir.dstu2.proto.DeviceMetricCalibrationTypeCode
	(*codes_go_proto.DeviceMetricCalibrationStateCode)(nil),         // 524: google.fhir.dstu2.proto.DeviceMetricCalibrationStateCode
	(*codes_go_proto.DocumentRelationshipTypeCode)(nil),             // 525: google.fhir.dstu2.proto.DocumentRelationshipTypeCode
	(*codes_go_proto.EncounterLocationStatusCode)(nil),              // 526: google.fhir.dstu2.proto.EncounterLocationStatusCode
	(*datatypes_go_proto.Quantity)(nil),                             // 527: google.fhir.dstu2.proto.Quantity
	(*codes_go_proto.DaysOfWeekCode)(nil),                           // 528: google.fhir.dstu2.proto.DaysOfWeekCode
	(*datatypes_go_proto.Time)(nil),                                 // 529: google.fhir.dstu2.proto.Time
	(*datatypes_go_proto.Integer)(nil),                              // 530: google.fhir.dstu2.proto.Integer
	(*codes_go_proto.GuideDependencyTypeCode)(nil),                  // 531: google.fhir.dstu2.proto.GuideDependencyTypeCode
	(*codes_go_proto.GuidePageKindCode)(nil),                        // 532: google.fhir.dstu2.proto.GuidePageKindCode
	(*codes_go_proto.GuideResourcePurposeCode)(nil),                 // 533: google.fhir.dstu2.proto.GuideResourcePurposeCode
	(*datatypes_go_proto.Ratio)(nil),                                // 534: google.fhir.dstu2.proto.Ratio
	(*codes_go_proto.ResponseTypeCode)(nil),                         // 535: google.fhir.dstu2.proto.ResponseTypeCode
	(*codes_go_proto.NamingSystemIdentifierTypeCode)(nil),           // 536: google.fhir.dstu2.proto.NamingSystemIdentifierTypeCode
	(*datatypes_go_proto.SampledData)(nil),                          // 537: google.fhir.dstu2.proto.SampledData
	(*codes_go_proto.ObservationRelationshipTypeCode)(nil),          // 538: google.fhir.dstu2.proto.ObservationRelationshipTypeCode
	(*codes_go_proto.OperationParameterUseCode)(nil),                // 539: google.fhir.dstu2.proto.OperationParameterUseCode
	(*codes_go_proto.BindingStrengthCode)(nil),                      // 540: google.fhir.dstu2.proto.BindingStrengthCode
	(*codes_go_proto.IssueSeverityCode)(nil),                        // 541: google.fhir.dstu2.proto.IssueSeverityCode
	(*codes_go_proto.IssueTypeCode)(nil),                            // 542: google.fhir.dstu2.proto.IssueTypeCode
	(*datatypes_go_proto.Markdown)(nil),                             // 543: google.fhir.dstu2.proto.Markdown
	(*codes_go_proto.LinkTypeCode)(nil),                             // 544: google.fhir.dstu2.proto.LinkTypeCode
	(*codes_go_proto.IdentityAssuranceLevelCode)(nil),               // 545: google.fhir.dstu2.proto.IdentityAssuranceLevelCode
	(*codes_go_proto.ProvenanceEntityRoleCode)(nil),                 // 546: google.fhir.dstu2.proto.ProvenanceEntityRoleCode
	(*codes_go_proto.AnswerFormatCode)(nil),                         // 547: google.fhir.dstu2.proto.AnswerFormatCode
	(*codes_go_proto.SubscriptionChannelTypeCode)(nil),              // 548: google.fhir.dstu2.proto.SubscriptionChannelTypeCode
	(*codes_go_proto.ContentTypeCode)(nil),                          // 549: google.fhir.dstu2.proto.ContentTypeCode
	(*codes_go_proto.AssertionDirectionTypeCode)(nil),               // 550: google.fhir.dstu2.proto.AssertionDirectionTypeCode
	(*codes_go_proto.AssertionOperatorTypeCode)(nil),                // 551: google.fhir.dstu2.proto.AssertionOperatorTypeCode
	(*codes_go_proto.AssertionResponseTypesCode)(nil),               // 552: google.fhir.dstu2.proto.AssertionResponseTypesCode
	(*codes_go_proto.FilterOperatorCode)(nil),                       // 553: google.fhir.dstu2.proto.FilterOperatorCode
	(*codes_go_proto.VisionEyesCode)(nil),                           // 554: google.fhir.dstu2.proto.VisionEyesCode
	(*codes_go_proto.VisionBaseCode)(nil),                           // 555: google.fhir.dstu2.proto.VisionBaseCode
}
var file_proto_google_fhir_proto_dstu2_resources_proto_depIdxs = []int32{
	390,  // 0: google.fhir.dstu2.proto.Account.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1: google.fhir.dstu2.proto.Account.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 2: google.fhir.dstu2.proto.Account.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 3: google.fhir.dstu2.proto.Account.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 4: google.fhir.dstu2.proto.Account.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 5: google.fhir.dstu2.proto.Account.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 6: google.fhir.dstu2.proto.Account.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 7: google.fhir.dstu2.proto.Account.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 8: google.fhir.dstu2.proto.Account.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 9: google.fhir.dstu2.proto.Account.name:type_name -> google.fhir.dstu2.proto.String
	398,  // 10: google.fhir.dstu2.proto.Account.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	399,  // 11: google.fhir.dstu2.proto.Account.status:type_name -> google.fhir.dstu2.proto.Code
	400,  // 12: google.fhir.dstu2.proto.Account.active_period:type_name -> google.fhir.dstu2.proto.Period
	401,  // 13: google.fhir.dstu2.proto.Account.currency:type_name -> google.fhir.dstu2.proto.Coding
	402,  // 14: google.fhir.dstu2.proto.Account.balance:type_name -> google.fhir.dstu2.proto.Money
	400,  // 15: google.fhir.dstu2.proto.Account.coverage_period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 16: google.fhir.dstu2.proto.Account.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 17: google.fhir.dstu2.proto.Account.owner:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 18: google.fhir.dstu2.proto.Account.description:type_name -> google.fhir.dstu2.proto.String
	390,  // 19: google.fhir.dstu2.proto.AllergyIntolerance.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 20: google.fhir.dstu2.proto.AllergyIntolerance.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 21: google.fhir.dstu2.proto.AllergyIntolerance.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 22: google.fhir.dstu2.proto.AllergyIntolerance.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 23: google.fhir.dstu2.proto.AllergyIntolerance.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 24: google.fhir.dstu2.proto.AllergyIntolerance.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 25: google.fhir.dstu2.proto.AllergyIntolerance.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 26: google.fhir.dstu2.proto.AllergyIntolerance.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 27: google.fhir.dstu2.proto.AllergyIntolerance.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 28: google.fhir.dstu2.proto.AllergyIntolerance.onset:type_name -> google.fhir.dstu2.proto.DateTime
	404,  // 29: google.fhir.dstu2.proto.AllergyIntolerance.recorded_date:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 30: google.fhir.dstu2.proto.AllergyIntolerance.recorder:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 31: google.fhir.dstu2.proto.AllergyIntolerance.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 32: google.fhir.dstu2.proto.AllergyIntolerance.reporter:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 33: google.fhir.dstu2.proto.AllergyIntolerance.substance:type_name -> google.fhir.dstu2.proto.CodeableConcept
	405,  // 34: google.fhir.dstu2.proto.AllergyIntolerance.status:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceStatusCode
	406,  // 35: google.fhir.dstu2.proto.AllergyIntolerance.criticality:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceCriticalityCode
	407,  // 36: google.fhir.dstu2.proto.AllergyIntolerance.type:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceTypeCode
	408,  // 37: google.fhir.dstu2.proto.AllergyIntolerance.category:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceCategoryCode
	404,  // 38: google.fhir.dstu2.proto.AllergyIntolerance.last_occurence:type_name -> google.fhir.dstu2.proto.DateTime
	409,  // 39: google.fhir.dstu2.proto.AllergyIntolerance.note:type_name -> google.fhir.dstu2.proto.Annotation
	97,   // 40: google.fhir.dstu2.proto.AllergyIntolerance.reaction:type_name -> google.fhir.dstu2.proto.AllergyIntolerance.Reaction
	390,  // 41: google.fhir.dstu2.proto.Appointment.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 42: google.fhir.dstu2.proto.Appointment.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 43: google.fhir.dstu2.proto.Appointment.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 44: google.fhir.dstu2.proto.Appointment.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 45: google.fhir.dstu2.proto.Appointment.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 46: google.fhir.dstu2.proto.Appointment.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 47: google.fhir.dstu2.proto.Appointment.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 48: google.fhir.dstu2.proto.Appointment.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 49: google.fhir.dstu2.proto.Appointment.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	410,  // 50: google.fhir.dstu2.proto.Appointment.status:type_name -> google.fhir.dstu2.proto.AppointmentStatusCode
	398,  // 51: google.fhir.dstu2.proto.Appointment.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 52: google.fhir.dstu2.proto.Appointment.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	411,  // 53: google.fhir.dstu2.proto.Appointment.priority:type_name -> google.fhir.dstu2.proto.UnsignedInt
	397,  // 54: google.fhir.dstu2.proto.Appointment.description:type_name -> google.fhir.dstu2.proto.String
	412,  // 55: google.fhir.dstu2.proto.Appointment.start:type_name -> google.fhir.dstu2.proto.Instant
	412,  // 56: google.fhir.dstu2.proto.Appointment.end:type_name -> google.fhir.dstu2.proto.Instant
	413,  // 57: google.fhir.dstu2.proto.Appointment.minutes_duration:type_name -> google.fhir.dstu2.proto.PositiveInt
	403,  // 58: google.fhir.dstu2.proto.Appointment.slot:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 59: google.fhir.dstu2.proto.Appointment.comment:type_name -> google.fhir.dstu2.proto.String
	98,   // 60: google.fhir.dstu2.proto.Appointment.participant:type_name -> google.fhir.dstu2.proto.Appointment.Participant
	390,  // 61: google.fhir.dstu2.proto.AppointmentResponse.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 62: google.fhir.dstu2.proto.AppointmentResponse.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 63: google.fhir.dstu2.proto.AppointmentResponse.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 64: google.fhir.dstu2.proto.AppointmentResponse.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 65: google.fhir.dstu2.proto.AppointmentResponse.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 66: google.fhir.dstu2.proto.AppointmentResponse.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 67: google.fhir.dstu2.proto.AppointmentResponse.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 68: google.fhir.dstu2.proto.AppointmentResponse.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 69: google.fhir.dstu2.proto.AppointmentResponse.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 70: google.fhir.dstu2.proto.AppointmentResponse.appointment:type_name -> google.fhir.dstu2.proto.Reference
	412,  // 71: google.fhir.dstu2.proto.AppointmentResponse.start:type_name -> google.fhir.dstu2.proto.Instant
	412,  // 72: google.fhir.dstu2.proto.AppointmentResponse.end:type_name -> google.fhir.dstu2.proto.Instant
	398,  // 73: google.fhir.dstu2.proto.AppointmentResponse.participant_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 74: google.fhir.dstu2.proto.AppointmentResponse.actor:type_name -> google.fhir.dstu2.proto.Reference
	414,  // 75: google.fhir.dstu2.proto.AppointmentResponse.participant_status:type_name -> google.fhir.dstu2.proto.ParticipantStatusCode
	397,  // 76: google.fhir.dstu2.proto.AppointmentResponse.comment:type_name -> google.fhir.dstu2.proto.String
	390,  // 77: google.fhir.dstu2.proto.AuditEvent.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 78: google.fhir.dstu2.proto.AuditEvent.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 79: google.fhir.dstu2.proto.AuditEvent.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 80: google.fhir.dstu2.proto.AuditEvent.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 81: google.fhir.dstu2.proto.AuditEvent.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 82: google.fhir.dstu2.proto.AuditEvent.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 83: google.fhir.dstu2.proto.AuditEvent.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 84: google.fhir.dstu2.proto.AuditEvent.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	99,   // 85: google.fhir.dstu2.proto.AuditEvent.event:type_name -> google.fhir.dstu2.proto.AuditEvent.Event
	100,  // 86: google.fhir.dstu2.proto.AuditEvent.participant:type_name -> google.fhir.dstu2.proto.AuditEvent.Participant
	101,  // 87: google.fhir.dstu2.proto.AuditEvent.source:type_name -> google.fhir.dstu2.proto.AuditEvent.Source
	102,  // 88: google.fhir.dstu2.proto.AuditEvent.object:type_name -> google.fhir.dstu2.proto.AuditEvent.Object
	390,  // 89: google.fhir.dstu2.proto.Basic.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 90: google.fhir.dstu2.proto.Basic.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 91: google.fhir.dstu2.proto.Basic.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 92: google.fhir.dstu2.proto.Basic.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 93: google.fhir.dstu2.proto.Basic.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 94: google.fhir.dstu2.proto.Basic.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 95: google.fhir.dstu2.proto.Basic.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 96: google.fhir.dstu2.proto.Basic.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 97: google.fhir.dstu2.proto.Basic.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 98: google.fhir.dstu2.proto.Basic.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 99: google.fhir.dstu2.proto.Basic.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 100: google.fhir.dstu2.proto.Basic.author:type_name -> google.fhir.dstu2.proto.Reference
	415,  // 101: google.fhir.dstu2.proto.Basic.created:type_name -> google.fhir.dstu2.proto.Date
	390,  // 102: google.fhir.dstu2.proto.Binary.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 103: google.fhir.dstu2.proto.Binary.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 104: google.fhir.dstu2.proto.Binary.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 105: google.fhir.dstu2.proto.Binary.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	416,  // 106: google.fhir.dstu2.proto.Binary.content_type:type_name -> google.fhir.dstu2.proto.MimeTypeCode
	417,  // 107: google.fhir.dstu2.proto.Binary.content:type_name -> google.fhir.dstu2.proto.Base64Binary
	390,  // 108: google.fhir.dstu2.proto.BodySite.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 109: google.fhir.dstu2.proto.BodySite.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 110: google.fhir.dstu2.proto.BodySite.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 111: google.fhir.dstu2.proto.BodySite.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 112: google.fhir.dstu2.proto.BodySite.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 113: google.fhir.dstu2.proto.BodySite.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 114: google.fhir.dstu2.proto.BodySite.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 115: google.fhir.dstu2.proto.BodySite.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 116: google.fhir.dstu2.proto.BodySite.patient:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 117: google.fhir.dstu2.proto.BodySite.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 118: google.fhir.dstu2.proto.BodySite.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 119: google.fhir.dstu2.proto.BodySite.modifier:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 120: google.fhir.dstu2.proto.BodySite.description:type_name -> google.fhir.dstu2.proto.String
	418,  // 121: google.fhir.dstu2.proto.BodySite.image:type_name -> google.fhir.dstu2.proto.Attachment
	390,  // 122: google.fhir.dstu2.proto.Bundle.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 123: google.fhir.dstu2.proto.Bundle.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 124: google.fhir.dstu2.proto.Bundle.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 125: google.fhir.dstu2.proto.Bundle.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	419,  // 126: google.fhir.dstu2.proto.Bundle.type:type_name -> google.fhir.dstu2.proto.BundleTypeCode
	411,  // 127: google.fhir.dstu2.proto.Bundle.total:type_name -> google.fhir.dstu2.proto.UnsignedInt
	105,  // 128: google.fhir.dstu2.proto.Bundle.link:type_name -> google.fhir.dstu2.proto.Bundle.Link
	106,  // 129: google.fhir.dstu2.proto.Bundle.entry:type_name -> google.fhir.dstu2.proto.Bundle.Entry
	420,  // 130: google.fhir.dstu2.proto.Bundle.signature:type_name -> google.fhir.dstu2.proto.Signature
	390,  // 131: google.fhir.dstu2.proto.CarePlan.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 132: google.fhir.dstu2.proto.CarePlan.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 133: google.fhir.dstu2.proto.CarePlan.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 134: google.fhir.dstu2.proto.CarePlan.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 135: google.fhir.dstu2.proto.CarePlan.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 136: google.fhir.dstu2.proto.CarePlan.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 137: google.fhir.dstu2.proto.CarePlan.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 138: google.fhir.dstu2.proto.CarePlan.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 139: google.fhir.dstu2.proto.CarePlan.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 140: google.fhir.dstu2.proto.CarePlan.subject:type_name -> google.fhir.dstu2.proto.Reference
	421,  // 141: google.fhir.dstu2.proto.CarePlan.status:type_name -> google.fhir.dstu2.proto.CarePlanStatusCode
	403,  // 142: google.fhir.dstu2.proto.CarePlan.context:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 143: google.fhir.dstu2.proto.CarePlan.period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 144: google.fhir.dstu2.proto.CarePlan.author:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 145: google.fhir.dstu2.proto.CarePlan.modified:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 146: google.fhir.dstu2.proto.CarePlan.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 147: google.fhir.dstu2.proto.CarePlan.description:type_name -> google.fhir.dstu2.proto.String
	403,  // 148: google.fhir.dstu2.proto.CarePlan.addresses:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 149: google.fhir.dstu2.proto.CarePlan.support:type_name -> google.fhir.dstu2.proto.Reference
	110,  // 150: google.fhir.dstu2.proto.CarePlan.related_plan:type_name -> google.fhir.dstu2.proto.CarePlan.RelatedPlan
	111,  // 151: google.fhir.dstu2.proto.CarePlan.participant:type_name -> google.fhir.dstu2.proto.CarePlan.Participant
	403,  // 152: google.fhir.dstu2.proto.CarePlan.goal:type_name -> google.fhir.dstu2.proto.Reference
	112,  // 153: google.fhir.dstu2.proto.CarePlan.activity:type_name -> google.fhir.dstu2.proto.CarePlan.Activity
	409,  // 154: google.fhir.dstu2.proto.CarePlan.note:type_name -> google.fhir.dstu2.proto.Annotation
	390,  // 155: google.fhir.dstu2.proto.Claim.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 156: google.fhir.dstu2.proto.Claim.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 157: google.fhir.dstu2.proto.Claim.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 158: google.fhir.dstu2.proto.Claim.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 159: google.fhir.dstu2.proto.Claim.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 160: google.fhir.dstu2.proto.Claim.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 161: google.fhir.dstu2.proto.Claim.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 162: google.fhir.dstu2.proto.Claim.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	422,  // 163: google.fhir.dstu2.proto.Claim.type:type_name -> google.fhir.dstu2.proto.ClaimTypeCode
	396,  // 164: google.fhir.dstu2.proto.Claim.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	401,  // 165: google.fhir.dstu2.proto.Claim.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 166: google.fhir.dstu2.proto.Claim.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 167: google.fhir.dstu2.proto.Claim.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 168: google.fhir.dstu2.proto.Claim.target:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 169: google.fhir.dstu2.proto.Claim.provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 170: google.fhir.dstu2.proto.Claim.organization:type_name -> google.fhir.dstu2.proto.Reference
	423,  // 171: google.fhir.dstu2.proto.Claim.use:type_name -> google.fhir.dstu2.proto.UseCode
	401,  // 172: google.fhir.dstu2.proto.Claim.priority:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 173: google.fhir.dstu2.proto.Claim.funds_reserve:type_name -> google.fhir.dstu2.proto.Coding
	403,  // 174: google.fhir.dstu2.proto.Claim.enterer:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 175: google.fhir.dstu2.proto.Claim.facility:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 176: google.fhir.dstu2.proto.Claim.prescription:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 177: google.fhir.dstu2.proto.Claim.original_prescription:type_name -> google.fhir.dstu2.proto.Reference
	116,  // 178: google.fhir.dstu2.proto.Claim.payee:type_name -> google.fhir.dstu2.proto.Claim.Payee
	403,  // 179: google.fhir.dstu2.proto.Claim.referral:type_name -> google.fhir.dstu2.proto.Reference
	117,  // 180: google.fhir.dstu2.proto.Claim.diagnosis:type_name -> google.fhir.dstu2.proto.Claim.Diagnosis
	401,  // 181: google.fhir.dstu2.proto.Claim.condition:type_name -> google.fhir.dstu2.proto.Coding
	403,  // 182: google.fhir.dstu2.proto.Claim.patient:type_name -> google.fhir.dstu2.proto.Reference
	118,  // 183: google.fhir.dstu2.proto.Claim.coverage:type_name -> google.fhir.dstu2.proto.Claim.Coverage
	401,  // 184: google.fhir.dstu2.proto.Claim.exception:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 185: google.fhir.dstu2.proto.Claim.school:type_name -> google.fhir.dstu2.proto.String
	415,  // 186: google.fhir.dstu2.proto.Claim.accident:type_name -> google.fhir.dstu2.proto.Date
	401,  // 187: google.fhir.dstu2.proto.Claim.accident_type:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 188: google.fhir.dstu2.proto.Claim.intervention_exception:type_name -> google.fhir.dstu2.proto.Coding
	119,  // 189: google.fhir.dstu2.proto.Claim.item:type_name -> google.fhir.dstu2.proto.Claim.Item
	401,  // 190: google.fhir.dstu2.proto.Claim.additional_materials:type_name -> google.fhir.dstu2.proto.Coding
	120,  // 191: google.fhir.dstu2.proto.Claim.missing_teeth:type_name -> google.fhir.dstu2.proto.Claim.MissingTeeth
	390,  // 192: google.fhir.dstu2.proto.ClaimResponse.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 193: google.fhir.dstu2.proto.ClaimResponse.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 194: google.fhir.dstu2.proto.ClaimResponse.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 195: google.fhir.dstu2.proto.ClaimResponse.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 196: google.fhir.dstu2.proto.ClaimResponse.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 197: google.fhir.dstu2.proto.ClaimResponse.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 198: google.fhir.dstu2.proto.ClaimResponse.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 199: google.fhir.dstu2.proto.ClaimResponse.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 200: google.fhir.dstu2.proto.ClaimResponse.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 201: google.fhir.dstu2.proto.ClaimResponse.request:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 202: google.fhir.dstu2.proto.ClaimResponse.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 203: google.fhir.dstu2.proto.ClaimResponse.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 204: google.fhir.dstu2.proto.ClaimResponse.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 205: google.fhir.dstu2.proto.ClaimResponse.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 206: google.fhir.dstu2.proto.ClaimResponse.request_provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 207: google.fhir.dstu2.proto.ClaimResponse.request_organization:type_name -> google.fhir.dstu2.proto.Reference
	424,  // 208: google.fhir.dstu2.proto.ClaimResponse.outcome:type_name -> google.fhir.dstu2.proto.RemittanceOutcomeCode
	397,  // 209: google.fhir.dstu2.proto.ClaimResponse.disposition:type_name -> google.fhir.dstu2.proto.String
	401,  // 210: google.fhir.dstu2.proto.ClaimResponse.payee_type:type_name -> google.fhir.dstu2.proto.Coding
	124,  // 211: google.fhir.dstu2.proto.ClaimResponse.item:type_name -> google.fhir.dstu2.proto.ClaimResponse.Item
	125,  // 212: google.fhir.dstu2.proto.ClaimResponse.add_item:type_name -> google.fhir.dstu2.proto.ClaimResponse.AddItem
	126,  // 213: google.fhir.dstu2.proto.ClaimResponse.error:type_name -> google.fhir.dstu2.proto.ClaimResponse.Error
	402,  // 214: google.fhir.dstu2.proto.ClaimResponse.total_cost:type_name -> google.fhir.dstu2.proto.Money
	402,  // 215: google.fhir.dstu2.proto.ClaimResponse.unalloc_deductable:type_name -> google.fhir.dstu2.proto.Money
	402,  // 216: google.fhir.dstu2.proto.ClaimResponse.total_benefit:type_name -> google.fhir.dstu2.proto.Money
	402,  // 217: google.fhir.dstu2.proto.ClaimResponse.payment_adjustment:type_name -> google.fhir.dstu2.proto.Money
	401,  // 218: google.fhir.dstu2.proto.ClaimResponse.payment_adjustment_reason:type_name -> google.fhir.dstu2.proto.Coding
	415,  // 219: google.fhir.dstu2.proto.ClaimResponse.payment_date:type_name -> google.fhir.dstu2.proto.Date
	402,  // 220: google.fhir.dstu2.proto.ClaimResponse.payment_amount:type_name -> google.fhir.dstu2.proto.Money
	396,  // 221: google.fhir.dstu2.proto.ClaimResponse.payment_ref:type_name -> google.fhir.dstu2.proto.Identifier
	401,  // 222: google.fhir.dstu2.proto.ClaimResponse.reserved:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 223: google.fhir.dstu2.proto.ClaimResponse.form:type_name -> google.fhir.dstu2.proto.Coding
	127,  // 224: google.fhir.dstu2.proto.ClaimResponse.note:type_name -> google.fhir.dstu2.proto.ClaimResponse.Note
	128,  // 225: google.fhir.dstu2.proto.ClaimResponse.coverage:type_name -> google.fhir.dstu2.proto.ClaimResponse.Coverage
	390,  // 226: google.fhir.dstu2.proto.ClinicalImpression.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 227: google.fhir.dstu2.proto.ClinicalImpression.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 228: google.fhir.dstu2.proto.ClinicalImpression.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 229: google.fhir.dstu2.proto.ClinicalImpression.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 230: google.fhir.dstu2.proto.ClinicalImpression.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 231: google.fhir.dstu2.proto.ClinicalImpression.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 232: google.fhir.dstu2.proto.ClinicalImpression.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 233: google.fhir.dstu2.proto.ClinicalImpression.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 234: google.fhir.dstu2.proto.ClinicalImpression.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 235: google.fhir.dstu2.proto.ClinicalImpression.assessor:type_name -> google.fhir.dstu2.proto.Reference
	425,  // 236: google.fhir.dstu2.proto.ClinicalImpression.status:type_name -> google.fhir.dstu2.proto.ClinicalImpressionStatusCode
	404,  // 237: google.fhir.dstu2.proto.ClinicalImpression.date:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 238: google.fhir.dstu2.proto.ClinicalImpression.description:type_name -> google.fhir.dstu2.proto.String
	403,  // 239: google.fhir.dstu2.proto.ClinicalImpression.previous:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 240: google.fhir.dstu2.proto.ClinicalImpression.problem:type_name -> google.fhir.dstu2.proto.Reference
	137,  // 241: google.fhir.dstu2.proto.ClinicalImpression.trigger:type_name -> google.fhir.dstu2.proto.ClinicalImpression.Trigger
	138,  // 242: google.fhir.dstu2.proto.ClinicalImpression.investigations:type_name -> google.fhir.dstu2.proto.ClinicalImpression.Investigations
	392,  // 243: google.fhir.dstu2.proto.ClinicalImpression.protocol:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 244: google.fhir.dstu2.proto.ClinicalImpression.summary:type_name -> google.fhir.dstu2.proto.String
	139,  // 245: google.fhir.dstu2.proto.ClinicalImpression.finding:type_name -> google.fhir.dstu2.proto.ClinicalImpression.Finding
	398,  // 246: google.fhir.dstu2.proto.ClinicalImpression.resolved:type_name -> google.fhir.dstu2.proto.CodeableConcept
	140,  // 247: google.fhir.dstu2.proto.ClinicalImpression.ruled_out:type_name -> google.fhir.dstu2.proto.ClinicalImpression.RuledOut
	397,  // 248: google.fhir.dstu2.proto.ClinicalImpression.prognosis:type_name -> google.fhir.dstu2.proto.String
	403,  // 249: google.fhir.dstu2.proto.ClinicalImpression.plan:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 250: google.fhir.dstu2.proto.ClinicalImpression.action:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 251: google.fhir.dstu2.proto.Communication.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 252: google.fhir.dstu2.proto.Communication.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 253: google.fhir.dstu2.proto.Communication.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 254: google.fhir.dstu2.proto.Communication.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 255: google.fhir.dstu2.proto.Communication.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 256: google.fhir.dstu2.proto.Communication.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 257: google.fhir.dstu2.proto.Communication.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 258: google.fhir.dstu2.proto.Communication.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 259: google.fhir.dstu2.proto.Communication.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 260: google.fhir.dstu2.proto.Communication.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 261: google.fhir.dstu2.proto.Communication.sender:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 262: google.fhir.dstu2.proto.Communication.recipient:type_name -> google.fhir.dstu2.proto.Reference
	141,  // 263: google.fhir.dstu2.proto.Communication.payload:type_name -> google.fhir.dstu2.proto.Communication.Payload
	398,  // 264: google.fhir.dstu2.proto.Communication.medium:type_name -> google.fhir.dstu2.proto.CodeableConcept
	426,  // 265: google.fhir.dstu2.proto.Communication.status:type_name -> google.fhir.dstu2.proto.CommunicationStatusCode
	403,  // 266: google.fhir.dstu2.proto.Communication.encounter:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 267: google.fhir.dstu2.proto.Communication.sent:type_name -> google.fhir.dstu2.proto.DateTime
	404,  // 268: google.fhir.dstu2.proto.Communication.received:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 269: google.fhir.dstu2.proto.Communication.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 270: google.fhir.dstu2.proto.Communication.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 271: google.fhir.dstu2.proto.Communication.request_detail:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 272: google.fhir.dstu2.proto.CommunicationRequest.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 273: google.fhir.dstu2.proto.CommunicationRequest.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 274: google.fhir.dstu2.proto.CommunicationRequest.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 275: google.fhir.dstu2.proto.CommunicationRequest.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 276: google.fhir.dstu2.proto.CommunicationRequest.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 277: google.fhir.dstu2.proto.CommunicationRequest.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 278: google.fhir.dstu2.proto.CommunicationRequest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 279: google.fhir.dstu2.proto.CommunicationRequest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 280: google.fhir.dstu2.proto.CommunicationRequest.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 281: google.fhir.dstu2.proto.CommunicationRequest.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 282: google.fhir.dstu2.proto.CommunicationRequest.sender:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 283: google.fhir.dstu2.proto.CommunicationRequest.recipient:type_name -> google.fhir.dstu2.proto.Reference
	143,  // 284: google.fhir.dstu2.proto.CommunicationRequest.payload:type_name -> google.fhir.dstu2.proto.CommunicationRequest.Payload
	398,  // 285: google.fhir.dstu2.proto.CommunicationRequest.medium:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 286: google.fhir.dstu2.proto.CommunicationRequest.requester:type_name -> google.fhir.dstu2.proto.Reference
	427,  // 287: google.fhir.dstu2.proto.CommunicationRequest.status:type_name -> google.fhir.dstu2.proto.CommunicationRequestStatusCode
	403,  // 288: google.fhir.dstu2.proto.CommunicationRequest.encounter:type_name -> google.fhir.dstu2.proto.Reference
	144,  // 289: google.fhir.dstu2.proto.CommunicationRequest.scheduled:type_name -> google.fhir.dstu2.proto.CommunicationRequest.Scheduled
	398,  // 290: google.fhir.dstu2.proto.CommunicationRequest.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	404,  // 291: google.fhir.dstu2.proto.CommunicationRequest.requested_on:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 292: google.fhir.dstu2.proto.CommunicationRequest.subject:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 293: google.fhir.dstu2.proto.CommunicationRequest.priority:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 294: google.fhir.dstu2.proto.Composition.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 295: google.fhir.dstu2.proto.Composition.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 296: google.fhir.dstu2.proto.Composition.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 297: google.fhir.dstu2.proto.Composition.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 298: google.fhir.dstu2.proto.Composition.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 299: google.fhir.dstu2.proto.Composition.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 300: google.fhir.dstu2.proto.Composition.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 301: google.fhir.dstu2.proto.Composition.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 302: google.fhir.dstu2.proto.Composition.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 303: google.fhir.dstu2.proto.Composition.date:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 304: google.fhir.dstu2.proto.Composition.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 305: google.fhir.dstu2.proto.Composition.class_value:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 306: google.fhir.dstu2.proto.Composition.title:type_name -> google.fhir.dstu2.proto.String
	428,  // 307: google.fhir.dstu2.proto.Composition.status:type_name -> google.fhir.dstu2.proto.CompositionStatusCode
	429,  // 308: google.fhir.dstu2.proto.Composition.confidentiality:type_name -> google.fhir.dstu2.proto.ConfidentialityClassificationCode
	403,  // 309: google.fhir.dstu2.proto.Composition.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 310: google.fhir.dstu2.proto.Composition.author:type_name -> google.fhir.dstu2.proto.Reference
	146,  // 311: google.fhir.dstu2.proto.Composition.attester:type_name -> google.fhir.dstu2.proto.Composition.Attester
	403,  // 312: google.fhir.dstu2.proto.Composition.custodian:type_name -> google.fhir.dstu2.proto.Reference
	147,  // 313: google.fhir.dstu2.proto.Composition.event:type_name -> google.fhir.dstu2.proto.Composition.Event
	403,  // 314: google.fhir.dstu2.proto.Composition.encounter:type_name -> google.fhir.dstu2.proto.Reference
	148,  // 315: google.fhir.dstu2.proto.Composition.section:type_name -> google.fhir.dstu2.proto.Composition.Section
	390,  // 316: google.fhir.dstu2.proto.ConceptMap.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 317: google.fhir.dstu2.proto.ConceptMap.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 318: google.fhir.dstu2.proto.ConceptMap.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 319: google.fhir.dstu2.proto.ConceptMap.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 320: google.fhir.dstu2.proto.ConceptMap.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 321: google.fhir.dstu2.proto.ConceptMap.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 322: google.fhir.dstu2.proto.ConceptMap.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 323: google.fhir.dstu2.proto.ConceptMap.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 324: google.fhir.dstu2.proto.ConceptMap.url:type_name -> google.fhir.dstu2.proto.Uri
	396,  // 325: google.fhir.dstu2.proto.ConceptMap.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 326: google.fhir.dstu2.proto.ConceptMap.version:type_name -> google.fhir.dstu2.proto.String
	397,  // 327: google.fhir.dstu2.proto.ConceptMap.name:type_name -> google.fhir.dstu2.proto.String
	430,  // 328: google.fhir.dstu2.proto.ConceptMap.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	431,  // 329: google.fhir.dstu2.proto.ConceptMap.experimental:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 330: google.fhir.dstu2.proto.ConceptMap.publisher:type_name -> google.fhir.dstu2.proto.String
	149,  // 331: google.fhir.dstu2.proto.ConceptMap.contact:type_name -> google.fhir.dstu2.proto.ConceptMap.Contact
	404,  // 332: google.fhir.dstu2.proto.ConceptMap.date:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 333: google.fhir.dstu2.proto.ConceptMap.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 334: google.fhir.dstu2.proto.ConceptMap.use_context:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 335: google.fhir.dstu2.proto.ConceptMap.requirements:type_name -> google.fhir.dstu2.proto.String
	397,  // 336: google.fhir.dstu2.proto.ConceptMap.copyright:type_name -> google.fhir.dstu2.proto.String
	150,  // 337: google.fhir.dstu2.proto.ConceptMap.source:type_name -> google.fhir.dstu2.proto.ConceptMap.Source
	151,  // 338: google.fhir.dstu2.proto.ConceptMap.target:type_name -> google.fhir.dstu2.proto.ConceptMap.Target
	152,  // 339: google.fhir.dstu2.proto.ConceptMap.element:type_name -> google.fhir.dstu2.proto.ConceptMap.Element
	390,  // 340: google.fhir.dstu2.proto.Condition.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 341: google.fhir.dstu2.proto.Condition.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 342: google.fhir.dstu2.proto.Condition.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 343: google.fhir.dstu2.proto.Condition.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 344: google.fhir.dstu2.proto.Condition.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 345: google.fhir.dstu2.proto.Condition.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 346: google.fhir.dstu2.proto.Condition.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 347: google.fhir.dstu2.proto.Condition.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 348: google.fhir.dstu2.proto.Condition.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 349: google.fhir.dstu2.proto.Condition.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 350: google.fhir.dstu2.proto.Condition.encounter:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 351: google.fhir.dstu2.proto.Condition.asserter:type_name -> google.fhir.dstu2.proto.Reference
	415,  // 352: google.fhir.dstu2.proto.Condition.date_recorded:type_name -> google.fhir.dstu2.proto.Date
	398,  // 353: google.fhir.dstu2.proto.Condition.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 354: google.fhir.dstu2.proto.Condition.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	399,  // 355: google.fhir.dstu2.proto.Condition.clinical_status:type_name -> google.fhir.dstu2.proto.Code
	432,  // 356: google.fhir.dstu2.proto.Condition.verification_status:type_name -> google.fhir.dstu2.proto.ConditionVerificationStatusCode
	398,  // 357: google.fhir.dstu2.proto.Condition.severity:type_name -> google.fhir.dstu2.proto.CodeableConcept
	155,  // 358: google.fhir.dstu2.proto.Condition.onset:type_name -> google.fhir.dstu2.proto.Condition.Onset
	156,  // 359: google.fhir.dstu2.proto.Condition.abatement:type_name -> google.fhir.dstu2.proto.Condition.Abatement
	157,  // 360: google.fhir.dstu2.proto.Condition.stage:type_name -> google.fhir.dstu2.proto.Condition.Stage
	158,  // 361: google.fhir.dstu2.proto.Condition.evidence:type_name -> google.fhir.dstu2.proto.Condition.Evidence
	398,  // 362: google.fhir.dstu2.proto.Condition.body_site:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 363: google.fhir.dstu2.proto.Condition.notes:type_name -> google.fhir.dstu2.proto.String
	390,  // 364: google.fhir.dstu2.proto.Conformance.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 365: google.fhir.dstu2.proto.Conformance.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 366: google.fhir.dstu2.proto.Conformance.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 367: google.fhir.dstu2.proto.Conformance.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 368: google.fhir.dstu2.proto.Conformance.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 369: google.fhir.dstu2.proto.Conformance.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 370: google.fhir.dstu2.proto.Conformance.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 371: google.fhir.dstu2.proto.Conformance.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 372: google.fhir.dstu2.proto.Conformance.url:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 373: google.fhir.dstu2.proto.Conformance.version:type_name -> google.fhir.dstu2.proto.String
	397,  // 374: google.fhir.dstu2.proto.Conformance.name:type_name -> google.fhir.dstu2.proto.String
	430,  // 375: google.fhir.dstu2.proto.Conformance.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	431,  // 376: google.fhir.dstu2.proto.Conformance.experimental:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 377: google.fhir.dstu2.proto.Conformance.publisher:type_name -> google.fhir.dstu2.proto.String
	159,  // 378: google.fhir.dstu2.proto.Conformance.contact:type_name -> google.fhir.dstu2.proto.Conformance.Contact
	404,  // 379: google.fhir.dstu2.proto.Conformance.date:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 380: google.fhir.dstu2.proto.Conformance.description:type_name -> google.fhir.dstu2.proto.String
	397,  // 381: google.fhir.dstu2.proto.Conformance.requirements:type_name -> google.fhir.dstu2.proto.String
	397,  // 382: google.fhir.dstu2.proto.Conformance.copyright:type_name -> google.fhir.dstu2.proto.String
	433,  // 383: google.fhir.dstu2.proto.Conformance.kind:type_name -> google.fhir.dstu2.proto.ConformanceStatementKindCode
	160,  // 384: google.fhir.dstu2.proto.Conformance.software:type_name -> google.fhir.dstu2.proto.Conformance.Software
	161,  // 385: google.fhir.dstu2.proto.Conformance.implementation:type_name -> google.fhir.dstu2.proto.Conformance.Implementation
	390,  // 386: google.fhir.dstu2.proto.Conformance.fhir_version:type_name -> google.fhir.dstu2.proto.Id
	434,  // 387: google.fhir.dstu2.proto.Conformance.accept_unknown:type_name -> google.fhir.dstu2.proto.UnknownContentCodeCode
	416,  // 388: google.fhir.dstu2.proto.Conformance.format:type_name -> google.fhir.dstu2.proto.MimeTypeCode
	403,  // 389: google.fhir.dstu2.proto.Conformance.profile:type_name -> google.fhir.dstu2.proto.Reference
	162,  // 390: google.fhir.dstu2.proto.Conformance.rest:type_name -> google.fhir.dstu2.proto.Conformance.Rest
	163,  // 391: google.fhir.dstu2.proto.Conformance.messaging:type_name -> google.fhir.dstu2.proto.Conformance.Messaging
	164,  // 392: google.fhir.dstu2.proto.Conformance.document:type_name -> google.fhir.dstu2.proto.Conformance.Document
	390,  // 393: google.fhir.dstu2.proto.Contract.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 394: google.fhir.dstu2.proto.Contract.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 395: google.fhir.dstu2.proto.Contract.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 396: google.fhir.dstu2.proto.Contract.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 397: google.fhir.dstu2.proto.Contract.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 398: google.fhir.dstu2.proto.Contract.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 399: google.fhir.dstu2.proto.Contract.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 400: google.fhir.dstu2.proto.Contract.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 401: google.fhir.dstu2.proto.Contract.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 402: google.fhir.dstu2.proto.Contract.issued:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 403: google.fhir.dstu2.proto.Contract.applies:type_name -> google.fhir.dstu2.proto.Period
	403,  // 404: google.fhir.dstu2.proto.Contract.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 405: google.fhir.dstu2.proto.Contract.authority:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 406: google.fhir.dstu2.proto.Contract.domain:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 407: google.fhir.dstu2.proto.Contract.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 408: google.fhir.dstu2.proto.Contract.sub_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 409: google.fhir.dstu2.proto.Contract.action:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 410: google.fhir.dstu2.proto.Contract.action_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	174,  // 411: google.fhir.dstu2.proto.Contract.actor:type_name -> google.fhir.dstu2.proto.Contract.Actor
	175,  // 412: google.fhir.dstu2.proto.Contract.valued_item:type_name -> google.fhir.dstu2.proto.Contract.ValuedItem
	176,  // 413: google.fhir.dstu2.proto.Contract.signer:type_name -> google.fhir.dstu2.proto.Contract.Signer
	177,  // 414: google.fhir.dstu2.proto.Contract.term:type_name -> google.fhir.dstu2.proto.Contract.Term
	178,  // 415: google.fhir.dstu2.proto.Contract.binding:type_name -> google.fhir.dstu2.proto.Contract.Binding
	179,  // 416: google.fhir.dstu2.proto.Contract.friendly:type_name -> google.fhir.dstu2.proto.Contract.Friendly
	180,  // 417: google.fhir.dstu2.proto.Contract.legal:type_name -> google.fhir.dstu2.proto.Contract.Legal
	181,  // 418: google.fhir.dstu2.proto.Contract.rule:type_name -> google.fhir.dstu2.proto.Contract.Rule
	390,  // 419: google.fhir.dstu2.proto.Coverage.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 420: google.fhir.dstu2.proto.Coverage.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 421: google.fhir.dstu2.proto.Coverage.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 422: google.fhir.dstu2.proto.Coverage.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 423: google.fhir.dstu2.proto.Coverage.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 424: google.fhir.dstu2.proto.Coverage.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 425: google.fhir.dstu2.proto.Coverage.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 426: google.fhir.dstu2.proto.Coverage.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 427: google.fhir.dstu2.proto.Coverage.issuer:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 428: google.fhir.dstu2.proto.Coverage.bin:type_name -> google.fhir.dstu2.proto.Identifier
	400,  // 429: google.fhir.dstu2.proto.Coverage.period:type_name -> google.fhir.dstu2.proto.Period
	401,  // 430: google.fhir.dstu2.proto.Coverage.type:type_name -> google.fhir.dstu2.proto.Coding
	396,  // 431: google.fhir.dstu2.proto.Coverage.subscriber_id:type_name -> google.fhir.dstu2.proto.Identifier
	396,  // 432: google.fhir.dstu2.proto.Coverage.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 433: google.fhir.dstu2.proto.Coverage.group:type_name -> google.fhir.dstu2.proto.String
	397,  // 434: google.fhir.dstu2.proto.Coverage.plan:type_name -> google.fhir.dstu2.proto.String
	397,  // 435: google.fhir.dstu2.proto.Coverage.sub_plan:type_name -> google.fhir.dstu2.proto.String
	413,  // 436: google.fhir.dstu2.proto.Coverage.dependent:type_name -> google.fhir.dstu2.proto.PositiveInt
	413,  // 437: google.fhir.dstu2.proto.Coverage.sequence:type_name -> google.fhir.dstu2.proto.PositiveInt
	403,  // 438: google.fhir.dstu2.proto.Coverage.subscriber:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 439: google.fhir.dstu2.proto.Coverage.network:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 440: google.fhir.dstu2.proto.Coverage.contract:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 441: google.fhir.dstu2.proto.DataElement.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 442: google.fhir.dstu2.proto.DataElement.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 443: google.fhir.dstu2.proto.DataElement.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 444: google.fhir.dstu2.proto.DataElement.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 445: google.fhir.dstu2.proto.DataElement.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 446: google.fhir.dstu2.proto.DataElement.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 447: google.fhir.dstu2.proto.DataElement.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 448: google.fhir.dstu2.proto.DataElement.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 449: google.fhir.dstu2.proto.DataElement.url:type_name -> google.fhir.dstu2.proto.Uri
	396,  // 450: google.fhir.dstu2.proto.DataElement.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 451: google.fhir.dstu2.proto.DataElement.version:type_name -> google.fhir.dstu2.proto.String
	397,  // 452: google.fhir.dstu2.proto.DataElement.name:type_name -> google.fhir.dstu2.proto.String
	430,  // 453: google.fhir.dstu2.proto.DataElement.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	431,  // 454: google.fhir.dstu2.proto.DataElement.experimental:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 455: google.fhir.dstu2.proto.DataElement.publisher:type_name -> google.fhir.dstu2.proto.String
	189,  // 456: google.fhir.dstu2.proto.DataElement.contact:type_name -> google.fhir.dstu2.proto.DataElement.Contact
	404,  // 457: google.fhir.dstu2.proto.DataElement.date:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 458: google.fhir.dstu2.proto.DataElement.use_context:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 459: google.fhir.dstu2.proto.DataElement.copyright:type_name -> google.fhir.dstu2.proto.String
	435,  // 460: google.fhir.dstu2.proto.DataElement.stringency:type_name -> google.fhir.dstu2.proto.DataElementStringencyCode
	190,  // 461: google.fhir.dstu2.proto.DataElement.mapping:type_name -> google.fhir.dstu2.proto.DataElement.Mapping
	436,  // 462: google.fhir.dstu2.proto.DataElement.element:type_name -> google.fhir.dstu2.proto.ElementDefinition
	390,  // 463: google.fhir.dstu2.proto.DetectedIssue.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 464: google.fhir.dstu2.proto.DetectedIssue.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 465: google.fhir.dstu2.proto.DetectedIssue.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 466: google.fhir.dstu2.proto.DetectedIssue.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 467: google.fhir.dstu2.proto.DetectedIssue.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 468: google.fhir.dstu2.proto.DetectedIssue.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 469: google.fhir.dstu2.proto.DetectedIssue.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 470: google.fhir.dstu2.proto.DetectedIssue.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 471: google.fhir.dstu2.proto.DetectedIssue.patient:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 472: google.fhir.dstu2.proto.DetectedIssue.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	437,  // 473: google.fhir.dstu2.proto.DetectedIssue.severity:type_name -> google.fhir.dstu2.proto.DetectedIssueSeverityCode
	403,  // 474: google.fhir.dstu2.proto.DetectedIssue.implicated:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 475: google.fhir.dstu2.proto.DetectedIssue.detail:type_name -> google.fhir.dstu2.proto.String
	404,  // 476: google.fhir.dstu2.proto.DetectedIssue.date:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 477: google.fhir.dstu2.proto.DetectedIssue.author:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 478: google.fhir.dstu2.proto.DetectedIssue.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	392,  // 479: google.fhir.dstu2.proto.DetectedIssue.reference:type_name -> google.fhir.dstu2.proto.Uri
	191,  // 480: google.fhir.dstu2.proto.DetectedIssue.mitigation:type_name -> google.fhir.dstu2.proto.DetectedIssue.Mitigation
	390,  // 481: google.fhir.dstu2.proto.Device.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 482: google.fhir.dstu2.proto.Device.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 483: google.fhir.dstu2.proto.Device.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 484: google.fhir.dstu2.proto.Device.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 485: google.fhir.dstu2.proto.Device.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 486: google.fhir.dstu2.proto.Device.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 487: google.fhir.dstu2.proto.Device.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 488: google.fhir.dstu2.proto.Device.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 489: google.fhir.dstu2.proto.Device.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 490: google.fhir.dstu2.proto.Device.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	409,  // 491: google.fhir.dstu2.proto.Device.note:type_name -> google.fhir.dstu2.proto.Annotation
	438,  // 492: google.fhir.dstu2.proto.Device.status:type_name -> google.fhir.dstu2.proto.DeviceStatusCode
	397,  // 493: google.fhir.dstu2.proto.Device.manufacturer:type_name -> google.fhir.dstu2.proto.String
	397,  // 494: google.fhir.dstu2.proto.Device.model:type_name -> google.fhir.dstu2.proto.String
	397,  // 495: google.fhir.dstu2.proto.Device.version:type_name -> google.fhir.dstu2.proto.String
	404,  // 496: google.fhir.dstu2.proto.Device.manufacture_date:type_name -> google.fhir.dstu2.proto.DateTime
	404,  // 497: google.fhir.dstu2.proto.Device.expiry:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 498: google.fhir.dstu2.proto.Device.udi:type_name -> google.fhir.dstu2.proto.String
	397,  // 499: google.fhir.dstu2.proto.Device.lot_number:type_name -> google.fhir.dstu2.proto.String
	403,  // 500: google.fhir.dstu2.proto.Device.owner:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 501: google.fhir.dstu2.proto.Device.location:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 502: google.fhir.dstu2.proto.Device.patient:type_name -> google.fhir.dstu2.proto.Reference
	439,  // 503: google.fhir.dstu2.proto.Device.contact:type_name -> google.fhir.dstu2.proto.ContactPoint
	392,  // 504: google.fhir.dstu2.proto.Device.url:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 505: google.fhir.dstu2.proto.DeviceComponent.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 506: google.fhir.dstu2.proto.DeviceComponent.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 507: google.fhir.dstu2.proto.DeviceComponent.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 508: google.fhir.dstu2.proto.DeviceComponent.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 509: google.fhir.dstu2.proto.DeviceComponent.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 510: google.fhir.dstu2.proto.DeviceComponent.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 511: google.fhir.dstu2.proto.DeviceComponent.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 512: google.fhir.dstu2.proto.DeviceComponent.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 513: google.fhir.dstu2.proto.DeviceComponent.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	396,  // 514: google.fhir.dstu2.proto.DeviceComponent.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	412,  // 515: google.fhir.dstu2.proto.DeviceComponent.last_system_change:type_name -> google.fhir.dstu2.proto.Instant
	403,  // 516: google.fhir.dstu2.proto.DeviceComponent.source:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 517: google.fhir.dstu2.proto.DeviceComponent.parent:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 518: google.fhir.dstu2.proto.DeviceComponent.operational_status:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 519: google.fhir.dstu2.proto.DeviceComponent.parameter_group:type_name -> google.fhir.dstu2.proto.CodeableConcept
	440,  // 520: google.fhir.dstu2.proto.DeviceComponent.measurement_principle:type_name -> google.fhir.dstu2.proto.MeasmntPrincipleCode
	192,  // 521: google.fhir.dstu2.proto.DeviceComponent.production_specification:type_name -> google.fhir.dstu2.proto.DeviceComponent.ProductionSpecification
	398,  // 522: google.fhir.dstu2.proto.DeviceComponent.language_code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 523: google.fhir.dstu2.proto.DeviceMetric.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 524: google.fhir.dstu2.proto.DeviceMetric.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 525: google.fhir.dstu2.proto.DeviceMetric.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 526: google.fhir.dstu2.proto.DeviceMetric.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 527: google.fhir.dstu2.proto.DeviceMetric.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 528: google.fhir.dstu2.proto.DeviceMetric.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 529: google.fhir.dstu2.proto.DeviceMetric.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 530: google.fhir.dstu2.proto.DeviceMetric.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 531: google.fhir.dstu2.proto.DeviceMetric.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	396,  // 532: google.fhir.dstu2.proto.DeviceMetric.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 533: google.fhir.dstu2.proto.DeviceMetric.unit:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 534: google.fhir.dstu2.proto.DeviceMetric.source:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 535: google.fhir.dstu2.proto.DeviceMetric.parent:type_name -> google.fhir.dstu2.proto.Reference
	441,  // 536: google.fhir.dstu2.proto.DeviceMetric.operational_status:type_name -> google.fhir.dstu2.proto.DeviceMetricOperationalStatusCode
	442,  // 537: google.fhir.dstu2.proto.DeviceMetric.color:type_name -> google.fhir.dstu2.proto.DeviceMetricColorCode
	443,  // 538: google.fhir.dstu2.proto.DeviceMetric.category:type_name -> google.fhir.dstu2.proto.DeviceMetricCategoryCode
	444,  // 539: google.fhir.dstu2.proto.DeviceMetric.measurement_period:type_name -> google.fhir.dstu2.proto.Timing
	193,  // 540: google.fhir.dstu2.proto.DeviceMetric.calibration:type_name -> google.fhir.dstu2.proto.DeviceMetric.Calibration
	390,  // 541: google.fhir.dstu2.proto.DeviceUseRequest.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 542: google.fhir.dstu2.proto.DeviceUseRequest.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 543: google.fhir.dstu2.proto.DeviceUseRequest.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 544: google.fhir.dstu2.proto.DeviceUseRequest.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 545: google.fhir.dstu2.proto.DeviceUseRequest.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 546: google.fhir.dstu2.proto.DeviceUseRequest.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 547: google.fhir.dstu2.proto.DeviceUseRequest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 548: google.fhir.dstu2.proto.DeviceUseRequest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	194,  // 549: google.fhir.dstu2.proto.DeviceUseRequest.body_site:type_name -> google.fhir.dstu2.proto.DeviceUseRequest.BodySite
	445,  // 550: google.fhir.dstu2.proto.DeviceUseRequest.status:type_name -> google.fhir.dstu2.proto.DeviceUseRequestStatusCode
	403,  // 551: google.fhir.dstu2.proto.DeviceUseRequest.device:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 552: google.fhir.dstu2.proto.DeviceUseRequest.encounter:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 553: google.fhir.dstu2.proto.DeviceUseRequest.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 554: google.fhir.dstu2.proto.DeviceUseRequest.indication:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 555: google.fhir.dstu2.proto.DeviceUseRequest.notes:type_name -> google.fhir.dstu2.proto.String
	398,  // 556: google.fhir.dstu2.proto.DeviceUseRequest.prn_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	404,  // 557: google.fhir.dstu2.proto.DeviceUseRequest.ordered_on:type_name -> google.fhir.dstu2.proto.DateTime
	404,  // 558: google.fhir.dstu2.proto.DeviceUseRequest.recorded_on:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 559: google.fhir.dstu2.proto.DeviceUseRequest.subject:type_name -> google.fhir.dstu2.proto.Reference
	195,  // 560: google.fhir.dstu2.proto.DeviceUseRequest.timing:type_name -> google.fhir.dstu2.proto.DeviceUseRequest.TimingType
	446,  // 561: google.fhir.dstu2.proto.DeviceUseRequest.priority:type_name -> google.fhir.dstu2.proto.DeviceUseRequestPriorityCode
	390,  // 562: google.fhir.dstu2.proto.DeviceUseStatement.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 563: google.fhir.dstu2.proto.DeviceUseStatement.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 564: google.fhir.dstu2.proto.DeviceUseStatement.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 565: google.fhir.dstu2.proto.DeviceUseStatement.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 566: google.fhir.dstu2.proto.DeviceUseStatement.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 567: google.fhir.dstu2.proto.DeviceUseStatement.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 568: google.fhir.dstu2.proto.DeviceUseStatement.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 569: google.fhir.dstu2.proto.DeviceUseStatement.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	196,  // 570: google.fhir.dstu2.proto.DeviceUseStatement.body_site:type_name -> google.fhir.dstu2.proto.DeviceUseStatement.BodySite
	400,  // 571: google.fhir.dstu2.proto.DeviceUseStatement.when_used:type_name -> google.fhir.dstu2.proto.Period
	403,  // 572: google.fhir.dstu2.proto.DeviceUseStatement.device:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 573: google.fhir.dstu2.proto.DeviceUseStatement.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 574: google.fhir.dstu2.proto.DeviceUseStatement.indication:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 575: google.fhir.dstu2.proto.DeviceUseStatement.notes:type_name -> google.fhir.dstu2.proto.String
	404,  // 576: google.fhir.dstu2.proto.DeviceUseStatement.recorded_on:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 577: google.fhir.dstu2.proto.DeviceUseStatement.subject:type_name -> google.fhir.dstu2.proto.Reference
	197,  // 578: google.fhir.dstu2.proto.DeviceUseStatement.timing:type_name -> google.fhir.dstu2.proto.DeviceUseStatement.TimingType
	390,  // 579: google.fhir.dstu2.proto.DiagnosticOrder.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 580: google.fhir.dstu2.proto.DiagnosticOrder.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 581: google.fhir.dstu2.proto.DiagnosticOrder.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 582: google.fhir.dstu2.proto.DiagnosticOrder.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 583: google.fhir.dstu2.proto.DiagnosticOrder.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 584: google.fhir.dstu2.proto.DiagnosticOrder.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 585: google.fhir.dstu2.proto.DiagnosticOrder.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 586: google.fhir.dstu2.proto.DiagnosticOrder.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 587: google.fhir.dstu2.proto.DiagnosticOrder.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 588: google.fhir.dstu2.proto.DiagnosticOrder.orderer:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 589: google.fhir.dstu2.proto.DiagnosticOrder.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 590: google.fhir.dstu2.proto.DiagnosticOrder.encounter:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 591: google.fhir.dstu2.proto.DiagnosticOrder.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 592: google.fhir.dstu2.proto.DiagnosticOrder.supporting_information:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 593: google.fhir.dstu2.proto.DiagnosticOrder.specimen:type_name -> google.fhir.dstu2.proto.Reference
	447,  // 594: google.fhir.dstu2.proto.DiagnosticOrder.status:type_name -> google.fhir.dstu2.proto.DiagnosticOrderStatusCode
	448,  // 595: google.fhir.dstu2.proto.DiagnosticOrder.priority:type_name -> google.fhir.dstu2.proto.DiagnosticOrderPriorityCode
	198,  // 596: google.fhir.dstu2.proto.DiagnosticOrder.event:type_name -> google.fhir.dstu2.proto.DiagnosticOrder.Event
	199,  // 597: google.fhir.dstu2.proto.DiagnosticOrder.item:type_name -> google.fhir.dstu2.proto.DiagnosticOrder.Item
	409,  // 598: google.fhir.dstu2.proto.DiagnosticOrder.note:type_name -> google.fhir.dstu2.proto.Annotation
	390,  // 599: google.fhir.dstu2.proto.DiagnosticReport.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 600: google.fhir.dstu2.proto.DiagnosticReport.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 601: google.fhir.dstu2.proto.DiagnosticReport.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 602: google.fhir.dstu2.proto.DiagnosticReport.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 603: google.fhir.dstu2.proto.DiagnosticReport.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 604: google.fhir.dstu2.proto.DiagnosticReport.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 605: google.fhir.dstu2.proto.DiagnosticReport.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 606: google.fhir.dstu2.proto.DiagnosticReport.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 607: google.fhir.dstu2.proto.DiagnosticReport.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	449,  // 608: google.fhir.dstu2.proto.DiagnosticReport.status:type_name -> google.fhir.dstu2.proto.DiagnosticReportStatusCode
	398,  // 609: google.fhir.dstu2.proto.DiagnosticReport.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 610: google.fhir.dstu2.proto.DiagnosticReport.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 611: google.fhir.dstu2.proto.DiagnosticReport.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 612: google.fhir.dstu2.proto.DiagnosticReport.encounter:type_name -> google.fhir.dstu2.proto.Reference
	200,  // 613: google.fhir.dstu2.proto.DiagnosticReport.effective:type_name -> google.fhir.dstu2.proto.DiagnosticReport.Effective
	412,  // 614: google.fhir.dstu2.proto.DiagnosticReport.issued:type_name -> google.fhir.dstu2.proto.Instant
	403,  // 615: google.fhir.dstu2.proto.DiagnosticReport.performer:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 616: google.fhir.dstu2.proto.DiagnosticReport.request:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 617: google.fhir.dstu2.proto.DiagnosticReport.specimen:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 618: google.fhir.dstu2.proto.DiagnosticReport.result:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 619: google.fhir.dstu2.proto.DiagnosticReport.imaging_study:type_name -> google.fhir.dstu2.proto.Reference
	201,  // 620: google.fhir.dstu2.proto.DiagnosticReport.image:type_name -> google.fhir.dstu2.proto.DiagnosticReport.Image
	397,  // 621: google.fhir.dstu2.proto.DiagnosticReport.conclusion:type_name -> google.fhir.dstu2.proto.String
	398,  // 622: google.fhir.dstu2.proto.DiagnosticReport.coded_diagnosis:type_name -> google.fhir.dstu2.proto.CodeableConcept
	418,  // 623: google.fhir.dstu2.proto.DiagnosticReport.presented_form:type_name -> google.fhir.dstu2.proto.Attachment
	390,  // 624: google.fhir.dstu2.proto.DocumentManifest.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 625: google.fhir.dstu2.proto.DocumentManifest.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 626: google.fhir.dstu2.proto.DocumentManifest.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 627: google.fhir.dstu2.proto.DocumentManifest.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 628: google.fhir.dstu2.proto.DocumentManifest.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 629: google.fhir.dstu2.proto.DocumentManifest.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 630: google.fhir.dstu2.proto.DocumentManifest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 631: google.fhir.dstu2.proto.DocumentManifest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 632: google.fhir.dstu2.proto.DocumentManifest.master_identifier:type_name -> google.fhir.dstu2.proto.Identifier
	396,  // 633: google.fhir.dstu2.proto.DocumentManifest.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 634: google.fhir.dstu2.proto.DocumentManifest.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 635: google.fhir.dstu2.proto.DocumentManifest.recipient:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 636: google.fhir.dstu2.proto.DocumentManifest.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 637: google.fhir.dstu2.proto.DocumentManifest.author:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 638: google.fhir.dstu2.proto.DocumentManifest.created:type_name -> google.fhir.dstu2.proto.DateTime
	392,  // 639: google.fhir.dstu2.proto.DocumentManifest.source:type_name -> google.fhir.dstu2.proto.Uri
	450,  // 640: google.fhir.dstu2.proto.DocumentManifest.status:type_name -> google.fhir.dstu2.proto.DocumentReferenceStatusCode
	397,  // 641: google.fhir.dstu2.proto.DocumentManifest.description:type_name -> google.fhir.dstu2.proto.String
	202,  // 642: google.fhir.dstu2.proto.DocumentManifest.content:type_name -> google.fhir.dstu2.proto.DocumentManifest.Content
	203,  // 643: google.fhir.dstu2.proto.DocumentManifest.related:type_name -> google.fhir.dstu2.proto.DocumentManifest.Related
	390,  // 644: google.fhir.dstu2.proto.DocumentReference.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 645: google.fhir.dstu2.proto.DocumentReference.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 646: google.fhir.dstu2.proto.DocumentReference.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 647: google.fhir.dstu2.proto.DocumentReference.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 648: google.fhir.dstu2.proto.DocumentReference.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 649: google.fhir.dstu2.proto.DocumentReference.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 650: google.fhir.dstu2.proto.DocumentReference.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 651: google.fhir.dstu2.proto.DocumentReference.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 652: google.fhir.dstu2.proto.DocumentReference.master_identifier:type_name -> google.fhir.dstu2.proto.Identifier
	396,  // 653: google.fhir.dstu2.proto.DocumentReference.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 654: google.fhir.dstu2.proto.DocumentReference.subject:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 655: google.fhir.dstu2.proto.DocumentReference.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 656: google.fhir.dstu2.proto.DocumentReference.class_value:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 657: google.fhir.dstu2.proto.DocumentReference.author:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 658: google.fhir.dstu2.proto.DocumentReference.custodian:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 659: google.fhir.dstu2.proto.DocumentReference.authenticator:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 660: google.fhir.dstu2.proto.DocumentReference.created:type_name -> google.fhir.dstu2.proto.DateTime
	412,  // 661: google.fhir.dstu2.proto.DocumentReference.indexed:type_name -> google.fhir.dstu2.proto.Instant
	450,  // 662: google.fhir.dstu2.proto.DocumentReference.status:type_name -> google.fhir.dstu2.proto.DocumentReferenceStatusCode
	398,  // 663: google.fhir.dstu2.proto.DocumentReference.doc_status:type_name -> google.fhir.dstu2.proto.CodeableConcept
	205,  // 664: google.fhir.dstu2.proto.DocumentReference.relates_to:type_name -> google.fhir.dstu2.proto.DocumentReference.RelatesTo
	397,  // 665: google.fhir.dstu2.proto.DocumentReference.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 666: google.fhir.dstu2.proto.DocumentReference.security_label:type_name -> google.fhir.dstu2.proto.CodeableConcept
	206,  // 667: google.fhir.dstu2.proto.DocumentReference.content:type_name -> google.fhir.dstu2.proto.DocumentReference.Content
	207,  // 668: google.fhir.dstu2.proto.DocumentReference.context:type_name -> google.fhir.dstu2.proto.DocumentReference.Context
	390,  // 669: google.fhir.dstu2.proto.DomainResource.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 670: google.fhir.dstu2.proto.DomainResource.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 671: google.fhir.dstu2.proto.DomainResource.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 672: google.fhir.dstu2.proto.DomainResource.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 673: google.fhir.dstu2.proto.DomainResource.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 674: google.fhir.dstu2.proto.DomainResource.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 675: google.fhir.dstu2.proto.DomainResource.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 676: google.fhir.dstu2.proto.DomainResource.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	390,  // 677: google.fhir.dstu2.proto.EligibilityRequest.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 678: google.fhir.dstu2.proto.EligibilityRequest.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 679: google.fhir.dstu2.proto.EligibilityRequest.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 680: google.fhir.dstu2.proto.EligibilityRequest.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 681: google.fhir.dstu2.proto.EligibilityRequest.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 682: google.fhir.dstu2.proto.EligibilityRequest.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 683: google.fhir.dstu2.proto.EligibilityRequest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 684: google.fhir.dstu2.proto.EligibilityRequest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 685: google.fhir.dstu2.proto.EligibilityRequest.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	401,  // 686: google.fhir.dstu2.proto.EligibilityRequest.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 687: google.fhir.dstu2.proto.EligibilityRequest.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 688: google.fhir.dstu2.proto.EligibilityRequest.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 689: google.fhir.dstu2.proto.EligibilityRequest.target:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 690: google.fhir.dstu2.proto.EligibilityRequest.provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 691: google.fhir.dstu2.proto.EligibilityRequest.organization:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 692: google.fhir.dstu2.proto.EligibilityResponse.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 693: google.fhir.dstu2.proto.EligibilityResponse.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 694: google.fhir.dstu2.proto.EligibilityResponse.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 695: google.fhir.dstu2.proto.EligibilityResponse.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 696: google.fhir.dstu2.proto.EligibilityResponse.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 697: google.fhir.dstu2.proto.EligibilityResponse.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 698: google.fhir.dstu2.proto.EligibilityResponse.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 699: google.fhir.dstu2.proto.EligibilityResponse.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 700: google.fhir.dstu2.proto.EligibilityResponse.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 701: google.fhir.dstu2.proto.EligibilityResponse.request:type_name -> google.fhir.dstu2.proto.Reference
	424,  // 702: google.fhir.dstu2.proto.EligibilityResponse.outcome:type_name -> google.fhir.dstu2.proto.RemittanceOutcomeCode
	397,  // 703: google.fhir.dstu2.proto.EligibilityResponse.disposition:type_name -> google.fhir.dstu2.proto.String
	401,  // 704: google.fhir.dstu2.proto.EligibilityResponse.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 705: google.fhir.dstu2.proto.EligibilityResponse.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 706: google.fhir.dstu2.proto.EligibilityResponse.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 707: google.fhir.dstu2.proto.EligibilityResponse.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 708: google.fhir.dstu2.proto.EligibilityResponse.request_provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 709: google.fhir.dstu2.proto.EligibilityResponse.request_organization:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 710: google.fhir.dstu2.proto.Encounter.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 711: google.fhir.dstu2.proto.Encounter.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 712: google.fhir.dstu2.proto.Encounter.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 713: google.fhir.dstu2.proto.Encounter.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 714: google.fhir.dstu2.proto.Encounter.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 715: google.fhir.dstu2.proto.Encounter.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 716: google.fhir.dstu2.proto.Encounter.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 717: google.fhir.dstu2.proto.Encounter.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 718: google.fhir.dstu2.proto.Encounter.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	451,  // 719: google.fhir.dstu2.proto.Encounter.status:type_name -> google.fhir.dstu2.proto.EncounterStateCode
	209,  // 720: google.fhir.dstu2.proto.Encounter.status_history:type_name -> google.fhir.dstu2.proto.Encounter.StatusHistory
	452,  // 721: google.fhir.dstu2.proto.Encounter.class_value:type_name -> google.fhir.dstu2.proto.EncounterClassCode
	398,  // 722: google.fhir.dstu2.proto.Encounter.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 723: google.fhir.dstu2.proto.Encounter.priority:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 724: google.fhir.dstu2.proto.Encounter.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 725: google.fhir.dstu2.proto.Encounter.episode_of_care:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 726: google.fhir.dstu2.proto.Encounter.incoming_referral:type_name -> google.fhir.dstu2.proto.Reference
	210,  // 727: google.fhir.dstu2.proto.Encounter.participant:type_name -> google.fhir.dstu2.proto.Encounter.Participant
	403,  // 728: google.fhir.dstu2.proto.Encounter.appointment:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 729: google.fhir.dstu2.proto.Encounter.period:type_name -> google.fhir.dstu2.proto.Period
	453,  // 730: google.fhir.dstu2.proto.Encounter.length:type_name -> google.fhir.dstu2.proto.Duration
	398,  // 731: google.fhir.dstu2.proto.Encounter.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 732: google.fhir.dstu2.proto.Encounter.indication:type_name -> google.fhir.dstu2.proto.Reference
	211,  // 733: google.fhir.dstu2.proto.Encounter.hospitalization:type_name -> google.fhir.dstu2.proto.Encounter.Hospitalization
	212,  // 734: google.fhir.dstu2.proto.Encounter.location:type_name -> google.fhir.dstu2.proto.Encounter.Location
	403,  // 735: google.fhir.dstu2.proto.Encounter.service_provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 736: google.fhir.dstu2.proto.Encounter.part_of:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 737: google.fhir.dstu2.proto.EnrollmentRequest.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 738: google.fhir.dstu2.proto.EnrollmentRequest.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 739: google.fhir.dstu2.proto.EnrollmentRequest.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 740: google.fhir.dstu2.proto.EnrollmentRequest.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 741: google.fhir.dstu2.proto.EnrollmentRequest.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 742: google.fhir.dstu2.proto.EnrollmentRequest.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 743: google.fhir.dstu2.proto.EnrollmentRequest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 744: google.fhir.dstu2.proto.EnrollmentRequest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 745: google.fhir.dstu2.proto.EnrollmentRequest.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	401,  // 746: google.fhir.dstu2.proto.EnrollmentRequest.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 747: google.fhir.dstu2.proto.EnrollmentRequest.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 748: google.fhir.dstu2.proto.EnrollmentRequest.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 749: google.fhir.dstu2.proto.EnrollmentRequest.target:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 750: google.fhir.dstu2.proto.EnrollmentRequest.provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 751: google.fhir.dstu2.proto.EnrollmentRequest.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 752: google.fhir.dstu2.proto.EnrollmentRequest.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 753: google.fhir.dstu2.proto.EnrollmentRequest.coverage:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 754: google.fhir.dstu2.proto.EnrollmentRequest.relationship:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 755: google.fhir.dstu2.proto.EnrollmentResponse.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 756: google.fhir.dstu2.proto.EnrollmentResponse.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 757: google.fhir.dstu2.proto.EnrollmentResponse.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 758: google.fhir.dstu2.proto.EnrollmentResponse.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 759: google.fhir.dstu2.proto.EnrollmentResponse.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 760: google.fhir.dstu2.proto.EnrollmentResponse.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 761: google.fhir.dstu2.proto.EnrollmentResponse.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 762: google.fhir.dstu2.proto.EnrollmentResponse.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 763: google.fhir.dstu2.proto.EnrollmentResponse.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 764: google.fhir.dstu2.proto.EnrollmentResponse.request:type_name -> google.fhir.dstu2.proto.Reference
	424,  // 765: google.fhir.dstu2.proto.EnrollmentResponse.outcome:type_name -> google.fhir.dstu2.proto.RemittanceOutcomeCode
	397,  // 766: google.fhir.dstu2.proto.EnrollmentResponse.disposition:type_name -> google.fhir.dstu2.proto.String
	401,  // 767: google.fhir.dstu2.proto.EnrollmentResponse.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 768: google.fhir.dstu2.proto.EnrollmentResponse.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 769: google.fhir.dstu2.proto.EnrollmentResponse.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 770: google.fhir.dstu2.proto.EnrollmentResponse.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 771: google.fhir.dstu2.proto.EnrollmentResponse.request_provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 772: google.fhir.dstu2.proto.EnrollmentResponse.request_organization:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 773: google.fhir.dstu2.proto.EpisodeOfCare.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 774: google.fhir.dstu2.proto.EpisodeOfCare.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 775: google.fhir.dstu2.proto.EpisodeOfCare.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 776: google.fhir.dstu2.proto.EpisodeOfCare.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 777: google.fhir.dstu2.proto.EpisodeOfCare.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 778: google.fhir.dstu2.proto.EpisodeOfCare.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 779: google.fhir.dstu2.proto.EpisodeOfCare.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 780: google.fhir.dstu2.proto.EpisodeOfCare.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 781: google.fhir.dstu2.proto.EpisodeOfCare.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	454,  // 782: google.fhir.dstu2.proto.EpisodeOfCare.status:type_name -> google.fhir.dstu2.proto.EpisodeOfCareStatusCode
	213,  // 783: google.fhir.dstu2.proto.EpisodeOfCare.status_history:type_name -> google.fhir.dstu2.proto.EpisodeOfCare.StatusHistory
	398,  // 784: google.fhir.dstu2.proto.EpisodeOfCare.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 785: google.fhir.dstu2.proto.EpisodeOfCare.condition:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 786: google.fhir.dstu2.proto.EpisodeOfCare.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 787: google.fhir.dstu2.proto.EpisodeOfCare.managing_organization:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 788: google.fhir.dstu2.proto.EpisodeOfCare.period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 789: google.fhir.dstu2.proto.EpisodeOfCare.referral_request:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 790: google.fhir.dstu2.proto.EpisodeOfCare.care_manager:type_name -> google.fhir.dstu2.proto.Reference
	214,  // 791: google.fhir.dstu2.proto.EpisodeOfCare.care_team:type_name -> google.fhir.dstu2.proto.EpisodeOfCare.CareTeam
	390,  // 792: google.fhir.dstu2.proto.ExplanationOfBenefit.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 793: google.fhir.dstu2.proto.ExplanationOfBenefit.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 794: google.fhir.dstu2.proto.ExplanationOfBenefit.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 795: google.fhir.dstu2.proto.ExplanationOfBenefit.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 796: google.fhir.dstu2.proto.ExplanationOfBenefit.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 797: google.fhir.dstu2.proto.ExplanationOfBenefit.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 798: google.fhir.dstu2.proto.ExplanationOfBenefit.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 799: google.fhir.dstu2.proto.ExplanationOfBenefit.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 800: google.fhir.dstu2.proto.ExplanationOfBenefit.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 801: google.fhir.dstu2.proto.ExplanationOfBenefit.request:type_name -> google.fhir.dstu2.proto.Reference
	424,  // 802: google.fhir.dstu2.proto.ExplanationOfBenefit.outcome:type_name -> google.fhir.dstu2.proto.RemittanceOutcomeCode
	397,  // 803: google.fhir.dstu2.proto.ExplanationOfBenefit.disposition:type_name -> google.fhir.dstu2.proto.String
	401,  // 804: google.fhir.dstu2.proto.ExplanationOfBenefit.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 805: google.fhir.dstu2.proto.ExplanationOfBenefit.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 806: google.fhir.dstu2.proto.ExplanationOfBenefit.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 807: google.fhir.dstu2.proto.ExplanationOfBenefit.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 808: google.fhir.dstu2.proto.ExplanationOfBenefit.request_provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 809: google.fhir.dstu2.proto.ExplanationOfBenefit.request_organization:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 810: google.fhir.dstu2.proto.FamilyMemberHistory.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 811: google.fhir.dstu2.proto.FamilyMemberHistory.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 812: google.fhir.dstu2.proto.FamilyMemberHistory.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 813: google.fhir.dstu2.proto.FamilyMemberHistory.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 814: google.fhir.dstu2.proto.FamilyMemberHistory.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 815: google.fhir.dstu2.proto.FamilyMemberHistory.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 816: google.fhir.dstu2.proto.FamilyMemberHistory.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 817: google.fhir.dstu2.proto.FamilyMemberHistory.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 818: google.fhir.dstu2.proto.FamilyMemberHistory.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 819: google.fhir.dstu2.proto.FamilyMemberHistory.patient:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 820: google.fhir.dstu2.proto.FamilyMemberHistory.date:type_name -> google.fhir.dstu2.proto.DateTime
	455,  // 821: google.fhir.dstu2.proto.FamilyMemberHistory.status:type_name -> google.fhir.dstu2.proto.FamilyHistoryStatusCode
	397,  // 822: google.fhir.dstu2.proto.FamilyMemberHistory.name:type_name -> google.fhir.dstu2.proto.String
	398,  // 823: google.fhir.dstu2.proto.FamilyMemberHistory.relationship:type_name -> google.fhir.dstu2.proto.CodeableConcept
	456,  // 824: google.fhir.dstu2.proto.FamilyMemberHistory.gender:type_name -> google.fhir.dstu2.proto.AdministrativeGenderCode
	215,  // 825: google.fhir.dstu2.proto.FamilyMemberHistory.born:type_name -> google.fhir.dstu2.proto.FamilyMemberHistory.Born
	216,  // 826: google.fhir.dstu2.proto.FamilyMemberHistory.age:type_name -> google.fhir.dstu2.proto.FamilyMemberHistory.AgeType
	217,  // 827: google.fhir.dstu2.proto.FamilyMemberHistory.deceased:type_name -> google.fhir.dstu2.proto.FamilyMemberHistory.Deceased
	409,  // 828: google.fhir.dstu2.proto.FamilyMemberHistory.note:type_name -> google.fhir.dstu2.proto.Annotation
	218,  // 829: google.fhir.dstu2.proto.FamilyMemberHistory.condition:type_name -> google.fhir.dstu2.proto.FamilyMemberHistory.Condition
	390,  // 830: google.fhir.dstu2.proto.Flag.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 831: google.fhir.dstu2.proto.Flag.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 832: google.fhir.dstu2.proto.Flag.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 833: google.fhir.dstu2.proto.Flag.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 834: google.fhir.dstu2.proto.Flag.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 835: google.fhir.dstu2.proto.Flag.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 836: google.fhir.dstu2.proto.Flag.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 837: google.fhir.dstu2.proto.Flag.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 838: google.fhir.dstu2.proto.Flag.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 839: google.fhir.dstu2.proto.Flag.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	457,  // 840: google.fhir.dstu2.proto.Flag.status:type_name -> google.fhir.dstu2.proto.FlagStatusCode
	400,  // 841: google.fhir.dstu2.proto.Flag.period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 842: google.fhir.dstu2.proto.Flag.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 843: google.fhir.dstu2.proto.Flag.encounter:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 844: google.fhir.dstu2.proto.Flag.author:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 845: google.fhir.dstu2.proto.Flag.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 846: google.fhir.dstu2.proto.Goal.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 847: google.fhir.dstu2.proto.Goal.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 848: google.fhir.dstu2.proto.Goal.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 849: google.fhir.dstu2.proto.Goal.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 850: google.fhir.dstu2.proto.Goal.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 851: google.fhir.dstu2.proto.Goal.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 852: google.fhir.dstu2.proto.Goal.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 853: google.fhir.dstu2.proto.Goal.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 854: google.fhir.dstu2.proto.Goal.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 855: google.fhir.dstu2.proto.Goal.subject:type_name -> google.fhir.dstu2.proto.Reference
	220,  // 856: google.fhir.dstu2.proto.Goal.start:type_name -> google.fhir.dstu2.proto.Goal.Start
	221,  // 857: google.fhir.dstu2.proto.Goal.target:type_name -> google.fhir.dstu2.proto.Goal.Target
	398,  // 858: google.fhir.dstu2.proto.Goal.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 859: google.fhir.dstu2.proto.Goal.description:type_name -> google.fhir.dstu2.proto.String
	458,  // 860: google.fhir.dstu2.proto.Goal.status:type_name -> google.fhir.dstu2.proto.GoalStatusCode
	415,  // 861: google.fhir.dstu2.proto.Goal.status_date:type_name -> google.fhir.dstu2.proto.Date
	398,  // 862: google.fhir.dstu2.proto.Goal.status_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 863: google.fhir.dstu2.proto.Goal.author:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 864: google.fhir.dstu2.proto.Goal.priority:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 865: google.fhir.dstu2.proto.Goal.addresses:type_name -> google.fhir.dstu2.proto.Reference
	409,  // 866: google.fhir.dstu2.proto.Goal.note:type_name -> google.fhir.dstu2.proto.Annotation
	222,  // 867: google.fhir.dstu2.proto.Goal.outcome:type_name -> google.fhir.dstu2.proto.Goal.Outcome
	390,  // 868: google.fhir.dstu2.proto.Group.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 869: google.fhir.dstu2.proto.Group.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 870: google.fhir.dstu2.proto.Group.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 871: google.fhir.dstu2.proto.Group.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 872: google.fhir.dstu2.proto.Group.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 873: google.fhir.dstu2.proto.Group.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 874: google.fhir.dstu2.proto.Group.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 875: google.fhir.dstu2.proto.Group.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 876: google.fhir.dstu2.proto.Group.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	459,  // 877: google.fhir.dstu2.proto.Group.type:type_name -> google.fhir.dstu2.proto.GroupTypeCode
	431,  // 878: google.fhir.dstu2.proto.Group.actual:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 879: google.fhir.dstu2.proto.Group.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 880: google.fhir.dstu2.proto.Group.name:type_name -> google.fhir.dstu2.proto.String
	411,  // 881: google.fhir.dstu2.proto.Group.quantity:type_name -> google.fhir.dstu2.proto.UnsignedInt
	224,  // 882: google.fhir.dstu2.proto.Group.characteristic:type_name -> google.fhir.dstu2.proto.Group.Characteristic
	225,  // 883: google.fhir.dstu2.proto.Group.member:type_name -> google.fhir.dstu2.proto.Group.Member
	390,  // 884: google.fhir.dstu2.proto.HealthcareService.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 885: google.fhir.dstu2.proto.HealthcareService.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 886: google.fhir.dstu2.proto.HealthcareService.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 887: google.fhir.dstu2.proto.HealthcareService.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 888: google.fhir.dstu2.proto.HealthcareService.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 889: google.fhir.dstu2.proto.HealthcareService.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 890: google.fhir.dstu2.proto.HealthcareService.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 891: google.fhir.dstu2.proto.HealthcareService.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 892: google.fhir.dstu2.proto.HealthcareService.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 893: google.fhir.dstu2.proto.HealthcareService.provided_by:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 894: google.fhir.dstu2.proto.HealthcareService.service_category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	227,  // 895: google.fhir.dstu2.proto.HealthcareService.service_type:type_name -> google.fhir.dstu2.proto.HealthcareService.ServiceType
	403,  // 896: google.fhir.dstu2.proto.HealthcareService.location:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 897: google.fhir.dstu2.proto.HealthcareService.service_name:type_name -> google.fhir.dstu2.proto.String
	397,  // 898: google.fhir.dstu2.proto.HealthcareService.comment:type_name -> google.fhir.dstu2.proto.String
	397,  // 899: google.fhir.dstu2.proto.HealthcareService.extra_details:type_name -> google.fhir.dstu2.proto.String
	418,  // 900: google.fhir.dstu2.proto.HealthcareService.photo:type_name -> google.fhir.dstu2.proto.Attachment
	439,  // 901: google.fhir.dstu2.proto.HealthcareService.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	403,  // 902: google.fhir.dstu2.proto.HealthcareService.coverage_area:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 903: google.fhir.dstu2.proto.HealthcareService.service_provision_code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 904: google.fhir.dstu2.proto.HealthcareService.eligibility:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 905: google.fhir.dstu2.proto.HealthcareService.eligibility_note:type_name -> google.fhir.dstu2.proto.String
	397,  // 906: google.fhir.dstu2.proto.HealthcareService.program_name:type_name -> google.fhir.dstu2.proto.String
	398,  // 907: google.fhir.dstu2.proto.HealthcareService.characteristic:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 908: google.fhir.dstu2.proto.HealthcareService.referral_method:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 909: google.fhir.dstu2.proto.HealthcareService.public_key:type_name -> google.fhir.dstu2.proto.String
	431,  // 910: google.fhir.dstu2.proto.HealthcareService.appointment_required:type_name -> google.fhir.dstu2.proto.Boolean
	228,  // 911: google.fhir.dstu2.proto.HealthcareService.available_time:type_name -> google.fhir.dstu2.proto.HealthcareService.AvailableTime
	229,  // 912: google.fhir.dstu2.proto.HealthcareService.not_available:type_name -> google.fhir.dstu2.proto.HealthcareService.NotAvailable
	397,  // 913: google.fhir.dstu2.proto.HealthcareService.availability_exceptions:type_name -> google.fhir.dstu2.proto.String
	390,  // 914: google.fhir.dstu2.proto.ImagingObjectSelection.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 915: google.fhir.dstu2.proto.ImagingObjectSelection.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 916: google.fhir.dstu2.proto.ImagingObjectSelection.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 917: google.fhir.dstu2.proto.ImagingObjectSelection.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 918: google.fhir.dstu2.proto.ImagingObjectSelection.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 919: google.fhir.dstu2.proto.ImagingObjectSelection.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 920: google.fhir.dstu2.proto.ImagingObjectSelection.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 921: google.fhir.dstu2.proto.ImagingObjectSelection.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	460,  // 922: google.fhir.dstu2.proto.ImagingObjectSelection.uid:type_name -> google.fhir.dstu2.proto.Oid
	403,  // 923: google.fhir.dstu2.proto.ImagingObjectSelection.patient:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 924: google.fhir.dstu2.proto.ImagingObjectSelection.title:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 925: google.fhir.dstu2.proto.ImagingObjectSelection.description:type_name -> google.fhir.dstu2.proto.String
	403,  // 926: google.fhir.dstu2.proto.ImagingObjectSelection.author:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 927: google.fhir.dstu2.proto.ImagingObjectSelection.authoring_time:type_name -> google.fhir.dstu2.proto.DateTime
	230,  // 928: google.fhir.dstu2.proto.ImagingObjectSelection.study:type_name -> google.fhir.dstu2.proto.ImagingObjectSelection.Study
	390,  // 929: google.fhir.dstu2.proto.ImagingStudy.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 930: google.fhir.dstu2.proto.ImagingStudy.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 931: google.fhir.dstu2.proto.ImagingStudy.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 932: google.fhir.dstu2.proto.ImagingStudy.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 933: google.fhir.dstu2.proto.ImagingStudy.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 934: google.fhir.dstu2.proto.ImagingStudy.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 935: google.fhir.dstu2.proto.ImagingStudy.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 936: google.fhir.dstu2.proto.ImagingStudy.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	404,  // 937: google.fhir.dstu2.proto.ImagingStudy.started:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 938: google.fhir.dstu2.proto.ImagingStudy.patient:type_name -> google.fhir.dstu2.proto.Reference
	460,  // 939: google.fhir.dstu2.proto.ImagingStudy.uid:type_name -> google.fhir.dstu2.proto.Oid
	396,  // 940: google.fhir.dstu2.proto.ImagingStudy.accession:type_name -> google.fhir.dstu2.proto.Identifier
	396,  // 941: google.fhir.dstu2.proto.ImagingStudy.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 942: google.fhir.dstu2.proto.ImagingStudy.order:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 943: google.fhir.dstu2.proto.ImagingStudy.modality_list:type_name -> google.fhir.dstu2.proto.Coding
	403,  // 944: google.fhir.dstu2.proto.ImagingStudy.referrer:type_name -> google.fhir.dstu2.proto.Reference
	461,  // 945: google.fhir.dstu2.proto.ImagingStudy.availability:type_name -> google.fhir.dstu2.proto.InstanceAvailabilityCode
	392,  // 946: google.fhir.dstu2.proto.ImagingStudy.url:type_name -> google.fhir.dstu2.proto.Uri
	411,  // 947: google.fhir.dstu2.proto.ImagingStudy.number_of_series:type_name -> google.fhir.dstu2.proto.UnsignedInt
	411,  // 948: google.fhir.dstu2.proto.ImagingStudy.number_of_instances:type_name -> google.fhir.dstu2.proto.UnsignedInt
	403,  // 949: google.fhir.dstu2.proto.ImagingStudy.procedure:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 950: google.fhir.dstu2.proto.ImagingStudy.interpreter:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 951: google.fhir.dstu2.proto.ImagingStudy.description:type_name -> google.fhir.dstu2.proto.String
	234,  // 952: google.fhir.dstu2.proto.ImagingStudy.series:type_name -> google.fhir.dstu2.proto.ImagingStudy.Series
	390,  // 953: google.fhir.dstu2.proto.Immunization.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 954: google.fhir.dstu2.proto.Immunization.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 955: google.fhir.dstu2.proto.Immunization.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 956: google.fhir.dstu2.proto.Immunization.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 957: google.fhir.dstu2.proto.Immunization.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 958: google.fhir.dstu2.proto.Immunization.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 959: google.fhir.dstu2.proto.Immunization.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 960: google.fhir.dstu2.proto.Immunization.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 961: google.fhir.dstu2.proto.Immunization.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	462,  // 962: google.fhir.dstu2.proto.Immunization.status:type_name -> google.fhir.dstu2.proto.MedicationAdministrationStatusCode
	404,  // 963: google.fhir.dstu2.proto.Immunization.date:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 964: google.fhir.dstu2.proto.Immunization.vaccine_code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 965: google.fhir.dstu2.proto.Immunization.patient:type_name -> google.fhir.dstu2.proto.Reference
	431,  // 966: google.fhir.dstu2.proto.Immunization.was_not_given:type_name -> google.fhir.dstu2.proto.Boolean
	431,  // 967: google.fhir.dstu2.proto.Immunization.reported:type_name -> google.fhir.dstu2.proto.Boolean
	403,  // 968: google.fhir.dstu2.proto.Immunization.performer:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 969: google.fhir.dstu2.proto.Immunization.requester:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 970: google.fhir.dstu2.proto.Immunization.encounter:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 971: google.fhir.dstu2.proto.Immunization.manufacturer:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 972: google.fhir.dstu2.proto.Immunization.location:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 973: google.fhir.dstu2.proto.Immunization.lot_number:type_name -> google.fhir.dstu2.proto.String
	415,  // 974: google.fhir.dstu2.proto.Immunization.expiration_date:type_name -> google.fhir.dstu2.proto.Date
	398,  // 975: google.fhir.dstu2.proto.Immunization.site:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 976: google.fhir.dstu2.proto.Immunization.route:type_name -> google.fhir.dstu2.proto.CodeableConcept
	463,  // 977: google.fhir.dstu2.proto.Immunization.dose_quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	409,  // 978: google.fhir.dstu2.proto.Immunization.note:type_name -> google.fhir.dstu2.proto.Annotation
	236,  // 979: google.fhir.dstu2.proto.Immunization.explanation:type_name -> google.fhir.dstu2.proto.Immunization.Explanation
	237,  // 980: google.fhir.dstu2.proto.Immunization.reaction:type_name -> google.fhir.dstu2.proto.Immunization.Reaction
	238,  // 981: google.fhir.dstu2.proto.Immunization.vaccination_protocol:type_name -> google.fhir.dstu2.proto.Immunization.VaccinationProtocol
	390,  // 982: google.fhir.dstu2.proto.ImmunizationRecommendation.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 983: google.fhir.dstu2.proto.ImmunizationRecommendation.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 984: google.fhir.dstu2.proto.ImmunizationRecommendation.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 985: google.fhir.dstu2.proto.ImmunizationRecommendation.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 986: google.fhir.dstu2.proto.ImmunizationRecommendation.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 987: google.fhir.dstu2.proto.ImmunizationRecommendation.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 988: google.fhir.dstu2.proto.ImmunizationRecommendation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 989: google.fhir.dstu2.proto.ImmunizationRecommendation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 990: google.fhir.dstu2.proto.ImmunizationRecommendation.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 991: google.fhir.dstu2.proto.ImmunizationRecommendation.patient:type_name -> google.fhir.dstu2.proto.Reference
	239,  // 992: google.fhir.dstu2.proto.ImmunizationRecommendation.recommendation:type_name -> google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation
	390,  // 993: google.fhir.dstu2.proto.ImplementationGuide.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 994: google.fhir.dstu2.proto.ImplementationGuide.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 995: google.fhir.dstu2.proto.ImplementationGuide.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 996: google.fhir.dstu2.proto.ImplementationGuide.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 997: google.fhir.dstu2.proto.ImplementationGuide.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 998: google.fhir.dstu2.proto.ImplementationGuide.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 999: google.fhir.dstu2.proto.ImplementationGuide.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1000: google.fhir.dstu2.proto.ImplementationGuide.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 1001: google.fhir.dstu2.proto.ImplementationGuide.url:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 1002: google.fhir.dstu2.proto.ImplementationGuide.version:type_name -> google.fhir.dstu2.proto.String
	397,  // 1003: google.fhir.dstu2.proto.ImplementationGuide.name:type_name -> google.fhir.dstu2.proto.String
	430,  // 1004: google.fhir.dstu2.proto.ImplementationGuide.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	431,  // 1005: google.fhir.dstu2.proto.ImplementationGuide.experimental:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 1006: google.fhir.dstu2.proto.ImplementationGuide.publisher:type_name -> google.fhir.dstu2.proto.String
	242,  // 1007: google.fhir.dstu2.proto.ImplementationGuide.contact:type_name -> google.fhir.dstu2.proto.ImplementationGuide.Contact
	404,  // 1008: google.fhir.dstu2.proto.ImplementationGuide.date:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 1009: google.fhir.dstu2.proto.ImplementationGuide.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 1010: google.fhir.dstu2.proto.ImplementationGuide.use_context:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1011: google.fhir.dstu2.proto.ImplementationGuide.copyright:type_name -> google.fhir.dstu2.proto.String
	390,  // 1012: google.fhir.dstu2.proto.ImplementationGuide.fhir_version:type_name -> google.fhir.dstu2.proto.Id
	243,  // 1013: google.fhir.dstu2.proto.ImplementationGuide.dependency:type_name -> google.fhir.dstu2.proto.ImplementationGuide.Dependency
	244,  // 1014: google.fhir.dstu2.proto.ImplementationGuide.package_value:type_name -> google.fhir.dstu2.proto.ImplementationGuide.Package
	245,  // 1015: google.fhir.dstu2.proto.ImplementationGuide.global:type_name -> google.fhir.dstu2.proto.ImplementationGuide.Global
	392,  // 1016: google.fhir.dstu2.proto.ImplementationGuide.binary:type_name -> google.fhir.dstu2.proto.Uri
	246,  // 1017: google.fhir.dstu2.proto.ImplementationGuide.page:type_name -> google.fhir.dstu2.proto.ImplementationGuide.Page
	390,  // 1018: google.fhir.dstu2.proto.List.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1019: google.fhir.dstu2.proto.List.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1020: google.fhir.dstu2.proto.List.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1021: google.fhir.dstu2.proto.List.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1022: google.fhir.dstu2.proto.List.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1023: google.fhir.dstu2.proto.List.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1024: google.fhir.dstu2.proto.List.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1025: google.fhir.dstu2.proto.List.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1026: google.fhir.dstu2.proto.List.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 1027: google.fhir.dstu2.proto.List.title:type_name -> google.fhir.dstu2.proto.String
	398,  // 1028: google.fhir.dstu2.proto.List.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1029: google.fhir.dstu2.proto.List.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1030: google.fhir.dstu2.proto.List.source:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1031: google.fhir.dstu2.proto.List.encounter:type_name -> google.fhir.dstu2.proto.Reference
	464,  // 1032: google.fhir.dstu2.proto.List.status:type_name -> google.fhir.dstu2.proto.ListStatusCode
	404,  // 1033: google.fhir.dstu2.proto.List.date:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 1034: google.fhir.dstu2.proto.List.ordered_by:type_name -> google.fhir.dstu2.proto.CodeableConcept
	465,  // 1035: google.fhir.dstu2.proto.List.mode:type_name -> google.fhir.dstu2.proto.ListModeCode
	397,  // 1036: google.fhir.dstu2.proto.List.note:type_name -> google.fhir.dstu2.proto.String
	249,  // 1037: google.fhir.dstu2.proto.List.entry:type_name -> google.fhir.dstu2.proto.List.Entry
	398,  // 1038: google.fhir.dstu2.proto.List.empty_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 1039: google.fhir.dstu2.proto.Location.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1040: google.fhir.dstu2.proto.Location.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1041: google.fhir.dstu2.proto.Location.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1042: google.fhir.dstu2.proto.Location.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1043: google.fhir.dstu2.proto.Location.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1044: google.fhir.dstu2.proto.Location.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1045: google.fhir.dstu2.proto.Location.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1046: google.fhir.dstu2.proto.Location.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1047: google.fhir.dstu2.proto.Location.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	466,  // 1048: google.fhir.dstu2.proto.Location.status:type_name -> google.fhir.dstu2.proto.LocationStatusCode
	397,  // 1049: google.fhir.dstu2.proto.Location.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 1050: google.fhir.dstu2.proto.Location.description:type_name -> google.fhir.dstu2.proto.String
	467,  // 1051: google.fhir.dstu2.proto.Location.mode:type_name -> google.fhir.dstu2.proto.LocationModeCode
	398,  // 1052: google.fhir.dstu2.proto.Location.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	439,  // 1053: google.fhir.dstu2.proto.Location.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	468,  // 1054: google.fhir.dstu2.proto.Location.address:type_name -> google.fhir.dstu2.proto.Address
	398,  // 1055: google.fhir.dstu2.proto.Location.physical_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	250,  // 1056: google.fhir.dstu2.proto.Location.position:type_name -> google.fhir.dstu2.proto.Location.Position
	403,  // 1057: google.fhir.dstu2.proto.Location.managing_organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1058: google.fhir.dstu2.proto.Location.part_of:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 1059: google.fhir.dstu2.proto.Media.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1060: google.fhir.dstu2.proto.Media.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1061: google.fhir.dstu2.proto.Media.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1062: google.fhir.dstu2.proto.Media.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1063: google.fhir.dstu2.proto.Media.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1064: google.fhir.dstu2.proto.Media.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1065: google.fhir.dstu2.proto.Media.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1066: google.fhir.dstu2.proto.Media.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	469,  // 1067: google.fhir.dstu2.proto.Media.type:type_name -> google.fhir.dstu2.proto.DigitalMediaTypeCode
	398,  // 1068: google.fhir.dstu2.proto.Media.subtype:type_name -> google.fhir.dstu2.proto.CodeableConcept
	396,  // 1069: google.fhir.dstu2.proto.Media.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1070: google.fhir.dstu2.proto.Media.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1071: google.fhir.dstu2.proto.Media.operator:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 1072: google.fhir.dstu2.proto.Media.view:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1073: google.fhir.dstu2.proto.Media.device_name:type_name -> google.fhir.dstu2.proto.String
	413,  // 1074: google.fhir.dstu2.proto.Media.height:type_name -> google.fhir.dstu2.proto.PositiveInt
	413,  // 1075: google.fhir.dstu2.proto.Media.width:type_name -> google.fhir.dstu2.proto.PositiveInt
	413,  // 1076: google.fhir.dstu2.proto.Media.frames:type_name -> google.fhir.dstu2.proto.PositiveInt
	411,  // 1077: google.fhir.dstu2.proto.Media.duration:type_name -> google.fhir.dstu2.proto.UnsignedInt
	418,  // 1078: google.fhir.dstu2.proto.Media.content:type_name -> google.fhir.dstu2.proto.Attachment
	390,  // 1079: google.fhir.dstu2.proto.Medication.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1080: google.fhir.dstu2.proto.Medication.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1081: google.fhir.dstu2.proto.Medication.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1082: google.fhir.dstu2.proto.Medication.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1083: google.fhir.dstu2.proto.Medication.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1084: google.fhir.dstu2.proto.Medication.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1085: google.fhir.dstu2.proto.Medication.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1086: google.fhir.dstu2.proto.Medication.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 1087: google.fhir.dstu2.proto.Medication.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	431,  // 1088: google.fhir.dstu2.proto.Medication.is_brand:type_name -> google.fhir.dstu2.proto.Boolean
	403,  // 1089: google.fhir.dstu2.proto.Medication.manufacturer:type_name -> google.fhir.dstu2.proto.Reference
	251,  // 1090: google.fhir.dstu2.proto.Medication.product:type_name -> google.fhir.dstu2.proto.Medication.Product
	252,  // 1091: google.fhir.dstu2.proto.Medication.package_value:type_name -> google.fhir.dstu2.proto.Medication.Package
	390,  // 1092: google.fhir.dstu2.proto.MedicationAdministration.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1093: google.fhir.dstu2.proto.MedicationAdministration.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1094: google.fhir.dstu2.proto.MedicationAdministration.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1095: google.fhir.dstu2.proto.MedicationAdministration.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1096: google.fhir.dstu2.proto.MedicationAdministration.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1097: google.fhir.dstu2.proto.MedicationAdministration.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1098: google.fhir.dstu2.proto.MedicationAdministration.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1099: google.fhir.dstu2.proto.MedicationAdministration.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1100: google.fhir.dstu2.proto.MedicationAdministration.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	462,  // 1101: google.fhir.dstu2.proto.MedicationAdministration.status:type_name -> google.fhir.dstu2.proto.MedicationAdministrationStatusCode
	403,  // 1102: google.fhir.dstu2.proto.MedicationAdministration.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1103: google.fhir.dstu2.proto.MedicationAdministration.practitioner:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1104: google.fhir.dstu2.proto.MedicationAdministration.encounter:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1105: google.fhir.dstu2.proto.MedicationAdministration.prescription:type_name -> google.fhir.dstu2.proto.Reference
	431,  // 1106: google.fhir.dstu2.proto.MedicationAdministration.was_not_given:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 1107: google.fhir.dstu2.proto.MedicationAdministration.reason_not_given:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1108: google.fhir.dstu2.proto.MedicationAdministration.reason_given:type_name -> google.fhir.dstu2.proto.CodeableConcept
	256,  // 1109: google.fhir.dstu2.proto.MedicationAdministration.effective_time:type_name -> google.fhir.dstu2.proto.MedicationAdministration.EffectiveTime
	257,  // 1110: google.fhir.dstu2.proto.MedicationAdministration.medication:type_name -> google.fhir.dstu2.proto.MedicationAdministration.Medication
	403,  // 1111: google.fhir.dstu2.proto.MedicationAdministration.device:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 1112: google.fhir.dstu2.proto.MedicationAdministration.note:type_name -> google.fhir.dstu2.proto.String
	258,  // 1113: google.fhir.dstu2.proto.MedicationAdministration.dosage:type_name -> google.fhir.dstu2.proto.MedicationAdministration.Dosage
	390,  // 1114: google.fhir.dstu2.proto.MedicationDispense.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1115: google.fhir.dstu2.proto.MedicationDispense.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1116: google.fhir.dstu2.proto.MedicationDispense.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1117: google.fhir.dstu2.proto.MedicationDispense.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1118: google.fhir.dstu2.proto.MedicationDispense.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1119: google.fhir.dstu2.proto.MedicationDispense.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1120: google.fhir.dstu2.proto.MedicationDispense.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1121: google.fhir.dstu2.proto.MedicationDispense.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1122: google.fhir.dstu2.proto.MedicationDispense.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	470,  // 1123: google.fhir.dstu2.proto.MedicationDispense.status:type_name -> google.fhir.dstu2.proto.MedicationDispenseStatusCode
	403,  // 1124: google.fhir.dstu2.proto.MedicationDispense.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1125: google.fhir.dstu2.proto.MedicationDispense.dispenser:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1126: google.fhir.dstu2.proto.MedicationDispense.authorizing_prescription:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 1127: google.fhir.dstu2.proto.MedicationDispense.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	463,  // 1128: google.fhir.dstu2.proto.MedicationDispense.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	463,  // 1129: google.fhir.dstu2.proto.MedicationDispense.days_supply:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	261,  // 1130: google.fhir.dstu2.proto.MedicationDispense.medication:type_name -> google.fhir.dstu2.proto.MedicationDispense.Medication
	404,  // 1131: google.fhir.dstu2.proto.MedicationDispense.when_prepared:type_name -> google.fhir.dstu2.proto.DateTime
	404,  // 1132: google.fhir.dstu2.proto.MedicationDispense.when_handed_over:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1133: google.fhir.dstu2.proto.MedicationDispense.destination:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1134: google.fhir.dstu2.proto.MedicationDispense.receiver:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 1135: google.fhir.dstu2.proto.MedicationDispense.note:type_name -> google.fhir.dstu2.proto.String
	262,  // 1136: google.fhir.dstu2.proto.MedicationDispense.dosage_instruction:type_name -> google.fhir.dstu2.proto.MedicationDispense.DosageInstruction
	263,  // 1137: google.fhir.dstu2.proto.MedicationDispense.substitution:type_name -> google.fhir.dstu2.proto.MedicationDispense.Substitution
	390,  // 1138: google.fhir.dstu2.proto.MedicationOrder.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1139: google.fhir.dstu2.proto.MedicationOrder.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1140: google.fhir.dstu2.proto.MedicationOrder.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1141: google.fhir.dstu2.proto.MedicationOrder.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1142: google.fhir.dstu2.proto.MedicationOrder.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1143: google.fhir.dstu2.proto.MedicationOrder.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1144: google.fhir.dstu2.proto.MedicationOrder.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1145: google.fhir.dstu2.proto.MedicationOrder.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1146: google.fhir.dstu2.proto.MedicationOrder.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 1147: google.fhir.dstu2.proto.MedicationOrder.date_written:type_name -> google.fhir.dstu2.proto.DateTime
	471,  // 1148: google.fhir.dstu2.proto.MedicationOrder.status:type_name -> google.fhir.dstu2.proto.MedicationOrderStatusCode
	404,  // 1149: google.fhir.dstu2.proto.MedicationOrder.date_ended:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 1150: google.fhir.dstu2.proto.MedicationOrder.reason_ended:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1151: google.fhir.dstu2.proto.MedicationOrder.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1152: google.fhir.dstu2.proto.MedicationOrder.prescriber:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1153: google.fhir.dstu2.proto.MedicationOrder.encounter:type_name -> google.fhir.dstu2.proto.Reference
	268,  // 1154: google.fhir.dstu2.proto.MedicationOrder.reason:type_name -> google.fhir.dstu2.proto.MedicationOrder.Reason
	397,  // 1155: google.fhir.dstu2.proto.MedicationOrder.note:type_name -> google.fhir.dstu2.proto.String
	269,  // 1156: google.fhir.dstu2.proto.MedicationOrder.medication:type_name -> google.fhir.dstu2.proto.MedicationOrder.Medication
	270,  // 1157: google.fhir.dstu2.proto.MedicationOrder.dosage_instruction:type_name -> google.fhir.dstu2.proto.MedicationOrder.DosageInstruction
	271,  // 1158: google.fhir.dstu2.proto.MedicationOrder.dispense_request:type_name -> google.fhir.dstu2.proto.MedicationOrder.DispenseRequest
	272,  // 1159: google.fhir.dstu2.proto.MedicationOrder.substitution:type_name -> google.fhir.dstu2.proto.MedicationOrder.Substitution
	403,  // 1160: google.fhir.dstu2.proto.MedicationOrder.prior_prescription:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 1161: google.fhir.dstu2.proto.MedicationStatement.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1162: google.fhir.dstu2.proto.MedicationStatement.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1163: google.fhir.dstu2.proto.MedicationStatement.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1164: google.fhir.dstu2.proto.MedicationStatement.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1165: google.fhir.dstu2.proto.MedicationStatement.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1166: google.fhir.dstu2.proto.MedicationStatement.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1167: google.fhir.dstu2.proto.MedicationStatement.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1168: google.fhir.dstu2.proto.MedicationStatement.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1169: google.fhir.dstu2.proto.MedicationStatement.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1170: google.fhir.dstu2.proto.MedicationStatement.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1171: google.fhir.dstu2.proto.MedicationStatement.information_source:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 1172: google.fhir.dstu2.proto.MedicationStatement.date_asserted:type_name -> google.fhir.dstu2.proto.DateTime
	472,  // 1173: google.fhir.dstu2.proto.MedicationStatement.status:type_name -> google.fhir.dstu2.proto.MedicationStatementStatusCode
	431,  // 1174: google.fhir.dstu2.proto.MedicationStatement.was_not_taken:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 1175: google.fhir.dstu2.proto.MedicationStatement.reason_not_taken:type_name -> google.fhir.dstu2.proto.CodeableConcept
	278,  // 1176: google.fhir.dstu2.proto.MedicationStatement.reason_for_use:type_name -> google.fhir.dstu2.proto.MedicationStatement.ReasonForUse
	279,  // 1177: google.fhir.dstu2.proto.MedicationStatement.effective:type_name -> google.fhir.dstu2.proto.MedicationStatement.Effective
	397,  // 1178: google.fhir.dstu2.proto.MedicationStatement.note:type_name -> google.fhir.dstu2.proto.String
	403,  // 1179: google.fhir.dstu2.proto.MedicationStatement.supporting_information:type_name -> google.fhir.dstu2.proto.Reference
	280,  // 1180: google.fhir.dstu2.proto.MedicationStatement.medication:type_name -> google.fhir.dstu2.proto.MedicationStatement.Medication
	281,  // 1181: google.fhir.dstu2.proto.MedicationStatement.dosage:type_name -> google.fhir.dstu2.proto.MedicationStatement.Dosage
	390,  // 1182: google.fhir.dstu2.proto.MessageHeader.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1183: google.fhir.dstu2.proto.MessageHeader.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1184: google.fhir.dstu2.proto.MessageHeader.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1185: google.fhir.dstu2.proto.MessageHeader.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1186: google.fhir.dstu2.proto.MessageHeader.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1187: google.fhir.dstu2.proto.MessageHeader.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1188: google.fhir.dstu2.proto.MessageHeader.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1189: google.fhir.dstu2.proto.MessageHeader.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	412,  // 1190: google.fhir.dstu2.proto.MessageHeader.timestamp:type_name -> google.fhir.dstu2.proto.Instant
	401,  // 1191: google.fhir.dstu2.proto.MessageHeader.event:type_name -> google.fhir.dstu2.proto.Coding
	286,  // 1192: google.fhir.dstu2.proto.MessageHeader.response:type_name -> google.fhir.dstu2.proto.MessageHeader.Response
	287,  // 1193: google.fhir.dstu2.proto.MessageHeader.source:type_name -> google.fhir.dstu2.proto.MessageHeader.Source
	288,  // 1194: google.fhir.dstu2.proto.MessageHeader.destination:type_name -> google.fhir.dstu2.proto.MessageHeader.Destination
	403,  // 1195: google.fhir.dstu2.proto.MessageHeader.enterer:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1196: google.fhir.dstu2.proto.MessageHeader.author:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1197: google.fhir.dstu2.proto.MessageHeader.receiver:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1198: google.fhir.dstu2.proto.MessageHeader.responsible:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 1199: google.fhir.dstu2.proto.MessageHeader.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1200: google.fhir.dstu2.proto.MessageHeader.data:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 1201: google.fhir.dstu2.proto.NamingSystem.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1202: google.fhir.dstu2.proto.NamingSystem.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1203: google.fhir.dstu2.proto.NamingSystem.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1204: google.fhir.dstu2.proto.NamingSystem.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1205: google.fhir.dstu2.proto.NamingSystem.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1206: google.fhir.dstu2.proto.NamingSystem.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1207: google.fhir.dstu2.proto.NamingSystem.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1208: google.fhir.dstu2.proto.NamingSystem.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 1209: google.fhir.dstu2.proto.NamingSystem.name:type_name -> google.fhir.dstu2.proto.String
	430,  // 1210: google.fhir.dstu2.proto.NamingSystem.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	473,  // 1211: google.fhir.dstu2.proto.NamingSystem.kind:type_name -> google.fhir.dstu2.proto.NamingSystemTypeCode
	397,  // 1212: google.fhir.dstu2.proto.NamingSystem.publisher:type_name -> google.fhir.dstu2.proto.String
	289,  // 1213: google.fhir.dstu2.proto.NamingSystem.contact:type_name -> google.fhir.dstu2.proto.NamingSystem.Contact
	397,  // 1214: google.fhir.dstu2.proto.NamingSystem.responsible:type_name -> google.fhir.dstu2.proto.String
	404,  // 1215: google.fhir.dstu2.proto.NamingSystem.date:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 1216: google.fhir.dstu2.proto.NamingSystem.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1217: google.fhir.dstu2.proto.NamingSystem.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 1218: google.fhir.dstu2.proto.NamingSystem.use_context:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1219: google.fhir.dstu2.proto.NamingSystem.usage:type_name -> google.fhir.dstu2.proto.String
	290,  // 1220: google.fhir.dstu2.proto.NamingSystem.unique_id:type_name -> google.fhir.dstu2.proto.NamingSystem.UniqueId
	403,  // 1221: google.fhir.dstu2.proto.NamingSystem.replaced_by:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 1222: google.fhir.dstu2.proto.NutritionOrder.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1223: google.fhir.dstu2.proto.NutritionOrder.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1224: google.fhir.dstu2.proto.NutritionOrder.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1225: google.fhir.dstu2.proto.NutritionOrder.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1226: google.fhir.dstu2.proto.NutritionOrder.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1227: google.fhir.dstu2.proto.NutritionOrder.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1228: google.fhir.dstu2.proto.NutritionOrder.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1229: google.fhir.dstu2.proto.NutritionOrder.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 1230: google.fhir.dstu2.proto.NutritionOrder.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1231: google.fhir.dstu2.proto.NutritionOrder.orderer:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 1232: google.fhir.dstu2.proto.NutritionOrder.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1233: google.fhir.dstu2.proto.NutritionOrder.encounter:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 1234: google.fhir.dstu2.proto.NutritionOrder.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	474,  // 1235: google.fhir.dstu2.proto.NutritionOrder.status:type_name -> google.fhir.dstu2.proto.NutritionOrderStatusCode
	403,  // 1236: google.fhir.dstu2.proto.NutritionOrder.allergy_intolerance:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 1237: google.fhir.dstu2.proto.NutritionOrder.food_preference_modifier:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1238: google.fhir.dstu2.proto.NutritionOrder.exclude_food_modifier:type_name -> google.fhir.dstu2.proto.CodeableConcept
	291,  // 1239: google.fhir.dstu2.proto.NutritionOrder.oral_diet:type_name -> google.fhir.dstu2.proto.NutritionOrder.OralDiet
	292,  // 1240: google.fhir.dstu2.proto.NutritionOrder.supplement:type_name -> google.fhir.dstu2.proto.NutritionOrder.Supplement
	293,  // 1241: google.fhir.dstu2.proto.NutritionOrder.enteral_formula:type_name -> google.fhir.dstu2.proto.NutritionOrder.EnteralFormula
	390,  // 1242: google.fhir.dstu2.proto.Observation.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1243: google.fhir.dstu2.proto.Observation.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1244: google.fhir.dstu2.proto.Observation.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1245: google.fhir.dstu2.proto.Observation.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1246: google.fhir.dstu2.proto.Observation.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1247: google.fhir.dstu2.proto.Observation.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1248: google.fhir.dstu2.proto.Observation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1249: google.fhir.dstu2.proto.Observation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1250: google.fhir.dstu2.proto.Observation.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	475,  // 1251: google.fhir.dstu2.proto.Observation.status:type_name -> google.fhir.dstu2.proto.ObservationStatusCode
	398,  // 1252: google.fhir.dstu2.proto.Observation.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1253: google.fhir.dstu2.proto.Observation.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1254: google.fhir.dstu2.proto.Observation.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1255: google.fhir.dstu2.proto.Observation.encounter:type_name -> google.fhir.dstu2.proto.Reference
	298,  // 1256: google.fhir.dstu2.proto.Observation.effective:type_name -> google.fhir.dstu2.proto.Observation.Effective
	412,  // 1257: google.fhir.dstu2.proto.Observation.issued:type_name -> google.fhir.dstu2.proto.Instant
	403,  // 1258: google.fhir.dstu2.proto.Observation.performer:type_name -> google.fhir.dstu2.proto.Reference
	299,  // 1259: google.fhir.dstu2.proto.Observation.value:type_name -> google.fhir.dstu2.proto.Observation.Value
	398,  // 1260: google.fhir.dstu2.proto.Observation.data_absent_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1261: google.fhir.dstu2.proto.Observation.interpretation:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1262: google.fhir.dstu2.proto.Observation.comments:type_name -> google.fhir.dstu2.proto.String
	398,  // 1263: google.fhir.dstu2.proto.Observation.body_site:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1264: google.fhir.dstu2.proto.Observation.method:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1265: google.fhir.dstu2.proto.Observation.specimen:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1266: google.fhir.dstu2.proto.Observation.device:type_name -> google.fhir.dstu2.proto.Reference
	300,  // 1267: google.fhir.dstu2.proto.Observation.reference_range:type_name -> google.fhir.dstu2.proto.Observation.ReferenceRange
	301,  // 1268: google.fhir.dstu2.proto.Observation.related:type_name -> google.fhir.dstu2.proto.Observation.Related
	302,  // 1269: google.fhir.dstu2.proto.Observation.component:type_name -> google.fhir.dstu2.proto.Observation.Component
	390,  // 1270: google.fhir.dstu2.proto.OperationDefinition.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1271: google.fhir.dstu2.proto.OperationDefinition.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1272: google.fhir.dstu2.proto.OperationDefinition.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1273: google.fhir.dstu2.proto.OperationDefinition.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1274: google.fhir.dstu2.proto.OperationDefinition.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1275: google.fhir.dstu2.proto.OperationDefinition.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1276: google.fhir.dstu2.proto.OperationDefinition.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1277: google.fhir.dstu2.proto.OperationDefinition.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 1278: google.fhir.dstu2.proto.OperationDefinition.url:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 1279: google.fhir.dstu2.proto.OperationDefinition.version:type_name -> google.fhir.dstu2.proto.String
	397,  // 1280: google.fhir.dstu2.proto.OperationDefinition.name:type_name -> google.fhir.dstu2.proto.String
	430,  // 1281: google.fhir.dstu2.proto.OperationDefinition.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	476,  // 1282: google.fhir.dstu2.proto.OperationDefinition.kind:type_name -> google.fhir.dstu2.proto.OperationKindCode
	431,  // 1283: google.fhir.dstu2.proto.OperationDefinition.experimental:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 1284: google.fhir.dstu2.proto.OperationDefinition.publisher:type_name -> google.fhir.dstu2.proto.String
	304,  // 1285: google.fhir.dstu2.proto.OperationDefinition.contact:type_name -> google.fhir.dstu2.proto.OperationDefinition.Contact
	404,  // 1286: google.fhir.dstu2.proto.OperationDefinition.date:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 1287: google.fhir.dstu2.proto.OperationDefinition.description:type_name -> google.fhir.dstu2.proto.String
	397,  // 1288: google.fhir.dstu2.proto.OperationDefinition.requirements:type_name -> google.fhir.dstu2.proto.String
	431,  // 1289: google.fhir.dstu2.proto.OperationDefinition.idempotent:type_name -> google.fhir.dstu2.proto.Boolean
	399,  // 1290: google.fhir.dstu2.proto.OperationDefinition.code:type_name -> google.fhir.dstu2.proto.Code
	397,  // 1291: google.fhir.dstu2.proto.OperationDefinition.notes:type_name -> google.fhir.dstu2.proto.String
	403,  // 1292: google.fhir.dstu2.proto.OperationDefinition.base:type_name -> google.fhir.dstu2.proto.Reference
	431,  // 1293: google.fhir.dstu2.proto.OperationDefinition.system:type_name -> google.fhir.dstu2.proto.Boolean
	477,  // 1294: google.fhir.dstu2.proto.OperationDefinition.type:type_name -> google.fhir.dstu2.proto.ResourceTypeCode
	431,  // 1295: google.fhir.dstu2.proto.OperationDefinition.instance:type_name -> google.fhir.dstu2.proto.Boolean
	305,  // 1296: google.fhir.dstu2.proto.OperationDefinition.parameter:type_name -> google.fhir.dstu2.proto.OperationDefinition.Parameter
	390,  // 1297: google.fhir.dstu2.proto.OperationOutcome.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1298: google.fhir.dstu2.proto.OperationOutcome.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1299: google.fhir.dstu2.proto.OperationOutcome.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1300: google.fhir.dstu2.proto.OperationOutcome.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1301: google.fhir.dstu2.proto.OperationOutcome.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1302: google.fhir.dstu2.proto.OperationOutcome.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1303: google.fhir.dstu2.proto.OperationOutcome.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1304: google.fhir.dstu2.proto.OperationOutcome.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	308,  // 1305: google.fhir.dstu2.proto.OperationOutcome.issue:type_name -> google.fhir.dstu2.proto.OperationOutcome.Issue
	390,  // 1306: google.fhir.dstu2.proto.Order.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1307: google.fhir.dstu2.proto.Order.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1308: google.fhir.dstu2.proto.Order.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1309: google.fhir.dstu2.proto.Order.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1310: google.fhir.dstu2.proto.Order.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1311: google.fhir.dstu2.proto.Order.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1312: google.fhir.dstu2.proto.Order.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1313: google.fhir.dstu2.proto.Order.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1314: google.fhir.dstu2.proto.Order.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 1315: google.fhir.dstu2.proto.Order.date:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1316: google.fhir.dstu2.proto.Order.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1317: google.fhir.dstu2.proto.Order.source:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1318: google.fhir.dstu2.proto.Order.target:type_name -> google.fhir.dstu2.proto.Reference
	309,  // 1319: google.fhir.dstu2.proto.Order.reason:type_name -> google.fhir.dstu2.proto.Order.Reason
	310,  // 1320: google.fhir.dstu2.proto.Order.when:type_name -> google.fhir.dstu2.proto.Order.When
	403,  // 1321: google.fhir.dstu2.proto.Order.detail:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 1322: google.fhir.dstu2.proto.OrderResponse.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1323: google.fhir.dstu2.proto.OrderResponse.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1324: google.fhir.dstu2.proto.OrderResponse.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1325: google.fhir.dstu2.proto.OrderResponse.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1326: google.fhir.dstu2.proto.OrderResponse.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1327: google.fhir.dstu2.proto.OrderResponse.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1328: google.fhir.dstu2.proto.OrderResponse.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1329: google.fhir.dstu2.proto.OrderResponse.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1330: google.fhir.dstu2.proto.OrderResponse.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1331: google.fhir.dstu2.proto.OrderResponse.request:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 1332: google.fhir.dstu2.proto.OrderResponse.date:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1333: google.fhir.dstu2.proto.OrderResponse.who:type_name -> google.fhir.dstu2.proto.Reference
	478,  // 1334: google.fhir.dstu2.proto.OrderResponse.order_status:type_name -> google.fhir.dstu2.proto.OrderStatusCode
	397,  // 1335: google.fhir.dstu2.proto.OrderResponse.description:type_name -> google.fhir.dstu2.proto.String
	403,  // 1336: google.fhir.dstu2.proto.OrderResponse.fulfillment:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 1337: google.fhir.dstu2.proto.Organization.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1338: google.fhir.dstu2.proto.Organization.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1339: google.fhir.dstu2.proto.Organization.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1340: google.fhir.dstu2.proto.Organization.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1341: google.fhir.dstu2.proto.Organization.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1342: google.fhir.dstu2.proto.Organization.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1343: google.fhir.dstu2.proto.Organization.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1344: google.fhir.dstu2.proto.Organization.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1345: google.fhir.dstu2.proto.Organization.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	431,  // 1346: google.fhir.dstu2.proto.Organization.active:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 1347: google.fhir.dstu2.proto.Organization.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1348: google.fhir.dstu2.proto.Organization.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 1349: google.fhir.dstu2.proto.Organization.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	468,  // 1350: google.fhir.dstu2.proto.Organization.address:type_name -> google.fhir.dstu2.proto.Address
	403,  // 1351: google.fhir.dstu2.proto.Organization.part_of:type_name -> google.fhir.dstu2.proto.Reference
	311,  // 1352: google.fhir.dstu2.proto.Organization.contact:type_name -> google.fhir.dstu2.proto.Organization.Contact
	390,  // 1353: google.fhir.dstu2.proto.Parameters.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1354: google.fhir.dstu2.proto.Parameters.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1355: google.fhir.dstu2.proto.Parameters.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1356: google.fhir.dstu2.proto.Parameters.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	312,  // 1357: google.fhir.dstu2.proto.Parameters.parameter:type_name -> google.fhir.dstu2.proto.Parameters.Parameter
	390,  // 1358: google.fhir.dstu2.proto.Patient.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1359: google.fhir.dstu2.proto.Patient.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1360: google.fhir.dstu2.proto.Patient.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1361: google.fhir.dstu2.proto.Patient.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1362: google.fhir.dstu2.proto.Patient.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1363: google.fhir.dstu2.proto.Patient.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1364: google.fhir.dstu2.proto.Patient.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1365: google.fhir.dstu2.proto.Patient.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1366: google.fhir.dstu2.proto.Patient.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	431,  // 1367: google.fhir.dstu2.proto.Patient.active:type_name -> google.fhir.dstu2.proto.Boolean
	479,  // 1368: google.fhir.dstu2.proto.Patient.name:type_name -> google.fhir.dstu2.proto.HumanName
	439,  // 1369: google.fhir.dstu2.proto.Patient.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	456,  // 1370: google.fhir.dstu2.proto.Patient.gender:type_name -> google.fhir.dstu2.proto.AdministrativeGenderCode
	415,  // 1371: google.fhir.dstu2.proto.Patient.birth_date:type_name -> google.fhir.dstu2.proto.Date
	314,  // 1372: google.fhir.dstu2.proto.Patient.deceased:type_name -> google.fhir.dstu2.proto.Patient.Deceased
	468,  // 1373: google.fhir.dstu2.proto.Patient.address:type_name -> google.fhir.dstu2.proto.Address
	398,  // 1374: google.fhir.dstu2.proto.Patient.marital_status:type_name -> google.fhir.dstu2.proto.CodeableConcept
	315,  // 1375: google.fhir.dstu2.proto.Patient.multiple_birth:type_name -> google.fhir.dstu2.proto.Patient.MultipleBirth
	418,  // 1376: google.fhir.dstu2.proto.Patient.photo:type_name -> google.fhir.dstu2.proto.Attachment
	316,  // 1377: google.fhir.dstu2.proto.Patient.contact:type_name -> google.fhir.dstu2.proto.Patient.Contact
	317,  // 1378: google.fhir.dstu2.proto.Patient.animal:type_name -> google.fhir.dstu2.proto.Patient.Animal
	318,  // 1379: google.fhir.dstu2.proto.Patient.communication:type_name -> google.fhir.dstu2.proto.Patient.Communication
	403,  // 1380: google.fhir.dstu2.proto.Patient.care_provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1381: google.fhir.dstu2.proto.Patient.managing_organization:type_name -> google.fhir.dstu2.proto.Reference
	319,  // 1382: google.fhir.dstu2.proto.Patient.link:type_name -> google.fhir.dstu2.proto.Patient.Link
	390,  // 1383: google.fhir.dstu2.proto.PaymentNotice.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1384: google.fhir.dstu2.proto.PaymentNotice.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1385: google.fhir.dstu2.proto.PaymentNotice.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1386: google.fhir.dstu2.proto.PaymentNotice.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1387: google.fhir.dstu2.proto.PaymentNotice.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1388: google.fhir.dstu2.proto.PaymentNotice.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1389: google.fhir.dstu2.proto.PaymentNotice.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1390: google.fhir.dstu2.proto.PaymentNotice.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1391: google.fhir.dstu2.proto.PaymentNotice.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	401,  // 1392: google.fhir.dstu2.proto.PaymentNotice.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 1393: google.fhir.dstu2.proto.PaymentNotice.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 1394: google.fhir.dstu2.proto.PaymentNotice.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1395: google.fhir.dstu2.proto.PaymentNotice.target:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1396: google.fhir.dstu2.proto.PaymentNotice.provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1397: google.fhir.dstu2.proto.PaymentNotice.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1398: google.fhir.dstu2.proto.PaymentNotice.request:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1399: google.fhir.dstu2.proto.PaymentNotice.response:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 1400: google.fhir.dstu2.proto.PaymentNotice.payment_status:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 1401: google.fhir.dstu2.proto.PaymentReconciliation.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1402: google.fhir.dstu2.proto.PaymentReconciliation.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1403: google.fhir.dstu2.proto.PaymentReconciliation.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1404: google.fhir.dstu2.proto.PaymentReconciliation.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1405: google.fhir.dstu2.proto.PaymentReconciliation.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1406: google.fhir.dstu2.proto.PaymentReconciliation.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1407: google.fhir.dstu2.proto.PaymentReconciliation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1408: google.fhir.dstu2.proto.PaymentReconciliation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1409: google.fhir.dstu2.proto.PaymentReconciliation.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1410: google.fhir.dstu2.proto.PaymentReconciliation.request:type_name -> google.fhir.dstu2.proto.Reference
	424,  // 1411: google.fhir.dstu2.proto.PaymentReconciliation.outcome:type_name -> google.fhir.dstu2.proto.RemittanceOutcomeCode
	397,  // 1412: google.fhir.dstu2.proto.PaymentReconciliation.disposition:type_name -> google.fhir.dstu2.proto.String
	401,  // 1413: google.fhir.dstu2.proto.PaymentReconciliation.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 1414: google.fhir.dstu2.proto.PaymentReconciliation.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 1415: google.fhir.dstu2.proto.PaymentReconciliation.created:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 1416: google.fhir.dstu2.proto.PaymentReconciliation.period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 1417: google.fhir.dstu2.proto.PaymentReconciliation.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1418: google.fhir.dstu2.proto.PaymentReconciliation.request_provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1419: google.fhir.dstu2.proto.PaymentReconciliation.request_organization:type_name -> google.fhir.dstu2.proto.Reference
	320,  // 1420: google.fhir.dstu2.proto.PaymentReconciliation.detail:type_name -> google.fhir.dstu2.proto.PaymentReconciliation.Detail
	401,  // 1421: google.fhir.dstu2.proto.PaymentReconciliation.form:type_name -> google.fhir.dstu2.proto.Coding
	402,  // 1422: google.fhir.dstu2.proto.PaymentReconciliation.total:type_name -> google.fhir.dstu2.proto.Money
	321,  // 1423: google.fhir.dstu2.proto.PaymentReconciliation.note:type_name -> google.fhir.dstu2.proto.PaymentReconciliation.Note
	390,  // 1424: google.fhir.dstu2.proto.Person.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1425: google.fhir.dstu2.proto.Person.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1426: google.fhir.dstu2.proto.Person.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1427: google.fhir.dstu2.proto.Person.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1428: google.fhir.dstu2.proto.Person.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1429: google.fhir.dstu2.proto.Person.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1430: google.fhir.dstu2.proto.Person.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1431: google.fhir.dstu2.proto.Person.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1432: google.fhir.dstu2.proto.Person.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	479,  // 1433: google.fhir.dstu2.proto.Person.name:type_name -> google.fhir.dstu2.proto.HumanName
	439,  // 1434: google.fhir.dstu2.proto.Person.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	456,  // 1435: google.fhir.dstu2.proto.Person.gender:type_name -> google.fhir.dstu2.proto.AdministrativeGenderCode
	415,  // 1436: google.fhir.dstu2.proto.Person.birth_date:type_name -> google.fhir.dstu2.proto.Date
	468,  // 1437: google.fhir.dstu2.proto.Person.address:type_name -> google.fhir.dstu2.proto.Address
	418,  // 1438: google.fhir.dstu2.proto.Person.photo:type_name -> google.fhir.dstu2.proto.Attachment
	403,  // 1439: google.fhir.dstu2.proto.Person.managing_organization:type_name -> google.fhir.dstu2.proto.Reference
	431,  // 1440: google.fhir.dstu2.proto.Person.active:type_name -> google.fhir.dstu2.proto.Boolean
	322,  // 1441: google.fhir.dstu2.proto.Person.link:type_name -> google.fhir.dstu2.proto.Person.Link
	390,  // 1442: google.fhir.dstu2.proto.Practitioner.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1443: google.fhir.dstu2.proto.Practitioner.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1444: google.fhir.dstu2.proto.Practitioner.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1445: google.fhir.dstu2.proto.Practitioner.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1446: google.fhir.dstu2.proto.Practitioner.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1447: google.fhir.dstu2.proto.Practitioner.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1448: google.fhir.dstu2.proto.Practitioner.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1449: google.fhir.dstu2.proto.Practitioner.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1450: google.fhir.dstu2.proto.Practitioner.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	431,  // 1451: google.fhir.dstu2.proto.Practitioner.active:type_name -> google.fhir.dstu2.proto.Boolean
	479,  // 1452: google.fhir.dstu2.proto.Practitioner.name:type_name -> google.fhir.dstu2.proto.HumanName
	439,  // 1453: google.fhir.dstu2.proto.Practitioner.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	468,  // 1454: google.fhir.dstu2.proto.Practitioner.address:type_name -> google.fhir.dstu2.proto.Address
	456,  // 1455: google.fhir.dstu2.proto.Practitioner.gender:type_name -> google.fhir.dstu2.proto.AdministrativeGenderCode
	415,  // 1456: google.fhir.dstu2.proto.Practitioner.birth_date:type_name -> google.fhir.dstu2.proto.Date
	418,  // 1457: google.fhir.dstu2.proto.Practitioner.photo:type_name -> google.fhir.dstu2.proto.Attachment
	323,  // 1458: google.fhir.dstu2.proto.Practitioner.practitioner_role:type_name -> google.fhir.dstu2.proto.Practitioner.PractitionerRole
	324,  // 1459: google.fhir.dstu2.proto.Practitioner.qualification:type_name -> google.fhir.dstu2.proto.Practitioner.Qualification
	398,  // 1460: google.fhir.dstu2.proto.Practitioner.communication:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 1461: google.fhir.dstu2.proto.Procedure.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1462: google.fhir.dstu2.proto.Procedure.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1463: google.fhir.dstu2.proto.Procedure.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1464: google.fhir.dstu2.proto.Procedure.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1465: google.fhir.dstu2.proto.Procedure.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1466: google.fhir.dstu2.proto.Procedure.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1467: google.fhir.dstu2.proto.Procedure.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1468: google.fhir.dstu2.proto.Procedure.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1469: google.fhir.dstu2.proto.Procedure.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1470: google.fhir.dstu2.proto.Procedure.subject:type_name -> google.fhir.dstu2.proto.Reference
	480,  // 1471: google.fhir.dstu2.proto.Procedure.status:type_name -> google.fhir.dstu2.proto.ProcedureStatusCode
	398,  // 1472: google.fhir.dstu2.proto.Procedure.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1473: google.fhir.dstu2.proto.Procedure.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	431,  // 1474: google.fhir.dstu2.proto.Procedure.not_performed:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 1475: google.fhir.dstu2.proto.Procedure.reason_not_performed:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1476: google.fhir.dstu2.proto.Procedure.body_site:type_name -> google.fhir.dstu2.proto.CodeableConcept
	325,  // 1477: google.fhir.dstu2.proto.Procedure.reason:type_name -> google.fhir.dstu2.proto.Procedure.Reason
	326,  // 1478: google.fhir.dstu2.proto.Procedure.performer:type_name -> google.fhir.dstu2.proto.Procedure.Performer
	327,  // 1479: google.fhir.dstu2.proto.Procedure.performed:type_name -> google.fhir.dstu2.proto.Procedure.Performed
	403,  // 1480: google.fhir.dstu2.proto.Procedure.encounter:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1481: google.fhir.dstu2.proto.Procedure.location:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 1482: google.fhir.dstu2.proto.Procedure.outcome:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1483: google.fhir.dstu2.proto.Procedure.report:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 1484: google.fhir.dstu2.proto.Procedure.complication:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1485: google.fhir.dstu2.proto.Procedure.follow_up:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1486: google.fhir.dstu2.proto.Procedure.request:type_name -> google.fhir.dstu2.proto.Reference
	409,  // 1487: google.fhir.dstu2.proto.Procedure.notes:type_name -> google.fhir.dstu2.proto.Annotation
	328,  // 1488: google.fhir.dstu2.proto.Procedure.focal_device:type_name -> google.fhir.dstu2.proto.Procedure.FocalDevice
	403,  // 1489: google.fhir.dstu2.proto.Procedure.used:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 1490: google.fhir.dstu2.proto.ProcedureRequest.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1491: google.fhir.dstu2.proto.ProcedureRequest.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1492: google.fhir.dstu2.proto.ProcedureRequest.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1493: google.fhir.dstu2.proto.ProcedureRequest.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1494: google.fhir.dstu2.proto.ProcedureRequest.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1495: google.fhir.dstu2.proto.ProcedureRequest.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1496: google.fhir.dstu2.proto.ProcedureRequest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1497: google.fhir.dstu2.proto.ProcedureRequest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1498: google.fhir.dstu2.proto.ProcedureRequest.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1499: google.fhir.dstu2.proto.ProcedureRequest.subject:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 1500: google.fhir.dstu2.proto.ProcedureRequest.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1501: google.fhir.dstu2.proto.ProcedureRequest.body_site:type_name -> google.fhir.dstu2.proto.CodeableConcept
	329,  // 1502: google.fhir.dstu2.proto.ProcedureRequest.reason:type_name -> google.fhir.dstu2.proto.ProcedureRequest.Reason
	330,  // 1503: google.fhir.dstu2.proto.ProcedureRequest.scheduled:type_name -> google.fhir.dstu2.proto.ProcedureRequest.Scheduled
	403,  // 1504: google.fhir.dstu2.proto.ProcedureRequest.encounter:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1505: google.fhir.dstu2.proto.ProcedureRequest.performer:type_name -> google.fhir.dstu2.proto.Reference
	481,  // 1506: google.fhir.dstu2.proto.ProcedureRequest.status:type_name -> google.fhir.dstu2.proto.ProcedureRequestStatusCode
	409,  // 1507: google.fhir.dstu2.proto.ProcedureRequest.notes:type_name -> google.fhir.dstu2.proto.Annotation
	331,  // 1508: google.fhir.dstu2.proto.ProcedureRequest.as_needed:type_name -> google.fhir.dstu2.proto.ProcedureRequest.AsNeeded
	404,  // 1509: google.fhir.dstu2.proto.ProcedureRequest.ordered_on:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1510: google.fhir.dstu2.proto.ProcedureRequest.orderer:type_name -> google.fhir.dstu2.proto.Reference
	482,  // 1511: google.fhir.dstu2.proto.ProcedureRequest.priority:type_name -> google.fhir.dstu2.proto.ProcedureRequestPriorityCode
	390,  // 1512: google.fhir.dstu2.proto.ProcessRequest.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1513: google.fhir.dstu2.proto.ProcessRequest.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1514: google.fhir.dstu2.proto.ProcessRequest.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1515: google.fhir.dstu2.proto.ProcessRequest.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1516: google.fhir.dstu2.proto.ProcessRequest.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1517: google.fhir.dstu2.proto.ProcessRequest.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1518: google.fhir.dstu2.proto.ProcessRequest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1519: google.fhir.dstu2.proto.ProcessRequest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	483,  // 1520: google.fhir.dstu2.proto.ProcessRequest.action:type_name -> google.fhir.dstu2.proto.ActionListCode
	396,  // 1521: google.fhir.dstu2.proto.ProcessRequest.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	401,  // 1522: google.fhir.dstu2.proto.ProcessRequest.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 1523: google.fhir.dstu2.proto.ProcessRequest.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 1524: google.fhir.dstu2.proto.ProcessRequest.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1525: google.fhir.dstu2.proto.ProcessRequest.target:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1526: google.fhir.dstu2.proto.ProcessRequest.provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1527: google.fhir.dstu2.proto.ProcessRequest.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1528: google.fhir.dstu2.proto.ProcessRequest.request:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1529: google.fhir.dstu2.proto.ProcessRequest.response:type_name -> google.fhir.dstu2.proto.Reference
	431,  // 1530: google.fhir.dstu2.proto.ProcessRequest.nullify:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 1531: google.fhir.dstu2.proto.ProcessRequest.reference:type_name -> google.fhir.dstu2.proto.String
	332,  // 1532: google.fhir.dstu2.proto.ProcessRequest.item:type_name -> google.fhir.dstu2.proto.ProcessRequest.Item
	397,  // 1533: google.fhir.dstu2.proto.ProcessRequest.include:type_name -> google.fhir.dstu2.proto.String
	397,  // 1534: google.fhir.dstu2.proto.ProcessRequest.exclude:type_name -> google.fhir.dstu2.proto.String
	400,  // 1535: google.fhir.dstu2.proto.ProcessRequest.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 1536: google.fhir.dstu2.proto.ProcessResponse.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1537: google.fhir.dstu2.proto.ProcessResponse.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1538: google.fhir.dstu2.proto.ProcessResponse.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1539: google.fhir.dstu2.proto.ProcessResponse.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1540: google.fhir.dstu2.proto.ProcessResponse.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1541: google.fhir.dstu2.proto.ProcessResponse.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1542: google.fhir.dstu2.proto.ProcessResponse.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1543: google.fhir.dstu2.proto.ProcessResponse.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1544: google.fhir.dstu2.proto.ProcessResponse.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1545: google.fhir.dstu2.proto.ProcessResponse.request:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 1546: google.fhir.dstu2.proto.ProcessResponse.outcome:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 1547: google.fhir.dstu2.proto.ProcessResponse.disposition:type_name -> google.fhir.dstu2.proto.String
	401,  // 1548: google.fhir.dstu2.proto.ProcessResponse.ruleset:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 1549: google.fhir.dstu2.proto.ProcessResponse.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 1550: google.fhir.dstu2.proto.ProcessResponse.created:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1551: google.fhir.dstu2.proto.ProcessResponse.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1552: google.fhir.dstu2.proto.ProcessResponse.request_provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1553: google.fhir.dstu2.proto.ProcessResponse.request_organization:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 1554: google.fhir.dstu2.proto.ProcessResponse.form:type_name -> google.fhir.dstu2.proto.Coding
	333,  // 1555: google.fhir.dstu2.proto.ProcessResponse.notes:type_name -> google.fhir.dstu2.proto.ProcessResponse.Notes
	401,  // 1556: google.fhir.dstu2.proto.ProcessResponse.error:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 1557: google.fhir.dstu2.proto.Provenance.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1558: google.fhir.dstu2.proto.Provenance.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1559: google.fhir.dstu2.proto.Provenance.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1560: google.fhir.dstu2.proto.Provenance.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1561: google.fhir.dstu2.proto.Provenance.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1562: google.fhir.dstu2.proto.Provenance.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1563: google.fhir.dstu2.proto.Provenance.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1564: google.fhir.dstu2.proto.Provenance.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 1565: google.fhir.dstu2.proto.Provenance.target:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 1566: google.fhir.dstu2.proto.Provenance.period:type_name -> google.fhir.dstu2.proto.Period
	412,  // 1567: google.fhir.dstu2.proto.Provenance.recorded:type_name -> google.fhir.dstu2.proto.Instant
	398,  // 1568: google.fhir.dstu2.proto.Provenance.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1569: google.fhir.dstu2.proto.Provenance.activity:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1570: google.fhir.dstu2.proto.Provenance.location:type_name -> google.fhir.dstu2.proto.Reference
	392,  // 1571: google.fhir.dstu2.proto.Provenance.policy:type_name -> google.fhir.dstu2.proto.Uri
	334,  // 1572: google.fhir.dstu2.proto.Provenance.agent:type_name -> google.fhir.dstu2.proto.Provenance.Agent
	335,  // 1573: google.fhir.dstu2.proto.Provenance.entity:type_name -> google.fhir.dstu2.proto.Provenance.Entity
	420,  // 1574: google.fhir.dstu2.proto.Provenance.signature:type_name -> google.fhir.dstu2.proto.Signature
	390,  // 1575: google.fhir.dstu2.proto.Questionnaire.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1576: google.fhir.dstu2.proto.Questionnaire.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1577: google.fhir.dstu2.proto.Questionnaire.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1578: google.fhir.dstu2.proto.Questionnaire.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1579: google.fhir.dstu2.proto.Questionnaire.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1580: google.fhir.dstu2.proto.Questionnaire.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1581: google.fhir.dstu2.proto.Questionnaire.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1582: google.fhir.dstu2.proto.Questionnaire.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1583: google.fhir.dstu2.proto.Questionnaire.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 1584: google.fhir.dstu2.proto.Questionnaire.version:type_name -> google.fhir.dstu2.proto.String
	484,  // 1585: google.fhir.dstu2.proto.Questionnaire.status:type_name -> google.fhir.dstu2.proto.QuestionnaireStatusCode
	404,  // 1586: google.fhir.dstu2.proto.Questionnaire.date:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 1587: google.fhir.dstu2.proto.Questionnaire.publisher:type_name -> google.fhir.dstu2.proto.String
	439,  // 1588: google.fhir.dstu2.proto.Questionnaire.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	477,  // 1589: google.fhir.dstu2.proto.Questionnaire.subject_type:type_name -> google.fhir.dstu2.proto.ResourceTypeCode
	337,  // 1590: google.fhir.dstu2.proto.Questionnaire.group:type_name -> google.fhir.dstu2.proto.Questionnaire.Group
	390,  // 1591: google.fhir.dstu2.proto.QuestionnaireResponse.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1592: google.fhir.dstu2.proto.QuestionnaireResponse.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1593: google.fhir.dstu2.proto.QuestionnaireResponse.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1594: google.fhir.dstu2.proto.QuestionnaireResponse.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1595: google.fhir.dstu2.proto.QuestionnaireResponse.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1596: google.fhir.dstu2.proto.QuestionnaireResponse.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1597: google.fhir.dstu2.proto.QuestionnaireResponse.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1598: google.fhir.dstu2.proto.QuestionnaireResponse.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1599: google.fhir.dstu2.proto.QuestionnaireResponse.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1600: google.fhir.dstu2.proto.QuestionnaireResponse.questionnaire:type_name -> google.fhir.dstu2.proto.Reference
	485,  // 1601: google.fhir.dstu2.proto.QuestionnaireResponse.status:type_name -> google.fhir.dstu2.proto.QuestionnaireResponseStatusCode
	403,  // 1602: google.fhir.dstu2.proto.QuestionnaireResponse.subject:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1603: google.fhir.dstu2.proto.QuestionnaireResponse.author:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 1604: google.fhir.dstu2.proto.QuestionnaireResponse.authored:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1605: google.fhir.dstu2.proto.QuestionnaireResponse.source:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1606: google.fhir.dstu2.proto.QuestionnaireResponse.encounter:type_name -> google.fhir.dstu2.proto.Reference
	339,  // 1607: google.fhir.dstu2.proto.QuestionnaireResponse.group:type_name -> google.fhir.dstu2.proto.QuestionnaireResponse.Group
	390,  // 1608: google.fhir.dstu2.proto.ReferralRequest.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1609: google.fhir.dstu2.proto.ReferralRequest.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1610: google.fhir.dstu2.proto.ReferralRequest.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1611: google.fhir.dstu2.proto.ReferralRequest.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1612: google.fhir.dstu2.proto.ReferralRequest.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1613: google.fhir.dstu2.proto.ReferralRequest.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1614: google.fhir.dstu2.proto.ReferralRequest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1615: google.fhir.dstu2.proto.ReferralRequest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	486,  // 1616: google.fhir.dstu2.proto.ReferralRequest.status:type_name -> google.fhir.dstu2.proto.ReferralStatusCode
	396,  // 1617: google.fhir.dstu2.proto.ReferralRequest.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 1618: google.fhir.dstu2.proto.ReferralRequest.date:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 1619: google.fhir.dstu2.proto.ReferralRequest.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1620: google.fhir.dstu2.proto.ReferralRequest.specialty:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1621: google.fhir.dstu2.proto.ReferralRequest.priority:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1622: google.fhir.dstu2.proto.ReferralRequest.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1623: google.fhir.dstu2.proto.ReferralRequest.requester:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1624: google.fhir.dstu2.proto.ReferralRequest.recipient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1625: google.fhir.dstu2.proto.ReferralRequest.encounter:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 1626: google.fhir.dstu2.proto.ReferralRequest.date_sent:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 1627: google.fhir.dstu2.proto.ReferralRequest.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1628: google.fhir.dstu2.proto.ReferralRequest.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 1629: google.fhir.dstu2.proto.ReferralRequest.service_requested:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1630: google.fhir.dstu2.proto.ReferralRequest.supporting_information:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 1631: google.fhir.dstu2.proto.ReferralRequest.fulfillment_time:type_name -> google.fhir.dstu2.proto.Period
	390,  // 1632: google.fhir.dstu2.proto.RelatedPerson.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1633: google.fhir.dstu2.proto.RelatedPerson.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1634: google.fhir.dstu2.proto.RelatedPerson.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1635: google.fhir.dstu2.proto.RelatedPerson.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1636: google.fhir.dstu2.proto.RelatedPerson.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1637: google.fhir.dstu2.proto.RelatedPerson.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1638: google.fhir.dstu2.proto.RelatedPerson.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1639: google.fhir.dstu2.proto.RelatedPerson.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1640: google.fhir.dstu2.proto.RelatedPerson.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 1641: google.fhir.dstu2.proto.RelatedPerson.patient:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 1642: google.fhir.dstu2.proto.RelatedPerson.relationship:type_name -> google.fhir.dstu2.proto.CodeableConcept
	479,  // 1643: google.fhir.dstu2.proto.RelatedPerson.name:type_name -> google.fhir.dstu2.proto.HumanName
	439,  // 1644: google.fhir.dstu2.proto.RelatedPerson.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	456,  // 1645: google.fhir.dstu2.proto.RelatedPerson.gender:type_name -> google.fhir.dstu2.proto.AdministrativeGenderCode
	415,  // 1646: google.fhir.dstu2.proto.RelatedPerson.birth_date:type_name -> google.fhir.dstu2.proto.Date
	468,  // 1647: google.fhir.dstu2.proto.RelatedPerson.address:type_name -> google.fhir.dstu2.proto.Address
	418,  // 1648: google.fhir.dstu2.proto.RelatedPerson.photo:type_name -> google.fhir.dstu2.proto.Attachment
	400,  // 1649: google.fhir.dstu2.proto.RelatedPerson.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 1650: google.fhir.dstu2.proto.Resource.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1651: google.fhir.dstu2.proto.Resource.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1652: google.fhir.dstu2.proto.Resource.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1653: google.fhir.dstu2.proto.Resource.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	390,  // 1654: google.fhir.dstu2.proto.RiskAssessment.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1655: google.fhir.dstu2.proto.RiskAssessment.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1656: google.fhir.dstu2.proto.RiskAssessment.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1657: google.fhir.dstu2.proto.RiskAssessment.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1658: google.fhir.dstu2.proto.RiskAssessment.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1659: google.fhir.dstu2.proto.RiskAssessment.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1660: google.fhir.dstu2.proto.RiskAssessment.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1661: google.fhir.dstu2.proto.RiskAssessment.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 1662: google.fhir.dstu2.proto.RiskAssessment.subject:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 1663: google.fhir.dstu2.proto.RiskAssessment.date:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1664: google.fhir.dstu2.proto.RiskAssessment.condition:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1665: google.fhir.dstu2.proto.RiskAssessment.encounter:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1666: google.fhir.dstu2.proto.RiskAssessment.performer:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 1667: google.fhir.dstu2.proto.RiskAssessment.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 1668: google.fhir.dstu2.proto.RiskAssessment.method:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1669: google.fhir.dstu2.proto.RiskAssessment.basis:type_name -> google.fhir.dstu2.proto.Reference
	343,  // 1670: google.fhir.dstu2.proto.RiskAssessment.prediction:type_name -> google.fhir.dstu2.proto.RiskAssessment.Prediction
	397,  // 1671: google.fhir.dstu2.proto.RiskAssessment.mitigation:type_name -> google.fhir.dstu2.proto.String
	390,  // 1672: google.fhir.dstu2.proto.Schedule.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1673: google.fhir.dstu2.proto.Schedule.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1674: google.fhir.dstu2.proto.Schedule.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1675: google.fhir.dstu2.proto.Schedule.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1676: google.fhir.dstu2.proto.Schedule.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1677: google.fhir.dstu2.proto.Schedule.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1678: google.fhir.dstu2.proto.Schedule.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1679: google.fhir.dstu2.proto.Schedule.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1680: google.fhir.dstu2.proto.Schedule.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 1681: google.fhir.dstu2.proto.Schedule.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1682: google.fhir.dstu2.proto.Schedule.actor:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 1683: google.fhir.dstu2.proto.Schedule.planning_horizon:type_name -> google.fhir.dstu2.proto.Period
	397,  // 1684: google.fhir.dstu2.proto.Schedule.comment:type_name -> google.fhir.dstu2.proto.String
	390,  // 1685: google.fhir.dstu2.proto.SearchParameter.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1686: google.fhir.dstu2.proto.SearchParameter.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1687: google.fhir.dstu2.proto.SearchParameter.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1688: google.fhir.dstu2.proto.SearchParameter.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1689: google.fhir.dstu2.proto.SearchParameter.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1690: google.fhir.dstu2.proto.SearchParameter.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1691: google.fhir.dstu2.proto.SearchParameter.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1692: google.fhir.dstu2.proto.SearchParameter.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 1693: google.fhir.dstu2.proto.SearchParameter.url:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 1694: google.fhir.dstu2.proto.SearchParameter.name:type_name -> google.fhir.dstu2.proto.String
	430,  // 1695: google.fhir.dstu2.proto.SearchParameter.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	431,  // 1696: google.fhir.dstu2.proto.SearchParameter.experimental:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 1697: google.fhir.dstu2.proto.SearchParameter.publisher:type_name -> google.fhir.dstu2.proto.String
	346,  // 1698: google.fhir.dstu2.proto.SearchParameter.contact:type_name -> google.fhir.dstu2.proto.SearchParameter.Contact
	404,  // 1699: google.fhir.dstu2.proto.SearchParameter.date:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 1700: google.fhir.dstu2.proto.SearchParameter.requirements:type_name -> google.fhir.dstu2.proto.String
	399,  // 1701: google.fhir.dstu2.proto.SearchParameter.code:type_name -> google.fhir.dstu2.proto.Code
	477,  // 1702: google.fhir.dstu2.proto.SearchParameter.base:type_name -> google.fhir.dstu2.proto.ResourceTypeCode
	487,  // 1703: google.fhir.dstu2.proto.SearchParameter.type:type_name -> google.fhir.dstu2.proto.SearchParamTypeCode
	397,  // 1704: google.fhir.dstu2.proto.SearchParameter.description:type_name -> google.fhir.dstu2.proto.String
	397,  // 1705: google.fhir.dstu2.proto.SearchParameter.xpath:type_name -> google.fhir.dstu2.proto.String
	488,  // 1706: google.fhir.dstu2.proto.SearchParameter.xpath_usage:type_name -> google.fhir.dstu2.proto.XPathUsageTypeCode
	477,  // 1707: google.fhir.dstu2.proto.SearchParameter.target:type_name -> google.fhir.dstu2.proto.ResourceTypeCode
	390,  // 1708: google.fhir.dstu2.proto.Slot.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1709: google.fhir.dstu2.proto.Slot.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1710: google.fhir.dstu2.proto.Slot.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1711: google.fhir.dstu2.proto.Slot.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1712: google.fhir.dstu2.proto.Slot.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1713: google.fhir.dstu2.proto.Slot.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1714: google.fhir.dstu2.proto.Slot.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1715: google.fhir.dstu2.proto.Slot.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1716: google.fhir.dstu2.proto.Slot.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 1717: google.fhir.dstu2.proto.Slot.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1718: google.fhir.dstu2.proto.Slot.schedule:type_name -> google.fhir.dstu2.proto.Reference
	489,  // 1719: google.fhir.dstu2.proto.Slot.free_busy_type:type_name -> google.fhir.dstu2.proto.SlotStatusCode
	412,  // 1720: google.fhir.dstu2.proto.Slot.start:type_name -> google.fhir.dstu2.proto.Instant
	412,  // 1721: google.fhir.dstu2.proto.Slot.end:type_name -> google.fhir.dstu2.proto.Instant
	431,  // 1722: google.fhir.dstu2.proto.Slot.overbooked:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 1723: google.fhir.dstu2.proto.Slot.comment:type_name -> google.fhir.dstu2.proto.String
	390,  // 1724: google.fhir.dstu2.proto.Specimen.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1725: google.fhir.dstu2.proto.Specimen.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1726: google.fhir.dstu2.proto.Specimen.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1727: google.fhir.dstu2.proto.Specimen.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1728: google.fhir.dstu2.proto.Specimen.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1729: google.fhir.dstu2.proto.Specimen.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1730: google.fhir.dstu2.proto.Specimen.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1731: google.fhir.dstu2.proto.Specimen.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1732: google.fhir.dstu2.proto.Specimen.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	490,  // 1733: google.fhir.dstu2.proto.Specimen.status:type_name -> google.fhir.dstu2.proto.SpecimenStatusCode
	398,  // 1734: google.fhir.dstu2.proto.Specimen.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1735: google.fhir.dstu2.proto.Specimen.parent:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1736: google.fhir.dstu2.proto.Specimen.subject:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 1737: google.fhir.dstu2.proto.Specimen.accession_identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 1738: google.fhir.dstu2.proto.Specimen.received_time:type_name -> google.fhir.dstu2.proto.DateTime
	347,  // 1739: google.fhir.dstu2.proto.Specimen.collection:type_name -> google.fhir.dstu2.proto.Specimen.Collection
	348,  // 1740: google.fhir.dstu2.proto.Specimen.treatment:type_name -> google.fhir.dstu2.proto.Specimen.Treatment
	349,  // 1741: google.fhir.dstu2.proto.Specimen.container:type_name -> google.fhir.dstu2.proto.Specimen.Container
	390,  // 1742: google.fhir.dstu2.proto.StructureDefinition.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1743: google.fhir.dstu2.proto.StructureDefinition.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1744: google.fhir.dstu2.proto.StructureDefinition.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1745: google.fhir.dstu2.proto.StructureDefinition.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1746: google.fhir.dstu2.proto.StructureDefinition.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1747: google.fhir.dstu2.proto.StructureDefinition.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1748: google.fhir.dstu2.proto.StructureDefinition.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1749: google.fhir.dstu2.proto.StructureDefinition.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 1750: google.fhir.dstu2.proto.StructureDefinition.url:type_name -> google.fhir.dstu2.proto.Uri
	396,  // 1751: google.fhir.dstu2.proto.StructureDefinition.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 1752: google.fhir.dstu2.proto.StructureDefinition.version:type_name -> google.fhir.dstu2.proto.String
	397,  // 1753: google.fhir.dstu2.proto.StructureDefinition.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 1754: google.fhir.dstu2.proto.StructureDefinition.display:type_name -> google.fhir.dstu2.proto.String
	430,  // 1755: google.fhir.dstu2.proto.StructureDefinition.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	431,  // 1756: google.fhir.dstu2.proto.StructureDefinition.experimental:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 1757: google.fhir.dstu2.proto.StructureDefinition.publisher:type_name -> google.fhir.dstu2.proto.String
	352,  // 1758: google.fhir.dstu2.proto.StructureDefinition.contact:type_name -> google.fhir.dstu2.proto.StructureDefinition.Contact
	404,  // 1759: google.fhir.dstu2.proto.StructureDefinition.date:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 1760: google.fhir.dstu2.proto.StructureDefinition.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 1761: google.fhir.dstu2.proto.StructureDefinition.use_context:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1762: google.fhir.dstu2.proto.StructureDefinition.requirements:type_name -> google.fhir.dstu2.proto.String
	397,  // 1763: google.fhir.dstu2.proto.StructureDefinition.copyright:type_name -> google.fhir.dstu2.proto.String
	401,  // 1764: google.fhir.dstu2.proto.StructureDefinition.code:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 1765: google.fhir.dstu2.proto.StructureDefinition.fhir_version:type_name -> google.fhir.dstu2.proto.Id
	353,  // 1766: google.fhir.dstu2.proto.StructureDefinition.mapping:type_name -> google.fhir.dstu2.proto.StructureDefinition.Mapping
	491,  // 1767: google.fhir.dstu2.proto.StructureDefinition.kind:type_name -> google.fhir.dstu2.proto.StructureDefinitionKindCode
	492,  // 1768: google.fhir.dstu2.proto.StructureDefinition.constrained_type:type_name -> google.fhir.dstu2.proto.FHIRDefinedTypeCode
	431,  // 1769: google.fhir.dstu2.proto.StructureDefinition.abstract:type_name -> google.fhir.dstu2.proto.Boolean
	493,  // 1770: google.fhir.dstu2.proto.StructureDefinition.context_type:type_name -> google.fhir.dstu2.proto.ExtensionContextCode
	397,  // 1771: google.fhir.dstu2.proto.StructureDefinition.context:type_name -> google.fhir.dstu2.proto.String
	392,  // 1772: google.fhir.dstu2.proto.StructureDefinition.base:type_name -> google.fhir.dstu2.proto.Uri
	354,  // 1773: google.fhir.dstu2.proto.StructureDefinition.snapshot:type_name -> google.fhir.dstu2.proto.StructureDefinition.Snapshot
	355,  // 1774: google.fhir.dstu2.proto.StructureDefinition.differential:type_name -> google.fhir.dstu2.proto.StructureDefinition.Differential
	390,  // 1775: google.fhir.dstu2.proto.Subscription.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1776: google.fhir.dstu2.proto.Subscription.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1777: google.fhir.dstu2.proto.Subscription.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1778: google.fhir.dstu2.proto.Subscription.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1779: google.fhir.dstu2.proto.Subscription.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1780: google.fhir.dstu2.proto.Subscription.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1781: google.fhir.dstu2.proto.Subscription.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1782: google.fhir.dstu2.proto.Subscription.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 1783: google.fhir.dstu2.proto.Subscription.criteria:type_name -> google.fhir.dstu2.proto.String
	439,  // 1784: google.fhir.dstu2.proto.Subscription.contact:type_name -> google.fhir.dstu2.proto.ContactPoint
	397,  // 1785: google.fhir.dstu2.proto.Subscription.reason:type_name -> google.fhir.dstu2.proto.String
	494,  // 1786: google.fhir.dstu2.proto.Subscription.status:type_name -> google.fhir.dstu2.proto.SubscriptionStatusCode
	397,  // 1787: google.fhir.dstu2.proto.Subscription.error:type_name -> google.fhir.dstu2.proto.String
	356,  // 1788: google.fhir.dstu2.proto.Subscription.channel:type_name -> google.fhir.dstu2.proto.Subscription.Channel
	412,  // 1789: google.fhir.dstu2.proto.Subscription.end:type_name -> google.fhir.dstu2.proto.Instant
	401,  // 1790: google.fhir.dstu2.proto.Subscription.tag:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 1791: google.fhir.dstu2.proto.Substance.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1792: google.fhir.dstu2.proto.Substance.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1793: google.fhir.dstu2.proto.Substance.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1794: google.fhir.dstu2.proto.Substance.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1795: google.fhir.dstu2.proto.Substance.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1796: google.fhir.dstu2.proto.Substance.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1797: google.fhir.dstu2.proto.Substance.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1798: google.fhir.dstu2.proto.Substance.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1799: google.fhir.dstu2.proto.Substance.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 1800: google.fhir.dstu2.proto.Substance.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 1801: google.fhir.dstu2.proto.Substance.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1802: google.fhir.dstu2.proto.Substance.description:type_name -> google.fhir.dstu2.proto.String
	357,  // 1803: google.fhir.dstu2.proto.Substance.instance:type_name -> google.fhir.dstu2.proto.Substance.Instance
	358,  // 1804: google.fhir.dstu2.proto.Substance.ingredient:type_name -> google.fhir.dstu2.proto.Substance.Ingredient
	390,  // 1805: google.fhir.dstu2.proto.SupplyDelivery.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1806: google.fhir.dstu2.proto.SupplyDelivery.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1807: google.fhir.dstu2.proto.SupplyDelivery.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1808: google.fhir.dstu2.proto.SupplyDelivery.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1809: google.fhir.dstu2.proto.SupplyDelivery.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1810: google.fhir.dstu2.proto.SupplyDelivery.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1811: google.fhir.dstu2.proto.SupplyDelivery.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1812: google.fhir.dstu2.proto.SupplyDelivery.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1813: google.fhir.dstu2.proto.SupplyDelivery.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	495,  // 1814: google.fhir.dstu2.proto.SupplyDelivery.status:type_name -> google.fhir.dstu2.proto.SupplyDeliveryStatusCode
	403,  // 1815: google.fhir.dstu2.proto.SupplyDelivery.patient:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 1816: google.fhir.dstu2.proto.SupplyDelivery.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	463,  // 1817: google.fhir.dstu2.proto.SupplyDelivery.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	403,  // 1818: google.fhir.dstu2.proto.SupplyDelivery.supplied_item:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1819: google.fhir.dstu2.proto.SupplyDelivery.supplier:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 1820: google.fhir.dstu2.proto.SupplyDelivery.when_prepared:type_name -> google.fhir.dstu2.proto.Period
	404,  // 1821: google.fhir.dstu2.proto.SupplyDelivery.time:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1822: google.fhir.dstu2.proto.SupplyDelivery.destination:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1823: google.fhir.dstu2.proto.SupplyDelivery.receiver:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 1824: google.fhir.dstu2.proto.SupplyRequest.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1825: google.fhir.dstu2.proto.SupplyRequest.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1826: google.fhir.dstu2.proto.SupplyRequest.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1827: google.fhir.dstu2.proto.SupplyRequest.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1828: google.fhir.dstu2.proto.SupplyRequest.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1829: google.fhir.dstu2.proto.SupplyRequest.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1830: google.fhir.dstu2.proto.SupplyRequest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1831: google.fhir.dstu2.proto.SupplyRequest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 1832: google.fhir.dstu2.proto.SupplyRequest.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1833: google.fhir.dstu2.proto.SupplyRequest.source:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 1834: google.fhir.dstu2.proto.SupplyRequest.date:type_name -> google.fhir.dstu2.proto.DateTime
	396,  // 1835: google.fhir.dstu2.proto.SupplyRequest.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	496,  // 1836: google.fhir.dstu2.proto.SupplyRequest.status:type_name -> google.fhir.dstu2.proto.SupplyRequestStatusCode
	398,  // 1837: google.fhir.dstu2.proto.SupplyRequest.kind:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 1838: google.fhir.dstu2.proto.SupplyRequest.ordered_item:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1839: google.fhir.dstu2.proto.SupplyRequest.supplier:type_name -> google.fhir.dstu2.proto.Reference
	359,  // 1840: google.fhir.dstu2.proto.SupplyRequest.reason:type_name -> google.fhir.dstu2.proto.SupplyRequest.Reason
	360,  // 1841: google.fhir.dstu2.proto.SupplyRequest.when:type_name -> google.fhir.dstu2.proto.SupplyRequest.When
	390,  // 1842: google.fhir.dstu2.proto.TestScript.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1843: google.fhir.dstu2.proto.TestScript.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1844: google.fhir.dstu2.proto.TestScript.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1845: google.fhir.dstu2.proto.TestScript.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1846: google.fhir.dstu2.proto.TestScript.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1847: google.fhir.dstu2.proto.TestScript.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1848: google.fhir.dstu2.proto.TestScript.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1849: google.fhir.dstu2.proto.TestScript.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 1850: google.fhir.dstu2.proto.TestScript.url:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 1851: google.fhir.dstu2.proto.TestScript.version:type_name -> google.fhir.dstu2.proto.String
	397,  // 1852: google.fhir.dstu2.proto.TestScript.name:type_name -> google.fhir.dstu2.proto.String
	430,  // 1853: google.fhir.dstu2.proto.TestScript.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	396,  // 1854: google.fhir.dstu2.proto.TestScript.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	431,  // 1855: google.fhir.dstu2.proto.TestScript.experimental:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 1856: google.fhir.dstu2.proto.TestScript.publisher:type_name -> google.fhir.dstu2.proto.String
	361,  // 1857: google.fhir.dstu2.proto.TestScript.contact:type_name -> google.fhir.dstu2.proto.TestScript.Contact
	404,  // 1858: google.fhir.dstu2.proto.TestScript.date:type_name -> google.fhir.dstu2.proto.DateTime
	397,  // 1859: google.fhir.dstu2.proto.TestScript.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 1860: google.fhir.dstu2.proto.TestScript.use_context:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 1861: google.fhir.dstu2.proto.TestScript.requirements:type_name -> google.fhir.dstu2.proto.String
	397,  // 1862: google.fhir.dstu2.proto.TestScript.copyright:type_name -> google.fhir.dstu2.proto.String
	362,  // 1863: google.fhir.dstu2.proto.TestScript.metadata:type_name -> google.fhir.dstu2.proto.TestScript.Metadata
	431,  // 1864: google.fhir.dstu2.proto.TestScript.multiserver:type_name -> google.fhir.dstu2.proto.Boolean
	363,  // 1865: google.fhir.dstu2.proto.TestScript.fixture:type_name -> google.fhir.dstu2.proto.TestScript.Fixture
	403,  // 1866: google.fhir.dstu2.proto.TestScript.profile:type_name -> google.fhir.dstu2.proto.Reference
	364,  // 1867: google.fhir.dstu2.proto.TestScript.variable:type_name -> google.fhir.dstu2.proto.TestScript.Variable
	365,  // 1868: google.fhir.dstu2.proto.TestScript.setup:type_name -> google.fhir.dstu2.proto.TestScript.Setup
	366,  // 1869: google.fhir.dstu2.proto.TestScript.test:type_name -> google.fhir.dstu2.proto.TestScript.Test
	367,  // 1870: google.fhir.dstu2.proto.TestScript.teardown:type_name -> google.fhir.dstu2.proto.TestScript.Teardown
	390,  // 1871: google.fhir.dstu2.proto.ValueSet.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1872: google.fhir.dstu2.proto.ValueSet.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1873: google.fhir.dstu2.proto.ValueSet.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1874: google.fhir.dstu2.proto.ValueSet.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1875: google.fhir.dstu2.proto.ValueSet.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1876: google.fhir.dstu2.proto.ValueSet.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1877: google.fhir.dstu2.proto.ValueSet.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1878: google.fhir.dstu2.proto.ValueSet.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 1879: google.fhir.dstu2.proto.ValueSet.url:type_name -> google.fhir.dstu2.proto.Uri
	396,  // 1880: google.fhir.dstu2.proto.ValueSet.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 1881: google.fhir.dstu2.proto.ValueSet.version:type_name -> google.fhir.dstu2.proto.String
	397,  // 1882: google.fhir.dstu2.proto.ValueSet.name:type_name -> google.fhir.dstu2.proto.String
	430,  // 1883: google.fhir.dstu2.proto.ValueSet.status:type_name -> google.fhir.dstu2.proto.ConformanceResourceStatusCode
	431,  // 1884: google.fhir.dstu2.proto.ValueSet.experimental:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 1885: google.fhir.dstu2.proto.ValueSet.publisher:type_name -> google.fhir.dstu2.proto.String
	376,  // 1886: google.fhir.dstu2.proto.ValueSet.contact:type_name -> google.fhir.dstu2.proto.ValueSet.Contact
	404,  // 1887: google.fhir.dstu2.proto.ValueSet.date:type_name -> google.fhir.dstu2.proto.DateTime
	415,  // 1888: google.fhir.dstu2.proto.ValueSet.locked_date:type_name -> google.fhir.dstu2.proto.Date
	397,  // 1889: google.fhir.dstu2.proto.ValueSet.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 1890: google.fhir.dstu2.proto.ValueSet.use_context:type_name -> google.fhir.dstu2.proto.CodeableConcept
	431,  // 1891: google.fhir.dstu2.proto.ValueSet.immutable:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 1892: google.fhir.dstu2.proto.ValueSet.requirements:type_name -> google.fhir.dstu2.proto.String
	397,  // 1893: google.fhir.dstu2.proto.ValueSet.copyright:type_name -> google.fhir.dstu2.proto.String
	431,  // 1894: google.fhir.dstu2.proto.ValueSet.extensible:type_name -> google.fhir.dstu2.proto.Boolean
	377,  // 1895: google.fhir.dstu2.proto.ValueSet.code_system:type_name -> google.fhir.dstu2.proto.ValueSet.CodeSystem
	378,  // 1896: google.fhir.dstu2.proto.ValueSet.compose:type_name -> google.fhir.dstu2.proto.ValueSet.Compose
	379,  // 1897: google.fhir.dstu2.proto.ValueSet.expansion:type_name -> google.fhir.dstu2.proto.ValueSet.Expansion
	390,  // 1898: google.fhir.dstu2.proto.VisionPrescription.id:type_name -> google.fhir.dstu2.proto.Id
	391,  // 1899: google.fhir.dstu2.proto.VisionPrescription.meta:type_name -> google.fhir.dstu2.proto.Meta
	392,  // 1900: google.fhir.dstu2.proto.VisionPrescription.implicit_rules:type_name -> google.fhir.dstu2.proto.Uri
	393,  // 1901: google.fhir.dstu2.proto.VisionPrescription.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	394,  // 1902: google.fhir.dstu2.proto.VisionPrescription.text:type_name -> google.fhir.dstu2.proto.Narrative
	96,   // 1903: google.fhir.dstu2.proto.VisionPrescription.contained:type_name -> google.fhir.dstu2.proto.ContainedResource
	395,  // 1904: google.fhir.dstu2.proto.VisionPrescription.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 1905: google.fhir.dstu2.proto.VisionPrescription.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 1906: google.fhir.dstu2.proto.VisionPrescription.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 1907: google.fhir.dstu2.proto.VisionPrescription.date_written:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 1908: google.fhir.dstu2.proto.VisionPrescription.patient:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1909: google.fhir.dstu2.proto.VisionPrescription.prescriber:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 1910: google.fhir.dstu2.proto.VisionPrescription.encounter:type_name -> google.fhir.dstu2.proto.Reference
	388,  // 1911: google.fhir.dstu2.proto.VisionPrescription.reason:type_name -> google.fhir.dstu2.proto.VisionPrescription.Reason
	389,  // 1912: google.fhir.dstu2.proto.VisionPrescription.dispense:type_name -> google.fhir.dstu2.proto.VisionPrescription.Dispense
	0,    // 1913: google.fhir.dstu2.proto.ContainedResource.account:type_name -> google.fhir.dstu2.proto.Account
	1,    // 1914: google.fhir.dstu2.proto.ContainedResource.allergy_intolerance:type_name -> google.fhir.dstu2.proto.AllergyIntolerance
	2,    // 1915: google.fhir.dstu2.proto.ContainedResource.appointment:type_name -> google.fhir.dstu2.proto.Appointment
	3,    // 1916: google.fhir.dstu2.proto.ContainedResource.appointment_response:type_name -> google.fhir.dstu2.proto.AppointmentResponse
	4,    // 1917: google.fhir.dstu2.proto.ContainedResource.audit_event:type_name -> google.fhir.dstu2.proto.AuditEvent
	5,    // 1918: google.fhir.dstu2.proto.ContainedResource.basic:type_name -> google.fhir.dstu2.proto.Basic
	6,    // 1919: google.fhir.dstu2.proto.ContainedResource.binary:type_name -> google.fhir.dstu2.proto.Binary
	7,    // 1920: google.fhir.dstu2.proto.ContainedResource.body_site:type_name -> google.fhir.dstu2.proto.BodySite
	8,    // 1921: google.fhir.dstu2.proto.ContainedResource.bundle:type_name -> google.fhir.dstu2.proto.Bundle
	9,    // 1922: google.fhir.dstu2.proto.ContainedResource.care_plan:type_name -> google.fhir.dstu2.proto.CarePlan
	10,   // 1923: google.fhir.dstu2.proto.ContainedResource.claim:type_name -> google.fhir.dstu2.proto.Claim
	11,   // 1924: google.fhir.dstu2.proto.ContainedResource.claim_response:type_name -> google.fhir.dstu2.proto.ClaimResponse
	12,   // 1925: google.fhir.dstu2.proto.ContainedResource.clinical_impression:type_name -> google.fhir.dstu2.proto.ClinicalImpression
	13,   // 1926: google.fhir.dstu2.proto.ContainedResource.communication:type_name -> google.fhir.dstu2.proto.Communication
	14,   // 1927: google.fhir.dstu2.proto.ContainedResource.communication_request:type_name -> google.fhir.dstu2.proto.CommunicationRequest
	15,   // 1928: google.fhir.dstu2.proto.ContainedResource.composition:type_name -> google.fhir.dstu2.proto.Composition
	16,   // 1929: google.fhir.dstu2.proto.ContainedResource.concept_map:type_name -> google.fhir.dstu2.proto.ConceptMap
	17,   // 1930: google.fhir.dstu2.proto.ContainedResource.condition:type_name -> google.fhir.dstu2.proto.Condition
	18,   // 1931: google.fhir.dstu2.proto.ContainedResource.conformance:type_name -> google.fhir.dstu2.proto.Conformance
	19,   // 1932: google.fhir.dstu2.proto.ContainedResource.contract:type_name -> google.fhir.dstu2.proto.Contract
	20,   // 1933: google.fhir.dstu2.proto.ContainedResource.coverage:type_name -> google.fhir.dstu2.proto.Coverage
	21,   // 1934: google.fhir.dstu2.proto.ContainedResource.data_element:type_name -> google.fhir.dstu2.proto.DataElement
	22,   // 1935: google.fhir.dstu2.proto.ContainedResource.detected_issue:type_name -> google.fhir.dstu2.proto.DetectedIssue
	23,   // 1936: google.fhir.dstu2.proto.ContainedResource.device:type_name -> google.fhir.dstu2.proto.Device
	24,   // 1937: google.fhir.dstu2.proto.ContainedResource.device_component:type_name -> google.fhir.dstu2.proto.DeviceComponent
	25,   // 1938: google.fhir.dstu2.proto.ContainedResource.device_metric:type_name -> google.fhir.dstu2.proto.DeviceMetric
	26,   // 1939: google.fhir.dstu2.proto.ContainedResource.device_use_request:type_name -> google.fhir.dstu2.proto.DeviceUseRequest
	27,   // 1940: google.fhir.dstu2.proto.ContainedResource.device_use_statement:type_name -> google.fhir.dstu2.proto.DeviceUseStatement
	28,   // 1941: google.fhir.dstu2.proto.ContainedResource.diagnostic_order:type_name -> google.fhir.dstu2.proto.DiagnosticOrder
	29,   // 1942: google.fhir.dstu2.proto.ContainedResource.diagnostic_report:type_name -> google.fhir.dstu2.proto.DiagnosticReport
	30,   // 1943: google.fhir.dstu2.proto.ContainedResource.document_manifest:type_name -> google.fhir.dstu2.proto.DocumentManifest
	31,   // 1944: google.fhir.dstu2.proto.ContainedResource.document_reference:type_name -> google.fhir.dstu2.proto.DocumentReference
	33,   // 1945: google.fhir.dstu2.proto.ContainedResource.eligibility_request:type_name -> google.fhir.dstu2.proto.EligibilityRequest
	34,   // 1946: google.fhir.dstu2.proto.ContainedResource.eligibility_response:type_name -> google.fhir.dstu2.proto.EligibilityResponse
	35,   // 1947: google.fhir.dstu2.proto.ContainedResource.encounter:type_name -> google.fhir.dstu2.proto.Encounter
	36,   // 1948: google.fhir.dstu2.proto.ContainedResource.enrollment_request:type_name -> google.fhir.dstu2.proto.EnrollmentRequest
	37,   // 1949: google.fhir.dstu2.proto.ContainedResource.enrollment_response:type_name -> google.fhir.dstu2.proto.EnrollmentResponse
	38,   // 1950: google.fhir.dstu2.proto.ContainedResource.episode_of_care:type_name -> google.fhir.dstu2.proto.EpisodeOfCare
	39,   // 1951: google.fhir.dstu2.proto.ContainedResource.explanation_of_benefit:type_name -> google.fhir.dstu2.proto.ExplanationOfBenefit
	40,   // 1952: google.fhir.dstu2.proto.ContainedResource.family_member_history:type_name -> google.fhir.dstu2.proto.FamilyMemberHistory
	41,   // 1953: google.fhir.dstu2.proto.ContainedResource.flag:type_name -> google.fhir.dstu2.proto.Flag
	42,   // 1954: google.fhir.dstu2.proto.ContainedResource.goal:type_name -> google.fhir.dstu2.proto.Goal
	43,   // 1955: google.fhir.dstu2.proto.ContainedResource.group:type_name -> google.fhir.dstu2.proto.Group
	44,   // 1956: google.fhir.dstu2.proto.ContainedResource.healthcare_service:type_name -> google.fhir.dstu2.proto.HealthcareService
	45,   // 1957: google.fhir.dstu2.proto.ContainedResource.imaging_object_selection:type_name -> google.fhir.dstu2.proto.ImagingObjectSelection
	46,   // 1958: google.fhir.dstu2.proto.ContainedResource.imaging_study:type_name -> google.fhir.dstu2.proto.ImagingStudy
	47,   // 1959: google.fhir.dstu2.proto.ContainedResource.immunization:type_name -> google.fhir.dstu2.proto.Immunization
	48,   // 1960: google.fhir.dstu2.proto.ContainedResource.immunization_recommendation:type_name -> google.fhir.dstu2.proto.ImmunizationRecommendation
	49,   // 1961: google.fhir.dstu2.proto.ContainedResource.implementation_guide:type_name -> google.fhir.dstu2.proto.ImplementationGuide
	50,   // 1962: google.fhir.dstu2.proto.ContainedResource.list:type_name -> google.fhir.dstu2.proto.List
	51,   // 1963: google.fhir.dstu2.proto.ContainedResource.location:type_name -> google.fhir.dstu2.proto.Location
	52,   // 1964: google.fhir.dstu2.proto.ContainedResource.media:type_name -> google.fhir.dstu2.proto.Media
	53,   // 1965: google.fhir.dstu2.proto.ContainedResource.medication:type_name -> google.fhir.dstu2.proto.Medication
	54,   // 1966: google.fhir.dstu2.proto.ContainedResource.medication_administration:type_name -> google.fhir.dstu2.proto.MedicationAdministration
	55,   // 1967: google.fhir.dstu2.proto.ContainedResource.medication_dispense:type_name -> google.fhir.dstu2.proto.MedicationDispense
	56,   // 1968: google.fhir.dstu2.proto.ContainedResource.medication_order:type_name -> google.fhir.dstu2.proto.MedicationOrder
	57,   // 1969: google.fhir.dstu2.proto.ContainedResource.medication_statement:type_name -> google.fhir.dstu2.proto.MedicationStatement
	58,   // 1970: google.fhir.dstu2.proto.ContainedResource.message_header:type_name -> google.fhir.dstu2.proto.MessageHeader
	59,   // 1971: google.fhir.dstu2.proto.ContainedResource.naming_system:type_name -> google.fhir.dstu2.proto.NamingSystem
	60,   // 1972: google.fhir.dstu2.proto.ContainedResource.nutrition_order:type_name -> google.fhir.dstu2.proto.NutritionOrder
	61,   // 1973: google.fhir.dstu2.proto.ContainedResource.observation:type_name -> google.fhir.dstu2.proto.Observation
	62,   // 1974: google.fhir.dstu2.proto.ContainedResource.operation_definition:type_name -> google.fhir.dstu2.proto.OperationDefinition
	63,   // 1975: google.fhir.dstu2.proto.ContainedResource.operation_outcome:type_name -> google.fhir.dstu2.proto.OperationOutcome
	64,   // 1976: google.fhir.dstu2.proto.ContainedResource.order:type_name -> google.fhir.dstu2.proto.Order
	65,   // 1977: google.fhir.dstu2.proto.ContainedResource.order_response:type_name -> google.fhir.dstu2.proto.OrderResponse
	66,   // 1978: google.fhir.dstu2.proto.ContainedResource.organization:type_name -> google.fhir.dstu2.proto.Organization
	67,   // 1979: google.fhir.dstu2.proto.ContainedResource.parameters:type_name -> google.fhir.dstu2.proto.Parameters
	68,   // 1980: google.fhir.dstu2.proto.ContainedResource.patient:type_name -> google.fhir.dstu2.proto.Patient
	69,   // 1981: google.fhir.dstu2.proto.ContainedResource.payment_notice:type_name -> google.fhir.dstu2.proto.PaymentNotice
	70,   // 1982: google.fhir.dstu2.proto.ContainedResource.payment_reconciliation:type_name -> google.fhir.dstu2.proto.PaymentReconciliation
	71,   // 1983: google.fhir.dstu2.proto.ContainedResource.person:type_name -> google.fhir.dstu2.proto.Person
	72,   // 1984: google.fhir.dstu2.proto.ContainedResource.practitioner:type_name -> google.fhir.dstu2.proto.Practitioner
	73,   // 1985: google.fhir.dstu2.proto.ContainedResource.procedure:type_name -> google.fhir.dstu2.proto.Procedure
	74,   // 1986: google.fhir.dstu2.proto.ContainedResource.procedure_request:type_name -> google.fhir.dstu2.proto.ProcedureRequest
	75,   // 1987: google.fhir.dstu2.proto.ContainedResource.process_request:type_name -> google.fhir.dstu2.proto.ProcessRequest
	76,   // 1988: google.fhir.dstu2.proto.ContainedResource.process_response:type_name -> google.fhir.dstu2.proto.ProcessResponse
	77,   // 1989: google.fhir.dstu2.proto.ContainedResource.provenance:type_name -> google.fhir.dstu2.proto.Provenance
	78,   // 1990: google.fhir.dstu2.proto.ContainedResource.questionnaire:type_name -> google.fhir.dstu2.proto.Questionnaire
	79,   // 1991: google.fhir.dstu2.proto.ContainedResource.questionnaire_response:type_name -> google.fhir.dstu2.proto.QuestionnaireResponse
	80,   // 1992: google.fhir.dstu2.proto.ContainedResource.referral_request:type_name -> google.fhir.dstu2.proto.ReferralRequest
	81,   // 1993: google.fhir.dstu2.proto.ContainedResource.related_person:type_name -> google.fhir.dstu2.proto.RelatedPerson
	83,   // 1994: google.fhir.dstu2.proto.ContainedResource.risk_assessment:type_name -> google.fhir.dstu2.proto.RiskAssessment
	84,   // 1995: google.fhir.dstu2.proto.ContainedResource.schedule:type_name -> google.fhir.dstu2.proto.Schedule
	85,   // 1996: google.fhir.dstu2.proto.ContainedResource.search_parameter:type_name -> google.fhir.dstu2.proto.SearchParameter
	86,   // 1997: google.fhir.dstu2.proto.ContainedResource.slot:type_name -> google.fhir.dstu2.proto.Slot
	87,   // 1998: google.fhir.dstu2.proto.ContainedResource.specimen:type_name -> google.fhir.dstu2.proto.Specimen
	88,   // 1999: google.fhir.dstu2.proto.ContainedResource.structure_definition:type_name -> google.fhir.dstu2.proto.StructureDefinition
	89,   // 2000: google.fhir.dstu2.proto.ContainedResource.subscription:type_name -> google.fhir.dstu2.proto.Subscription
	90,   // 2001: google.fhir.dstu2.proto.ContainedResource.substance:type_name -> google.fhir.dstu2.proto.Substance
	91,   // 2002: google.fhir.dstu2.proto.ContainedResource.supply_delivery:type_name -> google.fhir.dstu2.proto.SupplyDelivery
	92,   // 2003: google.fhir.dstu2.proto.ContainedResource.supply_request:type_name -> google.fhir.dstu2.proto.SupplyRequest
	93,   // 2004: google.fhir.dstu2.proto.ContainedResource.test_script:type_name -> google.fhir.dstu2.proto.TestScript
	94,   // 2005: google.fhir.dstu2.proto.ContainedResource.value_set:type_name -> google.fhir.dstu2.proto.ValueSet
	95,   // 2006: google.fhir.dstu2.proto.ContainedResource.vision_prescription:type_name -> google.fhir.dstu2.proto.VisionPrescription
	390,  // 2007: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2008: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2009: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2010: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.substance:type_name -> google.fhir.dstu2.proto.CodeableConcept
	497,  // 2011: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.certainty:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceCertaintyCode
	398,  // 2012: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.manifestation:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 2013: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.description:type_name -> google.fhir.dstu2.proto.String
	404,  // 2014: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.onset:type_name -> google.fhir.dstu2.proto.DateTime
	498,  // 2015: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.severity:type_name -> google.fhir.dstu2.proto.AllergyIntoleranceSeverityCode
	398,  // 2016: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.exposure_route:type_name -> google.fhir.dstu2.proto.CodeableConcept
	409,  // 2017: google.fhir.dstu2.proto.AllergyIntolerance.Reaction.note:type_name -> google.fhir.dstu2.proto.Annotation
	390,  // 2018: google.fhir.dstu2.proto.Appointment.Participant.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2019: google.fhir.dstu2.proto.Appointment.Participant.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2020: google.fhir.dstu2.proto.Appointment.Participant.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2021: google.fhir.dstu2.proto.Appointment.Participant.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2022: google.fhir.dstu2.proto.Appointment.Participant.actor:type_name -> google.fhir.dstu2.proto.Reference
	499,  // 2023: google.fhir.dstu2.proto.Appointment.Participant.required:type_name -> google.fhir.dstu2.proto.ParticipantRequiredCode
	500,  // 2024: google.fhir.dstu2.proto.Appointment.Participant.status:type_name -> google.fhir.dstu2.proto.ParticipationStatusCode
	390,  // 2025: google.fhir.dstu2.proto.AuditEvent.Event.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2026: google.fhir.dstu2.proto.AuditEvent.Event.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2027: google.fhir.dstu2.proto.AuditEvent.Event.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2028: google.fhir.dstu2.proto.AuditEvent.Event.type:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2029: google.fhir.dstu2.proto.AuditEvent.Event.subtype:type_name -> google.fhir.dstu2.proto.Coding
	501,  // 2030: google.fhir.dstu2.proto.AuditEvent.Event.action:type_name -> google.fhir.dstu2.proto.AuditEventActionCode
	412,  // 2031: google.fhir.dstu2.proto.AuditEvent.Event.date_time:type_name -> google.fhir.dstu2.proto.Instant
	502,  // 2032: google.fhir.dstu2.proto.AuditEvent.Event.outcome:type_name -> google.fhir.dstu2.proto.AuditEventOutcomeCode
	397,  // 2033: google.fhir.dstu2.proto.AuditEvent.Event.outcome_desc:type_name -> google.fhir.dstu2.proto.String
	401,  // 2034: google.fhir.dstu2.proto.AuditEvent.Event.purpose_of_event:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2035: google.fhir.dstu2.proto.AuditEvent.Participant.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2036: google.fhir.dstu2.proto.AuditEvent.Participant.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2037: google.fhir.dstu2.proto.AuditEvent.Participant.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2038: google.fhir.dstu2.proto.AuditEvent.Participant.role:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2039: google.fhir.dstu2.proto.AuditEvent.Participant.reference:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 2040: google.fhir.dstu2.proto.AuditEvent.Participant.user_id:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 2041: google.fhir.dstu2.proto.AuditEvent.Participant.alt_id:type_name -> google.fhir.dstu2.proto.String
	397,  // 2042: google.fhir.dstu2.proto.AuditEvent.Participant.name:type_name -> google.fhir.dstu2.proto.String
	431,  // 2043: google.fhir.dstu2.proto.AuditEvent.Participant.requestor:type_name -> google.fhir.dstu2.proto.Boolean
	403,  // 2044: google.fhir.dstu2.proto.AuditEvent.Participant.location:type_name -> google.fhir.dstu2.proto.Reference
	392,  // 2045: google.fhir.dstu2.proto.AuditEvent.Participant.policy:type_name -> google.fhir.dstu2.proto.Uri
	401,  // 2046: google.fhir.dstu2.proto.AuditEvent.Participant.media:type_name -> google.fhir.dstu2.proto.Coding
	103,  // 2047: google.fhir.dstu2.proto.AuditEvent.Participant.network:type_name -> google.fhir.dstu2.proto.AuditEvent.Participant.Network
	401,  // 2048: google.fhir.dstu2.proto.AuditEvent.Participant.purpose_of_use:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2049: google.fhir.dstu2.proto.AuditEvent.Source.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2050: google.fhir.dstu2.proto.AuditEvent.Source.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2051: google.fhir.dstu2.proto.AuditEvent.Source.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2052: google.fhir.dstu2.proto.AuditEvent.Source.site:type_name -> google.fhir.dstu2.proto.String
	396,  // 2053: google.fhir.dstu2.proto.AuditEvent.Source.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	401,  // 2054: google.fhir.dstu2.proto.AuditEvent.Source.type:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2055: google.fhir.dstu2.proto.AuditEvent.Object.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2056: google.fhir.dstu2.proto.AuditEvent.Object.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2057: google.fhir.dstu2.proto.AuditEvent.Object.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 2058: google.fhir.dstu2.proto.AuditEvent.Object.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 2059: google.fhir.dstu2.proto.AuditEvent.Object.reference:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 2060: google.fhir.dstu2.proto.AuditEvent.Object.type:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2061: google.fhir.dstu2.proto.AuditEvent.Object.role:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2062: google.fhir.dstu2.proto.AuditEvent.Object.lifecycle:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2063: google.fhir.dstu2.proto.AuditEvent.Object.security_label:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 2064: google.fhir.dstu2.proto.AuditEvent.Object.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 2065: google.fhir.dstu2.proto.AuditEvent.Object.description:type_name -> google.fhir.dstu2.proto.String
	417,  // 2066: google.fhir.dstu2.proto.AuditEvent.Object.query:type_name -> google.fhir.dstu2.proto.Base64Binary
	104,  // 2067: google.fhir.dstu2.proto.AuditEvent.Object.detail:type_name -> google.fhir.dstu2.proto.AuditEvent.Object.Detail
	390,  // 2068: google.fhir.dstu2.proto.AuditEvent.Participant.Network.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2069: google.fhir.dstu2.proto.AuditEvent.Participant.Network.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2070: google.fhir.dstu2.proto.AuditEvent.Participant.Network.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2071: google.fhir.dstu2.proto.AuditEvent.Participant.Network.address:type_name -> google.fhir.dstu2.proto.String
	503,  // 2072: google.fhir.dstu2.proto.AuditEvent.Participant.Network.type:type_name -> google.fhir.dstu2.proto.AuditEventAgentNetworkTypeCode
	390,  // 2073: google.fhir.dstu2.proto.AuditEvent.Object.Detail.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2074: google.fhir.dstu2.proto.AuditEvent.Object.Detail.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2075: google.fhir.dstu2.proto.AuditEvent.Object.Detail.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2076: google.fhir.dstu2.proto.AuditEvent.Object.Detail.type:type_name -> google.fhir.dstu2.proto.String
	417,  // 2077: google.fhir.dstu2.proto.AuditEvent.Object.Detail.value:type_name -> google.fhir.dstu2.proto.Base64Binary
	390,  // 2078: google.fhir.dstu2.proto.Bundle.Link.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2079: google.fhir.dstu2.proto.Bundle.Link.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2080: google.fhir.dstu2.proto.Bundle.Link.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2081: google.fhir.dstu2.proto.Bundle.Link.relation:type_name -> google.fhir.dstu2.proto.String
	392,  // 2082: google.fhir.dstu2.proto.Bundle.Link.url:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 2083: google.fhir.dstu2.proto.Bundle.Entry.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2084: google.fhir.dstu2.proto.Bundle.Entry.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2085: google.fhir.dstu2.proto.Bundle.Entry.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	105,  // 2086: google.fhir.dstu2.proto.Bundle.Entry.link:type_name -> google.fhir.dstu2.proto.Bundle.Link
	392,  // 2087: google.fhir.dstu2.proto.Bundle.Entry.full_url:type_name -> google.fhir.dstu2.proto.Uri
	96,   // 2088: google.fhir.dstu2.proto.Bundle.Entry.resource:type_name -> google.fhir.dstu2.proto.ContainedResource
	107,  // 2089: google.fhir.dstu2.proto.Bundle.Entry.search:type_name -> google.fhir.dstu2.proto.Bundle.Entry.Search
	108,  // 2090: google.fhir.dstu2.proto.Bundle.Entry.request:type_name -> google.fhir.dstu2.proto.Bundle.Entry.Request
	109,  // 2091: google.fhir.dstu2.proto.Bundle.Entry.response:type_name -> google.fhir.dstu2.proto.Bundle.Entry.Response
	390,  // 2092: google.fhir.dstu2.proto.Bundle.Entry.Search.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2093: google.fhir.dstu2.proto.Bundle.Entry.Search.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2094: google.fhir.dstu2.proto.Bundle.Entry.Search.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	504,  // 2095: google.fhir.dstu2.proto.Bundle.Entry.Search.mode:type_name -> google.fhir.dstu2.proto.SearchEntryModeCode
	505,  // 2096: google.fhir.dstu2.proto.Bundle.Entry.Search.score:type_name -> google.fhir.dstu2.proto.Decimal
	390,  // 2097: google.fhir.dstu2.proto.Bundle.Entry.Request.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2098: google.fhir.dstu2.proto.Bundle.Entry.Request.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2099: google.fhir.dstu2.proto.Bundle.Entry.Request.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	506,  // 2100: google.fhir.dstu2.proto.Bundle.Entry.Request.method:type_name -> google.fhir.dstu2.proto.HTTPVerbCode
	392,  // 2101: google.fhir.dstu2.proto.Bundle.Entry.Request.url:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 2102: google.fhir.dstu2.proto.Bundle.Entry.Request.if_none_match:type_name -> google.fhir.dstu2.proto.String
	412,  // 2103: google.fhir.dstu2.proto.Bundle.Entry.Request.if_modified_since:type_name -> google.fhir.dstu2.proto.Instant
	397,  // 2104: google.fhir.dstu2.proto.Bundle.Entry.Request.if_match:type_name -> google.fhir.dstu2.proto.String
	397,  // 2105: google.fhir.dstu2.proto.Bundle.Entry.Request.if_none_exist:type_name -> google.fhir.dstu2.proto.String
	390,  // 2106: google.fhir.dstu2.proto.Bundle.Entry.Response.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2107: google.fhir.dstu2.proto.Bundle.Entry.Response.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2108: google.fhir.dstu2.proto.Bundle.Entry.Response.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2109: google.fhir.dstu2.proto.Bundle.Entry.Response.status:type_name -> google.fhir.dstu2.proto.String
	392,  // 2110: google.fhir.dstu2.proto.Bundle.Entry.Response.location:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 2111: google.fhir.dstu2.proto.Bundle.Entry.Response.etag:type_name -> google.fhir.dstu2.proto.String
	412,  // 2112: google.fhir.dstu2.proto.Bundle.Entry.Response.last_modified:type_name -> google.fhir.dstu2.proto.Instant
	390,  // 2113: google.fhir.dstu2.proto.CarePlan.RelatedPlan.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2114: google.fhir.dstu2.proto.CarePlan.RelatedPlan.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2115: google.fhir.dstu2.proto.CarePlan.RelatedPlan.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	507,  // 2116: google.fhir.dstu2.proto.CarePlan.RelatedPlan.code:type_name -> google.fhir.dstu2.proto.CarePlanRelationshipCode
	403,  // 2117: google.fhir.dstu2.proto.CarePlan.RelatedPlan.plan:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2118: google.fhir.dstu2.proto.CarePlan.Participant.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2119: google.fhir.dstu2.proto.CarePlan.Participant.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2120: google.fhir.dstu2.proto.CarePlan.Participant.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2121: google.fhir.dstu2.proto.CarePlan.Participant.role:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2122: google.fhir.dstu2.proto.CarePlan.Participant.member:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2123: google.fhir.dstu2.proto.CarePlan.Activity.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2124: google.fhir.dstu2.proto.CarePlan.Activity.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2125: google.fhir.dstu2.proto.CarePlan.Activity.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 2126: google.fhir.dstu2.proto.CarePlan.Activity.action_resulting:type_name -> google.fhir.dstu2.proto.Reference
	409,  // 2127: google.fhir.dstu2.proto.CarePlan.Activity.progress:type_name -> google.fhir.dstu2.proto.Annotation
	403,  // 2128: google.fhir.dstu2.proto.CarePlan.Activity.reference:type_name -> google.fhir.dstu2.proto.Reference
	113,  // 2129: google.fhir.dstu2.proto.CarePlan.Activity.detail:type_name -> google.fhir.dstu2.proto.CarePlan.Activity.Detail
	390,  // 2130: google.fhir.dstu2.proto.CarePlan.Activity.Detail.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2131: google.fhir.dstu2.proto.CarePlan.Activity.Detail.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2132: google.fhir.dstu2.proto.CarePlan.Activity.Detail.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2133: google.fhir.dstu2.proto.CarePlan.Activity.Detail.category:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2134: google.fhir.dstu2.proto.CarePlan.Activity.Detail.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2135: google.fhir.dstu2.proto.CarePlan.Activity.Detail.reason_code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2136: google.fhir.dstu2.proto.CarePlan.Activity.Detail.reason_reference:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 2137: google.fhir.dstu2.proto.CarePlan.Activity.Detail.goal:type_name -> google.fhir.dstu2.proto.Reference
	508,  // 2138: google.fhir.dstu2.proto.CarePlan.Activity.Detail.status:type_name -> google.fhir.dstu2.proto.CarePlanActivityStatusCode
	398,  // 2139: google.fhir.dstu2.proto.CarePlan.Activity.Detail.status_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	431,  // 2140: google.fhir.dstu2.proto.CarePlan.Activity.Detail.prohibited:type_name -> google.fhir.dstu2.proto.Boolean
	114,  // 2141: google.fhir.dstu2.proto.CarePlan.Activity.Detail.scheduled:type_name -> google.fhir.dstu2.proto.CarePlan.Activity.Detail.Scheduled
	403,  // 2142: google.fhir.dstu2.proto.CarePlan.Activity.Detail.location:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 2143: google.fhir.dstu2.proto.CarePlan.Activity.Detail.performer:type_name -> google.fhir.dstu2.proto.Reference
	115,  // 2144: google.fhir.dstu2.proto.CarePlan.Activity.Detail.product:type_name -> google.fhir.dstu2.proto.CarePlan.Activity.Detail.Product
	463,  // 2145: google.fhir.dstu2.proto.CarePlan.Activity.Detail.daily_amount:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	463,  // 2146: google.fhir.dstu2.proto.CarePlan.Activity.Detail.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	397,  // 2147: google.fhir.dstu2.proto.CarePlan.Activity.Detail.description:type_name -> google.fhir.dstu2.proto.String
	444,  // 2148: google.fhir.dstu2.proto.CarePlan.Activity.Detail.Scheduled.timing:type_name -> google.fhir.dstu2.proto.Timing
	400,  // 2149: google.fhir.dstu2.proto.CarePlan.Activity.Detail.Scheduled.period:type_name -> google.fhir.dstu2.proto.Period
	397,  // 2150: google.fhir.dstu2.proto.CarePlan.Activity.Detail.Scheduled.string_value:type_name -> google.fhir.dstu2.proto.String
	398,  // 2151: google.fhir.dstu2.proto.CarePlan.Activity.Detail.Product.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2152: google.fhir.dstu2.proto.CarePlan.Activity.Detail.Product.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2153: google.fhir.dstu2.proto.Claim.Payee.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2154: google.fhir.dstu2.proto.Claim.Payee.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2155: google.fhir.dstu2.proto.Claim.Payee.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2156: google.fhir.dstu2.proto.Claim.Payee.type:type_name -> google.fhir.dstu2.proto.Coding
	403,  // 2157: google.fhir.dstu2.proto.Claim.Payee.provider:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 2158: google.fhir.dstu2.proto.Claim.Payee.organization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 2159: google.fhir.dstu2.proto.Claim.Payee.person:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2160: google.fhir.dstu2.proto.Claim.Diagnosis.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2161: google.fhir.dstu2.proto.Claim.Diagnosis.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2162: google.fhir.dstu2.proto.Claim.Diagnosis.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2163: google.fhir.dstu2.proto.Claim.Diagnosis.sequence:type_name -> google.fhir.dstu2.proto.PositiveInt
	401,  // 2164: google.fhir.dstu2.proto.Claim.Diagnosis.diagnosis:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2165: google.fhir.dstu2.proto.Claim.Coverage.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2166: google.fhir.dstu2.proto.Claim.Coverage.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2167: google.fhir.dstu2.proto.Claim.Coverage.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2168: google.fhir.dstu2.proto.Claim.Coverage.sequence:type_name -> google.fhir.dstu2.proto.PositiveInt
	431,  // 2169: google.fhir.dstu2.proto.Claim.Coverage.focal:type_name -> google.fhir.dstu2.proto.Boolean
	403,  // 2170: google.fhir.dstu2.proto.Claim.Coverage.coverage:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 2171: google.fhir.dstu2.proto.Claim.Coverage.business_arrangement:type_name -> google.fhir.dstu2.proto.String
	401,  // 2172: google.fhir.dstu2.proto.Claim.Coverage.relationship:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 2173: google.fhir.dstu2.proto.Claim.Coverage.pre_auth_ref:type_name -> google.fhir.dstu2.proto.String
	403,  // 2174: google.fhir.dstu2.proto.Claim.Coverage.claim_response:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 2175: google.fhir.dstu2.proto.Claim.Coverage.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2176: google.fhir.dstu2.proto.Claim.Item.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2177: google.fhir.dstu2.proto.Claim.Item.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2178: google.fhir.dstu2.proto.Claim.Item.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2179: google.fhir.dstu2.proto.Claim.Item.sequence:type_name -> google.fhir.dstu2.proto.PositiveInt
	401,  // 2180: google.fhir.dstu2.proto.Claim.Item.type:type_name -> google.fhir.dstu2.proto.Coding
	403,  // 2181: google.fhir.dstu2.proto.Claim.Item.provider:type_name -> google.fhir.dstu2.proto.Reference
	413,  // 2182: google.fhir.dstu2.proto.Claim.Item.diagnosis_link_id:type_name -> google.fhir.dstu2.proto.PositiveInt
	401,  // 2183: google.fhir.dstu2.proto.Claim.Item.service:type_name -> google.fhir.dstu2.proto.Coding
	415,  // 2184: google.fhir.dstu2.proto.Claim.Item.service_date:type_name -> google.fhir.dstu2.proto.Date
	463,  // 2185: google.fhir.dstu2.proto.Claim.Item.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	402,  // 2186: google.fhir.dstu2.proto.Claim.Item.unit_price:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2187: google.fhir.dstu2.proto.Claim.Item.factor:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 2188: google.fhir.dstu2.proto.Claim.Item.points:type_name -> google.fhir.dstu2.proto.Decimal
	402,  // 2189: google.fhir.dstu2.proto.Claim.Item.net:type_name -> google.fhir.dstu2.proto.Money
	401,  // 2190: google.fhir.dstu2.proto.Claim.Item.udi:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2191: google.fhir.dstu2.proto.Claim.Item.body_site:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2192: google.fhir.dstu2.proto.Claim.Item.sub_site:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2193: google.fhir.dstu2.proto.Claim.Item.modifier:type_name -> google.fhir.dstu2.proto.Coding
	121,  // 2194: google.fhir.dstu2.proto.Claim.Item.detail:type_name -> google.fhir.dstu2.proto.Claim.Item.Detail
	122,  // 2195: google.fhir.dstu2.proto.Claim.Item.prosthesis:type_name -> google.fhir.dstu2.proto.Claim.Item.Prosthesis
	390,  // 2196: google.fhir.dstu2.proto.Claim.MissingTeeth.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2197: google.fhir.dstu2.proto.Claim.MissingTeeth.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2198: google.fhir.dstu2.proto.Claim.MissingTeeth.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2199: google.fhir.dstu2.proto.Claim.MissingTeeth.tooth:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2200: google.fhir.dstu2.proto.Claim.MissingTeeth.reason:type_name -> google.fhir.dstu2.proto.Coding
	415,  // 2201: google.fhir.dstu2.proto.Claim.MissingTeeth.extraction_date:type_name -> google.fhir.dstu2.proto.Date
	390,  // 2202: google.fhir.dstu2.proto.Claim.Item.Detail.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2203: google.fhir.dstu2.proto.Claim.Item.Detail.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2204: google.fhir.dstu2.proto.Claim.Item.Detail.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2205: google.fhir.dstu2.proto.Claim.Item.Detail.sequence:type_name -> google.fhir.dstu2.proto.PositiveInt
	401,  // 2206: google.fhir.dstu2.proto.Claim.Item.Detail.type:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2207: google.fhir.dstu2.proto.Claim.Item.Detail.service:type_name -> google.fhir.dstu2.proto.Coding
	463,  // 2208: google.fhir.dstu2.proto.Claim.Item.Detail.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	402,  // 2209: google.fhir.dstu2.proto.Claim.Item.Detail.unit_price:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2210: google.fhir.dstu2.proto.Claim.Item.Detail.factor:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 2211: google.fhir.dstu2.proto.Claim.Item.Detail.points:type_name -> google.fhir.dstu2.proto.Decimal
	402,  // 2212: google.fhir.dstu2.proto.Claim.Item.Detail.net:type_name -> google.fhir.dstu2.proto.Money
	401,  // 2213: google.fhir.dstu2.proto.Claim.Item.Detail.udi:type_name -> google.fhir.dstu2.proto.Coding
	123,  // 2214: google.fhir.dstu2.proto.Claim.Item.Detail.sub_detail:type_name -> google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail
	390,  // 2215: google.fhir.dstu2.proto.Claim.Item.Prosthesis.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2216: google.fhir.dstu2.proto.Claim.Item.Prosthesis.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2217: google.fhir.dstu2.proto.Claim.Item.Prosthesis.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	431,  // 2218: google.fhir.dstu2.proto.Claim.Item.Prosthesis.initial:type_name -> google.fhir.dstu2.proto.Boolean
	415,  // 2219: google.fhir.dstu2.proto.Claim.Item.Prosthesis.prior_date:type_name -> google.fhir.dstu2.proto.Date
	401,  // 2220: google.fhir.dstu2.proto.Claim.Item.Prosthesis.prior_material:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2221: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2222: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2223: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2224: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.sequence:type_name -> google.fhir.dstu2.proto.PositiveInt
	401,  // 2225: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.type:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2226: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.service:type_name -> google.fhir.dstu2.proto.Coding
	463,  // 2227: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	402,  // 2228: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.unit_price:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2229: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.factor:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 2230: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.points:type_name -> google.fhir.dstu2.proto.Decimal
	402,  // 2231: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.net:type_name -> google.fhir.dstu2.proto.Money
	401,  // 2232: google.fhir.dstu2.proto.Claim.Item.Detail.SubDetail.udi:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2233: google.fhir.dstu2.proto.ClaimResponse.Item.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2234: google.fhir.dstu2.proto.ClaimResponse.Item.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2235: google.fhir.dstu2.proto.ClaimResponse.Item.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2236: google.fhir.dstu2.proto.ClaimResponse.Item.sequence_link_id:type_name -> google.fhir.dstu2.proto.PositiveInt
	413,  // 2237: google.fhir.dstu2.proto.ClaimResponse.Item.note_number:type_name -> google.fhir.dstu2.proto.PositiveInt
	129,  // 2238: google.fhir.dstu2.proto.ClaimResponse.Item.adjudication:type_name -> google.fhir.dstu2.proto.ClaimResponse.Item.Adjudication
	130,  // 2239: google.fhir.dstu2.proto.ClaimResponse.Item.detail:type_name -> google.fhir.dstu2.proto.ClaimResponse.Item.Detail
	390,  // 2240: google.fhir.dstu2.proto.ClaimResponse.AddItem.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2241: google.fhir.dstu2.proto.ClaimResponse.AddItem.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2242: google.fhir.dstu2.proto.ClaimResponse.AddItem.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2243: google.fhir.dstu2.proto.ClaimResponse.AddItem.sequence_link_id:type_name -> google.fhir.dstu2.proto.PositiveInt
	401,  // 2244: google.fhir.dstu2.proto.ClaimResponse.AddItem.service:type_name -> google.fhir.dstu2.proto.Coding
	402,  // 2245: google.fhir.dstu2.proto.ClaimResponse.AddItem.fee:type_name -> google.fhir.dstu2.proto.Money
	413,  // 2246: google.fhir.dstu2.proto.ClaimResponse.AddItem.note_number_link_id:type_name -> google.fhir.dstu2.proto.PositiveInt
	134,  // 2247: google.fhir.dstu2.proto.ClaimResponse.AddItem.adjudication:type_name -> google.fhir.dstu2.proto.ClaimResponse.AddItem.Adjudication
	135,  // 2248: google.fhir.dstu2.proto.ClaimResponse.AddItem.detail:type_name -> google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail
	390,  // 2249: google.fhir.dstu2.proto.ClaimResponse.Error.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2250: google.fhir.dstu2.proto.ClaimResponse.Error.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2251: google.fhir.dstu2.proto.ClaimResponse.Error.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2252: google.fhir.dstu2.proto.ClaimResponse.Error.sequence_link_id:type_name -> google.fhir.dstu2.proto.PositiveInt
	413,  // 2253: google.fhir.dstu2.proto.ClaimResponse.Error.detail_sequence_link_id:type_name -> google.fhir.dstu2.proto.PositiveInt
	413,  // 2254: google.fhir.dstu2.proto.ClaimResponse.Error.subdetail_sequence_link_id:type_name -> google.fhir.dstu2.proto.PositiveInt
	401,  // 2255: google.fhir.dstu2.proto.ClaimResponse.Error.code:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2256: google.fhir.dstu2.proto.ClaimResponse.Note.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2257: google.fhir.dstu2.proto.ClaimResponse.Note.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2258: google.fhir.dstu2.proto.ClaimResponse.Note.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2259: google.fhir.dstu2.proto.ClaimResponse.Note.number:type_name -> google.fhir.dstu2.proto.PositiveInt
	401,  // 2260: google.fhir.dstu2.proto.ClaimResponse.Note.type:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 2261: google.fhir.dstu2.proto.ClaimResponse.Note.text:type_name -> google.fhir.dstu2.proto.String
	390,  // 2262: google.fhir.dstu2.proto.ClaimResponse.Coverage.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2263: google.fhir.dstu2.proto.ClaimResponse.Coverage.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2264: google.fhir.dstu2.proto.ClaimResponse.Coverage.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2265: google.fhir.dstu2.proto.ClaimResponse.Coverage.sequence:type_name -> google.fhir.dstu2.proto.PositiveInt
	431,  // 2266: google.fhir.dstu2.proto.ClaimResponse.Coverage.focal:type_name -> google.fhir.dstu2.proto.Boolean
	403,  // 2267: google.fhir.dstu2.proto.ClaimResponse.Coverage.coverage:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 2268: google.fhir.dstu2.proto.ClaimResponse.Coverage.business_arrangement:type_name -> google.fhir.dstu2.proto.String
	401,  // 2269: google.fhir.dstu2.proto.ClaimResponse.Coverage.relationship:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 2270: google.fhir.dstu2.proto.ClaimResponse.Coverage.pre_auth_ref:type_name -> google.fhir.dstu2.proto.String
	403,  // 2271: google.fhir.dstu2.proto.ClaimResponse.Coverage.claim_response:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 2272: google.fhir.dstu2.proto.ClaimResponse.Coverage.original_ruleset:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2273: google.fhir.dstu2.proto.ClaimResponse.Item.Adjudication.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2274: google.fhir.dstu2.proto.ClaimResponse.Item.Adjudication.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2275: google.fhir.dstu2.proto.ClaimResponse.Item.Adjudication.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2276: google.fhir.dstu2.proto.ClaimResponse.Item.Adjudication.code:type_name -> google.fhir.dstu2.proto.Coding
	402,  // 2277: google.fhir.dstu2.proto.ClaimResponse.Item.Adjudication.amount:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2278: google.fhir.dstu2.proto.ClaimResponse.Item.Adjudication.value:type_name -> google.fhir.dstu2.proto.Decimal
	390,  // 2279: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2280: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2281: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2282: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.sequence_link_id:type_name -> google.fhir.dstu2.proto.PositiveInt
	131,  // 2283: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.adjudication:type_name -> google.fhir.dstu2.proto.ClaimResponse.Item.Detail.Adjudication
	132,  // 2284: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.sub_detail:type_name -> google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail
	390,  // 2285: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.Adjudication.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2286: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.Adjudication.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2287: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.Adjudication.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2288: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.Adjudication.code:type_name -> google.fhir.dstu2.proto.Coding
	402,  // 2289: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.Adjudication.amount:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2290: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.Adjudication.value:type_name -> google.fhir.dstu2.proto.Decimal
	390,  // 2291: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2292: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2293: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2294: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.sequence_link_id:type_name -> google.fhir.dstu2.proto.PositiveInt
	133,  // 2295: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.adjudication:type_name -> google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.Adjudication
	390,  // 2296: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.Adjudication.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2297: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.Adjudication.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2298: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.Adjudication.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2299: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.Adjudication.code:type_name -> google.fhir.dstu2.proto.Coding
	402,  // 2300: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.Adjudication.amount:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2301: google.fhir.dstu2.proto.ClaimResponse.Item.Detail.SubDetail.Adjudication.value:type_name -> google.fhir.dstu2.proto.Decimal
	390,  // 2302: google.fhir.dstu2.proto.ClaimResponse.AddItem.Adjudication.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2303: google.fhir.dstu2.proto.ClaimResponse.AddItem.Adjudication.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2304: google.fhir.dstu2.proto.ClaimResponse.AddItem.Adjudication.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2305: google.fhir.dstu2.proto.ClaimResponse.AddItem.Adjudication.code:type_name -> google.fhir.dstu2.proto.Coding
	402,  // 2306: google.fhir.dstu2.proto.ClaimResponse.AddItem.Adjudication.amount:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2307: google.fhir.dstu2.proto.ClaimResponse.AddItem.Adjudication.value:type_name -> google.fhir.dstu2.proto.Decimal
	390,  // 2308: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2309: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2310: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2311: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.service:type_name -> google.fhir.dstu2.proto.Coding
	402,  // 2312: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.fee:type_name -> google.fhir.dstu2.proto.Money
	136,  // 2313: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.adjudication:type_name -> google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.Adjudication
	390,  // 2314: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.Adjudication.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2315: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.Adjudication.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2316: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.Adjudication.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2317: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.Adjudication.code:type_name -> google.fhir.dstu2.proto.Coding
	402,  // 2318: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.Adjudication.amount:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2319: google.fhir.dstu2.proto.ClaimResponse.AddItem.Detail.Adjudication.value:type_name -> google.fhir.dstu2.proto.Decimal
	398,  // 2320: google.fhir.dstu2.proto.ClinicalImpression.Trigger.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2321: google.fhir.dstu2.proto.ClinicalImpression.Trigger.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2322: google.fhir.dstu2.proto.ClinicalImpression.Investigations.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2323: google.fhir.dstu2.proto.ClinicalImpression.Investigations.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2324: google.fhir.dstu2.proto.ClinicalImpression.Investigations.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2325: google.fhir.dstu2.proto.ClinicalImpression.Investigations.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2326: google.fhir.dstu2.proto.ClinicalImpression.Investigations.item:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2327: google.fhir.dstu2.proto.ClinicalImpression.Finding.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2328: google.fhir.dstu2.proto.ClinicalImpression.Finding.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2329: google.fhir.dstu2.proto.ClinicalImpression.Finding.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2330: google.fhir.dstu2.proto.ClinicalImpression.Finding.item:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 2331: google.fhir.dstu2.proto.ClinicalImpression.Finding.cause:type_name -> google.fhir.dstu2.proto.String
	390,  // 2332: google.fhir.dstu2.proto.ClinicalImpression.RuledOut.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2333: google.fhir.dstu2.proto.ClinicalImpression.RuledOut.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2334: google.fhir.dstu2.proto.ClinicalImpression.RuledOut.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2335: google.fhir.dstu2.proto.ClinicalImpression.RuledOut.item:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 2336: google.fhir.dstu2.proto.ClinicalImpression.RuledOut.reason:type_name -> google.fhir.dstu2.proto.String
	390,  // 2337: google.fhir.dstu2.proto.Communication.Payload.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2338: google.fhir.dstu2.proto.Communication.Payload.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2339: google.fhir.dstu2.proto.Communication.Payload.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	142,  // 2340: google.fhir.dstu2.proto.Communication.Payload.content:type_name -> google.fhir.dstu2.proto.Communication.Payload.Content
	397,  // 2341: google.fhir.dstu2.proto.Communication.Payload.Content.string_value:type_name -> google.fhir.dstu2.proto.String
	418,  // 2342: google.fhir.dstu2.proto.Communication.Payload.Content.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	403,  // 2343: google.fhir.dstu2.proto.Communication.Payload.Content.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2344: google.fhir.dstu2.proto.CommunicationRequest.Payload.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2345: google.fhir.dstu2.proto.CommunicationRequest.Payload.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2346: google.fhir.dstu2.proto.CommunicationRequest.Payload.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	145,  // 2347: google.fhir.dstu2.proto.CommunicationRequest.Payload.content:type_name -> google.fhir.dstu2.proto.CommunicationRequest.Payload.Content
	404,  // 2348: google.fhir.dstu2.proto.CommunicationRequest.Scheduled.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 2349: google.fhir.dstu2.proto.CommunicationRequest.Scheduled.period:type_name -> google.fhir.dstu2.proto.Period
	397,  // 2350: google.fhir.dstu2.proto.CommunicationRequest.Payload.Content.string_value:type_name -> google.fhir.dstu2.proto.String
	418,  // 2351: google.fhir.dstu2.proto.CommunicationRequest.Payload.Content.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	403,  // 2352: google.fhir.dstu2.proto.CommunicationRequest.Payload.Content.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2353: google.fhir.dstu2.proto.Composition.Attester.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2354: google.fhir.dstu2.proto.Composition.Attester.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2355: google.fhir.dstu2.proto.Composition.Attester.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	509,  // 2356: google.fhir.dstu2.proto.Composition.Attester.mode:type_name -> google.fhir.dstu2.proto.CompositionAttestationModeCode
	404,  // 2357: google.fhir.dstu2.proto.Composition.Attester.time:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 2358: google.fhir.dstu2.proto.Composition.Attester.party:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2359: google.fhir.dstu2.proto.Composition.Event.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2360: google.fhir.dstu2.proto.Composition.Event.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2361: google.fhir.dstu2.proto.Composition.Event.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2362: google.fhir.dstu2.proto.Composition.Event.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	400,  // 2363: google.fhir.dstu2.proto.Composition.Event.period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 2364: google.fhir.dstu2.proto.Composition.Event.detail:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2365: google.fhir.dstu2.proto.Composition.Section.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2366: google.fhir.dstu2.proto.Composition.Section.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2367: google.fhir.dstu2.proto.Composition.Section.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2368: google.fhir.dstu2.proto.Composition.Section.title:type_name -> google.fhir.dstu2.proto.String
	398,  // 2369: google.fhir.dstu2.proto.Composition.Section.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	394,  // 2370: google.fhir.dstu2.proto.Composition.Section.text:type_name -> google.fhir.dstu2.proto.Narrative
	465,  // 2371: google.fhir.dstu2.proto.Composition.Section.mode:type_name -> google.fhir.dstu2.proto.ListModeCode
	398,  // 2372: google.fhir.dstu2.proto.Composition.Section.ordered_by:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2373: google.fhir.dstu2.proto.Composition.Section.entry:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 2374: google.fhir.dstu2.proto.Composition.Section.empty_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	148,  // 2375: google.fhir.dstu2.proto.Composition.Section.section:type_name -> google.fhir.dstu2.proto.Composition.Section
	390,  // 2376: google.fhir.dstu2.proto.ConceptMap.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2377: google.fhir.dstu2.proto.ConceptMap.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2378: google.fhir.dstu2.proto.ConceptMap.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2379: google.fhir.dstu2.proto.ConceptMap.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 2380: google.fhir.dstu2.proto.ConceptMap.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	392,  // 2381: google.fhir.dstu2.proto.ConceptMap.Source.uri:type_name -> google.fhir.dstu2.proto.Uri
	403,  // 2382: google.fhir.dstu2.proto.ConceptMap.Source.reference:type_name -> google.fhir.dstu2.proto.Reference
	392,  // 2383: google.fhir.dstu2.proto.ConceptMap.Target.uri:type_name -> google.fhir.dstu2.proto.Uri
	403,  // 2384: google.fhir.dstu2.proto.ConceptMap.Target.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2385: google.fhir.dstu2.proto.ConceptMap.Element.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2386: google.fhir.dstu2.proto.ConceptMap.Element.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2387: google.fhir.dstu2.proto.ConceptMap.Element.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 2388: google.fhir.dstu2.proto.ConceptMap.Element.code_system:type_name -> google.fhir.dstu2.proto.Uri
	399,  // 2389: google.fhir.dstu2.proto.ConceptMap.Element.code:type_name -> google.fhir.dstu2.proto.Code
	153,  // 2390: google.fhir.dstu2.proto.ConceptMap.Element.target:type_name -> google.fhir.dstu2.proto.ConceptMap.Element.Target
	390,  // 2391: google.fhir.dstu2.proto.ConceptMap.Element.Target.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2392: google.fhir.dstu2.proto.ConceptMap.Element.Target.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2393: google.fhir.dstu2.proto.ConceptMap.Element.Target.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 2394: google.fhir.dstu2.proto.ConceptMap.Element.Target.code_system:type_name -> google.fhir.dstu2.proto.Uri
	399,  // 2395: google.fhir.dstu2.proto.ConceptMap.Element.Target.code:type_name -> google.fhir.dstu2.proto.Code
	510,  // 2396: google.fhir.dstu2.proto.ConceptMap.Element.Target.equivalence:type_name -> google.fhir.dstu2.proto.ConceptMapEquivalenceCode
	397,  // 2397: google.fhir.dstu2.proto.ConceptMap.Element.Target.comments:type_name -> google.fhir.dstu2.proto.String
	154,  // 2398: google.fhir.dstu2.proto.ConceptMap.Element.Target.depends_on:type_name -> google.fhir.dstu2.proto.ConceptMap.Element.Target.DependsOn
	154,  // 2399: google.fhir.dstu2.proto.ConceptMap.Element.Target.product:type_name -> google.fhir.dstu2.proto.ConceptMap.Element.Target.DependsOn
	390,  // 2400: google.fhir.dstu2.proto.ConceptMap.Element.Target.DependsOn.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2401: google.fhir.dstu2.proto.ConceptMap.Element.Target.DependsOn.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2402: google.fhir.dstu2.proto.ConceptMap.Element.Target.DependsOn.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 2403: google.fhir.dstu2.proto.ConceptMap.Element.Target.DependsOn.element:type_name -> google.fhir.dstu2.proto.Uri
	392,  // 2404: google.fhir.dstu2.proto.ConceptMap.Element.Target.DependsOn.code_system:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 2405: google.fhir.dstu2.proto.ConceptMap.Element.Target.DependsOn.code:type_name -> google.fhir.dstu2.proto.String
	404,  // 2406: google.fhir.dstu2.proto.Condition.Onset.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	511,  // 2407: google.fhir.dstu2.proto.Condition.Onset.quantity:type_name -> google.fhir.dstu2.proto.Age
	400,  // 2408: google.fhir.dstu2.proto.Condition.Onset.period:type_name -> google.fhir.dstu2.proto.Period
	512,  // 2409: google.fhir.dstu2.proto.Condition.Onset.range:type_name -> google.fhir.dstu2.proto.Range
	397,  // 2410: google.fhir.dstu2.proto.Condition.Onset.string_value:type_name -> google.fhir.dstu2.proto.String
	404,  // 2411: google.fhir.dstu2.proto.Condition.Abatement.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	511,  // 2412: google.fhir.dstu2.proto.Condition.Abatement.quantity:type_name -> google.fhir.dstu2.proto.Age
	431,  // 2413: google.fhir.dstu2.proto.Condition.Abatement.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	400,  // 2414: google.fhir.dstu2.proto.Condition.Abatement.period:type_name -> google.fhir.dstu2.proto.Period
	512,  // 2415: google.fhir.dstu2.proto.Condition.Abatement.range:type_name -> google.fhir.dstu2.proto.Range
	397,  // 2416: google.fhir.dstu2.proto.Condition.Abatement.string_value:type_name -> google.fhir.dstu2.proto.String
	390,  // 2417: google.fhir.dstu2.proto.Condition.Stage.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2418: google.fhir.dstu2.proto.Condition.Stage.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2419: google.fhir.dstu2.proto.Condition.Stage.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2420: google.fhir.dstu2.proto.Condition.Stage.summary:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2421: google.fhir.dstu2.proto.Condition.Stage.assessment:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2422: google.fhir.dstu2.proto.Condition.Evidence.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2423: google.fhir.dstu2.proto.Condition.Evidence.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2424: google.fhir.dstu2.proto.Condition.Evidence.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2425: google.fhir.dstu2.proto.Condition.Evidence.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2426: google.fhir.dstu2.proto.Condition.Evidence.detail:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2427: google.fhir.dstu2.proto.Conformance.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2428: google.fhir.dstu2.proto.Conformance.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2429: google.fhir.dstu2.proto.Conformance.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2430: google.fhir.dstu2.proto.Conformance.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 2431: google.fhir.dstu2.proto.Conformance.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	390,  // 2432: google.fhir.dstu2.proto.Conformance.Software.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2433: google.fhir.dstu2.proto.Conformance.Software.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2434: google.fhir.dstu2.proto.Conformance.Software.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2435: google.fhir.dstu2.proto.Conformance.Software.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 2436: google.fhir.dstu2.proto.Conformance.Software.version:type_name -> google.fhir.dstu2.proto.String
	404,  // 2437: google.fhir.dstu2.proto.Conformance.Software.release_date:type_name -> google.fhir.dstu2.proto.DateTime
	390,  // 2438: google.fhir.dstu2.proto.Conformance.Implementation.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2439: google.fhir.dstu2.proto.Conformance.Implementation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2440: google.fhir.dstu2.proto.Conformance.Implementation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2441: google.fhir.dstu2.proto.Conformance.Implementation.description:type_name -> google.fhir.dstu2.proto.String
	392,  // 2442: google.fhir.dstu2.proto.Conformance.Implementation.url:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 2443: google.fhir.dstu2.proto.Conformance.Rest.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2444: google.fhir.dstu2.proto.Conformance.Rest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2445: google.fhir.dstu2.proto.Conformance.Rest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	513,  // 2446: google.fhir.dstu2.proto.Conformance.Rest.mode:type_name -> google.fhir.dstu2.proto.RestfulConformanceModeCode
	397,  // 2447: google.fhir.dstu2.proto.Conformance.Rest.documentation:type_name -> google.fhir.dstu2.proto.String
	165,  // 2448: google.fhir.dstu2.proto.Conformance.Rest.security:type_name -> google.fhir.dstu2.proto.Conformance.Rest.Security
	166,  // 2449: google.fhir.dstu2.proto.Conformance.Rest.resource:type_name -> google.fhir.dstu2.proto.Conformance.Rest.Resource
	167,  // 2450: google.fhir.dstu2.proto.Conformance.Rest.interaction:type_name -> google.fhir.dstu2.proto.Conformance.Rest.Interaction
	514,  // 2451: google.fhir.dstu2.proto.Conformance.Rest.transaction_mode:type_name -> google.fhir.dstu2.proto.TransactionModeCode
	171,  // 2452: google.fhir.dstu2.proto.Conformance.Rest.search_param:type_name -> google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam
	168,  // 2453: google.fhir.dstu2.proto.Conformance.Rest.operation:type_name -> google.fhir.dstu2.proto.Conformance.Rest.Operation
	392,  // 2454: google.fhir.dstu2.proto.Conformance.Rest.compartment:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 2455: google.fhir.dstu2.proto.Conformance.Messaging.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2456: google.fhir.dstu2.proto.Conformance.Messaging.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2457: google.fhir.dstu2.proto.Conformance.Messaging.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	172,  // 2458: google.fhir.dstu2.proto.Conformance.Messaging.endpoint:type_name -> google.fhir.dstu2.proto.Conformance.Messaging.Endpoint
	411,  // 2459: google.fhir.dstu2.proto.Conformance.Messaging.reliable_cache:type_name -> google.fhir.dstu2.proto.UnsignedInt
	397,  // 2460: google.fhir.dstu2.proto.Conformance.Messaging.documentation:type_name -> google.fhir.dstu2.proto.String
	173,  // 2461: google.fhir.dstu2.proto.Conformance.Messaging.event:type_name -> google.fhir.dstu2.proto.Conformance.Messaging.Event
	390,  // 2462: google.fhir.dstu2.proto.Conformance.Document.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2463: google.fhir.dstu2.proto.Conformance.Document.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2464: google.fhir.dstu2.proto.Conformance.Document.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	515,  // 2465: google.fhir.dstu2.proto.Conformance.Document.mode:type_name -> google.fhir.dstu2.proto.DocumentModeCode
	397,  // 2466: google.fhir.dstu2.proto.Conformance.Document.documentation:type_name -> google.fhir.dstu2.proto.String
	403,  // 2467: google.fhir.dstu2.proto.Conformance.Document.profile:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2468: google.fhir.dstu2.proto.Conformance.Rest.Security.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2469: google.fhir.dstu2.proto.Conformance.Rest.Security.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2470: google.fhir.dstu2.proto.Conformance.Rest.Security.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	431,  // 2471: google.fhir.dstu2.proto.Conformance.Rest.Security.cors:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 2472: google.fhir.dstu2.proto.Conformance.Rest.Security.service:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 2473: google.fhir.dstu2.proto.Conformance.Rest.Security.description:type_name -> google.fhir.dstu2.proto.String
	169,  // 2474: google.fhir.dstu2.proto.Conformance.Rest.Security.certificate:type_name -> google.fhir.dstu2.proto.Conformance.Rest.Security.Certificate
	390,  // 2475: google.fhir.dstu2.proto.Conformance.Rest.Resource.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2476: google.fhir.dstu2.proto.Conformance.Rest.Resource.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2477: google.fhir.dstu2.proto.Conformance.Rest.Resource.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	477,  // 2478: google.fhir.dstu2.proto.Conformance.Rest.Resource.type:type_name -> google.fhir.dstu2.proto.ResourceTypeCode
	403,  // 2479: google.fhir.dstu2.proto.Conformance.Rest.Resource.profile:type_name -> google.fhir.dstu2.proto.Reference
	170,  // 2480: google.fhir.dstu2.proto.Conformance.Rest.Resource.interaction:type_name -> google.fhir.dstu2.proto.Conformance.Rest.Resource.Interaction
	516,  // 2481: google.fhir.dstu2.proto.Conformance.Rest.Resource.versioning:type_name -> google.fhir.dstu2.proto.ResourceVersionPolicyCode
	431,  // 2482: google.fhir.dstu2.proto.Conformance.Rest.Resource.read_history:type_name -> google.fhir.dstu2.proto.Boolean
	431,  // 2483: google.fhir.dstu2.proto.Conformance.Rest.Resource.update_create:type_name -> google.fhir.dstu2.proto.Boolean
	431,  // 2484: google.fhir.dstu2.proto.Conformance.Rest.Resource.conditional_create:type_name -> google.fhir.dstu2.proto.Boolean
	431,  // 2485: google.fhir.dstu2.proto.Conformance.Rest.Resource.conditional_update:type_name -> google.fhir.dstu2.proto.Boolean
	517,  // 2486: google.fhir.dstu2.proto.Conformance.Rest.Resource.conditional_delete:type_name -> google.fhir.dstu2.proto.ConditionalDeleteStatusCode
	397,  // 2487: google.fhir.dstu2.proto.Conformance.Rest.Resource.search_include:type_name -> google.fhir.dstu2.proto.String
	397,  // 2488: google.fhir.dstu2.proto.Conformance.Rest.Resource.search_rev_include:type_name -> google.fhir.dstu2.proto.String
	171,  // 2489: google.fhir.dstu2.proto.Conformance.Rest.Resource.search_param:type_name -> google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam
	390,  // 2490: google.fhir.dstu2.proto.Conformance.Rest.Interaction.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2491: google.fhir.dstu2.proto.Conformance.Rest.Interaction.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2492: google.fhir.dstu2.proto.Conformance.Rest.Interaction.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	518,  // 2493: google.fhir.dstu2.proto.Conformance.Rest.Interaction.code:type_name -> google.fhir.dstu2.proto.SystemRestfulInteractionCode
	397,  // 2494: google.fhir.dstu2.proto.Conformance.Rest.Interaction.documentation:type_name -> google.fhir.dstu2.proto.String
	390,  // 2495: google.fhir.dstu2.proto.Conformance.Rest.Operation.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2496: google.fhir.dstu2.proto.Conformance.Rest.Operation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2497: google.fhir.dstu2.proto.Conformance.Rest.Operation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2498: google.fhir.dstu2.proto.Conformance.Rest.Operation.name:type_name -> google.fhir.dstu2.proto.String
	403,  // 2499: google.fhir.dstu2.proto.Conformance.Rest.Operation.definition:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2500: google.fhir.dstu2.proto.Conformance.Rest.Security.Certificate.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2501: google.fhir.dstu2.proto.Conformance.Rest.Security.Certificate.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2502: google.fhir.dstu2.proto.Conformance.Rest.Security.Certificate.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	416,  // 2503: google.fhir.dstu2.proto.Conformance.Rest.Security.Certificate.type:type_name -> google.fhir.dstu2.proto.MimeTypeCode
	417,  // 2504: google.fhir.dstu2.proto.Conformance.Rest.Security.Certificate.blob:type_name -> google.fhir.dstu2.proto.Base64Binary
	390,  // 2505: google.fhir.dstu2.proto.Conformance.Rest.Resource.Interaction.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2506: google.fhir.dstu2.proto.Conformance.Rest.Resource.Interaction.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2507: google.fhir.dstu2.proto.Conformance.Rest.Resource.Interaction.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	519,  // 2508: google.fhir.dstu2.proto.Conformance.Rest.Resource.Interaction.code:type_name -> google.fhir.dstu2.proto.TypeRestfulInteractionCode
	397,  // 2509: google.fhir.dstu2.proto.Conformance.Rest.Resource.Interaction.documentation:type_name -> google.fhir.dstu2.proto.String
	390,  // 2510: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2511: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2512: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2513: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.name:type_name -> google.fhir.dstu2.proto.String
	392,  // 2514: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.definition:type_name -> google.fhir.dstu2.proto.Uri
	487,  // 2515: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.type:type_name -> google.fhir.dstu2.proto.SearchParamTypeCode
	397,  // 2516: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.documentation:type_name -> google.fhir.dstu2.proto.String
	477,  // 2517: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.target:type_name -> google.fhir.dstu2.proto.ResourceTypeCode
	520,  // 2518: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.modifier:type_name -> google.fhir.dstu2.proto.SearchModifierCodeCode
	397,  // 2519: google.fhir.dstu2.proto.Conformance.Rest.Resource.SearchParam.chain:type_name -> google.fhir.dstu2.proto.String
	390,  // 2520: google.fhir.dstu2.proto.Conformance.Messaging.Endpoint.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2521: google.fhir.dstu2.proto.Conformance.Messaging.Endpoint.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2522: google.fhir.dstu2.proto.Conformance.Messaging.Endpoint.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2523: google.fhir.dstu2.proto.Conformance.Messaging.Endpoint.protocol:type_name -> google.fhir.dstu2.proto.Coding
	392,  // 2524: google.fhir.dstu2.proto.Conformance.Messaging.Endpoint.address:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 2525: google.fhir.dstu2.proto.Conformance.Messaging.Event.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2526: google.fhir.dstu2.proto.Conformance.Messaging.Event.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2527: google.fhir.dstu2.proto.Conformance.Messaging.Event.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2528: google.fhir.dstu2.proto.Conformance.Messaging.Event.code:type_name -> google.fhir.dstu2.proto.Coding
	521,  // 2529: google.fhir.dstu2.proto.Conformance.Messaging.Event.category:type_name -> google.fhir.dstu2.proto.MessageSignificanceCategoryCode
	522,  // 2530: google.fhir.dstu2.proto.Conformance.Messaging.Event.mode:type_name -> google.fhir.dstu2.proto.ConformanceEventModeCode
	477,  // 2531: google.fhir.dstu2.proto.Conformance.Messaging.Event.focus:type_name -> google.fhir.dstu2.proto.ResourceTypeCode
	403,  // 2532: google.fhir.dstu2.proto.Conformance.Messaging.Event.request:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 2533: google.fhir.dstu2.proto.Conformance.Messaging.Event.response:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 2534: google.fhir.dstu2.proto.Conformance.Messaging.Event.documentation:type_name -> google.fhir.dstu2.proto.String
	390,  // 2535: google.fhir.dstu2.proto.Contract.Actor.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2536: google.fhir.dstu2.proto.Contract.Actor.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2537: google.fhir.dstu2.proto.Contract.Actor.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 2538: google.fhir.dstu2.proto.Contract.Actor.entity:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 2539: google.fhir.dstu2.proto.Contract.Actor.role:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 2540: google.fhir.dstu2.proto.Contract.ValuedItem.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2541: google.fhir.dstu2.proto.Contract.ValuedItem.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2542: google.fhir.dstu2.proto.Contract.ValuedItem.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	182,  // 2543: google.fhir.dstu2.proto.Contract.ValuedItem.entity:type_name -> google.fhir.dstu2.proto.Contract.ValuedItem.Entity
	396,  // 2544: google.fhir.dstu2.proto.Contract.ValuedItem.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 2545: google.fhir.dstu2.proto.Contract.ValuedItem.effective_time:type_name -> google.fhir.dstu2.proto.DateTime
	463,  // 2546: google.fhir.dstu2.proto.Contract.ValuedItem.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	402,  // 2547: google.fhir.dstu2.proto.Contract.ValuedItem.unit_price:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2548: google.fhir.dstu2.proto.Contract.ValuedItem.factor:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 2549: google.fhir.dstu2.proto.Contract.ValuedItem.points:type_name -> google.fhir.dstu2.proto.Decimal
	402,  // 2550: google.fhir.dstu2.proto.Contract.ValuedItem.net:type_name -> google.fhir.dstu2.proto.Money
	390,  // 2551: google.fhir.dstu2.proto.Contract.Signer.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2552: google.fhir.dstu2.proto.Contract.Signer.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2553: google.fhir.dstu2.proto.Contract.Signer.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 2554: google.fhir.dstu2.proto.Contract.Signer.type:type_name -> google.fhir.dstu2.proto.Coding
	403,  // 2555: google.fhir.dstu2.proto.Contract.Signer.party:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 2556: google.fhir.dstu2.proto.Contract.Signer.signature:type_name -> google.fhir.dstu2.proto.String
	390,  // 2557: google.fhir.dstu2.proto.Contract.Term.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2558: google.fhir.dstu2.proto.Contract.Term.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2559: google.fhir.dstu2.proto.Contract.Term.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 2560: google.fhir.dstu2.proto.Contract.Term.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 2561: google.fhir.dstu2.proto.Contract.Term.issued:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 2562: google.fhir.dstu2.proto.Contract.Term.applies:type_name -> google.fhir.dstu2.proto.Period
	398,  // 2563: google.fhir.dstu2.proto.Contract.Term.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2564: google.fhir.dstu2.proto.Contract.Term.sub_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2565: google.fhir.dstu2.proto.Contract.Term.subject:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 2566: google.fhir.dstu2.proto.Contract.Term.action:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2567: google.fhir.dstu2.proto.Contract.Term.action_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	183,  // 2568: google.fhir.dstu2.proto.Contract.Term.actor:type_name -> google.fhir.dstu2.proto.Contract.Term.Actor
	397,  // 2569: google.fhir.dstu2.proto.Contract.Term.text:type_name -> google.fhir.dstu2.proto.String
	184,  // 2570: google.fhir.dstu2.proto.Contract.Term.valued_item:type_name -> google.fhir.dstu2.proto.Contract.Term.ValuedItem
	177,  // 2571: google.fhir.dstu2.proto.Contract.Term.group:type_name -> google.fhir.dstu2.proto.Contract.Term
	418,  // 2572: google.fhir.dstu2.proto.Contract.Binding.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	403,  // 2573: google.fhir.dstu2.proto.Contract.Binding.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2574: google.fhir.dstu2.proto.Contract.Friendly.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2575: google.fhir.dstu2.proto.Contract.Friendly.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2576: google.fhir.dstu2.proto.Contract.Friendly.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	186,  // 2577: google.fhir.dstu2.proto.Contract.Friendly.content:type_name -> google.fhir.dstu2.proto.Contract.Friendly.Content
	390,  // 2578: google.fhir.dstu2.proto.Contract.Legal.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2579: google.fhir.dstu2.proto.Contract.Legal.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2580: google.fhir.dstu2.proto.Contract.Legal.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	187,  // 2581: google.fhir.dstu2.proto.Contract.Legal.content:type_name -> google.fhir.dstu2.proto.Contract.Legal.Content
	390,  // 2582: google.fhir.dstu2.proto.Contract.Rule.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2583: google.fhir.dstu2.proto.Contract.Rule.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2584: google.fhir.dstu2.proto.Contract.Rule.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	188,  // 2585: google.fhir.dstu2.proto.Contract.Rule.content:type_name -> google.fhir.dstu2.proto.Contract.Rule.Content
	398,  // 2586: google.fhir.dstu2.proto.Contract.ValuedItem.Entity.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2587: google.fhir.dstu2.proto.Contract.ValuedItem.Entity.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2588: google.fhir.dstu2.proto.Contract.Term.Actor.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2589: google.fhir.dstu2.proto.Contract.Term.Actor.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2590: google.fhir.dstu2.proto.Contract.Term.Actor.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 2591: google.fhir.dstu2.proto.Contract.Term.Actor.entity:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 2592: google.fhir.dstu2.proto.Contract.Term.Actor.role:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 2593: google.fhir.dstu2.proto.Contract.Term.ValuedItem.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2594: google.fhir.dstu2.proto.Contract.Term.ValuedItem.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2595: google.fhir.dstu2.proto.Contract.Term.ValuedItem.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	185,  // 2596: google.fhir.dstu2.proto.Contract.Term.ValuedItem.entity:type_name -> google.fhir.dstu2.proto.Contract.Term.ValuedItem.Entity
	396,  // 2597: google.fhir.dstu2.proto.Contract.Term.ValuedItem.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 2598: google.fhir.dstu2.proto.Contract.Term.ValuedItem.effective_time:type_name -> google.fhir.dstu2.proto.DateTime
	463,  // 2599: google.fhir.dstu2.proto.Contract.Term.ValuedItem.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	402,  // 2600: google.fhir.dstu2.proto.Contract.Term.ValuedItem.unit_price:type_name -> google.fhir.dstu2.proto.Money
	505,  // 2601: google.fhir.dstu2.proto.Contract.Term.ValuedItem.factor:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 2602: google.fhir.dstu2.proto.Contract.Term.ValuedItem.points:type_name -> google.fhir.dstu2.proto.Decimal
	402,  // 2603: google.fhir.dstu2.proto.Contract.Term.ValuedItem.net:type_name -> google.fhir.dstu2.proto.Money
	398,  // 2604: google.fhir.dstu2.proto.Contract.Term.ValuedItem.Entity.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2605: google.fhir.dstu2.proto.Contract.Term.ValuedItem.Entity.reference:type_name -> google.fhir.dstu2.proto.Reference
	418,  // 2606: google.fhir.dstu2.proto.Contract.Friendly.Content.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	403,  // 2607: google.fhir.dstu2.proto.Contract.Friendly.Content.reference:type_name -> google.fhir.dstu2.proto.Reference
	418,  // 2608: google.fhir.dstu2.proto.Contract.Legal.Content.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	403,  // 2609: google.fhir.dstu2.proto.Contract.Legal.Content.reference:type_name -> google.fhir.dstu2.proto.Reference
	418,  // 2610: google.fhir.dstu2.proto.Contract.Rule.Content.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	403,  // 2611: google.fhir.dstu2.proto.Contract.Rule.Content.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2612: google.fhir.dstu2.proto.DataElement.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2613: google.fhir.dstu2.proto.DataElement.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2614: google.fhir.dstu2.proto.DataElement.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2615: google.fhir.dstu2.proto.DataElement.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 2616: google.fhir.dstu2.proto.DataElement.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	390,  // 2617: google.fhir.dstu2.proto.DataElement.Mapping.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2618: google.fhir.dstu2.proto.DataElement.Mapping.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2619: google.fhir.dstu2.proto.DataElement.Mapping.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	390,  // 2620: google.fhir.dstu2.proto.DataElement.Mapping.identity:type_name -> google.fhir.dstu2.proto.Id
	392,  // 2621: google.fhir.dstu2.proto.DataElement.Mapping.uri:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 2622: google.fhir.dstu2.proto.DataElement.Mapping.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 2623: google.fhir.dstu2.proto.DataElement.Mapping.comments:type_name -> google.fhir.dstu2.proto.String
	390,  // 2624: google.fhir.dstu2.proto.DetectedIssue.Mitigation.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2625: google.fhir.dstu2.proto.DetectedIssue.Mitigation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2626: google.fhir.dstu2.proto.DetectedIssue.Mitigation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2627: google.fhir.dstu2.proto.DetectedIssue.Mitigation.action:type_name -> google.fhir.dstu2.proto.CodeableConcept
	404,  // 2628: google.fhir.dstu2.proto.DetectedIssue.Mitigation.date:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 2629: google.fhir.dstu2.proto.DetectedIssue.Mitigation.author:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2630: google.fhir.dstu2.proto.DeviceComponent.ProductionSpecification.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2631: google.fhir.dstu2.proto.DeviceComponent.ProductionSpecification.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2632: google.fhir.dstu2.proto.DeviceComponent.ProductionSpecification.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2633: google.fhir.dstu2.proto.DeviceComponent.ProductionSpecification.spec_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	396,  // 2634: google.fhir.dstu2.proto.DeviceComponent.ProductionSpecification.component_id:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 2635: google.fhir.dstu2.proto.DeviceComponent.ProductionSpecification.production_spec:type_name -> google.fhir.dstu2.proto.String
	390,  // 2636: google.fhir.dstu2.proto.DeviceMetric.Calibration.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2637: google.fhir.dstu2.proto.DeviceMetric.Calibration.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2638: google.fhir.dstu2.proto.DeviceMetric.Calibration.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	523,  // 2639: google.fhir.dstu2.proto.DeviceMetric.Calibration.type:type_name -> google.fhir.dstu2.proto.DeviceMetricCalibrationTypeCode
	524,  // 2640: google.fhir.dstu2.proto.DeviceMetric.Calibration.state:type_name -> google.fhir.dstu2.proto.DeviceMetricCalibrationStateCode
	412,  // 2641: google.fhir.dstu2.proto.DeviceMetric.Calibration.time:type_name -> google.fhir.dstu2.proto.Instant
	398,  // 2642: google.fhir.dstu2.proto.DeviceUseRequest.BodySite.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2643: google.fhir.dstu2.proto.DeviceUseRequest.BodySite.reference:type_name -> google.fhir.dstu2.proto.Reference
	444,  // 2644: google.fhir.dstu2.proto.DeviceUseRequest.TimingType.timing_value:type_name -> google.fhir.dstu2.proto.Timing
	400,  // 2645: google.fhir.dstu2.proto.DeviceUseRequest.TimingType.period:type_name -> google.fhir.dstu2.proto.Period
	404,  // 2646: google.fhir.dstu2.proto.DeviceUseRequest.TimingType.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 2647: google.fhir.dstu2.proto.DeviceUseStatement.BodySite.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2648: google.fhir.dstu2.proto.DeviceUseStatement.BodySite.reference:type_name -> google.fhir.dstu2.proto.Reference
	444,  // 2649: google.fhir.dstu2.proto.DeviceUseStatement.TimingType.timing_value:type_name -> google.fhir.dstu2.proto.Timing
	400,  // 2650: google.fhir.dstu2.proto.DeviceUseStatement.TimingType.period:type_name -> google.fhir.dstu2.proto.Period
	404,  // 2651: google.fhir.dstu2.proto.DeviceUseStatement.TimingType.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	390,  // 2652: google.fhir.dstu2.proto.DiagnosticOrder.Event.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2653: google.fhir.dstu2.proto.DiagnosticOrder.Event.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2654: google.fhir.dstu2.proto.DiagnosticOrder.Event.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	447,  // 2655: google.fhir.dstu2.proto.DiagnosticOrder.Event.status:type_name -> google.fhir.dstu2.proto.DiagnosticOrderStatusCode
	398,  // 2656: google.fhir.dstu2.proto.DiagnosticOrder.Event.description:type_name -> google.fhir.dstu2.proto.CodeableConcept
	404,  // 2657: google.fhir.dstu2.proto.DiagnosticOrder.Event.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 2658: google.fhir.dstu2.proto.DiagnosticOrder.Event.actor:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2659: google.fhir.dstu2.proto.DiagnosticOrder.Item.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2660: google.fhir.dstu2.proto.DiagnosticOrder.Item.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2661: google.fhir.dstu2.proto.DiagnosticOrder.Item.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2662: google.fhir.dstu2.proto.DiagnosticOrder.Item.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2663: google.fhir.dstu2.proto.DiagnosticOrder.Item.specimen:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 2664: google.fhir.dstu2.proto.DiagnosticOrder.Item.body_site:type_name -> google.fhir.dstu2.proto.CodeableConcept
	447,  // 2665: google.fhir.dstu2.proto.DiagnosticOrder.Item.status:type_name -> google.fhir.dstu2.proto.DiagnosticOrderStatusCode
	198,  // 2666: google.fhir.dstu2.proto.DiagnosticOrder.Item.event:type_name -> google.fhir.dstu2.proto.DiagnosticOrder.Event
	404,  // 2667: google.fhir.dstu2.proto.DiagnosticReport.Effective.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 2668: google.fhir.dstu2.proto.DiagnosticReport.Effective.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 2669: google.fhir.dstu2.proto.DiagnosticReport.Image.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2670: google.fhir.dstu2.proto.DiagnosticReport.Image.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2671: google.fhir.dstu2.proto.DiagnosticReport.Image.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2672: google.fhir.dstu2.proto.DiagnosticReport.Image.comment:type_name -> google.fhir.dstu2.proto.String
	403,  // 2673: google.fhir.dstu2.proto.DiagnosticReport.Image.link:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2674: google.fhir.dstu2.proto.DocumentManifest.Content.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2675: google.fhir.dstu2.proto.DocumentManifest.Content.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2676: google.fhir.dstu2.proto.DocumentManifest.Content.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	204,  // 2677: google.fhir.dstu2.proto.DocumentManifest.Content.p:type_name -> google.fhir.dstu2.proto.DocumentManifest.Content.P
	390,  // 2678: google.fhir.dstu2.proto.DocumentManifest.Related.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2679: google.fhir.dstu2.proto.DocumentManifest.Related.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2680: google.fhir.dstu2.proto.DocumentManifest.Related.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 2681: google.fhir.dstu2.proto.DocumentManifest.Related.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 2682: google.fhir.dstu2.proto.DocumentManifest.Related.ref:type_name -> google.fhir.dstu2.proto.Reference
	418,  // 2683: google.fhir.dstu2.proto.DocumentManifest.Content.P.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	403,  // 2684: google.fhir.dstu2.proto.DocumentManifest.Content.P.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2685: google.fhir.dstu2.proto.DocumentReference.RelatesTo.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2686: google.fhir.dstu2.proto.DocumentReference.RelatesTo.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2687: google.fhir.dstu2.proto.DocumentReference.RelatesTo.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	525,  // 2688: google.fhir.dstu2.proto.DocumentReference.RelatesTo.code:type_name -> google.fhir.dstu2.proto.DocumentRelationshipTypeCode
	403,  // 2689: google.fhir.dstu2.proto.DocumentReference.RelatesTo.target:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2690: google.fhir.dstu2.proto.DocumentReference.Content.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2691: google.fhir.dstu2.proto.DocumentReference.Content.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2692: google.fhir.dstu2.proto.DocumentReference.Content.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	418,  // 2693: google.fhir.dstu2.proto.DocumentReference.Content.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	401,  // 2694: google.fhir.dstu2.proto.DocumentReference.Content.format:type_name -> google.fhir.dstu2.proto.Coding
	390,  // 2695: google.fhir.dstu2.proto.DocumentReference.Context.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2696: google.fhir.dstu2.proto.DocumentReference.Context.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2697: google.fhir.dstu2.proto.DocumentReference.Context.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 2698: google.fhir.dstu2.proto.DocumentReference.Context.encounter:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 2699: google.fhir.dstu2.proto.DocumentReference.Context.event:type_name -> google.fhir.dstu2.proto.CodeableConcept
	400,  // 2700: google.fhir.dstu2.proto.DocumentReference.Context.period:type_name -> google.fhir.dstu2.proto.Period
	398,  // 2701: google.fhir.dstu2.proto.DocumentReference.Context.facility_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2702: google.fhir.dstu2.proto.DocumentReference.Context.practice_setting:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2703: google.fhir.dstu2.proto.DocumentReference.Context.source_patient_info:type_name -> google.fhir.dstu2.proto.Reference
	208,  // 2704: google.fhir.dstu2.proto.DocumentReference.Context.related:type_name -> google.fhir.dstu2.proto.DocumentReference.Context.Related
	390,  // 2705: google.fhir.dstu2.proto.DocumentReference.Context.Related.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2706: google.fhir.dstu2.proto.DocumentReference.Context.Related.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2707: google.fhir.dstu2.proto.DocumentReference.Context.Related.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 2708: google.fhir.dstu2.proto.DocumentReference.Context.Related.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 2709: google.fhir.dstu2.proto.DocumentReference.Context.Related.ref:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2710: google.fhir.dstu2.proto.Encounter.StatusHistory.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2711: google.fhir.dstu2.proto.Encounter.StatusHistory.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2712: google.fhir.dstu2.proto.Encounter.StatusHistory.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	451,  // 2713: google.fhir.dstu2.proto.Encounter.StatusHistory.status:type_name -> google.fhir.dstu2.proto.EncounterStateCode
	400,  // 2714: google.fhir.dstu2.proto.Encounter.StatusHistory.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 2715: google.fhir.dstu2.proto.Encounter.Participant.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2716: google.fhir.dstu2.proto.Encounter.Participant.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2717: google.fhir.dstu2.proto.Encounter.Participant.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2718: google.fhir.dstu2.proto.Encounter.Participant.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	400,  // 2719: google.fhir.dstu2.proto.Encounter.Participant.period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 2720: google.fhir.dstu2.proto.Encounter.Participant.individual:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2721: google.fhir.dstu2.proto.Encounter.Hospitalization.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2722: google.fhir.dstu2.proto.Encounter.Hospitalization.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2723: google.fhir.dstu2.proto.Encounter.Hospitalization.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 2724: google.fhir.dstu2.proto.Encounter.Hospitalization.pre_admission_identifier:type_name -> google.fhir.dstu2.proto.Identifier
	403,  // 2725: google.fhir.dstu2.proto.Encounter.Hospitalization.origin:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 2726: google.fhir.dstu2.proto.Encounter.Hospitalization.admit_source:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2727: google.fhir.dstu2.proto.Encounter.Hospitalization.admitting_diagnosis:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 2728: google.fhir.dstu2.proto.Encounter.Hospitalization.re_admission:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2729: google.fhir.dstu2.proto.Encounter.Hospitalization.diet_preference:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2730: google.fhir.dstu2.proto.Encounter.Hospitalization.special_courtesy:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2731: google.fhir.dstu2.proto.Encounter.Hospitalization.special_arrangement:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2732: google.fhir.dstu2.proto.Encounter.Hospitalization.destination:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 2733: google.fhir.dstu2.proto.Encounter.Hospitalization.discharge_disposition:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2734: google.fhir.dstu2.proto.Encounter.Hospitalization.discharge_diagnosis:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2735: google.fhir.dstu2.proto.Encounter.Location.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2736: google.fhir.dstu2.proto.Encounter.Location.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2737: google.fhir.dstu2.proto.Encounter.Location.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 2738: google.fhir.dstu2.proto.Encounter.Location.location:type_name -> google.fhir.dstu2.proto.Reference
	526,  // 2739: google.fhir.dstu2.proto.Encounter.Location.status:type_name -> google.fhir.dstu2.proto.EncounterLocationStatusCode
	400,  // 2740: google.fhir.dstu2.proto.Encounter.Location.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 2741: google.fhir.dstu2.proto.EpisodeOfCare.StatusHistory.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2742: google.fhir.dstu2.proto.EpisodeOfCare.StatusHistory.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2743: google.fhir.dstu2.proto.EpisodeOfCare.StatusHistory.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	454,  // 2744: google.fhir.dstu2.proto.EpisodeOfCare.StatusHistory.status:type_name -> google.fhir.dstu2.proto.EpisodeOfCareStatusCode
	400,  // 2745: google.fhir.dstu2.proto.EpisodeOfCare.StatusHistory.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 2746: google.fhir.dstu2.proto.EpisodeOfCare.CareTeam.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2747: google.fhir.dstu2.proto.EpisodeOfCare.CareTeam.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2748: google.fhir.dstu2.proto.EpisodeOfCare.CareTeam.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2749: google.fhir.dstu2.proto.EpisodeOfCare.CareTeam.role:type_name -> google.fhir.dstu2.proto.CodeableConcept
	400,  // 2750: google.fhir.dstu2.proto.EpisodeOfCare.CareTeam.period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 2751: google.fhir.dstu2.proto.EpisodeOfCare.CareTeam.member:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 2752: google.fhir.dstu2.proto.FamilyMemberHistory.Born.period:type_name -> google.fhir.dstu2.proto.Period
	415,  // 2753: google.fhir.dstu2.proto.FamilyMemberHistory.Born.date:type_name -> google.fhir.dstu2.proto.Date
	397,  // 2754: google.fhir.dstu2.proto.FamilyMemberHistory.Born.string_value:type_name -> google.fhir.dstu2.proto.String
	511,  // 2755: google.fhir.dstu2.proto.FamilyMemberHistory.AgeType.quantity:type_name -> google.fhir.dstu2.proto.Age
	512,  // 2756: google.fhir.dstu2.proto.FamilyMemberHistory.AgeType.range:type_name -> google.fhir.dstu2.proto.Range
	397,  // 2757: google.fhir.dstu2.proto.FamilyMemberHistory.AgeType.string_value:type_name -> google.fhir.dstu2.proto.String
	431,  // 2758: google.fhir.dstu2.proto.FamilyMemberHistory.Deceased.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	511,  // 2759: google.fhir.dstu2.proto.FamilyMemberHistory.Deceased.quantity:type_name -> google.fhir.dstu2.proto.Age
	512,  // 2760: google.fhir.dstu2.proto.FamilyMemberHistory.Deceased.range:type_name -> google.fhir.dstu2.proto.Range
	415,  // 2761: google.fhir.dstu2.proto.FamilyMemberHistory.Deceased.date:type_name -> google.fhir.dstu2.proto.Date
	397,  // 2762: google.fhir.dstu2.proto.FamilyMemberHistory.Deceased.string_value:type_name -> google.fhir.dstu2.proto.String
	390,  // 2763: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2764: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2765: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2766: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2767: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.outcome:type_name -> google.fhir.dstu2.proto.CodeableConcept
	219,  // 2768: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.onset:type_name -> google.fhir.dstu2.proto.FamilyMemberHistory.Condition.Onset
	409,  // 2769: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.note:type_name -> google.fhir.dstu2.proto.Annotation
	511,  // 2770: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.Onset.quantity:type_name -> google.fhir.dstu2.proto.Age
	512,  // 2771: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.Onset.range:type_name -> google.fhir.dstu2.proto.Range
	400,  // 2772: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.Onset.period:type_name -> google.fhir.dstu2.proto.Period
	397,  // 2773: google.fhir.dstu2.proto.FamilyMemberHistory.Condition.Onset.string_value:type_name -> google.fhir.dstu2.proto.String
	415,  // 2774: google.fhir.dstu2.proto.Goal.Start.date:type_name -> google.fhir.dstu2.proto.Date
	398,  // 2775: google.fhir.dstu2.proto.Goal.Start.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	415,  // 2776: google.fhir.dstu2.proto.Goal.Target.date:type_name -> google.fhir.dstu2.proto.Date
	453,  // 2777: google.fhir.dstu2.proto.Goal.Target.quantity:type_name -> google.fhir.dstu2.proto.Duration
	390,  // 2778: google.fhir.dstu2.proto.Goal.Outcome.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2779: google.fhir.dstu2.proto.Goal.Outcome.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2780: google.fhir.dstu2.proto.Goal.Outcome.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	223,  // 2781: google.fhir.dstu2.proto.Goal.Outcome.result:type_name -> google.fhir.dstu2.proto.Goal.Outcome.Result
	398,  // 2782: google.fhir.dstu2.proto.Goal.Outcome.Result.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2783: google.fhir.dstu2.proto.Goal.Outcome.Result.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2784: google.fhir.dstu2.proto.Group.Characteristic.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2785: google.fhir.dstu2.proto.Group.Characteristic.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2786: google.fhir.dstu2.proto.Group.Characteristic.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2787: google.fhir.dstu2.proto.Group.Characteristic.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	226,  // 2788: google.fhir.dstu2.proto.Group.Characteristic.value:type_name -> google.fhir.dstu2.proto.Group.Characteristic.Value
	431,  // 2789: google.fhir.dstu2.proto.Group.Characteristic.exclude:type_name -> google.fhir.dstu2.proto.Boolean
	400,  // 2790: google.fhir.dstu2.proto.Group.Characteristic.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 2791: google.fhir.dstu2.proto.Group.Member.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2792: google.fhir.dstu2.proto.Group.Member.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2793: google.fhir.dstu2.proto.Group.Member.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 2794: google.fhir.dstu2.proto.Group.Member.entity:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 2795: google.fhir.dstu2.proto.Group.Member.period:type_name -> google.fhir.dstu2.proto.Period
	431,  // 2796: google.fhir.dstu2.proto.Group.Member.inactive:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 2797: google.fhir.dstu2.proto.Group.Characteristic.Value.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	431,  // 2798: google.fhir.dstu2.proto.Group.Characteristic.Value.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	527,  // 2799: google.fhir.dstu2.proto.Group.Characteristic.Value.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	512,  // 2800: google.fhir.dstu2.proto.Group.Characteristic.Value.range:type_name -> google.fhir.dstu2.proto.Range
	390,  // 2801: google.fhir.dstu2.proto.HealthcareService.ServiceType.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2802: google.fhir.dstu2.proto.HealthcareService.ServiceType.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2803: google.fhir.dstu2.proto.HealthcareService.ServiceType.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2804: google.fhir.dstu2.proto.HealthcareService.ServiceType.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2805: google.fhir.dstu2.proto.HealthcareService.ServiceType.specialty:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 2806: google.fhir.dstu2.proto.HealthcareService.AvailableTime.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2807: google.fhir.dstu2.proto.HealthcareService.AvailableTime.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2808: google.fhir.dstu2.proto.HealthcareService.AvailableTime.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	528,  // 2809: google.fhir.dstu2.proto.HealthcareService.AvailableTime.days_of_week:type_name -> google.fhir.dstu2.proto.DaysOfWeekCode
	431,  // 2810: google.fhir.dstu2.proto.HealthcareService.AvailableTime.all_day:type_name -> google.fhir.dstu2.proto.Boolean
	529,  // 2811: google.fhir.dstu2.proto.HealthcareService.AvailableTime.available_start_time:type_name -> google.fhir.dstu2.proto.Time
	529,  // 2812: google.fhir.dstu2.proto.HealthcareService.AvailableTime.available_end_time:type_name -> google.fhir.dstu2.proto.Time
	390,  // 2813: google.fhir.dstu2.proto.HealthcareService.NotAvailable.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2814: google.fhir.dstu2.proto.HealthcareService.NotAvailable.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2815: google.fhir.dstu2.proto.HealthcareService.NotAvailable.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2816: google.fhir.dstu2.proto.HealthcareService.NotAvailable.description:type_name -> google.fhir.dstu2.proto.String
	400,  // 2817: google.fhir.dstu2.proto.HealthcareService.NotAvailable.during:type_name -> google.fhir.dstu2.proto.Period
	390,  // 2818: google.fhir.dstu2.proto.ImagingObjectSelection.Study.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2819: google.fhir.dstu2.proto.ImagingObjectSelection.Study.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2820: google.fhir.dstu2.proto.ImagingObjectSelection.Study.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	460,  // 2821: google.fhir.dstu2.proto.ImagingObjectSelection.Study.uid:type_name -> google.fhir.dstu2.proto.Oid
	392,  // 2822: google.fhir.dstu2.proto.ImagingObjectSelection.Study.url:type_name -> google.fhir.dstu2.proto.Uri
	403,  // 2823: google.fhir.dstu2.proto.ImagingObjectSelection.Study.imaging_study:type_name -> google.fhir.dstu2.proto.Reference
	231,  // 2824: google.fhir.dstu2.proto.ImagingObjectSelection.Study.series:type_name -> google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series
	390,  // 2825: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2826: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2827: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	460,  // 2828: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.uid:type_name -> google.fhir.dstu2.proto.Oid
	392,  // 2829: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.url:type_name -> google.fhir.dstu2.proto.Uri
	232,  // 2830: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.instance:type_name -> google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance
	390,  // 2831: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2832: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2833: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	460,  // 2834: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.sop_class:type_name -> google.fhir.dstu2.proto.Oid
	460,  // 2835: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.uid:type_name -> google.fhir.dstu2.proto.Oid
	392,  // 2836: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.url:type_name -> google.fhir.dstu2.proto.Uri
	233,  // 2837: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.frames:type_name -> google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.Frames
	390,  // 2838: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.Frames.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2839: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.Frames.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2840: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.Frames.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	411,  // 2841: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.Frames.frame_numbers:type_name -> google.fhir.dstu2.proto.UnsignedInt
	392,  // 2842: google.fhir.dstu2.proto.ImagingObjectSelection.Study.Series.Instance.Frames.url:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 2843: google.fhir.dstu2.proto.ImagingStudy.Series.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2844: google.fhir.dstu2.proto.ImagingStudy.Series.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2845: google.fhir.dstu2.proto.ImagingStudy.Series.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	411,  // 2846: google.fhir.dstu2.proto.ImagingStudy.Series.number:type_name -> google.fhir.dstu2.proto.UnsignedInt
	401,  // 2847: google.fhir.dstu2.proto.ImagingStudy.Series.modality:type_name -> google.fhir.dstu2.proto.Coding
	460,  // 2848: google.fhir.dstu2.proto.ImagingStudy.Series.uid:type_name -> google.fhir.dstu2.proto.Oid
	397,  // 2849: google.fhir.dstu2.proto.ImagingStudy.Series.description:type_name -> google.fhir.dstu2.proto.String
	411,  // 2850: google.fhir.dstu2.proto.ImagingStudy.Series.number_of_instances:type_name -> google.fhir.dstu2.proto.UnsignedInt
	461,  // 2851: google.fhir.dstu2.proto.ImagingStudy.Series.availability:type_name -> google.fhir.dstu2.proto.InstanceAvailabilityCode
	392,  // 2852: google.fhir.dstu2.proto.ImagingStudy.Series.url:type_name -> google.fhir.dstu2.proto.Uri
	401,  // 2853: google.fhir.dstu2.proto.ImagingStudy.Series.body_site:type_name -> google.fhir.dstu2.proto.Coding
	401,  // 2854: google.fhir.dstu2.proto.ImagingStudy.Series.laterality:type_name -> google.fhir.dstu2.proto.Coding
	404,  // 2855: google.fhir.dstu2.proto.ImagingStudy.Series.started:type_name -> google.fhir.dstu2.proto.DateTime
	235,  // 2856: google.fhir.dstu2.proto.ImagingStudy.Series.instance:type_name -> google.fhir.dstu2.proto.ImagingStudy.Series.Instance
	390,  // 2857: google.fhir.dstu2.proto.ImagingStudy.Series.Instance.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2858: google.fhir.dstu2.proto.ImagingStudy.Series.Instance.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2859: google.fhir.dstu2.proto.ImagingStudy.Series.Instance.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	411,  // 2860: google.fhir.dstu2.proto.ImagingStudy.Series.Instance.number:type_name -> google.fhir.dstu2.proto.UnsignedInt
	460,  // 2861: google.fhir.dstu2.proto.ImagingStudy.Series.Instance.uid:type_name -> google.fhir.dstu2.proto.Oid
	460,  // 2862: google.fhir.dstu2.proto.ImagingStudy.Series.Instance.sop_class:type_name -> google.fhir.dstu2.proto.Oid
	397,  // 2863: google.fhir.dstu2.proto.ImagingStudy.Series.Instance.type:type_name -> google.fhir.dstu2.proto.String
	397,  // 2864: google.fhir.dstu2.proto.ImagingStudy.Series.Instance.title:type_name -> google.fhir.dstu2.proto.String
	418,  // 2865: google.fhir.dstu2.proto.ImagingStudy.Series.Instance.content:type_name -> google.fhir.dstu2.proto.Attachment
	390,  // 2866: google.fhir.dstu2.proto.Immunization.Explanation.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2867: google.fhir.dstu2.proto.Immunization.Explanation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2868: google.fhir.dstu2.proto.Immunization.Explanation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2869: google.fhir.dstu2.proto.Immunization.Explanation.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2870: google.fhir.dstu2.proto.Immunization.Explanation.reason_not_given:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 2871: google.fhir.dstu2.proto.Immunization.Reaction.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2872: google.fhir.dstu2.proto.Immunization.Reaction.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2873: google.fhir.dstu2.proto.Immunization.Reaction.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	404,  // 2874: google.fhir.dstu2.proto.Immunization.Reaction.date:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 2875: google.fhir.dstu2.proto.Immunization.Reaction.detail:type_name -> google.fhir.dstu2.proto.Reference
	431,  // 2876: google.fhir.dstu2.proto.Immunization.Reaction.reported:type_name -> google.fhir.dstu2.proto.Boolean
	390,  // 2877: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2878: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2879: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	413,  // 2880: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.dose_sequence:type_name -> google.fhir.dstu2.proto.PositiveInt
	397,  // 2881: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.description:type_name -> google.fhir.dstu2.proto.String
	403,  // 2882: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.authority:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 2883: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.series:type_name -> google.fhir.dstu2.proto.String
	413,  // 2884: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.series_doses:type_name -> google.fhir.dstu2.proto.PositiveInt
	398,  // 2885: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.target_disease:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2886: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.dose_status:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 2887: google.fhir.dstu2.proto.Immunization.VaccinationProtocol.dose_status_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 2888: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2889: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2890: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	404,  // 2891: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.date:type_name -> google.fhir.dstu2.proto.DateTime
	398,  // 2892: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.vaccine_code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	413,  // 2893: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.dose_number:type_name -> google.fhir.dstu2.proto.PositiveInt
	398,  // 2894: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.forecast_status:type_name -> google.fhir.dstu2.proto.CodeableConcept
	240,  // 2895: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.date_criterion:type_name -> google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.DateCriterion
	241,  // 2896: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.protocol:type_name -> google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.Protocol
	403,  // 2897: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.supporting_immunization:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 2898: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.supporting_patient_information:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2899: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.DateCriterion.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2900: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.DateCriterion.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2901: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.DateCriterion.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2902: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.DateCriterion.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	404,  // 2903: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.DateCriterion.value:type_name -> google.fhir.dstu2.proto.DateTime
	390,  // 2904: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.Protocol.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2905: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.Protocol.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2906: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.Protocol.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	530,  // 2907: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.Protocol.dose_sequence:type_name -> google.fhir.dstu2.proto.Integer
	397,  // 2908: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.Protocol.description:type_name -> google.fhir.dstu2.proto.String
	403,  // 2909: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.Protocol.authority:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 2910: google.fhir.dstu2.proto.ImmunizationRecommendation.Recommendation.Protocol.series:type_name -> google.fhir.dstu2.proto.String
	390,  // 2911: google.fhir.dstu2.proto.ImplementationGuide.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2912: google.fhir.dstu2.proto.ImplementationGuide.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2913: google.fhir.dstu2.proto.ImplementationGuide.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2914: google.fhir.dstu2.proto.ImplementationGuide.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 2915: google.fhir.dstu2.proto.ImplementationGuide.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	390,  // 2916: google.fhir.dstu2.proto.ImplementationGuide.Dependency.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2917: google.fhir.dstu2.proto.ImplementationGuide.Dependency.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2918: google.fhir.dstu2.proto.ImplementationGuide.Dependency.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	531,  // 2919: google.fhir.dstu2.proto.ImplementationGuide.Dependency.type:type_name -> google.fhir.dstu2.proto.GuideDependencyTypeCode
	392,  // 2920: google.fhir.dstu2.proto.ImplementationGuide.Dependency.uri:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 2921: google.fhir.dstu2.proto.ImplementationGuide.Package.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2922: google.fhir.dstu2.proto.ImplementationGuide.Package.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2923: google.fhir.dstu2.proto.ImplementationGuide.Package.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2924: google.fhir.dstu2.proto.ImplementationGuide.Package.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 2925: google.fhir.dstu2.proto.ImplementationGuide.Package.description:type_name -> google.fhir.dstu2.proto.String
	247,  // 2926: google.fhir.dstu2.proto.ImplementationGuide.Package.resource:type_name -> google.fhir.dstu2.proto.ImplementationGuide.Package.Resource
	390,  // 2927: google.fhir.dstu2.proto.ImplementationGuide.Global.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2928: google.fhir.dstu2.proto.ImplementationGuide.Global.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2929: google.fhir.dstu2.proto.ImplementationGuide.Global.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	477,  // 2930: google.fhir.dstu2.proto.ImplementationGuide.Global.type:type_name -> google.fhir.dstu2.proto.ResourceTypeCode
	403,  // 2931: google.fhir.dstu2.proto.ImplementationGuide.Global.profile:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2932: google.fhir.dstu2.proto.ImplementationGuide.Page.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2933: google.fhir.dstu2.proto.ImplementationGuide.Page.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2934: google.fhir.dstu2.proto.ImplementationGuide.Page.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 2935: google.fhir.dstu2.proto.ImplementationGuide.Page.source:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 2936: google.fhir.dstu2.proto.ImplementationGuide.Page.name:type_name -> google.fhir.dstu2.proto.String
	532,  // 2937: google.fhir.dstu2.proto.ImplementationGuide.Page.kind:type_name -> google.fhir.dstu2.proto.GuidePageKindCode
	477,  // 2938: google.fhir.dstu2.proto.ImplementationGuide.Page.type:type_name -> google.fhir.dstu2.proto.ResourceTypeCode
	397,  // 2939: google.fhir.dstu2.proto.ImplementationGuide.Page.package_value:type_name -> google.fhir.dstu2.proto.String
	416,  // 2940: google.fhir.dstu2.proto.ImplementationGuide.Page.format:type_name -> google.fhir.dstu2.proto.MimeTypeCode
	246,  // 2941: google.fhir.dstu2.proto.ImplementationGuide.Page.page:type_name -> google.fhir.dstu2.proto.ImplementationGuide.Page
	390,  // 2942: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2943: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2944: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	533,  // 2945: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.purpose:type_name -> google.fhir.dstu2.proto.GuideResourcePurposeCode
	397,  // 2946: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 2947: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.description:type_name -> google.fhir.dstu2.proto.String
	397,  // 2948: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.acronym:type_name -> google.fhir.dstu2.proto.String
	248,  // 2949: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.source:type_name -> google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.Source
	403,  // 2950: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.example_for:type_name -> google.fhir.dstu2.proto.Reference
	392,  // 2951: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.Source.uri:type_name -> google.fhir.dstu2.proto.Uri
	403,  // 2952: google.fhir.dstu2.proto.ImplementationGuide.Package.Resource.Source.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2953: google.fhir.dstu2.proto.List.Entry.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2954: google.fhir.dstu2.proto.List.Entry.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2955: google.fhir.dstu2.proto.List.Entry.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2956: google.fhir.dstu2.proto.List.Entry.flag:type_name -> google.fhir.dstu2.proto.CodeableConcept
	431,  // 2957: google.fhir.dstu2.proto.List.Entry.deleted:type_name -> google.fhir.dstu2.proto.Boolean
	404,  // 2958: google.fhir.dstu2.proto.List.Entry.date:type_name -> google.fhir.dstu2.proto.DateTime
	403,  // 2959: google.fhir.dstu2.proto.List.Entry.item:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2960: google.fhir.dstu2.proto.Location.Position.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2961: google.fhir.dstu2.proto.Location.Position.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2962: google.fhir.dstu2.proto.Location.Position.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	505,  // 2963: google.fhir.dstu2.proto.Location.Position.longitude:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 2964: google.fhir.dstu2.proto.Location.Position.latitude:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 2965: google.fhir.dstu2.proto.Location.Position.altitude:type_name -> google.fhir.dstu2.proto.Decimal
	390,  // 2966: google.fhir.dstu2.proto.Medication.Product.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2967: google.fhir.dstu2.proto.Medication.Product.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2968: google.fhir.dstu2.proto.Medication.Product.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2969: google.fhir.dstu2.proto.Medication.Product.form:type_name -> google.fhir.dstu2.proto.CodeableConcept
	253,  // 2970: google.fhir.dstu2.proto.Medication.Product.ingredient:type_name -> google.fhir.dstu2.proto.Medication.Product.Ingredient
	254,  // 2971: google.fhir.dstu2.proto.Medication.Product.batch:type_name -> google.fhir.dstu2.proto.Medication.Product.Batch
	390,  // 2972: google.fhir.dstu2.proto.Medication.Package.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2973: google.fhir.dstu2.proto.Medication.Package.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2974: google.fhir.dstu2.proto.Medication.Package.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 2975: google.fhir.dstu2.proto.Medication.Package.container:type_name -> google.fhir.dstu2.proto.CodeableConcept
	255,  // 2976: google.fhir.dstu2.proto.Medication.Package.content:type_name -> google.fhir.dstu2.proto.Medication.Package.Content
	390,  // 2977: google.fhir.dstu2.proto.Medication.Product.Ingredient.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2978: google.fhir.dstu2.proto.Medication.Product.Ingredient.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2979: google.fhir.dstu2.proto.Medication.Product.Ingredient.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 2980: google.fhir.dstu2.proto.Medication.Product.Ingredient.item:type_name -> google.fhir.dstu2.proto.Reference
	534,  // 2981: google.fhir.dstu2.proto.Medication.Product.Ingredient.amount:type_name -> google.fhir.dstu2.proto.Ratio
	390,  // 2982: google.fhir.dstu2.proto.Medication.Product.Batch.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2983: google.fhir.dstu2.proto.Medication.Product.Batch.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2984: google.fhir.dstu2.proto.Medication.Product.Batch.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2985: google.fhir.dstu2.proto.Medication.Product.Batch.lot_number:type_name -> google.fhir.dstu2.proto.String
	404,  // 2986: google.fhir.dstu2.proto.Medication.Product.Batch.expiration_date:type_name -> google.fhir.dstu2.proto.DateTime
	390,  // 2987: google.fhir.dstu2.proto.Medication.Package.Content.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2988: google.fhir.dstu2.proto.Medication.Package.Content.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2989: google.fhir.dstu2.proto.Medication.Package.Content.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 2990: google.fhir.dstu2.proto.Medication.Package.Content.item:type_name -> google.fhir.dstu2.proto.Reference
	463,  // 2991: google.fhir.dstu2.proto.Medication.Package.Content.amount:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	404,  // 2992: google.fhir.dstu2.proto.MedicationAdministration.EffectiveTime.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 2993: google.fhir.dstu2.proto.MedicationAdministration.EffectiveTime.period:type_name -> google.fhir.dstu2.proto.Period
	398,  // 2994: google.fhir.dstu2.proto.MedicationAdministration.Medication.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 2995: google.fhir.dstu2.proto.MedicationAdministration.Medication.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 2996: google.fhir.dstu2.proto.MedicationAdministration.Dosage.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 2997: google.fhir.dstu2.proto.MedicationAdministration.Dosage.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 2998: google.fhir.dstu2.proto.MedicationAdministration.Dosage.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 2999: google.fhir.dstu2.proto.MedicationAdministration.Dosage.text:type_name -> google.fhir.dstu2.proto.String
	259,  // 3000: google.fhir.dstu2.proto.MedicationAdministration.Dosage.site:type_name -> google.fhir.dstu2.proto.MedicationAdministration.Dosage.Site
	398,  // 3001: google.fhir.dstu2.proto.MedicationAdministration.Dosage.route:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3002: google.fhir.dstu2.proto.MedicationAdministration.Dosage.method:type_name -> google.fhir.dstu2.proto.CodeableConcept
	463,  // 3003: google.fhir.dstu2.proto.MedicationAdministration.Dosage.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	260,  // 3004: google.fhir.dstu2.proto.MedicationAdministration.Dosage.rate:type_name -> google.fhir.dstu2.proto.MedicationAdministration.Dosage.Rate
	398,  // 3005: google.fhir.dstu2.proto.MedicationAdministration.Dosage.Site.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3006: google.fhir.dstu2.proto.MedicationAdministration.Dosage.Site.reference:type_name -> google.fhir.dstu2.proto.Reference
	534,  // 3007: google.fhir.dstu2.proto.MedicationAdministration.Dosage.Rate.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	512,  // 3008: google.fhir.dstu2.proto.MedicationAdministration.Dosage.Rate.range:type_name -> google.fhir.dstu2.proto.Range
	398,  // 3009: google.fhir.dstu2.proto.MedicationDispense.Medication.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3010: google.fhir.dstu2.proto.MedicationDispense.Medication.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3011: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3012: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3013: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3014: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.text:type_name -> google.fhir.dstu2.proto.String
	398,  // 3015: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.additional_instructions:type_name -> google.fhir.dstu2.proto.CodeableConcept
	444,  // 3016: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.timing:type_name -> google.fhir.dstu2.proto.Timing
	264,  // 3017: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.as_needed:type_name -> google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.AsNeeded
	265,  // 3018: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.site:type_name -> google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Site
	398,  // 3019: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.route:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3020: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.method:type_name -> google.fhir.dstu2.proto.CodeableConcept
	266,  // 3021: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.dose:type_name -> google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Dose
	267,  // 3022: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.rate:type_name -> google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Rate
	534,  // 3023: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.max_dose_per_period:type_name -> google.fhir.dstu2.proto.Ratio
	390,  // 3024: google.fhir.dstu2.proto.MedicationDispense.Substitution.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3025: google.fhir.dstu2.proto.MedicationDispense.Substitution.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3026: google.fhir.dstu2.proto.MedicationDispense.Substitution.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3027: google.fhir.dstu2.proto.MedicationDispense.Substitution.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3028: google.fhir.dstu2.proto.MedicationDispense.Substitution.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3029: google.fhir.dstu2.proto.MedicationDispense.Substitution.responsible_party:type_name -> google.fhir.dstu2.proto.Reference
	431,  // 3030: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.AsNeeded.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 3031: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.AsNeeded.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3032: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Site.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3033: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Site.reference:type_name -> google.fhir.dstu2.proto.Reference
	512,  // 3034: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Dose.range:type_name -> google.fhir.dstu2.proto.Range
	463,  // 3035: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Dose.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	534,  // 3036: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Rate.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	512,  // 3037: google.fhir.dstu2.proto.MedicationDispense.DosageInstruction.Rate.range:type_name -> google.fhir.dstu2.proto.Range
	398,  // 3038: google.fhir.dstu2.proto.MedicationOrder.Reason.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3039: google.fhir.dstu2.proto.MedicationOrder.Reason.reference:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 3040: google.fhir.dstu2.proto.MedicationOrder.Medication.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3041: google.fhir.dstu2.proto.MedicationOrder.Medication.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3042: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3043: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3044: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3045: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.text:type_name -> google.fhir.dstu2.proto.String
	398,  // 3046: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.additional_instructions:type_name -> google.fhir.dstu2.proto.CodeableConcept
	444,  // 3047: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.timing:type_name -> google.fhir.dstu2.proto.Timing
	273,  // 3048: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.as_needed:type_name -> google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.AsNeeded
	274,  // 3049: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.site:type_name -> google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Site
	398,  // 3050: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.route:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3051: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.method:type_name -> google.fhir.dstu2.proto.CodeableConcept
	275,  // 3052: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.dose:type_name -> google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Dose
	276,  // 3053: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.rate:type_name -> google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Rate
	534,  // 3054: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.max_dose_per_period:type_name -> google.fhir.dstu2.proto.Ratio
	390,  // 3055: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3056: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3057: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	277,  // 3058: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.medication:type_name -> google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.Medication
	400,  // 3059: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.validity_period:type_name -> google.fhir.dstu2.proto.Period
	413,  // 3060: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.number_of_repeats_allowed:type_name -> google.fhir.dstu2.proto.PositiveInt
	463,  // 3061: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	453,  // 3062: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.expected_supply_duration:type_name -> google.fhir.dstu2.proto.Duration
	390,  // 3063: google.fhir.dstu2.proto.MedicationOrder.Substitution.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3064: google.fhir.dstu2.proto.MedicationOrder.Substitution.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3065: google.fhir.dstu2.proto.MedicationOrder.Substitution.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3066: google.fhir.dstu2.proto.MedicationOrder.Substitution.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3067: google.fhir.dstu2.proto.MedicationOrder.Substitution.reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	431,  // 3068: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.AsNeeded.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 3069: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.AsNeeded.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3070: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Site.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3071: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Site.reference:type_name -> google.fhir.dstu2.proto.Reference
	512,  // 3072: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Dose.range:type_name -> google.fhir.dstu2.proto.Range
	463,  // 3073: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Dose.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	534,  // 3074: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Rate.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	512,  // 3075: google.fhir.dstu2.proto.MedicationOrder.DosageInstruction.Rate.range:type_name -> google.fhir.dstu2.proto.Range
	398,  // 3076: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.Medication.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3077: google.fhir.dstu2.proto.MedicationOrder.DispenseRequest.Medication.reference:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 3078: google.fhir.dstu2.proto.MedicationStatement.ReasonForUse.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3079: google.fhir.dstu2.proto.MedicationStatement.ReasonForUse.reference:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 3080: google.fhir.dstu2.proto.MedicationStatement.Effective.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 3081: google.fhir.dstu2.proto.MedicationStatement.Effective.period:type_name -> google.fhir.dstu2.proto.Period
	398,  // 3082: google.fhir.dstu2.proto.MedicationStatement.Medication.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3083: google.fhir.dstu2.proto.MedicationStatement.Medication.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3084: google.fhir.dstu2.proto.MedicationStatement.Dosage.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3085: google.fhir.dstu2.proto.MedicationStatement.Dosage.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3086: google.fhir.dstu2.proto.MedicationStatement.Dosage.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3087: google.fhir.dstu2.proto.MedicationStatement.Dosage.text:type_name -> google.fhir.dstu2.proto.String
	444,  // 3088: google.fhir.dstu2.proto.MedicationStatement.Dosage.timing:type_name -> google.fhir.dstu2.proto.Timing
	282,  // 3089: google.fhir.dstu2.proto.MedicationStatement.Dosage.as_needed:type_name -> google.fhir.dstu2.proto.MedicationStatement.Dosage.AsNeeded
	283,  // 3090: google.fhir.dstu2.proto.MedicationStatement.Dosage.site:type_name -> google.fhir.dstu2.proto.MedicationStatement.Dosage.Site
	398,  // 3091: google.fhir.dstu2.proto.MedicationStatement.Dosage.route:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3092: google.fhir.dstu2.proto.MedicationStatement.Dosage.method:type_name -> google.fhir.dstu2.proto.CodeableConcept
	284,  // 3093: google.fhir.dstu2.proto.MedicationStatement.Dosage.quantity:type_name -> google.fhir.dstu2.proto.MedicationStatement.Dosage.Quantity
	285,  // 3094: google.fhir.dstu2.proto.MedicationStatement.Dosage.rate:type_name -> google.fhir.dstu2.proto.MedicationStatement.Dosage.Rate
	534,  // 3095: google.fhir.dstu2.proto.MedicationStatement.Dosage.max_dose_per_period:type_name -> google.fhir.dstu2.proto.Ratio
	431,  // 3096: google.fhir.dstu2.proto.MedicationStatement.Dosage.AsNeeded.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 3097: google.fhir.dstu2.proto.MedicationStatement.Dosage.AsNeeded.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3098: google.fhir.dstu2.proto.MedicationStatement.Dosage.Site.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3099: google.fhir.dstu2.proto.MedicationStatement.Dosage.Site.reference:type_name -> google.fhir.dstu2.proto.Reference
	463,  // 3100: google.fhir.dstu2.proto.MedicationStatement.Dosage.Quantity.quantity_value:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	512,  // 3101: google.fhir.dstu2.proto.MedicationStatement.Dosage.Quantity.range:type_name -> google.fhir.dstu2.proto.Range
	534,  // 3102: google.fhir.dstu2.proto.MedicationStatement.Dosage.Rate.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	512,  // 3103: google.fhir.dstu2.proto.MedicationStatement.Dosage.Rate.range:type_name -> google.fhir.dstu2.proto.Range
	390,  // 3104: google.fhir.dstu2.proto.MessageHeader.Response.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3105: google.fhir.dstu2.proto.MessageHeader.Response.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3106: google.fhir.dstu2.proto.MessageHeader.Response.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	390,  // 3107: google.fhir.dstu2.proto.MessageHeader.Response.identifier:type_name -> google.fhir.dstu2.proto.Id
	535,  // 3108: google.fhir.dstu2.proto.MessageHeader.Response.code:type_name -> google.fhir.dstu2.proto.ResponseTypeCode
	403,  // 3109: google.fhir.dstu2.proto.MessageHeader.Response.details:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3110: google.fhir.dstu2.proto.MessageHeader.Source.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3111: google.fhir.dstu2.proto.MessageHeader.Source.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3112: google.fhir.dstu2.proto.MessageHeader.Source.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3113: google.fhir.dstu2.proto.MessageHeader.Source.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 3114: google.fhir.dstu2.proto.MessageHeader.Source.software:type_name -> google.fhir.dstu2.proto.String
	397,  // 3115: google.fhir.dstu2.proto.MessageHeader.Source.version:type_name -> google.fhir.dstu2.proto.String
	439,  // 3116: google.fhir.dstu2.proto.MessageHeader.Source.contact:type_name -> google.fhir.dstu2.proto.ContactPoint
	392,  // 3117: google.fhir.dstu2.proto.MessageHeader.Source.endpoint:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 3118: google.fhir.dstu2.proto.MessageHeader.Destination.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3119: google.fhir.dstu2.proto.MessageHeader.Destination.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3120: google.fhir.dstu2.proto.MessageHeader.Destination.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3121: google.fhir.dstu2.proto.MessageHeader.Destination.name:type_name -> google.fhir.dstu2.proto.String
	403,  // 3122: google.fhir.dstu2.proto.MessageHeader.Destination.target:type_name -> google.fhir.dstu2.proto.Reference
	392,  // 3123: google.fhir.dstu2.proto.MessageHeader.Destination.endpoint:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 3124: google.fhir.dstu2.proto.NamingSystem.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3125: google.fhir.dstu2.proto.NamingSystem.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3126: google.fhir.dstu2.proto.NamingSystem.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3127: google.fhir.dstu2.proto.NamingSystem.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 3128: google.fhir.dstu2.proto.NamingSystem.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	390,  // 3129: google.fhir.dstu2.proto.NamingSystem.UniqueId.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3130: google.fhir.dstu2.proto.NamingSystem.UniqueId.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3131: google.fhir.dstu2.proto.NamingSystem.UniqueId.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	536,  // 3132: google.fhir.dstu2.proto.NamingSystem.UniqueId.type:type_name -> google.fhir.dstu2.proto.NamingSystemIdentifierTypeCode
	397,  // 3133: google.fhir.dstu2.proto.NamingSystem.UniqueId.value:type_name -> google.fhir.dstu2.proto.String
	431,  // 3134: google.fhir.dstu2.proto.NamingSystem.UniqueId.preferred:type_name -> google.fhir.dstu2.proto.Boolean
	400,  // 3135: google.fhir.dstu2.proto.NamingSystem.UniqueId.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 3136: google.fhir.dstu2.proto.NutritionOrder.OralDiet.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3137: google.fhir.dstu2.proto.NutritionOrder.OralDiet.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3138: google.fhir.dstu2.proto.NutritionOrder.OralDiet.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3139: google.fhir.dstu2.proto.NutritionOrder.OralDiet.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	444,  // 3140: google.fhir.dstu2.proto.NutritionOrder.OralDiet.schedule:type_name -> google.fhir.dstu2.proto.Timing
	294,  // 3141: google.fhir.dstu2.proto.NutritionOrder.OralDiet.nutrient:type_name -> google.fhir.dstu2.proto.NutritionOrder.OralDiet.Nutrient
	295,  // 3142: google.fhir.dstu2.proto.NutritionOrder.OralDiet.texture:type_name -> google.fhir.dstu2.proto.NutritionOrder.OralDiet.Texture
	398,  // 3143: google.fhir.dstu2.proto.NutritionOrder.OralDiet.fluid_consistency_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 3144: google.fhir.dstu2.proto.NutritionOrder.OralDiet.instruction:type_name -> google.fhir.dstu2.proto.String
	390,  // 3145: google.fhir.dstu2.proto.NutritionOrder.Supplement.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3146: google.fhir.dstu2.proto.NutritionOrder.Supplement.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3147: google.fhir.dstu2.proto.NutritionOrder.Supplement.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3148: google.fhir.dstu2.proto.NutritionOrder.Supplement.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 3149: google.fhir.dstu2.proto.NutritionOrder.Supplement.product_name:type_name -> google.fhir.dstu2.proto.String
	444,  // 3150: google.fhir.dstu2.proto.NutritionOrder.Supplement.schedule:type_name -> google.fhir.dstu2.proto.Timing
	463,  // 3151: google.fhir.dstu2.proto.NutritionOrder.Supplement.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	397,  // 3152: google.fhir.dstu2.proto.NutritionOrder.Supplement.instruction:type_name -> google.fhir.dstu2.proto.String
	390,  // 3153: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3154: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3155: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3156: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.base_formula_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 3157: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.base_formula_product_name:type_name -> google.fhir.dstu2.proto.String
	398,  // 3158: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.additive_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 3159: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.additive_product_name:type_name -> google.fhir.dstu2.proto.String
	463,  // 3160: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.caloric_density:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	398,  // 3161: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.routeof_administration:type_name -> google.fhir.dstu2.proto.CodeableConcept
	296,  // 3162: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.administration:type_name -> google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration
	463,  // 3163: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.max_volume_to_deliver:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	397,  // 3164: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.administration_instruction:type_name -> google.fhir.dstu2.proto.String
	390,  // 3165: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Nutrient.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3166: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Nutrient.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3167: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Nutrient.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3168: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Nutrient.modifier:type_name -> google.fhir.dstu2.proto.CodeableConcept
	463,  // 3169: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Nutrient.amount:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	390,  // 3170: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Texture.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3171: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Texture.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3172: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Texture.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3173: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Texture.modifier:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3174: google.fhir.dstu2.proto.NutritionOrder.OralDiet.Texture.food_type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 3175: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3176: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3177: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	444,  // 3178: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.schedule:type_name -> google.fhir.dstu2.proto.Timing
	463,  // 3179: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	297,  // 3180: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.rate:type_name -> google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.Rate
	463,  // 3181: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.Rate.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	534,  // 3182: google.fhir.dstu2.proto.NutritionOrder.EnteralFormula.Administration.Rate.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	404,  // 3183: google.fhir.dstu2.proto.Observation.Effective.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 3184: google.fhir.dstu2.proto.Observation.Effective.period:type_name -> google.fhir.dstu2.proto.Period
	527,  // 3185: google.fhir.dstu2.proto.Observation.Value.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	398,  // 3186: google.fhir.dstu2.proto.Observation.Value.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 3187: google.fhir.dstu2.proto.Observation.Value.string_value:type_name -> google.fhir.dstu2.proto.String
	512,  // 3188: google.fhir.dstu2.proto.Observation.Value.range:type_name -> google.fhir.dstu2.proto.Range
	534,  // 3189: google.fhir.dstu2.proto.Observation.Value.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	537,  // 3190: google.fhir.dstu2.proto.Observation.Value.sampled_data:type_name -> google.fhir.dstu2.proto.SampledData
	418,  // 3191: google.fhir.dstu2.proto.Observation.Value.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	529,  // 3192: google.fhir.dstu2.proto.Observation.Value.time:type_name -> google.fhir.dstu2.proto.Time
	404,  // 3193: google.fhir.dstu2.proto.Observation.Value.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 3194: google.fhir.dstu2.proto.Observation.Value.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 3195: google.fhir.dstu2.proto.Observation.ReferenceRange.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3196: google.fhir.dstu2.proto.Observation.ReferenceRange.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3197: google.fhir.dstu2.proto.Observation.ReferenceRange.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	463,  // 3198: google.fhir.dstu2.proto.Observation.ReferenceRange.low:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	463,  // 3199: google.fhir.dstu2.proto.Observation.ReferenceRange.high:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	398,  // 3200: google.fhir.dstu2.proto.Observation.ReferenceRange.meaning:type_name -> google.fhir.dstu2.proto.CodeableConcept
	512,  // 3201: google.fhir.dstu2.proto.Observation.ReferenceRange.age:type_name -> google.fhir.dstu2.proto.Range
	397,  // 3202: google.fhir.dstu2.proto.Observation.ReferenceRange.text:type_name -> google.fhir.dstu2.proto.String
	390,  // 3203: google.fhir.dstu2.proto.Observation.Related.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3204: google.fhir.dstu2.proto.Observation.Related.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3205: google.fhir.dstu2.proto.Observation.Related.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	538,  // 3206: google.fhir.dstu2.proto.Observation.Related.type:type_name -> google.fhir.dstu2.proto.ObservationRelationshipTypeCode
	403,  // 3207: google.fhir.dstu2.proto.Observation.Related.target:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3208: google.fhir.dstu2.proto.Observation.Component.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3209: google.fhir.dstu2.proto.Observation.Component.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3210: google.fhir.dstu2.proto.Observation.Component.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3211: google.fhir.dstu2.proto.Observation.Component.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	303,  // 3212: google.fhir.dstu2.proto.Observation.Component.value:type_name -> google.fhir.dstu2.proto.Observation.Component.Value
	398,  // 3213: google.fhir.dstu2.proto.Observation.Component.data_absent_reason:type_name -> google.fhir.dstu2.proto.CodeableConcept
	300,  // 3214: google.fhir.dstu2.proto.Observation.Component.reference_range:type_name -> google.fhir.dstu2.proto.Observation.ReferenceRange
	527,  // 3215: google.fhir.dstu2.proto.Observation.Component.Value.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	398,  // 3216: google.fhir.dstu2.proto.Observation.Component.Value.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 3217: google.fhir.dstu2.proto.Observation.Component.Value.string_value:type_name -> google.fhir.dstu2.proto.String
	512,  // 3218: google.fhir.dstu2.proto.Observation.Component.Value.range:type_name -> google.fhir.dstu2.proto.Range
	534,  // 3219: google.fhir.dstu2.proto.Observation.Component.Value.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	537,  // 3220: google.fhir.dstu2.proto.Observation.Component.Value.sampled_data:type_name -> google.fhir.dstu2.proto.SampledData
	418,  // 3221: google.fhir.dstu2.proto.Observation.Component.Value.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	529,  // 3222: google.fhir.dstu2.proto.Observation.Component.Value.time:type_name -> google.fhir.dstu2.proto.Time
	404,  // 3223: google.fhir.dstu2.proto.Observation.Component.Value.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 3224: google.fhir.dstu2.proto.Observation.Component.Value.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 3225: google.fhir.dstu2.proto.OperationDefinition.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3226: google.fhir.dstu2.proto.OperationDefinition.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3227: google.fhir.dstu2.proto.OperationDefinition.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3228: google.fhir.dstu2.proto.OperationDefinition.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 3229: google.fhir.dstu2.proto.OperationDefinition.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	390,  // 3230: google.fhir.dstu2.proto.OperationDefinition.Parameter.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3231: google.fhir.dstu2.proto.OperationDefinition.Parameter.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3232: google.fhir.dstu2.proto.OperationDefinition.Parameter.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	399,  // 3233: google.fhir.dstu2.proto.OperationDefinition.Parameter.name:type_name -> google.fhir.dstu2.proto.Code
	539,  // 3234: google.fhir.dstu2.proto.OperationDefinition.Parameter.use:type_name -> google.fhir.dstu2.proto.OperationParameterUseCode
	530,  // 3235: google.fhir.dstu2.proto.OperationDefinition.Parameter.min:type_name -> google.fhir.dstu2.proto.Integer
	397,  // 3236: google.fhir.dstu2.proto.OperationDefinition.Parameter.max:type_name -> google.fhir.dstu2.proto.String
	397,  // 3237: google.fhir.dstu2.proto.OperationDefinition.Parameter.documentation:type_name -> google.fhir.dstu2.proto.String
	399,  // 3238: google.fhir.dstu2.proto.OperationDefinition.Parameter.type:type_name -> google.fhir.dstu2.proto.Code
	403,  // 3239: google.fhir.dstu2.proto.OperationDefinition.Parameter.profile:type_name -> google.fhir.dstu2.proto.Reference
	306,  // 3240: google.fhir.dstu2.proto.OperationDefinition.Parameter.binding:type_name -> google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding
	305,  // 3241: google.fhir.dstu2.proto.OperationDefinition.Parameter.part:type_name -> google.fhir.dstu2.proto.OperationDefinition.Parameter
	390,  // 3242: google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3243: google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3244: google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	540,  // 3245: google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding.strength:type_name -> google.fhir.dstu2.proto.BindingStrengthCode
	307,  // 3246: google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding.value_set:type_name -> google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding.ValueSet
	392,  // 3247: google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding.ValueSet.uri:type_name -> google.fhir.dstu2.proto.Uri
	403,  // 3248: google.fhir.dstu2.proto.OperationDefinition.Parameter.Binding.ValueSet.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3249: google.fhir.dstu2.proto.OperationOutcome.Issue.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3250: google.fhir.dstu2.proto.OperationOutcome.Issue.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3251: google.fhir.dstu2.proto.OperationOutcome.Issue.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	541,  // 3252: google.fhir.dstu2.proto.OperationOutcome.Issue.severity:type_name -> google.fhir.dstu2.proto.IssueSeverityCode
	542,  // 3253: google.fhir.dstu2.proto.OperationOutcome.Issue.code:type_name -> google.fhir.dstu2.proto.IssueTypeCode
	398,  // 3254: google.fhir.dstu2.proto.OperationOutcome.Issue.details:type_name -> google.fhir.dstu2.proto.CodeableConcept
	397,  // 3255: google.fhir.dstu2.proto.OperationOutcome.Issue.diagnostics:type_name -> google.fhir.dstu2.proto.String
	397,  // 3256: google.fhir.dstu2.proto.OperationOutcome.Issue.location:type_name -> google.fhir.dstu2.proto.String
	398,  // 3257: google.fhir.dstu2.proto.Order.Reason.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3258: google.fhir.dstu2.proto.Order.Reason.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3259: google.fhir.dstu2.proto.Order.When.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3260: google.fhir.dstu2.proto.Order.When.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3261: google.fhir.dstu2.proto.Order.When.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3262: google.fhir.dstu2.proto.Order.When.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	444,  // 3263: google.fhir.dstu2.proto.Order.When.schedule:type_name -> google.fhir.dstu2.proto.Timing
	390,  // 3264: google.fhir.dstu2.proto.Organization.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3265: google.fhir.dstu2.proto.Organization.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3266: google.fhir.dstu2.proto.Organization.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3267: google.fhir.dstu2.proto.Organization.Contact.purpose:type_name -> google.fhir.dstu2.proto.CodeableConcept
	479,  // 3268: google.fhir.dstu2.proto.Organization.Contact.name:type_name -> google.fhir.dstu2.proto.HumanName
	439,  // 3269: google.fhir.dstu2.proto.Organization.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	468,  // 3270: google.fhir.dstu2.proto.Organization.Contact.address:type_name -> google.fhir.dstu2.proto.Address
	390,  // 3271: google.fhir.dstu2.proto.Parameters.Parameter.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3272: google.fhir.dstu2.proto.Parameters.Parameter.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3273: google.fhir.dstu2.proto.Parameters.Parameter.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3274: google.fhir.dstu2.proto.Parameters.Parameter.name:type_name -> google.fhir.dstu2.proto.String
	313,  // 3275: google.fhir.dstu2.proto.Parameters.Parameter.value:type_name -> google.fhir.dstu2.proto.Parameters.Parameter.Value
	96,   // 3276: google.fhir.dstu2.proto.Parameters.Parameter.resource:type_name -> google.fhir.dstu2.proto.ContainedResource
	312,  // 3277: google.fhir.dstu2.proto.Parameters.Parameter.part:type_name -> google.fhir.dstu2.proto.Parameters.Parameter
	431,  // 3278: google.fhir.dstu2.proto.Parameters.Parameter.Value.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	530,  // 3279: google.fhir.dstu2.proto.Parameters.Parameter.Value.integer:type_name -> google.fhir.dstu2.proto.Integer
	505,  // 3280: google.fhir.dstu2.proto.Parameters.Parameter.Value.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	417,  // 3281: google.fhir.dstu2.proto.Parameters.Parameter.Value.base64_binary:type_name -> google.fhir.dstu2.proto.Base64Binary
	412,  // 3282: google.fhir.dstu2.proto.Parameters.Parameter.Value.instant:type_name -> google.fhir.dstu2.proto.Instant
	397,  // 3283: google.fhir.dstu2.proto.Parameters.Parameter.Value.string_value:type_name -> google.fhir.dstu2.proto.String
	392,  // 3284: google.fhir.dstu2.proto.Parameters.Parameter.Value.uri:type_name -> google.fhir.dstu2.proto.Uri
	415,  // 3285: google.fhir.dstu2.proto.Parameters.Parameter.Value.date:type_name -> google.fhir.dstu2.proto.Date
	404,  // 3286: google.fhir.dstu2.proto.Parameters.Parameter.Value.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	529,  // 3287: google.fhir.dstu2.proto.Parameters.Parameter.Value.time:type_name -> google.fhir.dstu2.proto.Time
	399,  // 3288: google.fhir.dstu2.proto.Parameters.Parameter.Value.code:type_name -> google.fhir.dstu2.proto.Code
	460,  // 3289: google.fhir.dstu2.proto.Parameters.Parameter.Value.oid:type_name -> google.fhir.dstu2.proto.Oid
	390,  // 3290: google.fhir.dstu2.proto.Parameters.Parameter.Value.id:type_name -> google.fhir.dstu2.proto.Id
	411,  // 3291: google.fhir.dstu2.proto.Parameters.Parameter.Value.unsigned_int:type_name -> google.fhir.dstu2.proto.UnsignedInt
	413,  // 3292: google.fhir.dstu2.proto.Parameters.Parameter.Value.positive_int:type_name -> google.fhir.dstu2.proto.PositiveInt
	543,  // 3293: google.fhir.dstu2.proto.Parameters.Parameter.Value.markdown:type_name -> google.fhir.dstu2.proto.Markdown
	409,  // 3294: google.fhir.dstu2.proto.Parameters.Parameter.Value.annotation:type_name -> google.fhir.dstu2.proto.Annotation
	418,  // 3295: google.fhir.dstu2.proto.Parameters.Parameter.Value.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	396,  // 3296: google.fhir.dstu2.proto.Parameters.Parameter.Value.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 3297: google.fhir.dstu2.proto.Parameters.Parameter.Value.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	401,  // 3298: google.fhir.dstu2.proto.Parameters.Parameter.Value.coding:type_name -> google.fhir.dstu2.proto.Coding
	527,  // 3299: google.fhir.dstu2.proto.Parameters.Parameter.Value.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	512,  // 3300: google.fhir.dstu2.proto.Parameters.Parameter.Value.range:type_name -> google.fhir.dstu2.proto.Range
	400,  // 3301: google.fhir.dstu2.proto.Parameters.Parameter.Value.period:type_name -> google.fhir.dstu2.proto.Period
	534,  // 3302: google.fhir.dstu2.proto.Parameters.Parameter.Value.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	537,  // 3303: google.fhir.dstu2.proto.Parameters.Parameter.Value.sampled_data:type_name -> google.fhir.dstu2.proto.SampledData
	420,  // 3304: google.fhir.dstu2.proto.Parameters.Parameter.Value.signature:type_name -> google.fhir.dstu2.proto.Signature
	479,  // 3305: google.fhir.dstu2.proto.Parameters.Parameter.Value.human_name:type_name -> google.fhir.dstu2.proto.HumanName
	468,  // 3306: google.fhir.dstu2.proto.Parameters.Parameter.Value.address:type_name -> google.fhir.dstu2.proto.Address
	439,  // 3307: google.fhir.dstu2.proto.Parameters.Parameter.Value.contact_point:type_name -> google.fhir.dstu2.proto.ContactPoint
	444,  // 3308: google.fhir.dstu2.proto.Parameters.Parameter.Value.timing:type_name -> google.fhir.dstu2.proto.Timing
	403,  // 3309: google.fhir.dstu2.proto.Parameters.Parameter.Value.reference:type_name -> google.fhir.dstu2.proto.Reference
	391,  // 3310: google.fhir.dstu2.proto.Parameters.Parameter.Value.meta:type_name -> google.fhir.dstu2.proto.Meta
	431,  // 3311: google.fhir.dstu2.proto.Patient.Deceased.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	404,  // 3312: google.fhir.dstu2.proto.Patient.Deceased.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	431,  // 3313: google.fhir.dstu2.proto.Patient.MultipleBirth.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	530,  // 3314: google.fhir.dstu2.proto.Patient.MultipleBirth.integer:type_name -> google.fhir.dstu2.proto.Integer
	390,  // 3315: google.fhir.dstu2.proto.Patient.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3316: google.fhir.dstu2.proto.Patient.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3317: google.fhir.dstu2.proto.Patient.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3318: google.fhir.dstu2.proto.Patient.Contact.relationship:type_name -> google.fhir.dstu2.proto.CodeableConcept
	479,  // 3319: google.fhir.dstu2.proto.Patient.Contact.name:type_name -> google.fhir.dstu2.proto.HumanName
	439,  // 3320: google.fhir.dstu2.proto.Patient.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	468,  // 3321: google.fhir.dstu2.proto.Patient.Contact.address:type_name -> google.fhir.dstu2.proto.Address
	456,  // 3322: google.fhir.dstu2.proto.Patient.Contact.gender:type_name -> google.fhir.dstu2.proto.AdministrativeGenderCode
	403,  // 3323: google.fhir.dstu2.proto.Patient.Contact.organization:type_name -> google.fhir.dstu2.proto.Reference
	400,  // 3324: google.fhir.dstu2.proto.Patient.Contact.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 3325: google.fhir.dstu2.proto.Patient.Animal.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3326: google.fhir.dstu2.proto.Patient.Animal.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3327: google.fhir.dstu2.proto.Patient.Animal.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3328: google.fhir.dstu2.proto.Patient.Animal.species:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3329: google.fhir.dstu2.proto.Patient.Animal.breed:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3330: google.fhir.dstu2.proto.Patient.Animal.gender_status:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 3331: google.fhir.dstu2.proto.Patient.Communication.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3332: google.fhir.dstu2.proto.Patient.Communication.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3333: google.fhir.dstu2.proto.Patient.Communication.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3334: google.fhir.dstu2.proto.Patient.Communication.language:type_name -> google.fhir.dstu2.proto.CodeableConcept
	431,  // 3335: google.fhir.dstu2.proto.Patient.Communication.preferred:type_name -> google.fhir.dstu2.proto.Boolean
	390,  // 3336: google.fhir.dstu2.proto.Patient.Link.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3337: google.fhir.dstu2.proto.Patient.Link.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3338: google.fhir.dstu2.proto.Patient.Link.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 3339: google.fhir.dstu2.proto.Patient.Link.other:type_name -> google.fhir.dstu2.proto.Reference
	544,  // 3340: google.fhir.dstu2.proto.Patient.Link.type:type_name -> google.fhir.dstu2.proto.LinkTypeCode
	390,  // 3341: google.fhir.dstu2.proto.PaymentReconciliation.Detail.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3342: google.fhir.dstu2.proto.PaymentReconciliation.Detail.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3343: google.fhir.dstu2.proto.PaymentReconciliation.Detail.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 3344: google.fhir.dstu2.proto.PaymentReconciliation.Detail.type:type_name -> google.fhir.dstu2.proto.Coding
	403,  // 3345: google.fhir.dstu2.proto.PaymentReconciliation.Detail.request:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 3346: google.fhir.dstu2.proto.PaymentReconciliation.Detail.responce:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 3347: google.fhir.dstu2.proto.PaymentReconciliation.Detail.submitter:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 3348: google.fhir.dstu2.proto.PaymentReconciliation.Detail.payee:type_name -> google.fhir.dstu2.proto.Reference
	415,  // 3349: google.fhir.dstu2.proto.PaymentReconciliation.Detail.date:type_name -> google.fhir.dstu2.proto.Date
	402,  // 3350: google.fhir.dstu2.proto.PaymentReconciliation.Detail.amount:type_name -> google.fhir.dstu2.proto.Money
	390,  // 3351: google.fhir.dstu2.proto.PaymentReconciliation.Note.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3352: google.fhir.dstu2.proto.PaymentReconciliation.Note.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3353: google.fhir.dstu2.proto.PaymentReconciliation.Note.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 3354: google.fhir.dstu2.proto.PaymentReconciliation.Note.type:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 3355: google.fhir.dstu2.proto.PaymentReconciliation.Note.text:type_name -> google.fhir.dstu2.proto.String
	390,  // 3356: google.fhir.dstu2.proto.Person.Link.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3357: google.fhir.dstu2.proto.Person.Link.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3358: google.fhir.dstu2.proto.Person.Link.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 3359: google.fhir.dstu2.proto.Person.Link.target:type_name -> google.fhir.dstu2.proto.Reference
	545,  // 3360: google.fhir.dstu2.proto.Person.Link.assurance:type_name -> google.fhir.dstu2.proto.IdentityAssuranceLevelCode
	390,  // 3361: google.fhir.dstu2.proto.Practitioner.PractitionerRole.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3362: google.fhir.dstu2.proto.Practitioner.PractitionerRole.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3363: google.fhir.dstu2.proto.Practitioner.PractitionerRole.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 3364: google.fhir.dstu2.proto.Practitioner.PractitionerRole.managing_organization:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 3365: google.fhir.dstu2.proto.Practitioner.PractitionerRole.role:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3366: google.fhir.dstu2.proto.Practitioner.PractitionerRole.specialty:type_name -> google.fhir.dstu2.proto.CodeableConcept
	400,  // 3367: google.fhir.dstu2.proto.Practitioner.PractitionerRole.period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 3368: google.fhir.dstu2.proto.Practitioner.PractitionerRole.location:type_name -> google.fhir.dstu2.proto.Reference
	403,  // 3369: google.fhir.dstu2.proto.Practitioner.PractitionerRole.healthcare_service:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3370: google.fhir.dstu2.proto.Practitioner.Qualification.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3371: google.fhir.dstu2.proto.Practitioner.Qualification.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3372: google.fhir.dstu2.proto.Practitioner.Qualification.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 3373: google.fhir.dstu2.proto.Practitioner.Qualification.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	398,  // 3374: google.fhir.dstu2.proto.Practitioner.Qualification.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	400,  // 3375: google.fhir.dstu2.proto.Practitioner.Qualification.period:type_name -> google.fhir.dstu2.proto.Period
	403,  // 3376: google.fhir.dstu2.proto.Practitioner.Qualification.issuer:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 3377: google.fhir.dstu2.proto.Procedure.Reason.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3378: google.fhir.dstu2.proto.Procedure.Reason.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3379: google.fhir.dstu2.proto.Procedure.Performer.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3380: google.fhir.dstu2.proto.Procedure.Performer.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3381: google.fhir.dstu2.proto.Procedure.Performer.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 3382: google.fhir.dstu2.proto.Procedure.Performer.actor:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 3383: google.fhir.dstu2.proto.Procedure.Performer.role:type_name -> google.fhir.dstu2.proto.CodeableConcept
	404,  // 3384: google.fhir.dstu2.proto.Procedure.Performed.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 3385: google.fhir.dstu2.proto.Procedure.Performed.period:type_name -> google.fhir.dstu2.proto.Period
	390,  // 3386: google.fhir.dstu2.proto.Procedure.FocalDevice.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3387: google.fhir.dstu2.proto.Procedure.FocalDevice.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3388: google.fhir.dstu2.proto.Procedure.FocalDevice.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3389: google.fhir.dstu2.proto.Procedure.FocalDevice.action:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3390: google.fhir.dstu2.proto.Procedure.FocalDevice.manipulated:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 3391: google.fhir.dstu2.proto.ProcedureRequest.Reason.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3392: google.fhir.dstu2.proto.ProcedureRequest.Reason.reference:type_name -> google.fhir.dstu2.proto.Reference
	404,  // 3393: google.fhir.dstu2.proto.ProcedureRequest.Scheduled.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 3394: google.fhir.dstu2.proto.ProcedureRequest.Scheduled.period:type_name -> google.fhir.dstu2.proto.Period
	444,  // 3395: google.fhir.dstu2.proto.ProcedureRequest.Scheduled.timing:type_name -> google.fhir.dstu2.proto.Timing
	431,  // 3396: google.fhir.dstu2.proto.ProcedureRequest.AsNeeded.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	398,  // 3397: google.fhir.dstu2.proto.ProcedureRequest.AsNeeded.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 3398: google.fhir.dstu2.proto.ProcessRequest.Item.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3399: google.fhir.dstu2.proto.ProcessRequest.Item.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3400: google.fhir.dstu2.proto.ProcessRequest.Item.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	530,  // 3401: google.fhir.dstu2.proto.ProcessRequest.Item.sequence_link_id:type_name -> google.fhir.dstu2.proto.Integer
	390,  // 3402: google.fhir.dstu2.proto.ProcessResponse.Notes.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3403: google.fhir.dstu2.proto.ProcessResponse.Notes.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3404: google.fhir.dstu2.proto.ProcessResponse.Notes.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 3405: google.fhir.dstu2.proto.ProcessResponse.Notes.type:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 3406: google.fhir.dstu2.proto.ProcessResponse.Notes.text:type_name -> google.fhir.dstu2.proto.String
	390,  // 3407: google.fhir.dstu2.proto.Provenance.Agent.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3408: google.fhir.dstu2.proto.Provenance.Agent.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3409: google.fhir.dstu2.proto.Provenance.Agent.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 3410: google.fhir.dstu2.proto.Provenance.Agent.role:type_name -> google.fhir.dstu2.proto.Coding
	403,  // 3411: google.fhir.dstu2.proto.Provenance.Agent.actor:type_name -> google.fhir.dstu2.proto.Reference
	396,  // 3412: google.fhir.dstu2.proto.Provenance.Agent.user_id:type_name -> google.fhir.dstu2.proto.Identifier
	336,  // 3413: google.fhir.dstu2.proto.Provenance.Agent.related_agent:type_name -> google.fhir.dstu2.proto.Provenance.Agent.RelatedAgent
	390,  // 3414: google.fhir.dstu2.proto.Provenance.Entity.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3415: google.fhir.dstu2.proto.Provenance.Entity.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3416: google.fhir.dstu2.proto.Provenance.Entity.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	546,  // 3417: google.fhir.dstu2.proto.Provenance.Entity.role:type_name -> google.fhir.dstu2.proto.ProvenanceEntityRoleCode
	401,  // 3418: google.fhir.dstu2.proto.Provenance.Entity.type:type_name -> google.fhir.dstu2.proto.Coding
	392,  // 3419: google.fhir.dstu2.proto.Provenance.Entity.reference:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 3420: google.fhir.dstu2.proto.Provenance.Entity.display:type_name -> google.fhir.dstu2.proto.String
	334,  // 3421: google.fhir.dstu2.proto.Provenance.Entity.agent:type_name -> google.fhir.dstu2.proto.Provenance.Agent
	390,  // 3422: google.fhir.dstu2.proto.Provenance.Agent.RelatedAgent.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3423: google.fhir.dstu2.proto.Provenance.Agent.RelatedAgent.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3424: google.fhir.dstu2.proto.Provenance.Agent.RelatedAgent.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3425: google.fhir.dstu2.proto.Provenance.Agent.RelatedAgent.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	392,  // 3426: google.fhir.dstu2.proto.Provenance.Agent.RelatedAgent.target:type_name -> google.fhir.dstu2.proto.Uri
	390,  // 3427: google.fhir.dstu2.proto.Questionnaire.Group.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3428: google.fhir.dstu2.proto.Questionnaire.Group.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3429: google.fhir.dstu2.proto.Questionnaire.Group.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3430: google.fhir.dstu2.proto.Questionnaire.Group.link_id:type_name -> google.fhir.dstu2.proto.String
	397,  // 3431: google.fhir.dstu2.proto.Questionnaire.Group.title:type_name -> google.fhir.dstu2.proto.String
	401,  // 3432: google.fhir.dstu2.proto.Questionnaire.Group.concept:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 3433: google.fhir.dstu2.proto.Questionnaire.Group.text:type_name -> google.fhir.dstu2.proto.String
	431,  // 3434: google.fhir.dstu2.proto.Questionnaire.Group.required:type_name -> google.fhir.dstu2.proto.Boolean
	431,  // 3435: google.fhir.dstu2.proto.Questionnaire.Group.repeats:type_name -> google.fhir.dstu2.proto.Boolean
	337,  // 3436: google.fhir.dstu2.proto.Questionnaire.Group.group:type_name -> google.fhir.dstu2.proto.Questionnaire.Group
	338,  // 3437: google.fhir.dstu2.proto.Questionnaire.Group.question:type_name -> google.fhir.dstu2.proto.Questionnaire.Group.Question
	390,  // 3438: google.fhir.dstu2.proto.Questionnaire.Group.Question.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3439: google.fhir.dstu2.proto.Questionnaire.Group.Question.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3440: google.fhir.dstu2.proto.Questionnaire.Group.Question.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3441: google.fhir.dstu2.proto.Questionnaire.Group.Question.link_id:type_name -> google.fhir.dstu2.proto.String
	401,  // 3442: google.fhir.dstu2.proto.Questionnaire.Group.Question.concept:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 3443: google.fhir.dstu2.proto.Questionnaire.Group.Question.text:type_name -> google.fhir.dstu2.proto.String
	547,  // 3444: google.fhir.dstu2.proto.Questionnaire.Group.Question.type:type_name -> google.fhir.dstu2.proto.AnswerFormatCode
	431,  // 3445: google.fhir.dstu2.proto.Questionnaire.Group.Question.required:type_name -> google.fhir.dstu2.proto.Boolean
	431,  // 3446: google.fhir.dstu2.proto.Questionnaire.Group.Question.repeats:type_name -> google.fhir.dstu2.proto.Boolean
	403,  // 3447: google.fhir.dstu2.proto.Questionnaire.Group.Question.options:type_name -> google.fhir.dstu2.proto.Reference
	401,  // 3448: google.fhir.dstu2.proto.Questionnaire.Group.Question.option:type_name -> google.fhir.dstu2.proto.Coding
	337,  // 3449: google.fhir.dstu2.proto.Questionnaire.Group.Question.group:type_name -> google.fhir.dstu2.proto.Questionnaire.Group
	390,  // 3450: google.fhir.dstu2.proto.QuestionnaireResponse.Group.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3451: google.fhir.dstu2.proto.QuestionnaireResponse.Group.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3452: google.fhir.dstu2.proto.QuestionnaireResponse.Group.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3453: google.fhir.dstu2.proto.QuestionnaireResponse.Group.link_id:type_name -> google.fhir.dstu2.proto.String
	397,  // 3454: google.fhir.dstu2.proto.QuestionnaireResponse.Group.title:type_name -> google.fhir.dstu2.proto.String
	397,  // 3455: google.fhir.dstu2.proto.QuestionnaireResponse.Group.text:type_name -> google.fhir.dstu2.proto.String
	403,  // 3456: google.fhir.dstu2.proto.QuestionnaireResponse.Group.subject:type_name -> google.fhir.dstu2.proto.Reference
	339,  // 3457: google.fhir.dstu2.proto.QuestionnaireResponse.Group.group:type_name -> google.fhir.dstu2.proto.QuestionnaireResponse.Group
	340,  // 3458: google.fhir.dstu2.proto.QuestionnaireResponse.Group.question:type_name -> google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question
	390,  // 3459: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3460: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3461: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3462: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.link_id:type_name -> google.fhir.dstu2.proto.String
	397,  // 3463: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.text:type_name -> google.fhir.dstu2.proto.String
	341,  // 3464: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.answer:type_name -> google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer
	390,  // 3465: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3466: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3467: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	342,  // 3468: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.value:type_name -> google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value
	339,  // 3469: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.group:type_name -> google.fhir.dstu2.proto.QuestionnaireResponse.Group
	431,  // 3470: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	505,  // 3471: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	530,  // 3472: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.integer:type_name -> google.fhir.dstu2.proto.Integer
	415,  // 3473: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.date:type_name -> google.fhir.dstu2.proto.Date
	404,  // 3474: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	412,  // 3475: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.instant:type_name -> google.fhir.dstu2.proto.Instant
	529,  // 3476: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.time:type_name -> google.fhir.dstu2.proto.Time
	397,  // 3477: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.string_value:type_name -> google.fhir.dstu2.proto.String
	392,  // 3478: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.uri:type_name -> google.fhir.dstu2.proto.Uri
	418,  // 3479: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	401,  // 3480: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.coding:type_name -> google.fhir.dstu2.proto.Coding
	527,  // 3481: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	403,  // 3482: google.fhir.dstu2.proto.QuestionnaireResponse.Group.Question.Answer.Value.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3483: google.fhir.dstu2.proto.RiskAssessment.Prediction.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3484: google.fhir.dstu2.proto.RiskAssessment.Prediction.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3485: google.fhir.dstu2.proto.RiskAssessment.Prediction.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3486: google.fhir.dstu2.proto.RiskAssessment.Prediction.outcome:type_name -> google.fhir.dstu2.proto.CodeableConcept
	344,  // 3487: google.fhir.dstu2.proto.RiskAssessment.Prediction.probability:type_name -> google.fhir.dstu2.proto.RiskAssessment.Prediction.Probability
	505,  // 3488: google.fhir.dstu2.proto.RiskAssessment.Prediction.relative_risk:type_name -> google.fhir.dstu2.proto.Decimal
	345,  // 3489: google.fhir.dstu2.proto.RiskAssessment.Prediction.when:type_name -> google.fhir.dstu2.proto.RiskAssessment.Prediction.When
	397,  // 3490: google.fhir.dstu2.proto.RiskAssessment.Prediction.rationale:type_name -> google.fhir.dstu2.proto.String
	505,  // 3491: google.fhir.dstu2.proto.RiskAssessment.Prediction.Probability.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	512,  // 3492: google.fhir.dstu2.proto.RiskAssessment.Prediction.Probability.range:type_name -> google.fhir.dstu2.proto.Range
	398,  // 3493: google.fhir.dstu2.proto.RiskAssessment.Prediction.Probability.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	400,  // 3494: google.fhir.dstu2.proto.RiskAssessment.Prediction.When.period:type_name -> google.fhir.dstu2.proto.Period
	512,  // 3495: google.fhir.dstu2.proto.RiskAssessment.Prediction.When.range:type_name -> google.fhir.dstu2.proto.Range
	390,  // 3496: google.fhir.dstu2.proto.SearchParameter.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3497: google.fhir.dstu2.proto.SearchParameter.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3498: google.fhir.dstu2.proto.SearchParameter.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3499: google.fhir.dstu2.proto.SearchParameter.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 3500: google.fhir.dstu2.proto.SearchParameter.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	390,  // 3501: google.fhir.dstu2.proto.Specimen.Collection.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3502: google.fhir.dstu2.proto.Specimen.Collection.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3503: google.fhir.dstu2.proto.Specimen.Collection.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	403,  // 3504: google.fhir.dstu2.proto.Specimen.Collection.collector:type_name -> google.fhir.dstu2.proto.Reference
	397,  // 3505: google.fhir.dstu2.proto.Specimen.Collection.comment:type_name -> google.fhir.dstu2.proto.String
	350,  // 3506: google.fhir.dstu2.proto.Specimen.Collection.collected:type_name -> google.fhir.dstu2.proto.Specimen.Collection.Collected
	463,  // 3507: google.fhir.dstu2.proto.Specimen.Collection.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	398,  // 3508: google.fhir.dstu2.proto.Specimen.Collection.method:type_name -> google.fhir.dstu2.proto.CodeableConcept
	398,  // 3509: google.fhir.dstu2.proto.Specimen.Collection.body_site:type_name -> google.fhir.dstu2.proto.CodeableConcept
	390,  // 3510: google.fhir.dstu2.proto.Specimen.Treatment.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3511: google.fhir.dstu2.proto.Specimen.Treatment.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3512: google.fhir.dstu2.proto.Specimen.Treatment.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3513: google.fhir.dstu2.proto.Specimen.Treatment.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 3514: google.fhir.dstu2.proto.Specimen.Treatment.procedure:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3515: google.fhir.dstu2.proto.Specimen.Treatment.additive:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3516: google.fhir.dstu2.proto.Specimen.Container.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3517: google.fhir.dstu2.proto.Specimen.Container.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3518: google.fhir.dstu2.proto.Specimen.Container.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 3519: google.fhir.dstu2.proto.Specimen.Container.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	397,  // 3520: google.fhir.dstu2.proto.Specimen.Container.description:type_name -> google.fhir.dstu2.proto.String
	398,  // 3521: google.fhir.dstu2.proto.Specimen.Container.type:type_name -> google.fhir.dstu2.proto.CodeableConcept
	463,  // 3522: google.fhir.dstu2.proto.Specimen.Container.capacity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	463,  // 3523: google.fhir.dstu2.proto.Specimen.Container.specimen_quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	351,  // 3524: google.fhir.dstu2.proto.Specimen.Container.additive:type_name -> google.fhir.dstu2.proto.Specimen.Container.Additive
	404,  // 3525: google.fhir.dstu2.proto.Specimen.Collection.Collected.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	400,  // 3526: google.fhir.dstu2.proto.Specimen.Collection.Collected.period:type_name -> google.fhir.dstu2.proto.Period
	398,  // 3527: google.fhir.dstu2.proto.Specimen.Container.Additive.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3528: google.fhir.dstu2.proto.Specimen.Container.Additive.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3529: google.fhir.dstu2.proto.StructureDefinition.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3530: google.fhir.dstu2.proto.StructureDefinition.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3531: google.fhir.dstu2.proto.StructureDefinition.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3532: google.fhir.dstu2.proto.StructureDefinition.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 3533: google.fhir.dstu2.proto.StructureDefinition.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	390,  // 3534: google.fhir.dstu2.proto.StructureDefinition.Mapping.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3535: google.fhir.dstu2.proto.StructureDefinition.Mapping.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3536: google.fhir.dstu2.proto.StructureDefinition.Mapping.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	390,  // 3537: google.fhir.dstu2.proto.StructureDefinition.Mapping.identity:type_name -> google.fhir.dstu2.proto.Id
	392,  // 3538: google.fhir.dstu2.proto.StructureDefinition.Mapping.uri:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 3539: google.fhir.dstu2.proto.StructureDefinition.Mapping.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 3540: google.fhir.dstu2.proto.StructureDefinition.Mapping.comments:type_name -> google.fhir.dstu2.proto.String
	390,  // 3541: google.fhir.dstu2.proto.StructureDefinition.Snapshot.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3542: google.fhir.dstu2.proto.StructureDefinition.Snapshot.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3543: google.fhir.dstu2.proto.StructureDefinition.Snapshot.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	436,  // 3544: google.fhir.dstu2.proto.StructureDefinition.Snapshot.element:type_name -> google.fhir.dstu2.proto.ElementDefinition
	390,  // 3545: google.fhir.dstu2.proto.StructureDefinition.Differential.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3546: google.fhir.dstu2.proto.StructureDefinition.Differential.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3547: google.fhir.dstu2.proto.StructureDefinition.Differential.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	436,  // 3548: google.fhir.dstu2.proto.StructureDefinition.Differential.element:type_name -> google.fhir.dstu2.proto.ElementDefinition
	390,  // 3549: google.fhir.dstu2.proto.Subscription.Channel.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3550: google.fhir.dstu2.proto.Subscription.Channel.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3551: google.fhir.dstu2.proto.Subscription.Channel.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	548,  // 3552: google.fhir.dstu2.proto.Subscription.Channel.type:type_name -> google.fhir.dstu2.proto.SubscriptionChannelTypeCode
	392,  // 3553: google.fhir.dstu2.proto.Subscription.Channel.endpoint:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 3554: google.fhir.dstu2.proto.Subscription.Channel.payload:type_name -> google.fhir.dstu2.proto.String
	397,  // 3555: google.fhir.dstu2.proto.Subscription.Channel.header:type_name -> google.fhir.dstu2.proto.String
	390,  // 3556: google.fhir.dstu2.proto.Substance.Instance.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3557: google.fhir.dstu2.proto.Substance.Instance.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3558: google.fhir.dstu2.proto.Substance.Instance.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	396,  // 3559: google.fhir.dstu2.proto.Substance.Instance.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	404,  // 3560: google.fhir.dstu2.proto.Substance.Instance.expiry:type_name -> google.fhir.dstu2.proto.DateTime
	463,  // 3561: google.fhir.dstu2.proto.Substance.Instance.quantity:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	390,  // 3562: google.fhir.dstu2.proto.Substance.Ingredient.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3563: google.fhir.dstu2.proto.Substance.Ingredient.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3564: google.fhir.dstu2.proto.Substance.Ingredient.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	534,  // 3565: google.fhir.dstu2.proto.Substance.Ingredient.quantity:type_name -> google.fhir.dstu2.proto.Ratio
	403,  // 3566: google.fhir.dstu2.proto.Substance.Ingredient.substance:type_name -> google.fhir.dstu2.proto.Reference
	398,  // 3567: google.fhir.dstu2.proto.SupplyRequest.Reason.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3568: google.fhir.dstu2.proto.SupplyRequest.Reason.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3569: google.fhir.dstu2.proto.SupplyRequest.When.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3570: google.fhir.dstu2.proto.SupplyRequest.When.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3571: google.fhir.dstu2.proto.SupplyRequest.When.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	398,  // 3572: google.fhir.dstu2.proto.SupplyRequest.When.code:type_name -> google.fhir.dstu2.proto.CodeableConcept
	444,  // 3573: google.fhir.dstu2.proto.SupplyRequest.When.schedule:type_name -> google.fhir.dstu2.proto.Timing
	390,  // 3574: google.fhir.dstu2.proto.TestScript.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3575: google.fhir.dstu2.proto.TestScript.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3576: google.fhir.dstu2.proto.TestScript.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3577: google.fhir.dstu2.proto.TestScript.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 3578: google.fhir.dstu2.proto.TestScript.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	390,  // 3579: google.fhir.dstu2.proto.TestScript.Metadata.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3580: google.fhir.dstu2.proto.TestScript.Metadata.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3581: google.fhir.dstu2.proto.TestScript.Metadata.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	368,  // 3582: google.fhir.dstu2.proto.TestScript.Metadata.link:type_name -> google.fhir.dstu2.proto.TestScript.Metadata.Link
	369,  // 3583: google.fhir.dstu2.proto.TestScript.Metadata.capability:type_name -> google.fhir.dstu2.proto.TestScript.Metadata.Capability
	390,  // 3584: google.fhir.dstu2.proto.TestScript.Fixture.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3585: google.fhir.dstu2.proto.TestScript.Fixture.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3586: google.fhir.dstu2.proto.TestScript.Fixture.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	431,  // 3587: google.fhir.dstu2.proto.TestScript.Fixture.autocreate:type_name -> google.fhir.dstu2.proto.Boolean
	431,  // 3588: google.fhir.dstu2.proto.TestScript.Fixture.autodelete:type_name -> google.fhir.dstu2.proto.Boolean
	403,  // 3589: google.fhir.dstu2.proto.TestScript.Fixture.resource:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3590: google.fhir.dstu2.proto.TestScript.Variable.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3591: google.fhir.dstu2.proto.TestScript.Variable.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3592: google.fhir.dstu2.proto.TestScript.Variable.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3593: google.fhir.dstu2.proto.TestScript.Variable.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 3594: google.fhir.dstu2.proto.TestScript.Variable.header_field:type_name -> google.fhir.dstu2.proto.String
	397,  // 3595: google.fhir.dstu2.proto.TestScript.Variable.path:type_name -> google.fhir.dstu2.proto.String
	390,  // 3596: google.fhir.dstu2.proto.TestScript.Variable.source_id:type_name -> google.fhir.dstu2.proto.Id
	390,  // 3597: google.fhir.dstu2.proto.TestScript.Setup.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3598: google.fhir.dstu2.proto.TestScript.Setup.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3599: google.fhir.dstu2.proto.TestScript.Setup.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	362,  // 3600: google.fhir.dstu2.proto.TestScript.Setup.metadata:type_name -> google.fhir.dstu2.proto.TestScript.Metadata
	370,  // 3601: google.fhir.dstu2.proto.TestScript.Setup.action:type_name -> google.fhir.dstu2.proto.TestScript.Setup.Action
	390,  // 3602: google.fhir.dstu2.proto.TestScript.Test.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3603: google.fhir.dstu2.proto.TestScript.Test.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3604: google.fhir.dstu2.proto.TestScript.Test.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3605: google.fhir.dstu2.proto.TestScript.Test.name:type_name -> google.fhir.dstu2.proto.String
	397,  // 3606: google.fhir.dstu2.proto.TestScript.Test.description:type_name -> google.fhir.dstu2.proto.String
	362,  // 3607: google.fhir.dstu2.proto.TestScript.Test.metadata:type_name -> google.fhir.dstu2.proto.TestScript.Metadata
	374,  // 3608: google.fhir.dstu2.proto.TestScript.Test.action:type_name -> google.fhir.dstu2.proto.TestScript.Test.Action
	390,  // 3609: google.fhir.dstu2.proto.TestScript.Teardown.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3610: google.fhir.dstu2.proto.TestScript.Teardown.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3611: google.fhir.dstu2.proto.TestScript.Teardown.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	375,  // 3612: google.fhir.dstu2.proto.TestScript.Teardown.action:type_name -> google.fhir.dstu2.proto.TestScript.Teardown.Action
	390,  // 3613: google.fhir.dstu2.proto.TestScript.Metadata.Link.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3614: google.fhir.dstu2.proto.TestScript.Metadata.Link.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3615: google.fhir.dstu2.proto.TestScript.Metadata.Link.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 3616: google.fhir.dstu2.proto.TestScript.Metadata.Link.url:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 3617: google.fhir.dstu2.proto.TestScript.Metadata.Link.description:type_name -> google.fhir.dstu2.proto.String
	390,  // 3618: google.fhir.dstu2.proto.TestScript.Metadata.Capability.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3619: google.fhir.dstu2.proto.TestScript.Metadata.Capability.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3620: google.fhir.dstu2.proto.TestScript.Metadata.Capability.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	431,  // 3621: google.fhir.dstu2.proto.TestScript.Metadata.Capability.required:type_name -> google.fhir.dstu2.proto.Boolean
	431,  // 3622: google.fhir.dstu2.proto.TestScript.Metadata.Capability.validated:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 3623: google.fhir.dstu2.proto.TestScript.Metadata.Capability.description:type_name -> google.fhir.dstu2.proto.String
	530,  // 3624: google.fhir.dstu2.proto.TestScript.Metadata.Capability.destination:type_name -> google.fhir.dstu2.proto.Integer
	392,  // 3625: google.fhir.dstu2.proto.TestScript.Metadata.Capability.link:type_name -> google.fhir.dstu2.proto.Uri
	403,  // 3626: google.fhir.dstu2.proto.TestScript.Metadata.Capability.conformance:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3627: google.fhir.dstu2.proto.TestScript.Setup.Action.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3628: google.fhir.dstu2.proto.TestScript.Setup.Action.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3629: google.fhir.dstu2.proto.TestScript.Setup.Action.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	371,  // 3630: google.fhir.dstu2.proto.TestScript.Setup.Action.operation:type_name -> google.fhir.dstu2.proto.TestScript.Setup.Action.Operation
	372,  // 3631: google.fhir.dstu2.proto.TestScript.Setup.Action.assert_value:type_name -> google.fhir.dstu2.proto.TestScript.Setup.Action.Assert
	390,  // 3632: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3633: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3634: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 3635: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.type:type_name -> google.fhir.dstu2.proto.Coding
	492,  // 3636: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.resource:type_name -> google.fhir.dstu2.proto.FHIRDefinedTypeCode
	397,  // 3637: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.label:type_name -> google.fhir.dstu2.proto.String
	397,  // 3638: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.description:type_name -> google.fhir.dstu2.proto.String
	549,  // 3639: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.accept:type_name -> google.fhir.dstu2.proto.ContentTypeCode
	549,  // 3640: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.content_type:type_name -> google.fhir.dstu2.proto.ContentTypeCode
	530,  // 3641: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.destination:type_name -> google.fhir.dstu2.proto.Integer
	431,  // 3642: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.encode_request_url:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 3643: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.params:type_name -> google.fhir.dstu2.proto.String
	373,  // 3644: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.request_header:type_name -> google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.RequestHeader
	390,  // 3645: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.response_id:type_name -> google.fhir.dstu2.proto.Id
	390,  // 3646: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.source_id:type_name -> google.fhir.dstu2.proto.Id
	390,  // 3647: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.target_id:type_name -> google.fhir.dstu2.proto.Id
	397,  // 3648: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.url:type_name -> google.fhir.dstu2.proto.String
	390,  // 3649: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3650: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3651: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3652: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.label:type_name -> google.fhir.dstu2.proto.String
	397,  // 3653: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.description:type_name -> google.fhir.dstu2.proto.String
	550,  // 3654: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.direction:type_name -> google.fhir.dstu2.proto.AssertionDirectionTypeCode
	397,  // 3655: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.compare_to_source_id:type_name -> google.fhir.dstu2.proto.String
	397,  // 3656: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.compare_to_source_path:type_name -> google.fhir.dstu2.proto.String
	549,  // 3657: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.content_type:type_name -> google.fhir.dstu2.proto.ContentTypeCode
	397,  // 3658: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.header_field:type_name -> google.fhir.dstu2.proto.String
	397,  // 3659: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.minimum_id:type_name -> google.fhir.dstu2.proto.String
	431,  // 3660: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.navigation_links:type_name -> google.fhir.dstu2.proto.Boolean
	551,  // 3661: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.operator:type_name -> google.fhir.dstu2.proto.AssertionOperatorTypeCode
	397,  // 3662: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.path:type_name -> google.fhir.dstu2.proto.String
	492,  // 3663: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.resource:type_name -> google.fhir.dstu2.proto.FHIRDefinedTypeCode
	552,  // 3664: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.response:type_name -> google.fhir.dstu2.proto.AssertionResponseTypesCode
	397,  // 3665: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.response_code:type_name -> google.fhir.dstu2.proto.String
	390,  // 3666: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.source_id:type_name -> google.fhir.dstu2.proto.Id
	390,  // 3667: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.validate_profile_id:type_name -> google.fhir.dstu2.proto.Id
	397,  // 3668: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.value:type_name -> google.fhir.dstu2.proto.String
	431,  // 3669: google.fhir.dstu2.proto.TestScript.Setup.Action.Assert.warning_only:type_name -> google.fhir.dstu2.proto.Boolean
	390,  // 3670: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.RequestHeader.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3671: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.RequestHeader.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3672: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.RequestHeader.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3673: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.RequestHeader.field:type_name -> google.fhir.dstu2.proto.String
	397,  // 3674: google.fhir.dstu2.proto.TestScript.Setup.Action.Operation.RequestHeader.value:type_name -> google.fhir.dstu2.proto.String
	390,  // 3675: google.fhir.dstu2.proto.TestScript.Test.Action.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3676: google.fhir.dstu2.proto.TestScript.Test.Action.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3677: google.fhir.dstu2.proto.TestScript.Test.Action.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	371,  // 3678: google.fhir.dstu2.proto.TestScript.Test.Action.operation:type_name -> google.fhir.dstu2.proto.TestScript.Setup.Action.Operation
	372,  // 3679: google.fhir.dstu2.proto.TestScript.Test.Action.assert_value:type_name -> google.fhir.dstu2.proto.TestScript.Setup.Action.Assert
	390,  // 3680: google.fhir.dstu2.proto.TestScript.Teardown.Action.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3681: google.fhir.dstu2.proto.TestScript.Teardown.Action.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3682: google.fhir.dstu2.proto.TestScript.Teardown.Action.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	371,  // 3683: google.fhir.dstu2.proto.TestScript.Teardown.Action.operation:type_name -> google.fhir.dstu2.proto.TestScript.Setup.Action.Operation
	390,  // 3684: google.fhir.dstu2.proto.ValueSet.Contact.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3685: google.fhir.dstu2.proto.ValueSet.Contact.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3686: google.fhir.dstu2.proto.ValueSet.Contact.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3687: google.fhir.dstu2.proto.ValueSet.Contact.name:type_name -> google.fhir.dstu2.proto.String
	439,  // 3688: google.fhir.dstu2.proto.ValueSet.Contact.telecom:type_name -> google.fhir.dstu2.proto.ContactPoint
	390,  // 3689: google.fhir.dstu2.proto.ValueSet.CodeSystem.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3690: google.fhir.dstu2.proto.ValueSet.CodeSystem.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3691: google.fhir.dstu2.proto.ValueSet.CodeSystem.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 3692: google.fhir.dstu2.proto.ValueSet.CodeSystem.system:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 3693: google.fhir.dstu2.proto.ValueSet.CodeSystem.version:type_name -> google.fhir.dstu2.proto.String
	431,  // 3694: google.fhir.dstu2.proto.ValueSet.CodeSystem.case_sensitive:type_name -> google.fhir.dstu2.proto.Boolean
	380,  // 3695: google.fhir.dstu2.proto.ValueSet.CodeSystem.concept:type_name -> google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept
	390,  // 3696: google.fhir.dstu2.proto.ValueSet.Compose.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3697: google.fhir.dstu2.proto.ValueSet.Compose.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3698: google.fhir.dstu2.proto.ValueSet.Compose.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 3699: google.fhir.dstu2.proto.ValueSet.Compose.import:type_name -> google.fhir.dstu2.proto.Uri
	382,  // 3700: google.fhir.dstu2.proto.ValueSet.Compose.include:type_name -> google.fhir.dstu2.proto.ValueSet.Compose.Include
	382,  // 3701: google.fhir.dstu2.proto.ValueSet.Compose.exclude:type_name -> google.fhir.dstu2.proto.ValueSet.Compose.Include
	390,  // 3702: google.fhir.dstu2.proto.ValueSet.Expansion.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3703: google.fhir.dstu2.proto.ValueSet.Expansion.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3704: google.fhir.dstu2.proto.ValueSet.Expansion.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 3705: google.fhir.dstu2.proto.ValueSet.Expansion.identifier:type_name -> google.fhir.dstu2.proto.Uri
	404,  // 3706: google.fhir.dstu2.proto.ValueSet.Expansion.timestamp:type_name -> google.fhir.dstu2.proto.DateTime
	530,  // 3707: google.fhir.dstu2.proto.ValueSet.Expansion.total:type_name -> google.fhir.dstu2.proto.Integer
	530,  // 3708: google.fhir.dstu2.proto.ValueSet.Expansion.offset:type_name -> google.fhir.dstu2.proto.Integer
	385,  // 3709: google.fhir.dstu2.proto.ValueSet.Expansion.parameter:type_name -> google.fhir.dstu2.proto.ValueSet.Expansion.Parameter
	386,  // 3710: google.fhir.dstu2.proto.ValueSet.Expansion.contains:type_name -> google.fhir.dstu2.proto.ValueSet.Expansion.Contains
	390,  // 3711: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3712: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3713: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	399,  // 3714: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.code:type_name -> google.fhir.dstu2.proto.Code
	431,  // 3715: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.abstract:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 3716: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.display:type_name -> google.fhir.dstu2.proto.String
	397,  // 3717: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.definition:type_name -> google.fhir.dstu2.proto.String
	381,  // 3718: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.designation:type_name -> google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.Designation
	380,  // 3719: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.concept:type_name -> google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept
	390,  // 3720: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.Designation.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3721: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.Designation.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3722: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.Designation.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	393,  // 3723: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.Designation.language:type_name -> google.fhir.dstu2.proto.AllLanguageCode
	401,  // 3724: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.Designation.use:type_name -> google.fhir.dstu2.proto.Coding
	397,  // 3725: google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.Designation.value:type_name -> google.fhir.dstu2.proto.String
	390,  // 3726: google.fhir.dstu2.proto.ValueSet.Compose.Include.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3727: google.fhir.dstu2.proto.ValueSet.Compose.Include.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3728: google.fhir.dstu2.proto.ValueSet.Compose.Include.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 3729: google.fhir.dstu2.proto.ValueSet.Compose.Include.system:type_name -> google.fhir.dstu2.proto.Uri
	397,  // 3730: google.fhir.dstu2.proto.ValueSet.Compose.Include.version:type_name -> google.fhir.dstu2.proto.String
	383,  // 3731: google.fhir.dstu2.proto.ValueSet.Compose.Include.concept:type_name -> google.fhir.dstu2.proto.ValueSet.Compose.Include.Concept
	384,  // 3732: google.fhir.dstu2.proto.ValueSet.Compose.Include.filter:type_name -> google.fhir.dstu2.proto.ValueSet.Compose.Include.Filter
	390,  // 3733: google.fhir.dstu2.proto.ValueSet.Compose.Include.Concept.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3734: google.fhir.dstu2.proto.ValueSet.Compose.Include.Concept.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3735: google.fhir.dstu2.proto.ValueSet.Compose.Include.Concept.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	399,  // 3736: google.fhir.dstu2.proto.ValueSet.Compose.Include.Concept.code:type_name -> google.fhir.dstu2.proto.Code
	397,  // 3737: google.fhir.dstu2.proto.ValueSet.Compose.Include.Concept.display:type_name -> google.fhir.dstu2.proto.String
	381,  // 3738: google.fhir.dstu2.proto.ValueSet.Compose.Include.Concept.designation:type_name -> google.fhir.dstu2.proto.ValueSet.CodeSystem.Concept.Designation
	390,  // 3739: google.fhir.dstu2.proto.ValueSet.Compose.Include.Filter.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3740: google.fhir.dstu2.proto.ValueSet.Compose.Include.Filter.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3741: google.fhir.dstu2.proto.ValueSet.Compose.Include.Filter.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	399,  // 3742: google.fhir.dstu2.proto.ValueSet.Compose.Include.Filter.property:type_name -> google.fhir.dstu2.proto.Code
	553,  // 3743: google.fhir.dstu2.proto.ValueSet.Compose.Include.Filter.op:type_name -> google.fhir.dstu2.proto.FilterOperatorCode
	399,  // 3744: google.fhir.dstu2.proto.ValueSet.Compose.Include.Filter.value:type_name -> google.fhir.dstu2.proto.Code
	390,  // 3745: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3746: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3747: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	397,  // 3748: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.name:type_name -> google.fhir.dstu2.proto.String
	387,  // 3749: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.value:type_name -> google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.Value
	390,  // 3750: google.fhir.dstu2.proto.ValueSet.Expansion.Contains.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3751: google.fhir.dstu2.proto.ValueSet.Expansion.Contains.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3752: google.fhir.dstu2.proto.ValueSet.Expansion.Contains.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	392,  // 3753: google.fhir.dstu2.proto.ValueSet.Expansion.Contains.system:type_name -> google.fhir.dstu2.proto.Uri
	431,  // 3754: google.fhir.dstu2.proto.ValueSet.Expansion.Contains.abstract:type_name -> google.fhir.dstu2.proto.Boolean
	397,  // 3755: google.fhir.dstu2.proto.ValueSet.Expansion.Contains.version:type_name -> google.fhir.dstu2.proto.String
	399,  // 3756: google.fhir.dstu2.proto.ValueSet.Expansion.Contains.code:type_name -> google.fhir.dstu2.proto.Code
	397,  // 3757: google.fhir.dstu2.proto.ValueSet.Expansion.Contains.display:type_name -> google.fhir.dstu2.proto.String
	386,  // 3758: google.fhir.dstu2.proto.ValueSet.Expansion.Contains.contains:type_name -> google.fhir.dstu2.proto.ValueSet.Expansion.Contains
	397,  // 3759: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.Value.string_value:type_name -> google.fhir.dstu2.proto.String
	431,  // 3760: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.Value.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	530,  // 3761: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.Value.integer:type_name -> google.fhir.dstu2.proto.Integer
	505,  // 3762: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.Value.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	392,  // 3763: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.Value.uri:type_name -> google.fhir.dstu2.proto.Uri
	399,  // 3764: google.fhir.dstu2.proto.ValueSet.Expansion.Parameter.Value.code:type_name -> google.fhir.dstu2.proto.Code
	398,  // 3765: google.fhir.dstu2.proto.VisionPrescription.Reason.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	403,  // 3766: google.fhir.dstu2.proto.VisionPrescription.Reason.reference:type_name -> google.fhir.dstu2.proto.Reference
	390,  // 3767: google.fhir.dstu2.proto.VisionPrescription.Dispense.id:type_name -> google.fhir.dstu2.proto.Id
	395,  // 3768: google.fhir.dstu2.proto.VisionPrescription.Dispense.extension:type_name -> google.fhir.dstu2.proto.Extension
	395,  // 3769: google.fhir.dstu2.proto.VisionPrescription.Dispense.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	401,  // 3770: google.fhir.dstu2.proto.VisionPrescription.Dispense.product:type_name -> google.fhir.dstu2.proto.Coding
	554,  // 3771: google.fhir.dstu2.proto.VisionPrescription.Dispense.eye:type_name -> google.fhir.dstu2.proto.VisionEyesCode
	505,  // 3772: google.fhir.dstu2.proto.VisionPrescription.Dispense.sphere:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 3773: google.fhir.dstu2.proto.VisionPrescription.Dispense.cylinder:type_name -> google.fhir.dstu2.proto.Decimal
	530,  // 3774: google.fhir.dstu2.proto.VisionPrescription.Dispense.axis:type_name -> google.fhir.dstu2.proto.Integer
	505,  // 3775: google.fhir.dstu2.proto.VisionPrescription.Dispense.prism:type_name -> google.fhir.dstu2.proto.Decimal
	555,  // 3776: google.fhir.dstu2.proto.VisionPrescription.Dispense.base:type_name -> google.fhir.dstu2.proto.VisionBaseCode
	505,  // 3777: google.fhir.dstu2.proto.VisionPrescription.Dispense.add:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 3778: google.fhir.dstu2.proto.VisionPrescription.Dispense.power:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 3779: google.fhir.dstu2.proto.VisionPrescription.Dispense.back_curve:type_name -> google.fhir.dstu2.proto.Decimal
	505,  // 3780: google.fhir.dstu2.proto.VisionPrescription.Dispense.diameter:type_name -> google.fhir.dstu2.proto.Decimal
	463,  // 3781: google.fhir.dstu2.proto.VisionPrescription.Dispense.duration:type_name -> google.fhir.dstu2.proto.SimpleQuantity
	397,  // 3782: google.fhir.dstu2.proto.VisionPrescription.Dispense.color:type_name -> google.fhir.dstu2.proto.String
	397,  // 3783: google.fhir.dstu2.proto.VisionPrescription.Dispense.brand:type_name -> google.fhir.dstu2.proto.String
	397,  // 3784: google.fhir.dstu2.proto.VisionPrescription.Dispense.notes:type_name -> google.fhir.dstu2.proto.String
	3785, // [3785:3785] is the sub-list for method output_type
	3785, // [3785:3785] is the sub-list for method input_type
	3785, // [3785:3785] is the sub-list for extension type_name
	3785, // [3785:3785] is the sub-list for extension extendee
	0,    // [0:3785] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_dstu2_resources_proto_init() }
func file_proto_google_fhir_proto_dstu2_resources_proto_init() {
	if File_proto_google_fhir_proto_dstu2_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntolerance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appointment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Basic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodySite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalImpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Communication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Composition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectedIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpisodeOfCare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplanationOfBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthcareService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingObjectSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingStudy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Medication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentReconciliation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Practitioner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Procedure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskAssessment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Substance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyDelivery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionPrescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainedResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntolerance_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appointment_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Participant_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEvent_Object_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle_Entry_Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle_Entry_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle_Entry_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlan_RelatedPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlan_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlan_Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlan_Activity_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlan_Activity_Detail_Scheduled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlan_Activity_Detail_Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Payee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Diagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Coverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_MissingTeeth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item_Prosthesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim_Item_Detail_SubDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_AddItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_Coverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_Item_Adjudication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_Item_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_Item_Detail_Adjudication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_Item_Detail_SubDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_Item_Detail_SubDetail_Adjudication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_AddItem_Adjudication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_AddItem_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimResponse_AddItem_Detail_Adjudication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalImpression_Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalImpression_Investigations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalImpression_Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClinicalImpression_RuledOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Communication_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Communication_Payload_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequest_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequest_Scheduled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequest_Payload_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Composition_Attester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Composition_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Composition_Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMap_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMap_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMap_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMap_Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMap_Element_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMap_Element_Target_DependsOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Onset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Abatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Software); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Implementation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Rest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Messaging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Rest_Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Rest_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Rest_Interaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Rest_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Rest_Security_Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Rest_Resource_Interaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Rest_Resource_SearchParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Messaging_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conformance_Messaging_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_ValuedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Signer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Friendly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Legal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_ValuedItem_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ValuedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Term_ValuedItem_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Friendly_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Legal_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Rule_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElement_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElement_Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectedIssue_Mitigation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceComponent_ProductionSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetric_Calibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseRequest_BodySite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseRequest_TimingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseStatement_BodySite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseStatement_TimingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticOrder_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticOrder_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReport_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReport_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentManifest_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentManifest_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentManifest_Content_P); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentReference_RelatesTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentReference_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentReference_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentReference_Context_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encounter_StatusHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encounter_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encounter_Hospitalization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encounter_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpisodeOfCare_StatusHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpisodeOfCare_CareTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistory_Born); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistory_AgeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistory_Deceased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistory_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistory_Condition_Onset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goal_Start); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goal_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goal_Outcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goal_Outcome_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group_Characteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group_Characteristic_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthcareService_ServiceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthcareService_AvailableTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthcareService_NotAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingObjectSelection_Study); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingObjectSelection_Study_Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingObjectSelection_Study_Series_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingObjectSelection_Study_Series_Instance_Frames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingStudy_Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingStudy_Series_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization_Explanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Immunization_VaccinationProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationRecommendation_Recommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationRecommendation_Recommendation_DateCriterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmunizationRecommendation_Recommendation_Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationGuide_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationGuide_Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationGuide_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationGuide_Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationGuide_Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationGuide_Package_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationGuide_Package_Resource_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Medication_Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Medication_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Medication_Product_Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Medication_Product_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Medication_Package_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_EffectiveTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_Medication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_Dosage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_Dosage_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministration_Dosage_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_Medication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_DosageInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_DosageInstruction_AsNeeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_DosageInstruction_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_DosageInstruction_Dose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispense_DosageInstruction_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_Reason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_Medication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_DosageInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_DispenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_Substitution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_DosageInstruction_AsNeeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_DosageInstruction_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_DosageInstruction_Dose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_DosageInstruction_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationOrder_DispenseRequest_Medication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatement_ReasonForUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatement_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatement_Medication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatement_Dosage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatement_Dosage_AsNeeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatement_Dosage_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatement_Dosage_Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatement_Dosage_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeader_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeader_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeader_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystem_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystem_UniqueId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_OralDiet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_Supplement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_EnteralFormula); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_OralDiet_Nutrient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_OralDiet_Texture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_EnteralFormula_Administration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NutritionOrder_EnteralFormula_Administration_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDefinition_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDefinition_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDefinition_Parameter_Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDefinition_Parameter_Binding_ValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationOutcome_Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order_Reason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order_When); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters_Parameter_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patient_Deceased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patient_MultipleBirth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patient_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patient_Animal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patient_Communication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patient_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentReconciliation_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentReconciliation_Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Practitioner_PractitionerRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Practitioner_Qualification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Procedure_Reason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Procedure_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Procedure_Performed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Procedure_FocalDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequest_Reason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequest_Scheduled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequest_AsNeeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessResponse_Notes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provenance_Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provenance_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provenance_Agent_RelatedAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questionnaire_Group_Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponse_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponse_Group_Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponse_Group_Question_Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponse_Group_Question_Answer_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskAssessment_Prediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskAssessment_Prediction_Probability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskAssessment_Prediction_When); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParameter_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Treatment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Collection_Collected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specimen_Container_Additive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinition_Differential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Substance_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Substance_Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyRequest_Reason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyRequest_When); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Fixture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Setup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Teardown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Metadata_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Metadata_Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Setup_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Setup_Action_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Setup_Action_Assert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Setup_Action_Operation_RequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Test_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScript_Teardown_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_CodeSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_CodeSystem_Concept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_CodeSystem_Concept_Designation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose_Include); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose_Include_Concept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Compose_Include_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Contains); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet_Expansion_Parameter_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionPrescription_Reason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionPrescription_Dispense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[96].OneofWrappers = []interface{}{
		(*ContainedResource_Account)(nil),
		(*ContainedResource_AllergyIntolerance)(nil),
		(*ContainedResource_Appointment)(nil),
		(*ContainedResource_AppointmentResponse)(nil),
		(*ContainedResource_AuditEvent)(nil),
		(*ContainedResource_Basic)(nil),
		(*ContainedResource_Binary)(nil),
		(*ContainedResource_BodySite)(nil),
		(*ContainedResource_Bundle)(nil),
		(*ContainedResource_CarePlan)(nil),
		(*ContainedResource_Claim)(nil),
		(*ContainedResource_ClaimResponse)(nil),
		(*ContainedResource_ClinicalImpression)(nil),
		(*ContainedResource_Communication)(nil),
		(*ContainedResource_CommunicationRequest)(nil),
		(*ContainedResource_Composition)(nil),
		(*ContainedResource_ConceptMap)(nil),
		(*ContainedResource_Condition)(nil),
		(*ContainedResource_Conformance)(nil),
		(*ContainedResource_Contract)(nil),
		(*ContainedResource_Coverage)(nil),
		(*ContainedResource_DataElement)(nil),
		(*ContainedResource_DetectedIssue)(nil),
		(*ContainedResource_Device)(nil),
		(*ContainedResource_DeviceComponent)(nil),
		(*ContainedResource_DeviceMetric)(nil),
		(*ContainedResource_DeviceUseRequest)(nil),
		(*ContainedResource_DeviceUseStatement)(nil),
		(*ContainedResource_DiagnosticOrder)(nil),
		(*ContainedResource_DiagnosticReport)(nil),
		(*ContainedResource_DocumentManifest)(nil),
		(*ContainedResource_DocumentReference)(nil),
		(*ContainedResource_EligibilityRequest)(nil),
		(*ContainedResource_EligibilityResponse)(nil),
		(*ContainedResource_Encounter)(nil),
		(*ContainedResource_EnrollmentRequest)(nil),
		(*ContainedResource_EnrollmentResponse)(nil),
		(*ContainedResource_EpisodeOfCare)(nil),
		(*ContainedResource_ExplanationOfBenefit)(nil),
		(*ContainedResource_FamilyMemberHistory)(nil),
		(*ContainedResource_Flag)(nil),
		(*ContainedResource_Goal)(nil),
		(*ContainedResource_Group)(nil),
		(*ContainedResource_HealthcareService)(nil),
		(*ContainedResource_ImagingObjectSelection)(nil),
		(*ContainedResource_ImagingStudy)(nil),
		(*ContainedResource_Immunization)(nil),
		(*ContainedResource_ImmunizationRecommendation)(nil),
		(*ContainedResource_ImplementationGuide)(nil),
		(*ContainedResource_List)(nil),
		(*ContainedResource_Location)(nil),
		(*ContainedResource_Media)(nil),
		(*ContainedResource_Medication)(nil),
		(*ContainedResource_MedicationAdministration)(nil),
		(*ContainedResource_MedicationDispense)(nil),
		(*ContainedResource_MedicationOrder)(nil),
		(*ContainedResource_MedicationStatement)(nil),
		(*ContainedResource_MessageHeader)(nil),
		(*ContainedResource_NamingSystem)(nil),
		(*ContainedResource_NutritionOrder)(nil),
		(*ContainedResource_Observation)(nil),
		(*ContainedResource_OperationDefinition)(nil),
		(*ContainedResource_OperationOutcome)(nil),
		(*ContainedResource_Order)(nil),
		(*ContainedResource_OrderResponse)(nil),
		(*ContainedResource_Organization)(nil),
		(*ContainedResource_Parameters)(nil),
		(*ContainedResource_Patient)(nil),
		(*ContainedResource_PaymentNotice)(nil),
		(*ContainedResource_PaymentReconciliation)(nil),
		(*ContainedResource_Person)(nil),
		(*ContainedResource_Practitioner)(nil),
		(*ContainedResource_Procedure)(nil),
		(*ContainedResource_ProcedureRequest)(nil),
		(*ContainedResource_ProcessRequest)(nil),
		(*ContainedResource_ProcessResponse)(nil),
		(*ContainedResource_Provenance)(nil),
		(*ContainedResource_Questionnaire)(nil),
		(*ContainedResource_QuestionnaireResponse)(nil),
		(*ContainedResource_ReferralRequest)(nil),
		(*ContainedResource_RelatedPerson)(nil),
		(*ContainedResource_RiskAssessment)(nil),
		(*ContainedResource_Schedule)(nil),
		(*ContainedResource_SearchParameter)(nil),
		(*ContainedResource_Slot)(nil),
		(*ContainedResource_Specimen)(nil),
		(*ContainedResource_StructureDefinition)(nil),
		(*ContainedResource_Subscription)(nil),
		(*ContainedResource_Substance)(nil),
		(*ContainedResource_SupplyDelivery)(nil),
		(*ContainedResource_SupplyRequest)(nil),
		(*ContainedResource_TestScript)(nil),
		(*ContainedResource_ValueSet)(nil),
		(*ContainedResource_VisionPrescription)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[114].OneofWrappers = []interface{}{
		(*CarePlan_Activity_Detail_Scheduled_Timing)(nil),
		(*CarePlan_Activity_Detail_Scheduled_Period)(nil),
		(*CarePlan_Activity_Detail_Scheduled_StringValue)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[115].OneofWrappers = []interface{}{
		(*CarePlan_Activity_Detail_Product_CodeableConcept)(nil),
		(*CarePlan_Activity_Detail_Product_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[137].OneofWrappers = []interface{}{
		(*ClinicalImpression_Trigger_CodeableConcept)(nil),
		(*ClinicalImpression_Trigger_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[142].OneofWrappers = []interface{}{
		(*Communication_Payload_Content_StringValue)(nil),
		(*Communication_Payload_Content_Attachment)(nil),
		(*Communication_Payload_Content_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[144].OneofWrappers = []interface{}{
		(*CommunicationRequest_Scheduled_DateTime)(nil),
		(*CommunicationRequest_Scheduled_Period)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[145].OneofWrappers = []interface{}{
		(*CommunicationRequest_Payload_Content_StringValue)(nil),
		(*CommunicationRequest_Payload_Content_Attachment)(nil),
		(*CommunicationRequest_Payload_Content_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[150].OneofWrappers = []interface{}{
		(*ConceptMap_Source_Uri)(nil),
		(*ConceptMap_Source_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[151].OneofWrappers = []interface{}{
		(*ConceptMap_Target_Uri)(nil),
		(*ConceptMap_Target_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[155].OneofWrappers = []interface{}{
		(*Condition_Onset_DateTime)(nil),
		(*Condition_Onset_Quantity)(nil),
		(*Condition_Onset_Period)(nil),
		(*Condition_Onset_Range)(nil),
		(*Condition_Onset_StringValue)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[156].OneofWrappers = []interface{}{
		(*Condition_Abatement_DateTime)(nil),
		(*Condition_Abatement_Quantity)(nil),
		(*Condition_Abatement_Boolean)(nil),
		(*Condition_Abatement_Period)(nil),
		(*Condition_Abatement_Range)(nil),
		(*Condition_Abatement_StringValue)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[178].OneofWrappers = []interface{}{
		(*Contract_Binding_Attachment)(nil),
		(*Contract_Binding_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[182].OneofWrappers = []interface{}{
		(*Contract_ValuedItem_Entity_CodeableConcept)(nil),
		(*Contract_ValuedItem_Entity_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[185].OneofWrappers = []interface{}{
		(*Contract_Term_ValuedItem_Entity_CodeableConcept)(nil),
		(*Contract_Term_ValuedItem_Entity_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[186].OneofWrappers = []interface{}{
		(*Contract_Friendly_Content_Attachment)(nil),
		(*Contract_Friendly_Content_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[187].OneofWrappers = []interface{}{
		(*Contract_Legal_Content_Attachment)(nil),
		(*Contract_Legal_Content_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[188].OneofWrappers = []interface{}{
		(*Contract_Rule_Content_Attachment)(nil),
		(*Contract_Rule_Content_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[194].OneofWrappers = []interface{}{
		(*DeviceUseRequest_BodySite_CodeableConcept)(nil),
		(*DeviceUseRequest_BodySite_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[195].OneofWrappers = []interface{}{
		(*DeviceUseRequest_TimingType_TimingValue)(nil),
		(*DeviceUseRequest_TimingType_Period)(nil),
		(*DeviceUseRequest_TimingType_DateTime)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[196].OneofWrappers = []interface{}{
		(*DeviceUseStatement_BodySite_CodeableConcept)(nil),
		(*DeviceUseStatement_BodySite_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[197].OneofWrappers = []interface{}{
		(*DeviceUseStatement_TimingType_TimingValue)(nil),
		(*DeviceUseStatement_TimingType_Period)(nil),
		(*DeviceUseStatement_TimingType_DateTime)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[200].OneofWrappers = []interface{}{
		(*DiagnosticReport_Effective_DateTime)(nil),
		(*DiagnosticReport_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[204].OneofWrappers = []interface{}{
		(*DocumentManifest_Content_P_Attachment)(nil),
		(*DocumentManifest_Content_P_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[215].OneofWrappers = []interface{}{
		(*FamilyMemberHistory_Born_Period)(nil),
		(*FamilyMemberHistory_Born_Date)(nil),
		(*FamilyMemberHistory_Born_StringValue)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[216].OneofWrappers = []interface{}{
		(*FamilyMemberHistory_AgeType_Quantity)(nil),
		(*FamilyMemberHistory_AgeType_Range)(nil),
		(*FamilyMemberHistory_AgeType_StringValue)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[217].OneofWrappers = []interface{}{
		(*FamilyMemberHistory_Deceased_Boolean)(nil),
		(*FamilyMemberHistory_Deceased_Quantity)(nil),
		(*FamilyMemberHistory_Deceased_Range)(nil),
		(*FamilyMemberHistory_Deceased_Date)(nil),
		(*FamilyMemberHistory_Deceased_StringValue)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[219].OneofWrappers = []interface{}{
		(*FamilyMemberHistory_Condition_Onset_Quantity)(nil),
		(*FamilyMemberHistory_Condition_Onset_Range)(nil),
		(*FamilyMemberHistory_Condition_Onset_Period)(nil),
		(*FamilyMemberHistory_Condition_Onset_StringValue)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[220].OneofWrappers = []interface{}{
		(*Goal_Start_Date)(nil),
		(*Goal_Start_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[221].OneofWrappers = []interface{}{
		(*Goal_Target_Date)(nil),
		(*Goal_Target_Quantity)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[223].OneofWrappers = []interface{}{
		(*Goal_Outcome_Result_CodeableConcept)(nil),
		(*Goal_Outcome_Result_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[226].OneofWrappers = []interface{}{
		(*Group_Characteristic_Value_CodeableConcept)(nil),
		(*Group_Characteristic_Value_Boolean)(nil),
		(*Group_Characteristic_Value_Quantity)(nil),
		(*Group_Characteristic_Value_Range)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[248].OneofWrappers = []interface{}{
		(*ImplementationGuide_Package_Resource_Source_Uri)(nil),
		(*ImplementationGuide_Package_Resource_Source_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[256].OneofWrappers = []interface{}{
		(*MedicationAdministration_EffectiveTime_DateTime)(nil),
		(*MedicationAdministration_EffectiveTime_Period)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[257].OneofWrappers = []interface{}{
		(*MedicationAdministration_Medication_CodeableConcept)(nil),
		(*MedicationAdministration_Medication_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[259].OneofWrappers = []interface{}{
		(*MedicationAdministration_Dosage_Site_CodeableConcept)(nil),
		(*MedicationAdministration_Dosage_Site_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[260].OneofWrappers = []interface{}{
		(*MedicationAdministration_Dosage_Rate_Ratio)(nil),
		(*MedicationAdministration_Dosage_Rate_Range)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[261].OneofWrappers = []interface{}{
		(*MedicationDispense_Medication_CodeableConcept)(nil),
		(*MedicationDispense_Medication_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[264].OneofWrappers = []interface{}{
		(*MedicationDispense_DosageInstruction_AsNeeded_Boolean)(nil),
		(*MedicationDispense_DosageInstruction_AsNeeded_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[265].OneofWrappers = []interface{}{
		(*MedicationDispense_DosageInstruction_Site_CodeableConcept)(nil),
		(*MedicationDispense_DosageInstruction_Site_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[266].OneofWrappers = []interface{}{
		(*MedicationDispense_DosageInstruction_Dose_Range)(nil),
		(*MedicationDispense_DosageInstruction_Dose_Quantity)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[267].OneofWrappers = []interface{}{
		(*MedicationDispense_DosageInstruction_Rate_Ratio)(nil),
		(*MedicationDispense_DosageInstruction_Rate_Range)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[268].OneofWrappers = []interface{}{
		(*MedicationOrder_Reason_CodeableConcept)(nil),
		(*MedicationOrder_Reason_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[269].OneofWrappers = []interface{}{
		(*MedicationOrder_Medication_CodeableConcept)(nil),
		(*MedicationOrder_Medication_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[273].OneofWrappers = []interface{}{
		(*MedicationOrder_DosageInstruction_AsNeeded_Boolean)(nil),
		(*MedicationOrder_DosageInstruction_AsNeeded_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[274].OneofWrappers = []interface{}{
		(*MedicationOrder_DosageInstruction_Site_CodeableConcept)(nil),
		(*MedicationOrder_DosageInstruction_Site_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[275].OneofWrappers = []interface{}{
		(*MedicationOrder_DosageInstruction_Dose_Range)(nil),
		(*MedicationOrder_DosageInstruction_Dose_Quantity)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[276].OneofWrappers = []interface{}{
		(*MedicationOrder_DosageInstruction_Rate_Ratio)(nil),
		(*MedicationOrder_DosageInstruction_Rate_Range)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[277].OneofWrappers = []interface{}{
		(*MedicationOrder_DispenseRequest_Medication_CodeableConcept)(nil),
		(*MedicationOrder_DispenseRequest_Medication_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[278].OneofWrappers = []interface{}{
		(*MedicationStatement_ReasonForUse_CodeableConcept)(nil),
		(*MedicationStatement_ReasonForUse_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[279].OneofWrappers = []interface{}{
		(*MedicationStatement_Effective_DateTime)(nil),
		(*MedicationStatement_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[280].OneofWrappers = []interface{}{
		(*MedicationStatement_Medication_CodeableConcept)(nil),
		(*MedicationStatement_Medication_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[282].OneofWrappers = []interface{}{
		(*MedicationStatement_Dosage_AsNeeded_Boolean)(nil),
		(*MedicationStatement_Dosage_AsNeeded_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[283].OneofWrappers = []interface{}{
		(*MedicationStatement_Dosage_Site_CodeableConcept)(nil),
		(*MedicationStatement_Dosage_Site_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[284].OneofWrappers = []interface{}{
		(*MedicationStatement_Dosage_Quantity_QuantityValue)(nil),
		(*MedicationStatement_Dosage_Quantity_Range)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[285].OneofWrappers = []interface{}{
		(*MedicationStatement_Dosage_Rate_Ratio)(nil),
		(*MedicationStatement_Dosage_Rate_Range)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[297].OneofWrappers = []interface{}{
		(*NutritionOrder_EnteralFormula_Administration_Rate_Quantity)(nil),
		(*NutritionOrder_EnteralFormula_Administration_Rate_Ratio)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[298].OneofWrappers = []interface{}{
		(*Observation_Effective_DateTime)(nil),
		(*Observation_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[299].OneofWrappers = []interface{}{
		(*Observation_Value_Quantity)(nil),
		(*Observation_Value_CodeableConcept)(nil),
		(*Observation_Value_StringValue)(nil),
		(*Observation_Value_Range)(nil),
		(*Observation_Value_Ratio)(nil),
		(*Observation_Value_SampledData)(nil),
		(*Observation_Value_Attachment)(nil),
		(*Observation_Value_Time)(nil),
		(*Observation_Value_DateTime)(nil),
		(*Observation_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[303].OneofWrappers = []interface{}{
		(*Observation_Component_Value_Quantity)(nil),
		(*Observation_Component_Value_CodeableConcept)(nil),
		(*Observation_Component_Value_StringValue)(nil),
		(*Observation_Component_Value_Range)(nil),
		(*Observation_Component_Value_Ratio)(nil),
		(*Observation_Component_Value_SampledData)(nil),
		(*Observation_Component_Value_Attachment)(nil),
		(*Observation_Component_Value_Time)(nil),
		(*Observation_Component_Value_DateTime)(nil),
		(*Observation_Component_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[307].OneofWrappers = []interface{}{
		(*OperationDefinition_Parameter_Binding_ValueSet_Uri)(nil),
		(*OperationDefinition_Parameter_Binding_ValueSet_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[309].OneofWrappers = []interface{}{
		(*Order_Reason_CodeableConcept)(nil),
		(*Order_Reason_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[313].OneofWrappers = []interface{}{
		(*Parameters_Parameter_Value_Boolean)(nil),
		(*Parameters_Parameter_Value_Integer)(nil),
		(*Parameters_Parameter_Value_Decimal)(nil),
		(*Parameters_Parameter_Value_Base64Binary)(nil),
		(*Parameters_Parameter_Value_Instant)(nil),
		(*Parameters_Parameter_Value_StringValue)(nil),
		(*Parameters_Parameter_Value_Uri)(nil),
		(*Parameters_Parameter_Value_Date)(nil),
		(*Parameters_Parameter_Value_DateTime)(nil),
		(*Parameters_Parameter_Value_Time)(nil),
		(*Parameters_Parameter_Value_Code)(nil),
		(*Parameters_Parameter_Value_Oid)(nil),
		(*Parameters_Parameter_Value_Id)(nil),
		(*Parameters_Parameter_Value_UnsignedInt)(nil),
		(*Parameters_Parameter_Value_PositiveInt)(nil),
		(*Parameters_Parameter_Value_Markdown)(nil),
		(*Parameters_Parameter_Value_Annotation)(nil),
		(*Parameters_Parameter_Value_Attachment)(nil),
		(*Parameters_Parameter_Value_Identifier)(nil),
		(*Parameters_Parameter_Value_CodeableConcept)(nil),
		(*Parameters_Parameter_Value_Coding)(nil),
		(*Parameters_Parameter_Value_Quantity)(nil),
		(*Parameters_Parameter_Value_Range)(nil),
		(*Parameters_Parameter_Value_Period)(nil),
		(*Parameters_Parameter_Value_Ratio)(nil),
		(*Parameters_Parameter_Value_SampledData)(nil),
		(*Parameters_Parameter_Value_Signature)(nil),
		(*Parameters_Parameter_Value_HumanName)(nil),
		(*Parameters_Parameter_Value_Address)(nil),
		(*Parameters_Parameter_Value_ContactPoint)(nil),
		(*Parameters_Parameter_Value_Timing)(nil),
		(*Parameters_Parameter_Value_Reference)(nil),
		(*Parameters_Parameter_Value_Meta)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[314].OneofWrappers = []interface{}{
		(*Patient_Deceased_Boolean)(nil),
		(*Patient_Deceased_DateTime)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[315].OneofWrappers = []interface{}{
		(*Patient_MultipleBirth_Boolean)(nil),
		(*Patient_MultipleBirth_Integer)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[325].OneofWrappers = []interface{}{
		(*Procedure_Reason_CodeableConcept)(nil),
		(*Procedure_Reason_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[327].OneofWrappers = []interface{}{
		(*Procedure_Performed_DateTime)(nil),
		(*Procedure_Performed_Period)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[329].OneofWrappers = []interface{}{
		(*ProcedureRequest_Reason_CodeableConcept)(nil),
		(*ProcedureRequest_Reason_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[330].OneofWrappers = []interface{}{
		(*ProcedureRequest_Scheduled_DateTime)(nil),
		(*ProcedureRequest_Scheduled_Period)(nil),
		(*ProcedureRequest_Scheduled_Timing)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[331].OneofWrappers = []interface{}{
		(*ProcedureRequest_AsNeeded_Boolean)(nil),
		(*ProcedureRequest_AsNeeded_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[342].OneofWrappers = []interface{}{
		(*QuestionnaireResponse_Group_Question_Answer_Value_Boolean)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Decimal)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Integer)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Date)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_DateTime)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Instant)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Time)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_StringValue)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Uri)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Attachment)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Coding)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Quantity)(nil),
		(*QuestionnaireResponse_Group_Question_Answer_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[344].OneofWrappers = []interface{}{
		(*RiskAssessment_Prediction_Probability_Decimal)(nil),
		(*RiskAssessment_Prediction_Probability_Range)(nil),
		(*RiskAssessment_Prediction_Probability_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[345].OneofWrappers = []interface{}{
		(*RiskAssessment_Prediction_When_Period)(nil),
		(*RiskAssessment_Prediction_When_Range)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[350].OneofWrappers = []interface{}{
		(*Specimen_Collection_Collected_DateTime)(nil),
		(*Specimen_Collection_Collected_Period)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[351].OneofWrappers = []interface{}{
		(*Specimen_Container_Additive_CodeableConcept)(nil),
		(*Specimen_Container_Additive_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[359].OneofWrappers = []interface{}{
		(*SupplyRequest_Reason_CodeableConcept)(nil),
		(*SupplyRequest_Reason_Reference)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[387].OneofWrappers = []interface{}{
		(*ValueSet_Expansion_Parameter_Value_StringValue)(nil),
		(*ValueSet_Expansion_Parameter_Value_Boolean)(nil),
		(*ValueSet_Expansion_Parameter_Value_Integer)(nil),
		(*ValueSet_Expansion_Parameter_Value_Decimal)(nil),
		(*ValueSet_Expansion_Parameter_Value_Uri)(nil),
		(*ValueSet_Expansion_Parameter_Value_Code)(nil),
	}
	file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes[388].OneofWrappers = []interface{}{
		(*VisionPrescription_Reason_CodeableConcept)(nil),
		(*VisionPrescription_Reason_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_dstu2_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   390,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_dstu2_resources_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_dstu2_resources_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_dstu2_resources_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_dstu2_resources_proto = out.File
	file_proto_google_fhir_proto_dstu2_resources_proto_rawDesc = nil
	file_proto_google_fhir_proto_dstu2_resources_proto_goTypes = nil
	file_proto_google_fhir_proto_dstu2_resources_proto_depIdxs = nil
}

//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/dstu2/metadatatypes.proto

package metadatatypes_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/dstu2/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/dstu2/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for BackboneElement.
// Base for elements defined inside a resource.
// See http://hl7.org/fhir/StructureDefinition/BackboneElement
type BackboneElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
}

func (x *BackboneElement) Reset() {
	*x = BackboneElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackboneElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackboneElement) ProtoMessage() {}

func (x *BackboneElement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackboneElement.ProtoReflect.Descriptor instead.
func (*BackboneElement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{0}
}

func (x *BackboneElement) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BackboneElement) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *BackboneElement) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

// Auto-generated from StructureDefinition for Element.
// Base for all elements.
// See http://hl7.org/fhir/StructureDefinition/Element
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{1}
}

func (x *Element) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Element) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for ElementDefinition.
// Definition of an element in a resource or extension.
// See http://hl7.org/fhir/StructureDefinition/ElementDefinition
type ElementDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The path of the element (see the Detailed Descriptions)
	Path *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// How this element is represented in instances
	Representation []*codes_go_proto.PropertyRepresentationCode `protobuf:"bytes,4,rep,name=representation,proto3" json:"representation,omitempty"`
	// Name for this particular element definition (reference target)
	Name *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Name for element to display with or prompt for element
	Label *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// Defining code
	Code    []*datatypes_go_proto.Coding `protobuf:"bytes,7,rep,name=code,proto3" json:"code,omitempty"`
	Slicing *ElementDefinition_Slicing   `protobuf:"bytes,8,opt,name=slicing,proto3" json:"slicing,omitempty"`
	// Concise definition for xml presentation
	Short *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=short,proto3" json:"short,omitempty"`
	// Full formal definition as narrative text
	Definition *datatypes_go_proto.Markdown `protobuf:"bytes,10,opt,name=definition,proto3" json:"definition,omitempty"`
	// Comments about the use of this element
	Comments *datatypes_go_proto.Markdown `protobuf:"bytes,11,opt,name=comments,proto3" json:"comments,omitempty"`
	// Why is this needed?
	Requirements *datatypes_go_proto.Markdown `protobuf:"bytes,12,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Other names
	Alias []*datatypes_go_proto.String `protobuf:"bytes,13,rep,name=alias,proto3" json:"alias,omitempty"`
	// Minimum Cardinality
	Min *datatypes_go_proto.Integer `protobuf:"bytes,14,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum Cardinality (a number or *)
	Max  *datatypes_go_proto.String `protobuf:"bytes,15,opt,name=max,proto3" json:"max,omitempty"`
	Base *ElementDefinition_Base    `protobuf:"bytes,16,opt,name=base,proto3" json:"base,omitempty"`
	Type []*ElementDefinition_Type  `protobuf:"bytes,17,rep,name=type,proto3" json:"type,omitempty"`
	// To another element constraint (by element.name)
	NameReference *datatypes_go_proto.String      `protobuf:"bytes,18,opt,name=name_reference,json=nameReference,proto3" json:"name_reference,omitempty"`
	DefaultValue  *ElementDefinition_DefaultValue `protobuf:"bytes,19,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Implicit meaning when this element is missing
	MeaningWhenMissing *datatypes_go_proto.Markdown `protobuf:"bytes,20,opt,name=meaning_when_missing,json=meaningWhenMissing,proto3" json:"meaning_when_missing,omitempty"`
	Fixed              *ElementDefinition_Fixed     `protobuf:"bytes,21,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Pattern            *ElementDefinition_Pattern   `protobuf:"bytes,22,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Example            *ElementDefinition_Example   `protobuf:"bytes,23,opt,name=example,proto3" json:"example,omitempty"`
	MinValue           *ElementDefinition_MinValue  `protobuf:"bytes,24,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue           *ElementDefinition_MaxValue  `protobuf:"bytes,25,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// Max length for strings
	MaxLength *datatypes_go_proto.Integer `protobuf:"bytes,26,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	// Reference to invariant about presence
	Condition  []*datatypes_go_proto.Id        `protobuf:"bytes,27,rep,name=condition,proto3" json:"condition,omitempty"`
	Constraint []*ElementDefinition_Constraint `protobuf:"bytes,28,rep,name=constraint,proto3" json:"constraint,omitempty"`
	// If the element must supported
	MustSupport *datatypes_go_proto.Boolean `protobuf:"bytes,29,opt,name=must_support,json=mustSupport,proto3" json:"must_support,omitempty"`
	// If this modifies the meaning of other elements
	IsModifier *datatypes_go_proto.Boolean `protobuf:"bytes,30,opt,name=is_modifier,json=isModifier,proto3" json:"is_modifier,omitempty"`
	// Include when _summary = true?
	IsSummary *datatypes_go_proto.Boolean  `protobuf:"bytes,31,opt,name=is_summary,json=isSummary,proto3" json:"is_summary,omitempty"`
	Binding   *ElementDefinition_Binding   `protobuf:"bytes,32,opt,name=binding,proto3" json:"binding,omitempty"`
	Mapping   []*ElementDefinition_Mapping `protobuf:"bytes,33,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *ElementDefinition) Reset() {
	*x = ElementDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition) ProtoMessage() {}

func (x *ElementDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition.ProtoReflect.Descriptor instead.
func (*ElementDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2}
}

func (x *ElementDefinition) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ElementDefinition) GetRepresentation() []*codes_go_proto.PropertyRepresentationCode {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *ElementDefinition) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ElementDefinition) GetLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ElementDefinition) GetCode() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition) GetSlicing() *ElementDefinition_Slicing {
	if x != nil {
		return x.Slicing
	}
	return nil
}

func (x *ElementDefinition) GetShort() *datatypes_go_proto.String {
	if x != nil {
		return x.Short
	}
	return nil
}

func (x *ElementDefinition) GetDefinition() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *ElementDefinition) GetComments() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *ElementDefinition) GetRequirements() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ElementDefinition) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *ElementDefinition) GetMin() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ElementDefinition) GetMax() *datatypes_go_proto.String {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *ElementDefinition) GetBase() *ElementDefinition_Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ElementDefinition) GetType() []*ElementDefinition_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ElementDefinition) GetNameReference() *datatypes_go_proto.String {
	if x != nil {
		return x.NameReference
	}
	return nil
}

func (x *ElementDefinition) GetDefaultValue() *ElementDefinition_DefaultValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ElementDefinition) GetMeaningWhenMissing() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.MeaningWhenMissing
	}
	return nil
}

func (x *ElementDefinition) GetFixed() *ElementDefinition_Fixed {
	if x != nil {
		return x.Fixed
	}
	return nil
}

func (x *ElementDefinition) GetPattern() *ElementDefinition_Pattern {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *ElementDefinition) GetExample() *ElementDefinition_Example {
	if x != nil {
		return x.Example
	}
	return nil
}

func (x *ElementDefinition) GetMinValue() *ElementDefinition_MinValue {
	if x != nil {
		return x.MinValue
	}
	return nil
}

func (x *ElementDefinition) GetMaxValue() *ElementDefinition_MaxValue {
	if x != nil {
		return x.MaxValue
	}
	return nil
}

func (x *ElementDefinition) GetMaxLength() *datatypes_go_proto.Integer {
	if x != nil {
		return x.MaxLength
	}
	return nil
}

func (x *ElementDefinition) GetCondition() []*datatypes_go_proto.Id {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ElementDefinition) GetConstraint() []*ElementDefinition_Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *ElementDefinition) GetMustSupport() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.MustSupport
	}
	return nil
}

func (x *ElementDefinition) GetIsModifier() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsModifier
	}
	return nil
}

func (x *ElementDefinition) GetIsSummary() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.IsSummary
	}
	return nil
}

func (x *ElementDefinition) GetBinding() *ElementDefinition_Binding {
	if x != nil {
		return x.Binding
	}
	return nil
}

func (x *ElementDefinition) GetMapping() []*ElementDefinition_Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

// Auto-generated from StructureDefinition for Narrative.
// A human-readable formatted text, including images.
// See http://hl7.org/fhir/StructureDefinition/Narrative
type Narrative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// generated | extensions | additional | empty
	Status *codes_go_proto.NarrativeStatusCode `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Limited xhtml content
	Div *datatypes_go_proto.Xhtml `protobuf:"bytes,4,opt,name=div,proto3" json:"div,omitempty"`
}

func (x *Narrative) Reset() {
	*x = Narrative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Narrative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Narrative) ProtoMessage() {}

func (x *Narrative) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Narrative.ProtoReflect.Descriptor instead.
func (*Narrative) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{3}
}

func (x *Narrative) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Narrative) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Narrative) GetStatus() *codes_go_proto.NarrativeStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Narrative) GetDiv() *datatypes_go_proto.Xhtml {
	if x != nil {
		return x.Div
	}
	return nil
}

// This element is sliced - slices follow
type ElementDefinition_Slicing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Element values that used to distinguish the slices
	Discriminator []*datatypes_go_proto.String `protobuf:"bytes,3,rep,name=discriminator,proto3" json:"discriminator,omitempty"`
	// Text description of how slicing works (or not)
	Description *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// If elements must be in same order as slices
	Ordered *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=ordered,proto3" json:"ordered,omitempty"`
	// closed | open | openAtEnd
	Rules *codes_go_proto.SlicingRulesCode `protobuf:"bytes,6,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ElementDefinition_Slicing) Reset() {
	*x = ElementDefinition_Slicing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Slicing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Slicing) ProtoMessage() {}

func (x *ElementDefinition_Slicing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Slicing.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Slicing) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ElementDefinition_Slicing) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetDiscriminator() []*datatypes_go_proto.String {
	if x != nil {
		return x.Discriminator
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetOrdered() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Ordered
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetRules() *codes_go_proto.SlicingRulesCode {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Base definition information for tools
type ElementDefinition_Base struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Path that identifies the base element
	Path *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Min cardinality of the base element
	Min *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=min,proto3" json:"min,omitempty"`
	// Max cardinality of the base element
	Max *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ElementDefinition_Base) Reset() {
	*x = ElementDefinition_Base{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Base) ProtoMessage() {}

func (x *ElementDefinition_Base) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Base.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Base) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ElementDefinition_Base) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Base) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Base) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ElementDefinition_Base) GetMin() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ElementDefinition_Base) GetMax() *datatypes_go_proto.String {
	if x != nil {
		return x.Max
	}
	return nil
}

// Data type and Profile for this element
type ElementDefinition_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Name of Data type or Resource
	Code *codes_go_proto.FHIRDefinedTypeCode `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Profile (StructureDefinition) to apply (or IG)
	Profile []*datatypes_go_proto.Uri `protobuf:"bytes,4,rep,name=profile,proto3" json:"profile,omitempty"`
	// contained | referenced | bundled - how aggregated
	Aggregation []*codes_go_proto.AggregationModeCode `protobuf:"bytes,5,rep,name=aggregation,proto3" json:"aggregation,omitempty"`
}

func (x *ElementDefinition_Type) Reset() {
	*x = ElementDefinition_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Type) ProtoMessage() {}

func (x *ElementDefinition_Type) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Type.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Type) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ElementDefinition_Type) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Type) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Type) GetCode() *codes_go_proto.FHIRDefinedTypeCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_Type) GetProfile() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ElementDefinition_Type) GetAggregation() []*codes_go_proto.AggregationModeCode {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

// Specified value it missing from instance
type ElementDefinition_DefaultValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DefaultValue:
	//	*ElementDefinition_DefaultValue_Boolean
	//	*ElementDefinition_DefaultValue_Integer
	//	*ElementDefinition_DefaultValue_Decimal
	//	*ElementDefinition_DefaultValue_Base64Binary
	//	*ElementDefinition_DefaultValue_Instant
	//	*ElementDefinition_DefaultValue_StringValue
	//	*ElementDefinition_DefaultValue_Uri
	//	*ElementDefinition_DefaultValue_Date
	//	*ElementDefinition_DefaultValue_DateTime
	//	*ElementDefinition_DefaultValue_Time
	//	*ElementDefinition_DefaultValue_Code
	//	*ElementDefinition_DefaultValue_Oid
	//	*ElementDefinition_DefaultValue_Id
	//	*ElementDefinition_DefaultValue_UnsignedInt
	//	*ElementDefinition_DefaultValue_PositiveInt
	//	*ElementDefinition_DefaultValue_Markdown
	//	*ElementDefinition_DefaultValue_Annotation
	//	*ElementDefinition_DefaultValue_Attachment
	//	*ElementDefinition_DefaultValue_Identifier
	//	*ElementDefinition_DefaultValue_CodeableConcept
	//	*ElementDefinition_DefaultValue_Coding
	//	*ElementDefinition_DefaultValue_Quantity
	//	*ElementDefinition_DefaultValue_Range
	//	*ElementDefinition_DefaultValue_Period
	//	*ElementDefinition_DefaultValue_Ratio
	//	*ElementDefinition_DefaultValue_SampledData
	//	*ElementDefinition_DefaultValue_Signature
	//	*ElementDefinition_DefaultValue_HumanName
	//	*ElementDefinition_DefaultValue_Address
	//	*ElementDefinition_DefaultValue_ContactPoint
	//	*ElementDefinition_DefaultValue_Timing
	//	*ElementDefinition_DefaultValue_Reference
	//	*ElementDefinition_DefaultValue_Meta
	DefaultValue isElementDefinition_DefaultValue_DefaultValue `protobuf_oneof:"default_value"`
}

func (x *ElementDefinition_DefaultValue) Reset() {
	*x = ElementDefinition_DefaultValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_DefaultValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_DefaultValue) ProtoMessage() {}

func (x *ElementDefinition_DefaultValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_DefaultValue.ProtoReflect.Descriptor instead.
func (*ElementDefinition_DefaultValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 3}
}

func (m *ElementDefinition_DefaultValue) GetDefaultValue() isElementDefinition_DefaultValue_DefaultValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_DefaultValue) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetDefaultValue().(*ElementDefinition_DefaultValue_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_DefaultValue_DefaultValue interface {
	isElementDefinition_DefaultValue_DefaultValue()
}

type ElementDefinition_DefaultValue_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,4,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,5,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_DefaultValue_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,7,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,8,opt,name=date,proto3,oneof"`
}

type ElementDefinition_DefaultValue_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,10,opt,name=time,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,11,opt,name=code,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,13,opt,name=id,proto3,oneof"`
}

type ElementDefinition_DefaultValue_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_DefaultValue_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,15,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,16,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,17,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,18,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,19,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_DefaultValue_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,21,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,22,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,23,opt,name=range,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,24,opt,name=period,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,25,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_DefaultValue_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,26,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,27,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_DefaultValue_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,28,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,29,opt,name=address,proto3,oneof"`
}

type ElementDefinition_DefaultValue_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,30,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,31,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_DefaultValue_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,33,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_DefaultValue_Boolean) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Integer) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Decimal) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Base64Binary) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Instant) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_StringValue) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Uri) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Date) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_DateTime) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Time) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Code) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Oid) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Id) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_UnsignedInt) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_PositiveInt) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Markdown) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Annotation) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Attachment) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Identifier) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_CodeableConcept) isElementDefinition_DefaultValue_DefaultValue() {
}

func (*ElementDefinition_DefaultValue_Coding) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Quantity) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Range) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Period) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Ratio) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_SampledData) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Signature) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_HumanName) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Address) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_ContactPoint) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Timing) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Reference) isElementDefinition_DefaultValue_DefaultValue() {}

func (*ElementDefinition_DefaultValue_Meta) isElementDefinition_DefaultValue_DefaultValue() {}

// Value must be exactly this
type ElementDefinition_Fixed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Fixed:
	//	*ElementDefinition_Fixed_Boolean
	//	*ElementDefinition_Fixed_Integer
	//	*ElementDefinition_Fixed_Decimal
	//	*ElementDefinition_Fixed_Base64Binary
	//	*ElementDefinition_Fixed_Instant
	//	*ElementDefinition_Fixed_StringValue
	//	*ElementDefinition_Fixed_Uri
	//	*ElementDefinition_Fixed_Date
	//	*ElementDefinition_Fixed_DateTime
	//	*ElementDefinition_Fixed_Time
	//	*ElementDefinition_Fixed_Code
	//	*ElementDefinition_Fixed_Oid
	//	*ElementDefinition_Fixed_Id
	//	*ElementDefinition_Fixed_UnsignedInt
	//	*ElementDefinition_Fixed_PositiveInt
	//	*ElementDefinition_Fixed_Markdown
	//	*ElementDefinition_Fixed_Annotation
	//	*ElementDefinition_Fixed_Attachment
	//	*ElementDefinition_Fixed_Identifier
	//	*ElementDefinition_Fixed_CodeableConcept
	//	*ElementDefinition_Fixed_Coding
	//	*ElementDefinition_Fixed_Quantity
	//	*ElementDefinition_Fixed_Range
	//	*ElementDefinition_Fixed_Period
	//	*ElementDefinition_Fixed_Ratio
	//	*ElementDefinition_Fixed_SampledData
	//	*ElementDefinition_Fixed_Signature
	//	*ElementDefinition_Fixed_HumanName
	//	*ElementDefinition_Fixed_Address
	//	*ElementDefinition_Fixed_ContactPoint
	//	*ElementDefinition_Fixed_Timing
	//	*ElementDefinition_Fixed_Reference
	//	*ElementDefinition_Fixed_Meta
	Fixed isElementDefinition_Fixed_Fixed `protobuf_oneof:"fixed"`
}

func (x *ElementDefinition_Fixed) Reset() {
	*x = ElementDefinition_Fixed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Fixed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Fixed) ProtoMessage() {}

func (x *ElementDefinition_Fixed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Fixed.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Fixed) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 4}
}

func (m *ElementDefinition_Fixed) GetFixed() isElementDefinition_Fixed_Fixed {
	if m != nil {
		return m.Fixed
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_Fixed) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetFixed().(*ElementDefinition_Fixed_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_Fixed_Fixed interface {
	isElementDefinition_Fixed_Fixed()
}

type ElementDefinition_Fixed_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Fixed_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Fixed_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Fixed_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,4,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Fixed_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,5,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Fixed_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Fixed_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,7,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Fixed_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,8,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Fixed_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Fixed_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,10,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Fixed_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,11,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Fixed_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Fixed_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,13,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Fixed_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Fixed_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,15,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Fixed_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,16,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Fixed_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,17,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Fixed_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,18,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Fixed_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,19,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Fixed_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Fixed_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,21,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Fixed_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,22,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Fixed_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,23,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Fixed_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,24,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Fixed_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,25,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Fixed_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,26,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Fixed_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,27,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Fixed_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,28,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Fixed_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,29,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Fixed_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,30,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Fixed_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,31,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Fixed_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Fixed_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,33,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Fixed_Boolean) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Integer) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Decimal) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Base64Binary) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Instant) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_StringValue) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Uri) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Date) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_DateTime) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Time) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Code) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Oid) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Id) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_UnsignedInt) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_PositiveInt) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Markdown) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Annotation) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Attachment) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Identifier) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_CodeableConcept) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Coding) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Quantity) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Range) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Period) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Ratio) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_SampledData) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Signature) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_HumanName) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Address) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_ContactPoint) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Timing) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Reference) isElementDefinition_Fixed_Fixed() {}

func (*ElementDefinition_Fixed_Meta) isElementDefinition_Fixed_Fixed() {}

// Value must have at least these property values
type ElementDefinition_Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Pattern:
	//	*ElementDefinition_Pattern_Boolean
	//	*ElementDefinition_Pattern_Integer
	//	*ElementDefinition_Pattern_Decimal
	//	*ElementDefinition_Pattern_Base64Binary
	//	*ElementDefinition_Pattern_Instant
	//	*ElementDefinition_Pattern_StringValue
	//	*ElementDefinition_Pattern_Uri
	//	*ElementDefinition_Pattern_Date
	//	*ElementDefinition_Pattern_DateTime
	//	*ElementDefinition_Pattern_Time
	//	*ElementDefinition_Pattern_Code
	//	*ElementDefinition_Pattern_Oid
	//	*ElementDefinition_Pattern_Id
	//	*ElementDefinition_Pattern_UnsignedInt
	//	*ElementDefinition_Pattern_PositiveInt
	//	*ElementDefinition_Pattern_Markdown
	//	*ElementDefinition_Pattern_Annotation
	//	*ElementDefinition_Pattern_Attachment
	//	*ElementDefinition_Pattern_Identifier
	//	*ElementDefinition_Pattern_CodeableConcept
	//	*ElementDefinition_Pattern_Coding
	//	*ElementDefinition_Pattern_Quantity
	//	*ElementDefinition_Pattern_Range
	//	*ElementDefinition_Pattern_Period
	//	*ElementDefinition_Pattern_Ratio
	//	*ElementDefinition_Pattern_SampledData
	//	*ElementDefinition_Pattern_Signature
	//	*ElementDefinition_Pattern_HumanName
	//	*ElementDefinition_Pattern_Address
	//	*ElementDefinition_Pattern_ContactPoint
	//	*ElementDefinition_Pattern_Timing
	//	*ElementDefinition_Pattern_Reference
	//	*ElementDefinition_Pattern_Meta
	Pattern isElementDefinition_Pattern_Pattern `protobuf_oneof:"pattern"`
}

func (x *ElementDefinition_Pattern) Reset() {
	*x = ElementDefinition_Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Pattern) ProtoMessage() {}

func (x *ElementDefinition_Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Pattern.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Pattern) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 5}
}

func (m *ElementDefinition_Pattern) GetPattern() isElementDefinition_Pattern_Pattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_Pattern) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetPattern().(*ElementDefinition_Pattern_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_Pattern_Pattern interface {
	isElementDefinition_Pattern_Pattern()
}

type ElementDefinition_Pattern_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Pattern_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Pattern_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Pattern_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,4,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Pattern_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,5,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Pattern_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Pattern_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,7,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Pattern_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,8,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Pattern_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Pattern_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,10,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Pattern_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,11,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Pattern_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Pattern_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,13,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Pattern_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Pattern_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,15,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Pattern_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,16,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Pattern_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,17,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Pattern_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,18,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Pattern_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,19,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Pattern_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Pattern_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,21,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Pattern_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,22,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Pattern_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,23,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Pattern_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,24,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Pattern_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,25,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Pattern_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,26,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Pattern_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,27,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Pattern_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,28,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Pattern_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,29,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Pattern_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,30,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Pattern_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,31,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Pattern_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Pattern_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,33,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Pattern_Boolean) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Integer) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Decimal) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Base64Binary) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Instant) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_StringValue) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Uri) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Date) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_DateTime) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Time) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Code) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Oid) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Id) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_UnsignedInt) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_PositiveInt) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Markdown) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Annotation) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Attachment) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Identifier) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_CodeableConcept) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Coding) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Quantity) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Range) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Period) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Ratio) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_SampledData) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Signature) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_HumanName) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Address) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_ContactPoint) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Timing) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Reference) isElementDefinition_Pattern_Pattern() {}

func (*ElementDefinition_Pattern_Meta) isElementDefinition_Pattern_Pattern() {}

// Example value: [as defined for type]
type ElementDefinition_Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Example:
	//	*ElementDefinition_Example_Boolean
	//	*ElementDefinition_Example_Integer
	//	*ElementDefinition_Example_Decimal
	//	*ElementDefinition_Example_Base64Binary
	//	*ElementDefinition_Example_Instant
	//	*ElementDefinition_Example_StringValue
	//	*ElementDefinition_Example_Uri
	//	*ElementDefinition_Example_Date
	//	*ElementDefinition_Example_DateTime
	//	*ElementDefinition_Example_Time
	//	*ElementDefinition_Example_Code
	//	*ElementDefinition_Example_Oid
	//	*ElementDefinition_Example_Id
	//	*ElementDefinition_Example_UnsignedInt
	//	*ElementDefinition_Example_PositiveInt
	//	*ElementDefinition_Example_Markdown
	//	*ElementDefinition_Example_Annotation
	//	*ElementDefinition_Example_Attachment
	//	*ElementDefinition_Example_Identifier
	//	*ElementDefinition_Example_CodeableConcept
	//	*ElementDefinition_Example_Coding
	//	*ElementDefinition_Example_Quantity
	//	*ElementDefinition_Example_Range
	//	*ElementDefinition_Example_Period
	//	*ElementDefinition_Example_Ratio
	//	*ElementDefinition_Example_SampledData
	//	*ElementDefinition_Example_Signature
	//	*ElementDefinition_Example_HumanName
	//	*ElementDefinition_Example_Address
	//	*ElementDefinition_Example_ContactPoint
	//	*ElementDefinition_Example_Timing
	//	*ElementDefinition_Example_Reference
	//	*ElementDefinition_Example_Meta
	Example isElementDefinition_Example_Example `protobuf_oneof:"example"`
}

func (x *ElementDefinition_Example) Reset() {
	*x = ElementDefinition_Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Example) ProtoMessage() {}

func (x *ElementDefinition_Example) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Example.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Example) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 6}
}

func (m *ElementDefinition_Example) GetExample() isElementDefinition_Example_Example {
	if m != nil {
		return m.Example
	}
	return nil
}

func (x *ElementDefinition_Example) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_Example) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_Example) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_Example) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_Example) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_Example) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetExample().(*ElementDefinition_Example_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_Example) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_Example) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_Example) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetExample().(*ElementDefinition_Example_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_Example) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_Example) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_Example) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_Example) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Example) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetExample().(*ElementDefinition_Example_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_Example) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetExample().(*ElementDefinition_Example_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_Example) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_Example) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_Example) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_Example) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_Example) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetExample().(*ElementDefinition_Example_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_Example) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_Example) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_Example) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_Example) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_Example) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_Example) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetExample().(*ElementDefinition_Example_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_Example) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_Example) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetExample().(*ElementDefinition_Example_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_Example) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_Example) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetExample().(*ElementDefinition_Example_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_Example) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_Example) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_Example) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetExample().(*ElementDefinition_Example_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_Example_Example interface {
	isElementDefinition_Example_Example()
}

type ElementDefinition_Example_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Example_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Example_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Example_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,4,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Example_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,5,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Example_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Example_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,7,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Example_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,8,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Example_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Example_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,10,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Example_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,11,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Example_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Example_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,13,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Example_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Example_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,15,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Example_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,16,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Example_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,17,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Example_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,18,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Example_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,19,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Example_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Example_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,21,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Example_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,22,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Example_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,23,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Example_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,24,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Example_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,25,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Example_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,26,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Example_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,27,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Example_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,28,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Example_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,29,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Example_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,30,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Example_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,31,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Example_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Example_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,33,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Example_Boolean) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Integer) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Decimal) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Base64Binary) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Instant) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_StringValue) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Uri) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Date) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_DateTime) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Time) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Code) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Oid) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Id) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_UnsignedInt) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_PositiveInt) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Markdown) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Annotation) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Attachment) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Identifier) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_CodeableConcept) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Coding) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Quantity) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Range) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Period) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Ratio) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_SampledData) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Signature) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_HumanName) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Address) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_ContactPoint) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Timing) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Reference) isElementDefinition_Example_Example() {}

func (*ElementDefinition_Example_Meta) isElementDefinition_Example_Example() {}

// Minimum Allowed Value (for some types)
type ElementDefinition_MinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MinValue:
	//	*ElementDefinition_MinValue_Boolean
	//	*ElementDefinition_MinValue_Integer
	//	*ElementDefinition_MinValue_Decimal
	//	*ElementDefinition_MinValue_Base64Binary
	//	*ElementDefinition_MinValue_Instant
	//	*ElementDefinition_MinValue_StringValue
	//	*ElementDefinition_MinValue_Uri
	//	*ElementDefinition_MinValue_Date
	//	*ElementDefinition_MinValue_DateTime
	//	*ElementDefinition_MinValue_Time
	//	*ElementDefinition_MinValue_Code
	//	*ElementDefinition_MinValue_Oid
	//	*ElementDefinition_MinValue_Id
	//	*ElementDefinition_MinValue_UnsignedInt
	//	*ElementDefinition_MinValue_PositiveInt
	//	*ElementDefinition_MinValue_Markdown
	//	*ElementDefinition_MinValue_Annotation
	//	*ElementDefinition_MinValue_Attachment
	//	*ElementDefinition_MinValue_Identifier
	//	*ElementDefinition_MinValue_CodeableConcept
	//	*ElementDefinition_MinValue_Coding
	//	*ElementDefinition_MinValue_Quantity
	//	*ElementDefinition_MinValue_Range
	//	*ElementDefinition_MinValue_Period
	//	*ElementDefinition_MinValue_Ratio
	//	*ElementDefinition_MinValue_SampledData
	//	*ElementDefinition_MinValue_Signature
	//	*ElementDefinition_MinValue_HumanName
	//	*ElementDefinition_MinValue_Address
	//	*ElementDefinition_MinValue_ContactPoint
	//	*ElementDefinition_MinValue_Timing
	//	*ElementDefinition_MinValue_Reference
	//	*ElementDefinition_MinValue_Meta
	MinValue isElementDefinition_MinValue_MinValue `protobuf_oneof:"min_value"`
}

func (x *ElementDefinition_MinValue) Reset() {
	*x = ElementDefinition_MinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_MinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_MinValue) ProtoMessage() {}

func (x *ElementDefinition_MinValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_MinValue.ProtoReflect.Descriptor instead.
func (*ElementDefinition_MinValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 7}
}

func (m *ElementDefinition_MinValue) GetMinValue() isElementDefinition_MinValue_MinValue {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_MinValue) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetMinValue().(*ElementDefinition_MinValue_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_MinValue_MinValue interface {
	isElementDefinition_MinValue_MinValue()
}

type ElementDefinition_MinValue_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_MinValue_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_MinValue_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_MinValue_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,4,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_MinValue_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,5,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_MinValue_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_MinValue_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,7,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_MinValue_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,8,opt,name=date,proto3,oneof"`
}

type ElementDefinition_MinValue_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_MinValue_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,10,opt,name=time,proto3,oneof"`
}

type ElementDefinition_MinValue_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,11,opt,name=code,proto3,oneof"`
}

type ElementDefinition_MinValue_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_MinValue_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,13,opt,name=id,proto3,oneof"`
}

type ElementDefinition_MinValue_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_MinValue_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,15,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_MinValue_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,16,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_MinValue_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,17,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_MinValue_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,18,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_MinValue_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,19,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_MinValue_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_MinValue_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,21,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_MinValue_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,22,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_MinValue_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,23,opt,name=range,proto3,oneof"`
}

type ElementDefinition_MinValue_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,24,opt,name=period,proto3,oneof"`
}

type ElementDefinition_MinValue_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,25,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_MinValue_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,26,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_MinValue_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,27,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_MinValue_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,28,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_MinValue_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,29,opt,name=address,proto3,oneof"`
}

type ElementDefinition_MinValue_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,30,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_MinValue_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,31,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_MinValue_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_MinValue_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,33,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_MinValue_Boolean) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Integer) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Decimal) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Base64Binary) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Instant) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_StringValue) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Uri) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Date) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_DateTime) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Time) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Code) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Oid) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Id) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_UnsignedInt) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_PositiveInt) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Markdown) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Annotation) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Attachment) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Identifier) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_CodeableConcept) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Coding) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Quantity) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Range) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Period) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Ratio) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_SampledData) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Signature) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_HumanName) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Address) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_ContactPoint) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Timing) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Reference) isElementDefinition_MinValue_MinValue() {}

func (*ElementDefinition_MinValue_Meta) isElementDefinition_MinValue_MinValue() {}

// Maximum Allowed Value (for some types)
type ElementDefinition_MaxValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MaxValue:
	//	*ElementDefinition_MaxValue_Boolean
	//	*ElementDefinition_MaxValue_Integer
	//	*ElementDefinition_MaxValue_Decimal
	//	*ElementDefinition_MaxValue_Base64Binary
	//	*ElementDefinition_MaxValue_Instant
	//	*ElementDefinition_MaxValue_StringValue
	//	*ElementDefinition_MaxValue_Uri
	//	*ElementDefinition_MaxValue_Date
	//	*ElementDefinition_MaxValue_DateTime
	//	*ElementDefinition_MaxValue_Time
	//	*ElementDefinition_MaxValue_Code
	//	*ElementDefinition_MaxValue_Oid
	//	*ElementDefinition_MaxValue_Id
	//	*ElementDefinition_MaxValue_UnsignedInt
	//	*ElementDefinition_MaxValue_PositiveInt
	//	*ElementDefinition_MaxValue_Markdown
	//	*ElementDefinition_MaxValue_Annotation
	//	*ElementDefinition_MaxValue_Attachment
	//	*ElementDefinition_MaxValue_Identifier
	//	*ElementDefinition_MaxValue_CodeableConcept
	//	*ElementDefinition_MaxValue_Coding
	//	*ElementDefinition_MaxValue_Quantity
	//	*ElementDefinition_MaxValue_Range
	//	*ElementDefinition_MaxValue_Period
	//	*ElementDefinition_MaxValue_Ratio
	//	*ElementDefinition_MaxValue_SampledData
	//	*ElementDefinition_MaxValue_Signature
	//	*ElementDefinition_MaxValue_HumanName
	//	*ElementDefinition_MaxValue_Address
	//	*ElementDefinition_MaxValue_ContactPoint
	//	*ElementDefinition_MaxValue_Timing
	//	*ElementDefinition_MaxValue_Reference
	//	*ElementDefinition_MaxValue_Meta
	MaxValue isElementDefinition_MaxValue_MaxValue `protobuf_oneof:"max_value"`
}

func (x *ElementDefinition_MaxValue) Reset() {
	*x = ElementDefinition_MaxValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_MaxValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_MaxValue) ProtoMessage() {}

func (x *ElementDefinition_MaxValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_MaxValue.ProtoReflect.Descriptor instead.
func (*ElementDefinition_MaxValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 8}
}

func (m *ElementDefinition_MaxValue) GetMaxValue() isElementDefinition_MaxValue_MaxValue {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_MaxValue) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetMaxValue().(*ElementDefinition_MaxValue_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_MaxValue_MaxValue interface {
	isElementDefinition_MaxValue_MaxValue()
}

type ElementDefinition_MaxValue_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_MaxValue_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,2,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_MaxValue_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_MaxValue_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,4,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_MaxValue_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,5,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_MaxValue_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_MaxValue_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,7,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_MaxValue_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,8,opt,name=date,proto3,oneof"`
}

type ElementDefinition_MaxValue_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_MaxValue_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,10,opt,name=time,proto3,oneof"`
}

type ElementDefinition_MaxValue_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,11,opt,name=code,proto3,oneof"`
}

type ElementDefinition_MaxValue_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_MaxValue_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,13,opt,name=id,proto3,oneof"`
}

type ElementDefinition_MaxValue_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_MaxValue_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,15,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_MaxValue_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,16,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_MaxValue_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,17,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_MaxValue_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,18,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_MaxValue_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,19,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_MaxValue_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_MaxValue_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,21,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_MaxValue_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,22,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_MaxValue_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,23,opt,name=range,proto3,oneof"`
}

type ElementDefinition_MaxValue_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,24,opt,name=period,proto3,oneof"`
}

type ElementDefinition_MaxValue_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,25,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_MaxValue_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,26,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_MaxValue_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,27,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_MaxValue_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,28,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_MaxValue_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,29,opt,name=address,proto3,oneof"`
}

type ElementDefinition_MaxValue_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,30,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_MaxValue_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,31,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_MaxValue_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,32,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_MaxValue_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,33,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_MaxValue_Boolean) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Integer) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Decimal) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Base64Binary) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Instant) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_StringValue) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Uri) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Date) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_DateTime) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Time) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Code) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Oid) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Id) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_UnsignedInt) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_PositiveInt) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Markdown) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Annotation) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Attachment) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Identifier) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_CodeableConcept) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Coding) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Quantity) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Range) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Period) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Ratio) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_SampledData) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Signature) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_HumanName) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Address) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_ContactPoint) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Timing) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Reference) isElementDefinition_MaxValue_MaxValue() {}

func (*ElementDefinition_MaxValue_Meta) isElementDefinition_MaxValue_MaxValue() {}

// Condition that must evaluate to true
type ElementDefinition_Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Target of 'condition' reference above
	Key *datatypes_go_proto.Id `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Why this constraint necessary or appropriate
	Requirements *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// error | warning
	Severity *codes_go_proto.ConstraintSeverityCode `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`
	// Human description of constraint
	Human *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=human,proto3" json:"human,omitempty"`
	// XPath expression of constraint
	Xpath *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=xpath,proto3" json:"xpath,omitempty"`
}

func (x *ElementDefinition_Constraint) Reset() {
	*x = ElementDefinition_Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Constraint) ProtoMessage() {}

func (x *ElementDefinition_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Constraint.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Constraint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 9}
}

func (x *ElementDefinition_Constraint) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetKey() *datatypes_go_proto.Id {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetSeverity() *codes_go_proto.ConstraintSeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetHuman() *datatypes_go_proto.String {
	if x != nil {
		return x.Human
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetXpath() *datatypes_go_proto.String {
	if x != nil {
		return x.Xpath
	}
	return nil
}

// ValueSet details if this is coded
type ElementDefinition_Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// required | extensible | preferred | example
	Strength *codes_go_proto.BindingStrengthCode `protobuf:"bytes,3,opt,name=strength,proto3" json:"strength,omitempty"`
	// Human explanation of the value set
	Description *datatypes_go_proto.String          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ValueSet    *ElementDefinition_Binding_ValueSet `protobuf:"bytes,5,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *ElementDefinition_Binding) Reset() {
	*x = ElementDefinition_Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Binding) ProtoMessage() {}

func (x *ElementDefinition_Binding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Binding.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Binding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 10}
}

func (x *ElementDefinition_Binding) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Binding) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Binding) GetStrength() *codes_go_proto.BindingStrengthCode {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *ElementDefinition_Binding) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ElementDefinition_Binding) GetValueSet() *ElementDefinition_Binding_ValueSet {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

// Map element to another set of definitions
type ElementDefinition_Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Reference to mapping declaration
	Identity *datatypes_go_proto.Id `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Computable language of mapping
	Language *datatypes_go_proto.MimeTypeCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Details of the mapping
	Map *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=map,proto3" json:"map,omitempty"`
}

func (x *ElementDefinition_Mapping) Reset() {
	*x = ElementDefinition_Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Mapping) ProtoMessage() {}

func (x *ElementDefinition_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Mapping.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Mapping) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 11}
}

func (x *ElementDefinition_Mapping) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetIdentity() *datatypes_go_proto.Id {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetLanguage() *datatypes_go_proto.MimeTypeCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetMap() *datatypes_go_proto.String {
	if x != nil {
		return x.Map
	}
	return nil
}

// Source of value set
type ElementDefinition_Binding_ValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueSet:
	//	*ElementDefinition_Binding_ValueSet_Uri
	//	*ElementDefinition_Binding_ValueSet_Reference
	ValueSet isElementDefinition_Binding_ValueSet_ValueSet `protobuf_oneof:"value_set"`
}

func (x *ElementDefinition_Binding_ValueSet) Reset() {
	*x = ElementDefinition_Binding_ValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Binding_ValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Binding_ValueSet) ProtoMessage() {}

func (x *ElementDefinition_Binding_ValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Binding_ValueSet.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Binding_ValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP(), []int{2, 10, 0}
}

func (m *ElementDefinition_Binding_ValueSet) GetValueSet() isElementDefinition_Binding_ValueSet_ValueSet {
	if m != nil {
		return m.ValueSet
	}
	return nil
}

func (x *ElementDefinition_Binding_ValueSet) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValueSet().(*ElementDefinition_Binding_ValueSet_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_Binding_ValueSet) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValueSet().(*ElementDefinition_Binding_ValueSet_Reference); ok {
		return x.Reference
	}
	return nil
}

type isElementDefinition_Binding_ValueSet_ValueSet interface {
	isElementDefinition_Binding_ValueSet_ValueSet()
}

type ElementDefinition_Binding_ValueSet_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Binding_ValueSet_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ElementDefinition_Binding_ValueSet_Uri) isElementDefinition_Binding_ValueSet_ValueSet() {}

func (*ElementDefinition_Binding_ValueSet_Reference) isElementDefinition_Binding_ValueSet_ValueSet() {
}

var File_proto_google_fhir_proto_dstu2_metadatatypes_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDesc = []byte{
	0x0a, 0x31, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x98, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x42, 0x61, 0x63,
	0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a,
	0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xf0,
	0xec, 0xc5, 0xe6, 0x06, 0x01, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xeb, 0x88, 0x01, 0x0a, 0x11,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x5b, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x73,
	0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x73, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x12, 0x41, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x32, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x43, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x12, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e,
	0x67, 0x57, 0x68, 0x65, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x05,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x05, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x50, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x0b, 0x6d, 0x75, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x4c, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4c,
	0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x87, 0x03, 0x0a,
	0x07, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x47, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xa9, 0x02, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x03, 0x6d,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x1a, 0xc7, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe0, 0x10, 0x0a,
	0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x45, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xd1, 0x10, 0x0a, 0x05, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12,
	0x49, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49,
	0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x1a, 0xd5, 0x10, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x39, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x42, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x42, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x1a, 0xd5, 0x10, 0x0a, 0x07,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x49, 0x0a,
	0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55,
	0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x1a, 0xd8, 0x10, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3c, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x39,
	0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd8,
	0x10, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x45, 0x0a,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73,
	0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x49, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75,
	0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xca, 0x03, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x78, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x05, 0x78, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x8f, 0x04, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74,
	0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x1a, 0xa5, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x30, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x52, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x1a, 0xb7, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64,
	0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d,
	0x61, 0x70, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x02, 0x0a, 0x09, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x64, 0x69, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x58, 0x68, 0x74, 0x6d,
	0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x64, 0x69, 0x76, 0x3a, 0x3d,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x75, 0x0a,
	0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x64, 0x73, 0x74, 0x75, 0x32, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6,
	0xb0, 0xb5, 0x07, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescData = file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDesc
)

func file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDescData
}

var file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_google_fhir_proto_dstu2_metadatatypes_proto_goTypes = []interface{}{
	(*BackboneElement)(nil),                           // 0: google.fhir.dstu2.proto.BackboneElement
	(*Element)(nil),                                   // 1: google.fhir.dstu2.proto.Element
	(*ElementDefinition)(nil),                         // 2: google.fhir.dstu2.proto.ElementDefinition
	(*Narrative)(nil),                                 // 3: google.fhir.dstu2.proto.Narrative
	(*ElementDefinition_Slicing)(nil),                 // 4: google.fhir.dstu2.proto.ElementDefinition.Slicing
	(*ElementDefinition_Base)(nil),                    // 5: google.fhir.dstu2.proto.ElementDefinition.Base
	(*ElementDefinition_Type)(nil),                    // 6: google.fhir.dstu2.proto.ElementDefinition.Type
	(*ElementDefinition_DefaultValue)(nil),            // 7: google.fhir.dstu2.proto.ElementDefinition.DefaultValue
	(*ElementDefinition_Fixed)(nil),                   // 8: google.fhir.dstu2.proto.ElementDefinition.Fixed
	(*ElementDefinition_Pattern)(nil),                 // 9: google.fhir.dstu2.proto.ElementDefinition.Pattern
	(*ElementDefinition_Example)(nil),                 // 10: google.fhir.dstu2.proto.ElementDefinition.Example
	(*ElementDefinition_MinValue)(nil),                // 11: google.fhir.dstu2.proto.ElementDefinition.MinValue
	(*ElementDefinition_MaxValue)(nil),                // 12: google.fhir.dstu2.proto.ElementDefinition.MaxValue
	(*ElementDefinition_Constraint)(nil),              // 13: google.fhir.dstu2.proto.ElementDefinition.Constraint
	(*ElementDefinition_Binding)(nil),                 // 14: google.fhir.dstu2.proto.ElementDefinition.Binding
	(*ElementDefinition_Mapping)(nil),                 // 15: google.fhir.dstu2.proto.ElementDefinition.Mapping
	(*ElementDefinition_Binding_ValueSet)(nil),        // 16: google.fhir.dstu2.proto.ElementDefinition.Binding.ValueSet
	(*datatypes_go_proto.Id)(nil),                     // 17: google.fhir.dstu2.proto.Id
	(*datatypes_go_proto.Extension)(nil),              // 18: google.fhir.dstu2.proto.Extension
	(*datatypes_go_proto.String)(nil),                 // 19: google.fhir.dstu2.proto.String
	(*codes_go_proto.PropertyRepresentationCode)(nil), // 20: google.fhir.dstu2.proto.PropertyRepresentationCode
	(*datatypes_go_proto.Coding)(nil),                 // 21: google.fhir.dstu2.proto.Coding
	(*datatypes_go_proto.Markdown)(nil),               // 22: google.fhir.dstu2.proto.Markdown
	(*datatypes_go_proto.Integer)(nil),                // 23: google.fhir.dstu2.proto.Integer
	(*datatypes_go_proto.Boolean)(nil),                // 24: google.fhir.dstu2.proto.Boolean
	(*codes_go_proto.NarrativeStatusCode)(nil),        // 25: google.fhir.dstu2.proto.NarrativeStatusCode
	(*datatypes_go_proto.Xhtml)(nil),                  // 26: google.fhir.dstu2.proto.Xhtml
	(*codes_go_proto.SlicingRulesCode)(nil),           // 27: google.fhir.dstu2.proto.SlicingRulesCode
	(*codes_go_proto.FHIRDefinedTypeCode)(nil),        // 28: google.fhir.dstu2.proto.FHIRDefinedTypeCode
	(*datatypes_go_proto.Uri)(nil),                    // 29: google.fhir.dstu2.proto.Uri
	(*codes_go_proto.AggregationModeCode)(nil),        // 30: google.fhir.dstu2.proto.AggregationModeCode
	(*datatypes_go_proto.Decimal)(nil),                // 31: google.fhir.dstu2.proto.Decimal
	(*datatypes_go_proto.Base64Binary)(nil),           // 32: google.fhir.dstu2.proto.Base64Binary
	(*datatypes_go_proto.Instant)(nil),                // 33: google.fhir.dstu2.proto.Instant
	(*datatypes_go_proto.Date)(nil),                   // 34: google.fhir.dstu2.proto.Date
	(*datatypes_go_proto.DateTime)(nil),               // 35: google.fhir.dstu2.proto.DateTime
	(*datatypes_go_proto.Time)(nil),                   // 36: google.fhir.dstu2.proto.Time
	(*datatypes_go_proto.Code)(nil),                   // 37: google.fhir.dstu2.proto.Code
	(*datatypes_go_proto.Oid)(nil),                    // 38: google.fhir.dstu2.proto.Oid
	(*datatypes_go_proto.UnsignedInt)(nil),            // 39: google.fhir.dstu2.proto.UnsignedInt
	(*datatypes_go_proto.PositiveInt)(nil),            // 40: google.fhir.dstu2.proto.PositiveInt
	(*datatypes_go_proto.Annotation)(nil),             // 41: google.fhir.dstu2.proto.Annotation
	(*datatypes_go_proto.Attachment)(nil),             // 42: google.fhir.dstu2.proto.Attachment
	(*datatypes_go_proto.Identifier)(nil),             // 43: google.fhir.dstu2.proto.Identifier
	(*datatypes_go_proto.CodeableConcept)(nil),        // 44: google.fhir.dstu2.proto.CodeableConcept
	(*datatypes_go_proto.Quantity)(nil),               // 45: google.fhir.dstu2.proto.Quantity
	(*datatypes_go_proto.Range)(nil),                  // 46: google.fhir.dstu2.proto.Range
	(*datatypes_go_proto.Period)(nil),                 // 47: google.fhir.dstu2.proto.Period
	(*datatypes_go_proto.Ratio)(nil),                  // 48: google.fhir.dstu2.proto.Ratio
	(*datatypes_go_proto.SampledData)(nil),            // 49: google.fhir.dstu2.proto.SampledData
	(*datatypes_go_proto.Signature)(nil),              // 50: google.fhir.dstu2.proto.Signature
	(*datatypes_go_proto.HumanName)(nil),              // 51: google.fhir.dstu2.proto.HumanName
	(*datatypes_go_proto.Address)(nil),                // 52: google.fhir.dstu2.proto.Address
	(*datatypes_go_proto.ContactPoint)(nil),           // 53: google.fhir.dstu2.proto.ContactPoint
	(*datatypes_go_proto.Timing)(nil),                 // 54: google.fhir.dstu2.proto.Timing
	(*datatypes_go_proto.Reference)(nil),              // 55: google.fhir.dstu2.proto.Reference
	(*datatypes_go_proto.Meta)(nil),                   // 56: google.fhir.dstu2.proto.Meta
	(*codes_go_proto.ConstraintSeverityCode)(nil),     // 57: google.fhir.dstu2.proto.ConstraintSeverityCode
	(*codes_go_proto.BindingStrengthCode)(nil),        // 58: google.fhir.dstu2.proto.BindingStrengthCode
	(*datatypes_go_proto.MimeTypeCode)(nil),           // 59: google.fhir.dstu2.proto.MimeTypeCode
}
var file_proto_google_fhir_proto_dstu2_metadatatypes_proto_depIdxs = []int32{
	17,  // 0: google.fhir.dstu2.proto.BackboneElement.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 1: google.fhir.dstu2.proto.BackboneElement.extension:type_name -> google.fhir.dstu2.proto.Extension
	18,  // 2: google.fhir.dstu2.proto.BackboneElement.modifier_extension:type_name -> google.fhir.dstu2.proto.Extension
	17,  // 3: google.fhir.dstu2.proto.Element.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 4: google.fhir.dstu2.proto.Element.extension:type_name -> google.fhir.dstu2.proto.Extension
	17,  // 5: google.fhir.dstu2.proto.ElementDefinition.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 6: google.fhir.dstu2.proto.ElementDefinition.extension:type_name -> google.fhir.dstu2.proto.Extension
	19,  // 7: google.fhir.dstu2.proto.ElementDefinition.path:type_name -> google.fhir.dstu2.proto.String
	20,  // 8: google.fhir.dstu2.proto.ElementDefinition.representation:type_name -> google.fhir.dstu2.proto.PropertyRepresentationCode
	19,  // 9: google.fhir.dstu2.proto.ElementDefinition.name:type_name -> google.fhir.dstu2.proto.String
	19,  // 10: google.fhir.dstu2.proto.ElementDefinition.label:type_name -> google.fhir.dstu2.proto.String
	21,  // 11: google.fhir.dstu2.proto.ElementDefinition.code:type_name -> google.fhir.dstu2.proto.Coding
	4,   // 12: google.fhir.dstu2.proto.ElementDefinition.slicing:type_name -> google.fhir.dstu2.proto.ElementDefinition.Slicing
	19,  // 13: google.fhir.dstu2.proto.ElementDefinition.short:type_name -> google.fhir.dstu2.proto.String
	22,  // 14: google.fhir.dstu2.proto.ElementDefinition.definition:type_name -> google.fhir.dstu2.proto.Markdown
	22,  // 15: google.fhir.dstu2.proto.ElementDefinition.comments:type_name -> google.fhir.dstu2.proto.Markdown
	22,  // 16: google.fhir.dstu2.proto.ElementDefinition.requirements:type_name -> google.fhir.dstu2.proto.Markdown
	19,  // 17: google.fhir.dstu2.proto.ElementDefinition.alias:type_name -> google.fhir.dstu2.proto.String
	23,  // 18: google.fhir.dstu2.proto.ElementDefinition.min:type_name -> google.fhir.dstu2.proto.Integer
	19,  // 19: google.fhir.dstu2.proto.ElementDefinition.max:type_name -> google.fhir.dstu2.proto.String
	5,   // 20: google.fhir.dstu2.proto.ElementDefinition.base:type_name -> google.fhir.dstu2.proto.ElementDefinition.Base
	6,   // 21: google.fhir.dstu2.proto.ElementDefinition.type:type_name -> google.fhir.dstu2.proto.ElementDefinition.Type
	19,  // 22: google.fhir.dstu2.proto.ElementDefinition.name_reference:type_name -> google.fhir.dstu2.proto.String
	7,   // 23: google.fhir.dstu2.proto.ElementDefinition.default_value:type_name -> google.fhir.dstu2.proto.ElementDefinition.DefaultValue
	22,  // 24: google.fhir.dstu2.proto.ElementDefinition.meaning_when_missing:type_name -> google.fhir.dstu2.proto.Markdown
	8,   // 25: google.fhir.dstu2.proto.ElementDefinition.fixed:type_name -> google.fhir.dstu2.proto.ElementDefinition.Fixed
	9,   // 26: google.fhir.dstu2.proto.ElementDefinition.pattern:type_name -> google.fhir.dstu2.proto.ElementDefinition.Pattern
	10,  // 27: google.fhir.dstu2.proto.ElementDefinition.example:type_name -> google.fhir.dstu2.proto.ElementDefinition.Example
	11,  // 28: google.fhir.dstu2.proto.ElementDefinition.min_value:type_name -> google.fhir.dstu2.proto.ElementDefinition.MinValue
	12,  // 29: google.fhir.dstu2.proto.ElementDefinition.max_value:type_name -> google.fhir.dstu2.proto.ElementDefinition.MaxValue
	23,  // 30: google.fhir.dstu2.proto.ElementDefinition.max_length:type_name -> google.fhir.dstu2.proto.Integer
	17,  // 31: google.fhir.dstu2.proto.ElementDefinition.condition:type_name -> google.fhir.dstu2.proto.Id
	13,  // 32: google.fhir.dstu2.proto.ElementDefinition.constraint:type_name -> google.fhir.dstu2.proto.ElementDefinition.Constraint
	24,  // 33: google.fhir.dstu2.proto.ElementDefinition.must_support:type_name -> google.fhir.dstu2.proto.Boolean
	24,  // 34: google.fhir.dstu2.proto.ElementDefinition.is_modifier:type_name -> google.fhir.dstu2.proto.Boolean
	24,  // 35: google.fhir.dstu2.proto.ElementDefinition.is_summary:type_name -> google.fhir.dstu2.proto.Boolean
	14,  // 36: google.fhir.dstu2.proto.ElementDefinition.binding:type_name -> google.fhir.dstu2.proto.ElementDefinition.Binding
	15,  // 37: google.fhir.dstu2.proto.ElementDefinition.mapping:type_name -> google.fhir.dstu2.proto.ElementDefinition.Mapping
	17,  // 38: google.fhir.dstu2.proto.Narrative.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 39: google.fhir.dstu2.proto.Narrative.extension:type_name -> google.fhir.dstu2.proto.Extension
	25,  // 40: google.fhir.dstu2.proto.Narrative.status:type_name -> google.fhir.dstu2.proto.NarrativeStatusCode
	26,  // 41: google.fhir.dstu2.proto.Narrative.div:type_name -> google.fhir.dstu2.proto.Xhtml
	17,  // 42: google.fhir.dstu2.proto.ElementDefinition.Slicing.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 43: google.fhir.dstu2.proto.ElementDefinition.Slicing.extension:type_name -> google.fhir.dstu2.proto.Extension
	19,  // 44: google.fhir.dstu2.proto.ElementDefinition.Slicing.discriminator:type_name -> google.fhir.dstu2.proto.String
	19,  // 45: google.fhir.dstu2.proto.ElementDefinition.Slicing.description:type_name -> google.fhir.dstu2.proto.String
	24,  // 46: google.fhir.dstu2.proto.ElementDefinition.Slicing.ordered:type_name -> google.fhir.dstu2.proto.Boolean
	27,  // 47: google.fhir.dstu2.proto.ElementDefinition.Slicing.rules:type_name -> google.fhir.dstu2.proto.SlicingRulesCode
	17,  // 48: google.fhir.dstu2.proto.ElementDefinition.Base.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 49: google.fhir.dstu2.proto.ElementDefinition.Base.extension:type_name -> google.fhir.dstu2.proto.Extension
	19,  // 50: google.fhir.dstu2.proto.ElementDefinition.Base.path:type_name -> google.fhir.dstu2.proto.String
	23,  // 51: google.fhir.dstu2.proto.ElementDefinition.Base.min:type_name -> google.fhir.dstu2.proto.Integer
	19,  // 52: google.fhir.dstu2.proto.ElementDefinition.Base.max:type_name -> google.fhir.dstu2.proto.String
	17,  // 53: google.fhir.dstu2.proto.ElementDefinition.Type.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 54: google.fhir.dstu2.proto.ElementDefinition.Type.extension:type_name -> google.fhir.dstu2.proto.Extension
	28,  // 55: google.fhir.dstu2.proto.ElementDefinition.Type.code:type_name -> google.fhir.dstu2.proto.FHIRDefinedTypeCode
	29,  // 56: google.fhir.dstu2.proto.ElementDefinition.Type.profile:type_name -> google.fhir.dstu2.proto.Uri
	30,  // 57: google.fhir.dstu2.proto.ElementDefinition.Type.aggregation:type_name -> google.fhir.dstu2.proto.AggregationModeCode
	24,  // 58: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	23,  // 59: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.integer:type_name -> google.fhir.dstu2.proto.Integer
	31,  // 60: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	32,  // 61: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.base64_binary:type_name -> google.fhir.dstu2.proto.Base64Binary
	33,  // 62: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.instant:type_name -> google.fhir.dstu2.proto.Instant
	19,  // 63: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.string_value:type_name -> google.fhir.dstu2.proto.String
	29,  // 64: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.uri:type_name -> google.fhir.dstu2.proto.Uri
	34,  // 65: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.date:type_name -> google.fhir.dstu2.proto.Date
	35,  // 66: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	36,  // 67: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.time:type_name -> google.fhir.dstu2.proto.Time
	37,  // 68: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.code:type_name -> google.fhir.dstu2.proto.Code
	38,  // 69: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.oid:type_name -> google.fhir.dstu2.proto.Oid
	17,  // 70: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.id:type_name -> google.fhir.dstu2.proto.Id
	39,  // 71: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.unsigned_int:type_name -> google.fhir.dstu2.proto.UnsignedInt
	40,  // 72: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.positive_int:type_name -> google.fhir.dstu2.proto.PositiveInt
	22,  // 73: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.markdown:type_name -> google.fhir.dstu2.proto.Markdown
	41,  // 74: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.annotation:type_name -> google.fhir.dstu2.proto.Annotation
	42,  // 75: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	43,  // 76: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	44,  // 77: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	21,  // 78: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.coding:type_name -> google.fhir.dstu2.proto.Coding
	45,  // 79: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	46,  // 80: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.range:type_name -> google.fhir.dstu2.proto.Range
	47,  // 81: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.period:type_name -> google.fhir.dstu2.proto.Period
	48,  // 82: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	49,  // 83: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.sampled_data:type_name -> google.fhir.dstu2.proto.SampledData
	50,  // 84: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.signature:type_name -> google.fhir.dstu2.proto.Signature
	51,  // 85: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.human_name:type_name -> google.fhir.dstu2.proto.HumanName
	52,  // 86: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.address:type_name -> google.fhir.dstu2.proto.Address
	53,  // 87: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.contact_point:type_name -> google.fhir.dstu2.proto.ContactPoint
	54,  // 88: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.timing:type_name -> google.fhir.dstu2.proto.Timing
	55,  // 89: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.reference:type_name -> google.fhir.dstu2.proto.Reference
	56,  // 90: google.fhir.dstu2.proto.ElementDefinition.DefaultValue.meta:type_name -> google.fhir.dstu2.proto.Meta
	24,  // 91: google.fhir.dstu2.proto.ElementDefinition.Fixed.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	23,  // 92: google.fhir.dstu2.proto.ElementDefinition.Fixed.integer:type_name -> google.fhir.dstu2.proto.Integer
	31,  // 93: google.fhir.dstu2.proto.ElementDefinition.Fixed.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	32,  // 94: google.fhir.dstu2.proto.ElementDefinition.Fixed.base64_binary:type_name -> google.fhir.dstu2.proto.Base64Binary
	33,  // 95: google.fhir.dstu2.proto.ElementDefinition.Fixed.instant:type_name -> google.fhir.dstu2.proto.Instant
	19,  // 96: google.fhir.dstu2.proto.ElementDefinition.Fixed.string_value:type_name -> google.fhir.dstu2.proto.String
	29,  // 97: google.fhir.dstu2.proto.ElementDefinition.Fixed.uri:type_name -> google.fhir.dstu2.proto.Uri
	34,  // 98: google.fhir.dstu2.proto.ElementDefinition.Fixed.date:type_name -> google.fhir.dstu2.proto.Date
	35,  // 99: google.fhir.dstu2.proto.ElementDefinition.Fixed.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	36,  // 100: google.fhir.dstu2.proto.ElementDefinition.Fixed.time:type_name -> google.fhir.dstu2.proto.Time
	37,  // 101: google.fhir.dstu2.proto.ElementDefinition.Fixed.code:type_name -> google.fhir.dstu2.proto.Code
	38,  // 102: google.fhir.dstu2.proto.ElementDefinition.Fixed.oid:type_name -> google.fhir.dstu2.proto.Oid
	17,  // 103: google.fhir.dstu2.proto.ElementDefinition.Fixed.id:type_name -> google.fhir.dstu2.proto.Id
	39,  // 104: google.fhir.dstu2.proto.ElementDefinition.Fixed.unsigned_int:type_name -> google.fhir.dstu2.proto.UnsignedInt
	40,  // 105: google.fhir.dstu2.proto.ElementDefinition.Fixed.positive_int:type_name -> google.fhir.dstu2.proto.PositiveInt
	22,  // 106: google.fhir.dstu2.proto.ElementDefinition.Fixed.markdown:type_name -> google.fhir.dstu2.proto.Markdown
	41,  // 107: google.fhir.dstu2.proto.ElementDefinition.Fixed.annotation:type_name -> google.fhir.dstu2.proto.Annotation
	42,  // 108: google.fhir.dstu2.proto.ElementDefinition.Fixed.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	43,  // 109: google.fhir.dstu2.proto.ElementDefinition.Fixed.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	44,  // 110: google.fhir.dstu2.proto.ElementDefinition.Fixed.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	21,  // 111: google.fhir.dstu2.proto.ElementDefinition.Fixed.coding:type_name -> google.fhir.dstu2.proto.Coding
	45,  // 112: google.fhir.dstu2.proto.ElementDefinition.Fixed.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	46,  // 113: google.fhir.dstu2.proto.ElementDefinition.Fixed.range:type_name -> google.fhir.dstu2.proto.Range
	47,  // 114: google.fhir.dstu2.proto.ElementDefinition.Fixed.period:type_name -> google.fhir.dstu2.proto.Period
	48,  // 115: google.fhir.dstu2.proto.ElementDefinition.Fixed.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	49,  // 116: google.fhir.dstu2.proto.ElementDefinition.Fixed.sampled_data:type_name -> google.fhir.dstu2.proto.SampledData
	50,  // 117: google.fhir.dstu2.proto.ElementDefinition.Fixed.signature:type_name -> google.fhir.dstu2.proto.Signature
	51,  // 118: google.fhir.dstu2.proto.ElementDefinition.Fixed.human_name:type_name -> google.fhir.dstu2.proto.HumanName
	52,  // 119: google.fhir.dstu2.proto.ElementDefinition.Fixed.address:type_name -> google.fhir.dstu2.proto.Address
	53,  // 120: google.fhir.dstu2.proto.ElementDefinition.Fixed.contact_point:type_name -> google.fhir.dstu2.proto.ContactPoint
	54,  // 121: google.fhir.dstu2.proto.ElementDefinition.Fixed.timing:type_name -> google.fhir.dstu2.proto.Timing
	55,  // 122: google.fhir.dstu2.proto.ElementDefinition.Fixed.reference:type_name -> google.fhir.dstu2.proto.Reference
	56,  // 123: google.fhir.dstu2.proto.ElementDefinition.Fixed.meta:type_name -> google.fhir.dstu2.proto.Meta
	24,  // 124: google.fhir.dstu2.proto.ElementDefinition.Pattern.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	23,  // 125: google.fhir.dstu2.proto.ElementDefinition.Pattern.integer:type_name -> google.fhir.dstu2.proto.Integer
	31,  // 126: google.fhir.dstu2.proto.ElementDefinition.Pattern.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	32,  // 127: google.fhir.dstu2.proto.ElementDefinition.Pattern.base64_binary:type_name -> google.fhir.dstu2.proto.Base64Binary
	33,  // 128: google.fhir.dstu2.proto.ElementDefinition.Pattern.instant:type_name -> google.fhir.dstu2.proto.Instant
	19,  // 129: google.fhir.dstu2.proto.ElementDefinition.Pattern.string_value:type_name -> google.fhir.dstu2.proto.String
	29,  // 130: google.fhir.dstu2.proto.ElementDefinition.Pattern.uri:type_name -> google.fhir.dstu2.proto.Uri
	34,  // 131: google.fhir.dstu2.proto.ElementDefinition.Pattern.date:type_name -> google.fhir.dstu2.proto.Date
	35,  // 132: google.fhir.dstu2.proto.ElementDefinition.Pattern.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	36,  // 133: google.fhir.dstu2.proto.ElementDefinition.Pattern.time:type_name -> google.fhir.dstu2.proto.Time
	37,  // 134: google.fhir.dstu2.proto.ElementDefinition.Pattern.code:type_name -> google.fhir.dstu2.proto.Code
	38,  // 135: google.fhir.dstu2.proto.ElementDefinition.Pattern.oid:type_name -> google.fhir.dstu2.proto.Oid
	17,  // 136: google.fhir.dstu2.proto.ElementDefinition.Pattern.id:type_name -> google.fhir.dstu2.proto.Id
	39,  // 137: google.fhir.dstu2.proto.ElementDefinition.Pattern.unsigned_int:type_name -> google.fhir.dstu2.proto.UnsignedInt
	40,  // 138: google.fhir.dstu2.proto.ElementDefinition.Pattern.positive_int:type_name -> google.fhir.dstu2.proto.PositiveInt
	22,  // 139: google.fhir.dstu2.proto.ElementDefinition.Pattern.markdown:type_name -> google.fhir.dstu2.proto.Markdown
	41,  // 140: google.fhir.dstu2.proto.ElementDefinition.Pattern.annotation:type_name -> google.fhir.dstu2.proto.Annotation
	42,  // 141: google.fhir.dstu2.proto.ElementDefinition.Pattern.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	43,  // 142: google.fhir.dstu2.proto.ElementDefinition.Pattern.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	44,  // 143: google.fhir.dstu2.proto.ElementDefinition.Pattern.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	21,  // 144: google.fhir.dstu2.proto.ElementDefinition.Pattern.coding:type_name -> google.fhir.dstu2.proto.Coding
	45,  // 145: google.fhir.dstu2.proto.ElementDefinition.Pattern.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	46,  // 146: google.fhir.dstu2.proto.ElementDefinition.Pattern.range:type_name -> google.fhir.dstu2.proto.Range
	47,  // 147: google.fhir.dstu2.proto.ElementDefinition.Pattern.period:type_name -> google.fhir.dstu2.proto.Period
	48,  // 148: google.fhir.dstu2.proto.ElementDefinition.Pattern.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	49,  // 149: google.fhir.dstu2.proto.ElementDefinition.Pattern.sampled_data:type_name -> google.fhir.dstu2.proto.SampledData
	50,  // 150: google.fhir.dstu2.proto.ElementDefinition.Pattern.signature:type_name -> google.fhir.dstu2.proto.Signature
	51,  // 151: google.fhir.dstu2.proto.ElementDefinition.Pattern.human_name:type_name -> google.fhir.dstu2.proto.HumanName
	52,  // 152: google.fhir.dstu2.proto.ElementDefinition.Pattern.address:type_name -> google.fhir.dstu2.proto.Address
	53,  // 153: google.fhir.dstu2.proto.ElementDefinition.Pattern.contact_point:type_name -> google.fhir.dstu2.proto.ContactPoint
	54,  // 154: google.fhir.dstu2.proto.ElementDefinition.Pattern.timing:type_name -> google.fhir.dstu2.proto.Timing
	55,  // 155: google.fhir.dstu2.proto.ElementDefinition.Pattern.reference:type_name -> google.fhir.dstu2.proto.Reference
	56,  // 156: google.fhir.dstu2.proto.ElementDefinition.Pattern.meta:type_name -> google.fhir.dstu2.proto.Meta
	24,  // 157: google.fhir.dstu2.proto.ElementDefinition.Example.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	23,  // 158: google.fhir.dstu2.proto.ElementDefinition.Example.integer:type_name -> google.fhir.dstu2.proto.Integer
	31,  // 159: google.fhir.dstu2.proto.ElementDefinition.Example.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	32,  // 160: google.fhir.dstu2.proto.ElementDefinition.Example.base64_binary:type_name -> google.fhir.dstu2.proto.Base64Binary
	33,  // 161: google.fhir.dstu2.proto.ElementDefinition.Example.instant:type_name -> google.fhir.dstu2.proto.Instant
	19,  // 162: google.fhir.dstu2.proto.ElementDefinition.Example.string_value:type_name -> google.fhir.dstu2.proto.String
	29,  // 163: google.fhir.dstu2.proto.ElementDefinition.Example.uri:type_name -> google.fhir.dstu2.proto.Uri
	34,  // 164: google.fhir.dstu2.proto.ElementDefinition.Example.date:type_name -> google.fhir.dstu2.proto.Date
	35,  // 165: google.fhir.dstu2.proto.ElementDefinition.Example.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	36,  // 166: google.fhir.dstu2.proto.ElementDefinition.Example.time:type_name -> google.fhir.dstu2.proto.Time
	37,  // 167: google.fhir.dstu2.proto.ElementDefinition.Example.code:type_name -> google.fhir.dstu2.proto.Code
	38,  // 168: google.fhir.dstu2.proto.ElementDefinition.Example.oid:type_name -> google.fhir.dstu2.proto.Oid
	17,  // 169: google.fhir.dstu2.proto.ElementDefinition.Example.id:type_name -> google.fhir.dstu2.proto.Id
	39,  // 170: google.fhir.dstu2.proto.ElementDefinition.Example.unsigned_int:type_name -> google.fhir.dstu2.proto.UnsignedInt
	40,  // 171: google.fhir.dstu2.proto.ElementDefinition.Example.positive_int:type_name -> google.fhir.dstu2.proto.PositiveInt
	22,  // 172: google.fhir.dstu2.proto.ElementDefinition.Example.markdown:type_name -> google.fhir.dstu2.proto.Markdown
	41,  // 173: google.fhir.dstu2.proto.ElementDefinition.Example.annotation:type_name -> google.fhir.dstu2.proto.Annotation
	42,  // 174: google.fhir.dstu2.proto.ElementDefinition.Example.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	43,  // 175: google.fhir.dstu2.proto.ElementDefinition.Example.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	44,  // 176: google.fhir.dstu2.proto.ElementDefinition.Example.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	21,  // 177: google.fhir.dstu2.proto.ElementDefinition.Example.coding:type_name -> google.fhir.dstu2.proto.Coding
	45,  // 178: google.fhir.dstu2.proto.ElementDefinition.Example.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	46,  // 179: google.fhir.dstu2.proto.ElementDefinition.Example.range:type_name -> google.fhir.dstu2.proto.Range
	47,  // 180: google.fhir.dstu2.proto.ElementDefinition.Example.period:type_name -> google.fhir.dstu2.proto.Period
	48,  // 181: google.fhir.dstu2.proto.ElementDefinition.Example.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	49,  // 182: google.fhir.dstu2.proto.ElementDefinition.Example.sampled_data:type_name -> google.fhir.dstu2.proto.SampledData
	50,  // 183: google.fhir.dstu2.proto.ElementDefinition.Example.signature:type_name -> google.fhir.dstu2.proto.Signature
	51,  // 184: google.fhir.dstu2.proto.ElementDefinition.Example.human_name:type_name -> google.fhir.dstu2.proto.HumanName
	52,  // 185: google.fhir.dstu2.proto.ElementDefinition.Example.address:type_name -> google.fhir.dstu2.proto.Address
	53,  // 186: google.fhir.dstu2.proto.ElementDefinition.Example.contact_point:type_name -> google.fhir.dstu2.proto.ContactPoint
	54,  // 187: google.fhir.dstu2.proto.ElementDefinition.Example.timing:type_name -> google.fhir.dstu2.proto.Timing
	55,  // 188: google.fhir.dstu2.proto.ElementDefinition.Example.reference:type_name -> google.fhir.dstu2.proto.Reference
	56,  // 189: google.fhir.dstu2.proto.ElementDefinition.Example.meta:type_name -> google.fhir.dstu2.proto.Meta
	24,  // 190: google.fhir.dstu2.proto.ElementDefinition.MinValue.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	23,  // 191: google.fhir.dstu2.proto.ElementDefinition.MinValue.integer:type_name -> google.fhir.dstu2.proto.Integer
	31,  // 192: google.fhir.dstu2.proto.ElementDefinition.MinValue.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	32,  // 193: google.fhir.dstu2.proto.ElementDefinition.MinValue.base64_binary:type_name -> google.fhir.dstu2.proto.Base64Binary
	33,  // 194: google.fhir.dstu2.proto.ElementDefinition.MinValue.instant:type_name -> google.fhir.dstu2.proto.Instant
	19,  // 195: google.fhir.dstu2.proto.ElementDefinition.MinValue.string_value:type_name -> google.fhir.dstu2.proto.String
	29,  // 196: google.fhir.dstu2.proto.ElementDefinition.MinValue.uri:type_name -> google.fhir.dstu2.proto.Uri
	34,  // 197: google.fhir.dstu2.proto.ElementDefinition.MinValue.date:type_name -> google.fhir.dstu2.proto.Date
	35,  // 198: google.fhir.dstu2.proto.ElementDefinition.MinValue.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	36,  // 199: google.fhir.dstu2.proto.ElementDefinition.MinValue.time:type_name -> google.fhir.dstu2.proto.Time
	37,  // 200: google.fhir.dstu2.proto.ElementDefinition.MinValue.code:type_name -> google.fhir.dstu2.proto.Code
	38,  // 201: google.fhir.dstu2.proto.ElementDefinition.MinValue.oid:type_name -> google.fhir.dstu2.proto.Oid
	17,  // 202: google.fhir.dstu2.proto.ElementDefinition.MinValue.id:type_name -> google.fhir.dstu2.proto.Id
	39,  // 203: google.fhir.dstu2.proto.ElementDefinition.MinValue.unsigned_int:type_name -> google.fhir.dstu2.proto.UnsignedInt
	40,  // 204: google.fhir.dstu2.proto.ElementDefinition.MinValue.positive_int:type_name -> google.fhir.dstu2.proto.PositiveInt
	22,  // 205: google.fhir.dstu2.proto.ElementDefinition.MinValue.markdown:type_name -> google.fhir.dstu2.proto.Markdown
	41,  // 206: google.fhir.dstu2.proto.ElementDefinition.MinValue.annotation:type_name -> google.fhir.dstu2.proto.Annotation
	42,  // 207: google.fhir.dstu2.proto.ElementDefinition.MinValue.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	43,  // 208: google.fhir.dstu2.proto.ElementDefinition.MinValue.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	44,  // 209: google.fhir.dstu2.proto.ElementDefinition.MinValue.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	21,  // 210: google.fhir.dstu2.proto.ElementDefinition.MinValue.coding:type_name -> google.fhir.dstu2.proto.Coding
	45,  // 211: google.fhir.dstu2.proto.ElementDefinition.MinValue.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	46,  // 212: google.fhir.dstu2.proto.ElementDefinition.MinValue.range:type_name -> google.fhir.dstu2.proto.Range
	47,  // 213: google.fhir.dstu2.proto.ElementDefinition.MinValue.period:type_name -> google.fhir.dstu2.proto.Period
	48,  // 214: google.fhir.dstu2.proto.ElementDefinition.MinValue.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	49,  // 215: google.fhir.dstu2.proto.ElementDefinition.MinValue.sampled_data:type_name -> google.fhir.dstu2.proto.SampledData
	50,  // 216: google.fhir.dstu2.proto.ElementDefinition.MinValue.signature:type_name -> google.fhir.dstu2.proto.Signature
	51,  // 217: google.fhir.dstu2.proto.ElementDefinition.MinValue.human_name:type_name -> google.fhir.dstu2.proto.HumanName
	52,  // 218: google.fhir.dstu2.proto.ElementDefinition.MinValue.address:type_name -> google.fhir.dstu2.proto.Address
	53,  // 219: google.fhir.dstu2.proto.ElementDefinition.MinValue.contact_point:type_name -> google.fhir.dstu2.proto.ContactPoint
	54,  // 220: google.fhir.dstu2.proto.ElementDefinition.MinValue.timing:type_name -> google.fhir.dstu2.proto.Timing
	55,  // 221: google.fhir.dstu2.proto.ElementDefinition.MinValue.reference:type_name -> google.fhir.dstu2.proto.Reference
	56,  // 222: google.fhir.dstu2.proto.ElementDefinition.MinValue.meta:type_name -> google.fhir.dstu2.proto.Meta
	24,  // 223: google.fhir.dstu2.proto.ElementDefinition.MaxValue.boolean:type_name -> google.fhir.dstu2.proto.Boolean
	23,  // 224: google.fhir.dstu2.proto.ElementDefinition.MaxValue.integer:type_name -> google.fhir.dstu2.proto.Integer
	31,  // 225: google.fhir.dstu2.proto.ElementDefinition.MaxValue.decimal:type_name -> google.fhir.dstu2.proto.Decimal
	32,  // 226: google.fhir.dstu2.proto.ElementDefinition.MaxValue.base64_binary:type_name -> google.fhir.dstu2.proto.Base64Binary
	33,  // 227: google.fhir.dstu2.proto.ElementDefinition.MaxValue.instant:type_name -> google.fhir.dstu2.proto.Instant
	19,  // 228: google.fhir.dstu2.proto.ElementDefinition.MaxValue.string_value:type_name -> google.fhir.dstu2.proto.String
	29,  // 229: google.fhir.dstu2.proto.ElementDefinition.MaxValue.uri:type_name -> google.fhir.dstu2.proto.Uri
	34,  // 230: google.fhir.dstu2.proto.ElementDefinition.MaxValue.date:type_name -> google.fhir.dstu2.proto.Date
	35,  // 231: google.fhir.dstu2.proto.ElementDefinition.MaxValue.date_time:type_name -> google.fhir.dstu2.proto.DateTime
	36,  // 232: google.fhir.dstu2.proto.ElementDefinition.MaxValue.time:type_name -> google.fhir.dstu2.proto.Time
	37,  // 233: google.fhir.dstu2.proto.ElementDefinition.MaxValue.code:type_name -> google.fhir.dstu2.proto.Code
	38,  // 234: google.fhir.dstu2.proto.ElementDefinition.MaxValue.oid:type_name -> google.fhir.dstu2.proto.Oid
	17,  // 235: google.fhir.dstu2.proto.ElementDefinition.MaxValue.id:type_name -> google.fhir.dstu2.proto.Id
	39,  // 236: google.fhir.dstu2.proto.ElementDefinition.MaxValue.unsigned_int:type_name -> google.fhir.dstu2.proto.UnsignedInt
	40,  // 237: google.fhir.dstu2.proto.ElementDefinition.MaxValue.positive_int:type_name -> google.fhir.dstu2.proto.PositiveInt
	22,  // 238: google.fhir.dstu2.proto.ElementDefinition.MaxValue.markdown:type_name -> google.fhir.dstu2.proto.Markdown
	41,  // 239: google.fhir.dstu2.proto.ElementDefinition.MaxValue.annotation:type_name -> google.fhir.dstu2.proto.Annotation
	42,  // 240: google.fhir.dstu2.proto.ElementDefinition.MaxValue.attachment:type_name -> google.fhir.dstu2.proto.Attachment
	43,  // 241: google.fhir.dstu2.proto.ElementDefinition.MaxValue.identifier:type_name -> google.fhir.dstu2.proto.Identifier
	44,  // 242: google.fhir.dstu2.proto.ElementDefinition.MaxValue.codeable_concept:type_name -> google.fhir.dstu2.proto.CodeableConcept
	21,  // 243: google.fhir.dstu2.proto.ElementDefinition.MaxValue.coding:type_name -> google.fhir.dstu2.proto.Coding
	45,  // 244: google.fhir.dstu2.proto.ElementDefinition.MaxValue.quantity:type_name -> google.fhir.dstu2.proto.Quantity
	46,  // 245: google.fhir.dstu2.proto.ElementDefinition.MaxValue.range:type_name -> google.fhir.dstu2.proto.Range
	47,  // 246: google.fhir.dstu2.proto.ElementDefinition.MaxValue.period:type_name -> google.fhir.dstu2.proto.Period
	48,  // 247: google.fhir.dstu2.proto.ElementDefinition.MaxValue.ratio:type_name -> google.fhir.dstu2.proto.Ratio
	49,  // 248: google.fhir.dstu2.proto.ElementDefinition.MaxValue.sampled_data:type_name -> google.fhir.dstu2.proto.SampledData
	50,  // 249: google.fhir.dstu2.proto.ElementDefinition.MaxValue.signature:type_name -> google.fhir.dstu2.proto.Signature
	51,  // 250: google.fhir.dstu2.proto.ElementDefinition.MaxValue.human_name:type_name -> google.fhir.dstu2.proto.HumanName
	52,  // 251: google.fhir.dstu2.proto.ElementDefinition.MaxValue.address:type_name -> google.fhir.dstu2.proto.Address
	53,  // 252: google.fhir.dstu2.proto.ElementDefinition.MaxValue.contact_point:type_name -> google.fhir.dstu2.proto.ContactPoint
	54,  // 253: google.fhir.dstu2.proto.ElementDefinition.MaxValue.timing:type_name -> google.fhir.dstu2.proto.Timing
	55,  // 254: google.fhir.dstu2.proto.ElementDefinition.MaxValue.reference:type_name -> google.fhir.dstu2.proto.Reference
	56,  // 255: google.fhir.dstu2.proto.ElementDefinition.MaxValue.meta:type_name -> google.fhir.dstu2.proto.Meta
	17,  // 256: google.fhir.dstu2.proto.ElementDefinition.Constraint.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 257: google.fhir.dstu2.proto.ElementDefinition.Constraint.extension:type_name -> google.fhir.dstu2.proto.Extension
	17,  // 258: google.fhir.dstu2.proto.ElementDefinition.Constraint.key:type_name -> google.fhir.dstu2.proto.Id
	19,  // 259: google.fhir.dstu2.proto.ElementDefinition.Constraint.requirements:type_name -> google.fhir.dstu2.proto.String
	57,  // 260: google.fhir.dstu2.proto.ElementDefinition.Constraint.severity:type_name -> google.fhir.dstu2.proto.ConstraintSeverityCode
	19,  // 261: google.fhir.dstu2.proto.ElementDefinition.Constraint.human:type_name -> google.fhir.dstu2.proto.String
	19,  // 262: google.fhir.dstu2.proto.ElementDefinition.Constraint.xpath:type_name -> google.fhir.dstu2.proto.String
	17,  // 263: google.fhir.dstu2.proto.ElementDefinition.Binding.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 264: google.fhir.dstu2.proto.ElementDefinition.Binding.extension:type_name -> google.fhir.dstu2.proto.Extension
	58,  // 265: google.fhir.dstu2.proto.ElementDefinition.Binding.strength:type_name -> google.fhir.dstu2.proto.BindingStrengthCode
	19,  // 266: google.fhir.dstu2.proto.ElementDefinition.Binding.description:type_name -> google.fhir.dstu2.proto.String
	16,  // 267: google.fhir.dstu2.proto.ElementDefinition.Binding.value_set:type_name -> google.fhir.dstu2.proto.ElementDefinition.Binding.ValueSet
	17,  // 268: google.fhir.dstu2.proto.ElementDefinition.Mapping.id:type_name -> google.fhir.dstu2.proto.Id
	18,  // 269: google.fhir.dstu2.proto.ElementDefinition.Mapping.extension:type_name -> google.fhir.dstu2.proto.Extension
	17,  // 270: google.fhir.dstu2.proto.ElementDefinition.Mapping.identity:type_name -> google.fhir.dstu2.proto.Id
	59,  // 271: google.fhir.dstu2.proto.ElementDefinition.Mapping.language:type_name -> google.fhir.dstu2.proto.MimeTypeCode
	19,  // 272: google.fhir.dstu2.proto.ElementDefinition.Mapping.map:type_name -> google.fhir.dstu2.proto.String
	29,  // 273: google.fhir.dstu2.proto.ElementDefinition.Binding.ValueSet.uri:type_name -> google.fhir.dstu2.proto.Uri
	55,  // 274: google.fhir.dstu2.proto.ElementDefinition.Binding.ValueSet.reference:type_name -> google.fhir.dstu2.proto.Reference
	275, // [275:275] is the sub-list for method output_type
	275, // [275:275] is the sub-list for method input_type
	275, // [275:275] is the sub-list for extension type_name
	275, // [275:275] is the sub-list for extension extendee
	0,   // [0:275] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_dstu2_metadatatypes_proto_init() }
func file_proto_google_fhir_proto_dstu2_metadatatypes_proto_init() {
	if File_proto_google_fhir_proto_dstu2_metadatatypes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackboneElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Narrative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Slicing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Base); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_DefaultValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Fixed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_MinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_MaxValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Binding_ValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ElementDefinition_DefaultValue_Boolean)(nil),
		(*ElementDefinition_DefaultValue_Integer)(nil),
		(*ElementDefinition_DefaultValue_Decimal)(nil),
		(*ElementDefinition_DefaultValue_Base64Binary)(nil),
		(*ElementDefinition_DefaultValue_Instant)(nil),
		(*ElementDefinition_DefaultValue_StringValue)(nil),
		(*ElementDefinition_DefaultValue_Uri)(nil),
		(*ElementDefinition_DefaultValue_Date)(nil),
		(*ElementDefinition_DefaultValue_DateTime)(nil),
		(*ElementDefinition_DefaultValue_Time)(nil),
		(*ElementDefinition_DefaultValue_Code)(nil),
		(*ElementDefinition_DefaultValue_Oid)(nil),
		(*ElementDefinition_DefaultValue_Id)(nil),
		(*ElementDefinition_DefaultValue_UnsignedInt)(nil),
		(*ElementDefinition_DefaultValue_PositiveInt)(nil),
		(*ElementDefinition_DefaultValue_Markdown)(nil),
		(*ElementDefinition_DefaultValue_Annotation)(nil),
		(*ElementDefinition_DefaultValue_Attachment)(nil),
		(*ElementDefinition_DefaultValue_Identifier)(nil),
		(*ElementDefinition_DefaultValue_CodeableConcept)(nil),
		(*ElementDefinition_DefaultValue_Coding)(nil),
		(*ElementDefinition_DefaultValue_Quantity)(nil),
		(*ElementDefinition_DefaultValue_Range)(nil),
		(*ElementDefinition_DefaultValue_Period)(nil),
		(*ElementDefinition_DefaultValue_Ratio)(nil),
		(*ElementDefinition_DefaultValue_SampledData)(nil),
		(*ElementDefinition_DefaultValue_Signature)(nil),
		(*ElementDefinition_DefaultValue_HumanName)(nil),
		(*ElementDefinition_DefaultValue_Address)(nil),
		(*ElementDefinition_DefaultValue_ContactPoint)(nil),
		(*ElementDefinition_DefaultValue_Timing)(nil),
		(*ElementDefinition_DefaultValue_Reference)(nil),
		(*ElementDefinition_DefaultValue_Meta)(nil),
	}
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ElementDefinition_Fixed_Boolean)(nil),
		(*ElementDefinition_Fixed_Integer)(nil),
		(*ElementDefinition_Fixed_Decimal)(nil),
		(*ElementDefinition_Fixed_Base64Binary)(nil),
		(*ElementDefinition_Fixed_Instant)(nil),
		(*ElementDefinition_Fixed_StringValue)(nil),
		(*ElementDefinition_Fixed_Uri)(nil),
		(*ElementDefinition_Fixed_Date)(nil),
		(*ElementDefinition_Fixed_DateTime)(nil),
		(*ElementDefinition_Fixed_Time)(nil),
		(*ElementDefinition_Fixed_Code)(nil),
		(*ElementDefinition_Fixed_Oid)(nil),
		(*ElementDefinition_Fixed_Id)(nil),
		(*ElementDefinition_Fixed_UnsignedInt)(nil),
		(*ElementDefinition_Fixed_PositiveInt)(nil),
		(*ElementDefinition_Fixed_Markdown)(nil),
		(*ElementDefinition_Fixed_Annotation)(nil),
		(*ElementDefinition_Fixed_Attachment)(nil),
		(*ElementDefinition_Fixed_Identifier)(nil),
		(*ElementDefinition_Fixed_CodeableConcept)(nil),
		(*ElementDefinition_Fixed_Coding)(nil),
		(*ElementDefinition_Fixed_Quantity)(nil),
		(*ElementDefinition_Fixed_Range)(nil),
		(*ElementDefinition_Fixed_Period)(nil),
		(*ElementDefinition_Fixed_Ratio)(nil),
		(*ElementDefinition_Fixed_SampledData)(nil),
		(*ElementDefinition_Fixed_Signature)(nil),
		(*ElementDefinition_Fixed_HumanName)(nil),
		(*ElementDefinition_Fixed_Address)(nil),
		(*ElementDefinition_Fixed_ContactPoint)(nil),
		(*ElementDefinition_Fixed_Timing)(nil),
		(*ElementDefinition_Fixed_Reference)(nil),
		(*ElementDefinition_Fixed_Meta)(nil),
	}
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ElementDefinition_Pattern_Boolean)(nil),
		(*ElementDefinition_Pattern_Integer)(nil),
		(*ElementDefinition_Pattern_Decimal)(nil),
		(*ElementDefinition_Pattern_Base64Binary)(nil),
		(*ElementDefinition_Pattern_Instant)(nil),
		(*ElementDefinition_Pattern_StringValue)(nil),
		(*ElementDefinition_Pattern_Uri)(nil),
		(*ElementDefinition_Pattern_Date)(nil),
		(*ElementDefinition_Pattern_DateTime)(nil),
		(*ElementDefinition_Pattern_Time)(nil),
		(*ElementDefinition_Pattern_Code)(nil),
		(*ElementDefinition_Pattern_Oid)(nil),
		(*ElementDefinition_Pattern_Id)(nil),
		(*ElementDefinition_Pattern_UnsignedInt)(nil),
		(*ElementDefinition_Pattern_PositiveInt)(nil),
		(*ElementDefinition_Pattern_Markdown)(nil),
		(*ElementDefinition_Pattern_Annotation)(nil),
		(*ElementDefinition_Pattern_Attachment)(nil),
		(*ElementDefinition_Pattern_Identifier)(nil),
		(*ElementDefinition_Pattern_CodeableConcept)(nil),
		(*ElementDefinition_Pattern_Coding)(nil),
		(*ElementDefinition_Pattern_Quantity)(nil),
		(*ElementDefinition_Pattern_Range)(nil),
		(*ElementDefinition_Pattern_Period)(nil),
		(*ElementDefinition_Pattern_Ratio)(nil),
		(*ElementDefinition_Pattern_SampledData)(nil),
		(*ElementDefinition_Pattern_Signature)(nil),
		(*ElementDefinition_Pattern_HumanName)(nil),
		(*ElementDefinition_Pattern_Address)(nil),
		(*ElementDefinition_Pattern_ContactPoint)(nil),
		(*ElementDefinition_Pattern_Timing)(nil),
		(*ElementDefinition_Pattern_Reference)(nil),
		(*ElementDefinition_Pattern_Meta)(nil),
	}
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ElementDefinition_Example_Boolean)(nil),
		(*ElementDefinition_Example_Integer)(nil),
		(*ElementDefinition_Example_Decimal)(nil),
		(*ElementDefinition_Example_Base64Binary)(nil),
		(*ElementDefinition_Example_Instant)(nil),
		(*ElementDefinition_Example_StringValue)(nil),
		(*ElementDefinition_Example_Uri)(nil),
		(*ElementDefinition_Example_Date)(nil),
		(*ElementDefinition_Example_DateTime)(nil),
		(*ElementDefinition_Example_Time)(nil),
		(*ElementDefinition_Example_Code)(nil),
		(*ElementDefinition_Example_Oid)(nil),
		(*ElementDefinition_Example_Id)(nil),
		(*ElementDefinition_Example_UnsignedInt)(nil),
		(*ElementDefinition_Example_PositiveInt)(nil),
		(*ElementDefinition_Example_Markdown)(nil),
		(*ElementDefinition_Example_Annotation)(nil),
		(*ElementDefinition_Example_Attachment)(nil),
		(*ElementDefinition_Example_Identifier)(nil),
		(*ElementDefinition_Example_CodeableConcept)(nil),
		(*ElementDefinition_Example_Coding)(nil),
		(*ElementDefinition_Example_Quantity)(nil),
		(*ElementDefinition_Example_Range)(nil),
		(*ElementDefinition_Example_Period)(nil),
		(*ElementDefinition_Example_Ratio)(nil),
		(*ElementDefinition_Example_SampledData)(nil),
		(*ElementDefinition_Example_Signature)(nil),
		(*ElementDefinition_Example_HumanName)(nil),
		(*ElementDefinition_Example_Address)(nil),
		(*ElementDefinition_Example_ContactPoint)(nil),
		(*ElementDefinition_Example_Timing)(nil),
		(*ElementDefinition_Example_Reference)(nil),
		(*ElementDefinition_Example_Meta)(nil),
	}
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ElementDefinition_MinValue_Boolean)(nil),
		(*ElementDefinition_MinValue_Integer)(nil),
		(*ElementDefinition_MinValue_Decimal)(nil),
		(*ElementDefinition_MinValue_Base64Binary)(nil),
		(*ElementDefinition_MinValue_Instant)(nil),
		(*ElementDefinition_MinValue_StringValue)(nil),
		(*ElementDefinition_MinValue_Uri)(nil),
		(*ElementDefinition_MinValue_Date)(nil),
		(*ElementDefinition_MinValue_DateTime)(nil),
		(*ElementDefinition_MinValue_Time)(nil),
		(*ElementDefinition_MinValue_Code)(nil),
		(*ElementDefinition_MinValue_Oid)(nil),
		(*ElementDefinition_MinValue_Id)(nil),
		(*ElementDefinition_MinValue_UnsignedInt)(nil),
		(*ElementDefinition_MinValue_PositiveInt)(nil),
		(*ElementDefinition_MinValue_Markdown)(nil),
		(*ElementDefinition_MinValue_Annotation)(nil),
		(*ElementDefinition_MinValue_Attachment)(nil),
		(*ElementDefinition_MinValue_Identifier)(nil),
		(*ElementDefinition_MinValue_CodeableConcept)(nil),
		(*ElementDefinition_MinValue_Coding)(nil),
		(*ElementDefinition_MinValue_Quantity)(nil),
		(*ElementDefinition_MinValue_Range)(nil),
		(*ElementDefinition_MinValue_Period)(nil),
		(*ElementDefinition_MinValue_Ratio)(nil),
		(*ElementDefinition_MinValue_SampledData)(nil),
		(*ElementDefinition_MinValue_Signature)(nil),
		(*ElementDefinition_MinValue_HumanName)(nil),
		(*ElementDefinition_MinValue_Address)(nil),
		(*ElementDefinition_MinValue_ContactPoint)(nil),
		(*ElementDefinition_MinValue_Timing)(nil),
		(*ElementDefinition_MinValue_Reference)(nil),
		(*ElementDefinition_MinValue_Meta)(nil),
	}
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ElementDefinition_MaxValue_Boolean)(nil),
		(*ElementDefinition_MaxValue_Integer)(nil),
		(*ElementDefinition_MaxValue_Decimal)(nil),
		(*ElementDefinition_MaxValue_Base64Binary)(nil),
		(*ElementDefinition_MaxValue_Instant)(nil),
		(*ElementDefinition_MaxValue_StringValue)(nil),
		(*ElementDefinition_MaxValue_Uri)(nil),
		(*ElementDefinition_MaxValue_Date)(nil),
		(*ElementDefinition_MaxValue_DateTime)(nil),
		(*ElementDefinition_MaxValue_Time)(nil),
		(*ElementDefinition_MaxValue_Code)(nil),
		(*ElementDefinition_MaxValue_Oid)(nil),
		(*ElementDefinition_MaxValue_Id)(nil),
		(*ElementDefinition_MaxValue_UnsignedInt)(nil),
		(*ElementDefinition_MaxValue_PositiveInt)(nil),
		(*ElementDefinition_MaxValue_Markdown)(nil),
		(*ElementDefinition_MaxValue_Annotation)(nil),
		(*ElementDefinition_MaxValue_Attachment)(nil),
		(*ElementDefinition_MaxValue_Identifier)(nil),
		(*ElementDefinition_MaxValue_CodeableConcept)(nil),
		(*ElementDefinition_MaxValue_Coding)(nil),
		(*ElementDefinition_MaxValue_Quantity)(nil),
		(*ElementDefinition_MaxValue_Range)(nil),
		(*ElementDefinition_MaxValue_Period)(nil),
		(*ElementDefinition_MaxValue_Ratio)(nil),
		(*ElementDefinition_MaxValue_SampledData)(nil),
		(*ElementDefinition_MaxValue_Signature)(nil),
		(*ElementDefinition_MaxValue_HumanName)(nil),
		(*ElementDefinition_MaxValue_Address)(nil),
		(*ElementDefinition_MaxValue_ContactPoint)(nil),
		(*ElementDefinition_MaxValue_Timing)(nil),
		(*ElementDefinition_MaxValue_Reference)(nil),
		(*ElementDefinition_MaxValue_Meta)(nil),
	}
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ElementDefinition_Binding_ValueSet_Uri)(nil),
		(*ElementDefinition_Binding_ValueSet_Reference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_dstu2_metadatatypes_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_dstu2_metadatatypes_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_dstu2_metadatatypes_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_dstu2_metadatatypes_proto = out.File
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_rawDesc = nil
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_goTypes = nil
	file_proto_google_fhir_proto_dstu2_metadatatypes_proto_depIdxs = nil
}

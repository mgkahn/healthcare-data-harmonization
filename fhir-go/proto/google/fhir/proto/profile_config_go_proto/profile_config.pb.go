//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/profile_config.proto

package profile_config_go_proto

import (
	annotations_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r4/core/codes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SizeRestriction int32

const (
	SizeRestriction_UNSET        SizeRestriction = 0 // Does not set a size restriction on the field.
	SizeRestriction_ABSENT       SizeRestriction = 1 // Field should have zero values, i.e. omitted from the record.
	SizeRestriction_REQUIRED     SizeRestriction = 2 // Field must have exactly one value.
	SizeRestriction_OPTIONAL     SizeRestriction = 3 // Field may have zero or one value.
	SizeRestriction_AT_LEAST_ONE SizeRestriction = 4 // Repeated field that should have at least one value.
	SizeRestriction_REPEATED     SizeRestriction = 5 // Repeated field that may have zero or more values.
)

// Enum value maps for SizeRestriction.
var (
	SizeRestriction_name = map[int32]string{
		0: "UNSET",
		1: "ABSENT",
		2: "REQUIRED",
		3: "OPTIONAL",
		4: "AT_LEAST_ONE",
		5: "REPEATED",
	}
	SizeRestriction_value = map[string]int32{
		"UNSET":        0,
		"ABSENT":       1,
		"REQUIRED":     2,
		"OPTIONAL":     3,
		"AT_LEAST_ONE": 4,
		"REPEATED":     5,
	}
)

func (x SizeRestriction) Enum() *SizeRestriction {
	p := new(SizeRestriction)
	*p = x
	return p
}

func (x SizeRestriction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SizeRestriction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_profile_config_proto_enumTypes[0].Descriptor()
}

func (SizeRestriction) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_profile_config_proto_enumTypes[0]
}

func (x SizeRestriction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SizeRestriction.Descriptor instead.
func (SizeRestriction) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{0}
}

// The license to include in the generated profile, if any.
type PackageInfo_License int32

const (
	PackageInfo_NONE   PackageInfo_License = 0
	PackageInfo_APACHE PackageInfo_License = 1
)

// Enum value maps for PackageInfo_License.
var (
	PackageInfo_License_name = map[int32]string{
		0: "NONE",
		1: "APACHE",
	}
	PackageInfo_License_value = map[string]int32{
		"NONE":   0,
		"APACHE": 1,
	}
)

func (x PackageInfo_License) Enum() *PackageInfo_License {
	p := new(PackageInfo_License)
	*p = x
	return p
}

func (x PackageInfo_License) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageInfo_License) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_profile_config_proto_enumTypes[1].Descriptor()
}

func (PackageInfo_License) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_profile_config_proto_enumTypes[1]
}

func (x PackageInfo_License) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageInfo_License.Descriptor instead.
func (PackageInfo_License) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{0, 0}
}

type PackageInfo_ContainedResourceBehavior int32

const (
	PackageInfo_DEFAULT                  PackageInfo_ContainedResourceBehavior = 0 // See field below for default behavior.
	PackageInfo_ANY                      PackageInfo_ContainedResourceBehavior = 1 // Uses protobuf.Any for contained resource fields.
	PackageInfo_TYPED_CONTAINED_RESOURCE PackageInfo_ContainedResourceBehavior = 2 // Use the corresponding resource protos
)

// Enum value maps for PackageInfo_ContainedResourceBehavior.
var (
	PackageInfo_ContainedResourceBehavior_name = map[int32]string{
		0: "DEFAULT",
		1: "ANY",
		2: "TYPED_CONTAINED_RESOURCE",
	}
	PackageInfo_ContainedResourceBehavior_value = map[string]int32{
		"DEFAULT":                  0,
		"ANY":                      1,
		"TYPED_CONTAINED_RESOURCE": 2,
	}
)

func (x PackageInfo_ContainedResourceBehavior) Enum() *PackageInfo_ContainedResourceBehavior {
	p := new(PackageInfo_ContainedResourceBehavior)
	*p = x
	return p
}

func (x PackageInfo_ContainedResourceBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageInfo_ContainedResourceBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_profile_config_proto_enumTypes[2].Descriptor()
}

func (PackageInfo_ContainedResourceBehavior) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_profile_config_proto_enumTypes[2]
}

func (x PackageInfo_ContainedResourceBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageInfo_ContainedResourceBehavior.Descriptor instead.
func (PackageInfo_ContainedResourceBehavior) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{0, 1}
}

// How the output messages should be divided into files.
type PackageInfo_FileSplittingBehavior int32

const (
	PackageInfo_DEFAULT_SPLITTING_BEHAVIOR PackageInfo_FileSplittingBehavior = 0 // Default is NO_SPLITTING
	PackageInfo_NO_SPLITTING               PackageInfo_FileSplittingBehavior = 1 // All messages will be output into a single file,
	// regardless of type
	PackageInfo_SEPARATE_EXTENSIONS PackageInfo_FileSplittingBehavior = 2 // All extensions will be put into a single file,
	// and all other types will be put into a second
	// file
	PackageInfo_SPLIT_RESOURCES PackageInfo_FileSplittingBehavior = 3 // Like SEPARATE_EXTENSIONS, all extensions will
)

// Enum value maps for PackageInfo_FileSplittingBehavior.
var (
	PackageInfo_FileSplittingBehavior_name = map[int32]string{
		0: "DEFAULT_SPLITTING_BEHAVIOR",
		1: "NO_SPLITTING",
		2: "SEPARATE_EXTENSIONS",
		3: "SPLIT_RESOURCES",
	}
	PackageInfo_FileSplittingBehavior_value = map[string]int32{
		"DEFAULT_SPLITTING_BEHAVIOR": 0,
		"NO_SPLITTING":               1,
		"SEPARATE_EXTENSIONS":        2,
		"SPLIT_RESOURCES":            3,
	}
)

func (x PackageInfo_FileSplittingBehavior) Enum() *PackageInfo_FileSplittingBehavior {
	p := new(PackageInfo_FileSplittingBehavior)
	*p = x
	return p
}

func (x PackageInfo_FileSplittingBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageInfo_FileSplittingBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_profile_config_proto_enumTypes[3].Descriptor()
}

func (PackageInfo_FileSplittingBehavior) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_profile_config_proto_enumTypes[3]
}

func (x PackageInfo_FileSplittingBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageInfo_FileSplittingBehavior.Descriptor instead.
func (PackageInfo_FileSplittingBehavior) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{0, 2}
}

// Constraint severity.
type FhirPathConstraint_Severity int32

const (
	// Generator defaults to error if unset
	FhirPathConstraint_DEFAULT FhirPathConstraint_Severity = 0
	FhirPathConstraint_ERROR   FhirPathConstraint_Severity = 1
	FhirPathConstraint_WARNING FhirPathConstraint_Severity = 2
)

// Enum value maps for FhirPathConstraint_Severity.
var (
	FhirPathConstraint_Severity_name = map[int32]string{
		0: "DEFAULT",
		1: "ERROR",
		2: "WARNING",
	}
	FhirPathConstraint_Severity_value = map[string]int32{
		"DEFAULT": 0,
		"ERROR":   1,
		"WARNING": 2,
	}
)

func (x FhirPathConstraint_Severity) Enum() *FhirPathConstraint_Severity {
	p := new(FhirPathConstraint_Severity)
	*p = x
	return p
}

func (x FhirPathConstraint_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FhirPathConstraint_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_profile_config_proto_enumTypes[4].Descriptor()
}

func (FhirPathConstraint_Severity) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_profile_config_proto_enumTypes[4]
}

func (x FhirPathConstraint_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FhirPathConstraint_Severity.Descriptor instead.
func (FhirPathConstraint_Severity) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{8, 0}
}

// Metadata for generating FHIR packages
type PackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FHIR version for the package (e.g., STU3, R4, R5, etc).
	FhirVersion annotations_go_proto.FhirVersion `protobuf:"varint,1,opt,name=fhir_version,json=fhirVersion,proto3,enum=google.fhir.proto.FhirVersion" json:"fhir_version,omitempty"`
	// Base url to use for all profiles defined here.
	// e.g., g.co/fhir/profiles
	BaseUrl string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// Package for the generated protos for the resources.
	ProtoPackage string `protobuf:"bytes,3,opt,name=proto_package,json=protoPackage,proto3" json:"proto_package,omitempty"`
	// Java package for the generated protos for the resources.
	JavaProtoPackage string `protobuf:"bytes,4,opt,name=java_proto_package,json=javaProtoPackage,proto3" json:"java_proto_package,omitempty"`
	// Go package for the generated protos for the resources.
	GoProtoPackage string `protobuf:"bytes,5,opt,name=go_proto_package,json=goProtoPackage,proto3" json:"go_proto_package,omitempty"`
	// Defines whether to generate a local ContainedResource proto or reuse one.
	// If neither of these fields are set, use the core contained resource on
	// all generated files.
	//
	// Types that are assignable to ContainedResource:
	//	*PackageInfo_LocalContainedResource
	//	*PackageInfo_ContainedResourcePackage
	ContainedResource isPackageInfo_ContainedResource `protobuf_oneof:"contained_resource"`
	Publisher         string                          `protobuf:"bytes,8,opt,name=publisher,proto3" json:"publisher,omitempty"`
	TelcomUrl         string                          `protobuf:"bytes,9,opt,name=telcom_url,json=telcomUrl,proto3" json:"telcom_url,omitempty"`
	License           PackageInfo_License             `protobuf:"varint,10,opt,name=license,proto3,enum=google.fhir.proto.PackageInfo_License" json:"license,omitempty"`
	// The copyright date to be included in the license text, which
	// may simply be a year. The generator will use the current year
	// if this is unset.
	LicenseDate string `protobuf:"bytes,11,opt,name=license_date,json=licenseDate,proto3" json:"license_date,omitempty"`
	// If unset, defaults to TYPED_CONTAINED_RESOURCE for DSTU2 and STU3, and
	// ANY for later versions.
	ContainedResourceBehavior PackageInfo_ContainedResourceBehavior `protobuf:"varint,12,opt,name=contained_resource_behavior,json=containedResourceBehavior,proto3,enum=google.fhir.proto.PackageInfo_ContainedResourceBehavior" json:"contained_resource_behavior,omitempty"`
	// If unset, defaults to no splitting
	FileSplittingBehavior PackageInfo_FileSplittingBehavior `protobuf:"varint,13,opt,name=file_splitting_behavior,json=fileSplittingBehavior,proto3,enum=google.fhir.proto.PackageInfo_FileSplittingBehavior" json:"file_splitting_behavior,omitempty"`
}

func (x *PackageInfo) Reset() {
	*x = PackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageInfo) ProtoMessage() {}

func (x *PackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageInfo.ProtoReflect.Descriptor instead.
func (*PackageInfo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{0}
}

func (x *PackageInfo) GetFhirVersion() annotations_go_proto.FhirVersion {
	if x != nil {
		return x.FhirVersion
	}
	return annotations_go_proto.FhirVersion_FHIR_VERSION_UNKNOWN
}

func (x *PackageInfo) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *PackageInfo) GetProtoPackage() string {
	if x != nil {
		return x.ProtoPackage
	}
	return ""
}

func (x *PackageInfo) GetJavaProtoPackage() string {
	if x != nil {
		return x.JavaProtoPackage
	}
	return ""
}

func (x *PackageInfo) GetGoProtoPackage() string {
	if x != nil {
		return x.GoProtoPackage
	}
	return ""
}

func (m *PackageInfo) GetContainedResource() isPackageInfo_ContainedResource {
	if m != nil {
		return m.ContainedResource
	}
	return nil
}

func (x *PackageInfo) GetLocalContainedResource() bool {
	if x, ok := x.GetContainedResource().(*PackageInfo_LocalContainedResource); ok {
		return x.LocalContainedResource
	}
	return false
}

func (x *PackageInfo) GetContainedResourcePackage() string {
	if x, ok := x.GetContainedResource().(*PackageInfo_ContainedResourcePackage); ok {
		return x.ContainedResourcePackage
	}
	return ""
}

func (x *PackageInfo) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *PackageInfo) GetTelcomUrl() string {
	if x != nil {
		return x.TelcomUrl
	}
	return ""
}

func (x *PackageInfo) GetLicense() PackageInfo_License {
	if x != nil {
		return x.License
	}
	return PackageInfo_NONE
}

func (x *PackageInfo) GetLicenseDate() string {
	if x != nil {
		return x.LicenseDate
	}
	return ""
}

func (x *PackageInfo) GetContainedResourceBehavior() PackageInfo_ContainedResourceBehavior {
	if x != nil {
		return x.ContainedResourceBehavior
	}
	return PackageInfo_DEFAULT
}

func (x *PackageInfo) GetFileSplittingBehavior() PackageInfo_FileSplittingBehavior {
	if x != nil {
		return x.FileSplittingBehavior
	}
	return PackageInfo_DEFAULT_SPLITTING_BEHAVIOR
}

type isPackageInfo_ContainedResource interface {
	isPackageInfo_ContainedResource()
}

type PackageInfo_LocalContainedResource struct {
	LocalContainedResource bool `protobuf:"varint,6,opt,name=local_contained_resource,json=localContainedResource,proto3,oneof"` // Generates a local ContainedResource
}

type PackageInfo_ContainedResourcePackage struct {
	// for the profiles being created.
	ContainedResourcePackage string `protobuf:"bytes,7,opt,name=contained_resource_package,json=containedResourcePackage,proto3,oneof"` // A fully-qualified
}

func (*PackageInfo_LocalContainedResource) isPackageInfo_ContainedResource() {}

func (*PackageInfo_ContainedResourcePackage) isPackageInfo_ContainedResource() {}

// Config for definition of Profiles that are part of an Implementation
// Guide to be generated
type Profiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile []*Profile `protobuf:"bytes,2,rep,name=profile,proto3" json:"profile,omitempty"`
}

func (x *Profiles) Reset() {
	*x = Profiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profiles) ProtoMessage() {}

func (x *Profiles) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profiles.ProtoReflect.Descriptor instead.
func (*Profiles) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{1}
}

func (x *Profiles) GetProfile() []*Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Config for definition of Extensions  that are part of an Implementation
// Guide to be generated
type Extensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimpleExtension  []*SimpleExtension  `protobuf:"bytes,2,rep,name=simple_extension,json=simpleExtension,proto3" json:"simple_extension,omitempty"`
	ComplexExtension []*ComplexExtension `protobuf:"bytes,3,rep,name=complex_extension,json=complexExtension,proto3" json:"complex_extension,omitempty"`
}

func (x *Extensions) Reset() {
	*x = Extensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extensions) ProtoMessage() {}

func (x *Extensions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extensions.ProtoReflect.Descriptor instead.
func (*Extensions) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{2}
}

func (x *Extensions) GetSimpleExtension() []*SimpleExtension {
	if x != nil {
		return x.SimpleExtension
	}
	return nil
}

func (x *Extensions) GetComplexExtension() []*ComplexExtension {
	if x != nil {
		return x.ComplexExtension
	}
	return nil
}

// Config for definition of Terminologies (CodeSysems and ValueSets) that are
// part of an Implementation Guide to be generated
type Terminologies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeSystem []*CodeSystemConfig `protobuf:"bytes,1,rep,name=code_system,json=codeSystem,proto3" json:"code_system,omitempty"`
	ValueSet   []*ValueSetConfig   `protobuf:"bytes,2,rep,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *Terminologies) Reset() {
	*x = Terminologies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Terminologies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Terminologies) ProtoMessage() {}

func (x *Terminologies) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Terminologies.ProtoReflect.Descriptor instead.
func (*Terminologies) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{3}
}

func (x *Terminologies) GetCodeSystem() []*CodeSystemConfig {
	if x != nil {
		return x.CodeSystem
	}
	return nil
}

func (x *Terminologies) GetValueSet() []*ValueSetConfig {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

// Defines a profile for a specific FHIR resource.
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the top-level element of the FHIR profile. For instance,
	// this would be "Patient" in a patient profile.
	ElementData *ElementData `protobuf:"bytes,1,opt,name=element_data,json=elementData,proto3" json:"element_data,omitempty"`
	// Url of the Structure Definition being profiled
	// e.g., http://hl7.org/fhir/StructureDefinition/Patient
	BaseUrl string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// Restrictions to existing fields (does not add new fields/slices)
	Restriction []*FieldRestriction `protobuf:"bytes,3,rep,name=restriction,proto3" json:"restriction,omitempty"`
	// Extensions to be inlined as fields
	ExtensionSlice []*ExtensionSlice `protobuf:"bytes,4,rep,name=extension_slice,json=extensionSlice,proto3" json:"extension_slice,omitempty"`
	// CodeableConcept field to slice by Coding system uri.
	CodeableConceptSlice []*CodeableConceptSlice `protobuf:"bytes,5,rep,name=codeable_concept_slice,json=codeableConceptSlice,proto3" json:"codeable_concept_slice,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{4}
}

func (x *Profile) GetElementData() *ElementData {
	if x != nil {
		return x.ElementData
	}
	return nil
}

func (x *Profile) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *Profile) GetRestriction() []*FieldRestriction {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *Profile) GetExtensionSlice() []*ExtensionSlice {
	if x != nil {
		return x.ExtensionSlice
	}
	return nil
}

func (x *Profile) GetCodeableConceptSlice() []*CodeableConceptSlice {
	if x != nil {
		return x.CodeableConceptSlice
	}
	return nil
}

// A restriction on a single field.
type FieldRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id in the Structure Definition of the field to modify.
	// e.g., Patient.birthDate
	FieldId string `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	// Restriction on the size of the field.  Must be stricter than the
	// original - the new size must be a valid subset of the original.
	SizeRestriction SizeRestriction `protobuf:"varint,2,opt,name=size_restriction,json=sizeRestriction,proto3,enum=google.fhir.proto.SizeRestriction" json:"size_restriction,omitempty"`
	// For reference fields, restricts what resources the reference
	// can point to. Must be a subset of the original.
	ReferenceRestriction *ReferenceRestriction `protobuf:"bytes,3,opt,name=reference_restriction,json=referenceRestriction,proto3" json:"reference_restriction,omitempty"`
	// For choice fields, restricts what types the choice can have.
	// Must be a subset of the original.
	ChoiceTypeRestriction *ChoiceTypeRestriction `protobuf:"bytes,4,opt,name=choice_type_restriction,json=choiceTypeRestriction,proto3" json:"choice_type_restriction,omitempty"`
	FhirPathConstraint    []*FhirPathConstraint  `protobuf:"bytes,5,rep,name=fhir_path_constraint,json=fhirPathConstraint,proto3" json:"fhir_path_constraint,omitempty"`
}

func (x *FieldRestriction) Reset() {
	*x = FieldRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRestriction) ProtoMessage() {}

func (x *FieldRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRestriction.ProtoReflect.Descriptor instead.
func (*FieldRestriction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{5}
}

func (x *FieldRestriction) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *FieldRestriction) GetSizeRestriction() SizeRestriction {
	if x != nil {
		return x.SizeRestriction
	}
	return SizeRestriction_UNSET
}

func (x *FieldRestriction) GetReferenceRestriction() *ReferenceRestriction {
	if x != nil {
		return x.ReferenceRestriction
	}
	return nil
}

func (x *FieldRestriction) GetChoiceTypeRestriction() *ChoiceTypeRestriction {
	if x != nil {
		return x.ChoiceTypeRestriction
	}
	return nil
}

func (x *FieldRestriction) GetFhirPathConstraint() []*FhirPathConstraint {
	if x != nil {
		return x.FhirPathConstraint
	}
	return nil
}

// For Reference types, additional restrictions to apply
type ReferenceRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allowed types to refer to.
	// Must use unprofiled FHIR resource type name,
	// e.g., Patient, Observation, Medication
	Allowed []string `protobuf:"bytes,1,rep,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *ReferenceRestriction) Reset() {
	*x = ReferenceRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceRestriction) ProtoMessage() {}

func (x *ReferenceRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceRestriction.ProtoReflect.Descriptor instead.
func (*ReferenceRestriction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{6}
}

func (x *ReferenceRestriction) GetAllowed() []string {
	if x != nil {
		return x.Allowed
	}
	return nil
}

// Which types are allowed for Choice types. These typically come from
// the types at https://www.hl7.org/fhir/valueset-defined-types.html
// but custom types ccan be used as well.
type ChoiceTypeRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed []string `protobuf:"bytes,1,rep,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *ChoiceTypeRestriction) Reset() {
	*x = ChoiceTypeRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoiceTypeRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceTypeRestriction) ProtoMessage() {}

func (x *ChoiceTypeRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceTypeRestriction.ProtoReflect.Descriptor instead.
func (*ChoiceTypeRestriction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{7}
}

func (x *ChoiceTypeRestriction) GetAllowed() []string {
	if x != nil {
		return x.Allowed
	}
	return nil
}

// Structure used to create constraints as described in
// https://www.hl7.org/fhir/elementdefinition-definitions.html#ElementDefinition.constraint
type FhirPathConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity FhirPathConstraint_Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=google.fhir.proto.FhirPathConstraint_Severity" json:"severity,omitempty"`
	// Human-readable description of the constraint
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The FHIRPath expression defining the constraint
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *FhirPathConstraint) Reset() {
	*x = FhirPathConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FhirPathConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FhirPathConstraint) ProtoMessage() {}

func (x *FhirPathConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FhirPathConstraint.ProtoReflect.Descriptor instead.
func (*FhirPathConstraint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{8}
}

func (x *FhirPathConstraint) GetSeverity() FhirPathConstraint_Severity {
	if x != nil {
		return x.Severity
	}
	return FhirPathConstraint_DEFAULT
}

func (x *FhirPathConstraint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FhirPathConstraint) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// Declares an extension to add to a profile. Modeled as a slice because
// extensions are always sliced by URL, per the FHIR spec.
type ExtensionSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id in the Structure Definition of the field to add the extension to.
	// e.g., Patient.birthDate
	// Optional - if empty, defaults to top-level element.
	FieldId     string       `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	ElementData *ElementData `protobuf:"bytes,2,opt,name=element_data,json=elementData,proto3" json:"element_data,omitempty"`
	// Must be an absolute url for the Structure Definition that defines this
	// extension.
	// e.g., http://hl7.org/fhir/StructureDefinition/patient-birthTime
	// or https://g.co/fhir/extensions/BinaryClassificationMetadata
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ExtensionSlice) Reset() {
	*x = ExtensionSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionSlice) ProtoMessage() {}

func (x *ExtensionSlice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionSlice.ProtoReflect.Descriptor instead.
func (*ExtensionSlice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{9}
}

func (x *ExtensionSlice) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *ExtensionSlice) GetElementData() *ElementData {
	if x != nil {
		return x.ElementData
	}
	return nil
}

func (x *ExtensionSlice) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Defines a FHIR slice on a codeable concept as described in
// https://www.hl7.org/fhir/profiling.html#slicing
// These are used in the protobuf representation of profiled resources
// to create concrete fields for specific code systems.
type CodeableConceptSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id in the Structure Definition of the CodeableConcept to slice.
	// e.g., Observation.code, or RiskAssessment.prediction.qualitativeRisk
	// Note that this should be of type CodeableConcept, NOT type Coding.
	FieldId     string                              `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	CodingSlice []*CodeableConceptSlice_CodingSlice `protobuf:"bytes,2,rep,name=coding_slice,json=codingSlice,proto3" json:"coding_slice,omitempty"`
	// Whether or not to allow Codings that do not fit into any of the above
	// slices.
	// Optional - defaults to OPEN
	Rules codes_go_proto.SlicingRulesCode_Value `protobuf:"varint,4,opt,name=rules,proto3,enum=google.fhir.r4.core.SlicingRulesCode_Value" json:"rules,omitempty"`
}

func (x *CodeableConceptSlice) Reset() {
	*x = CodeableConceptSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeableConceptSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeableConceptSlice) ProtoMessage() {}

func (x *CodeableConceptSlice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeableConceptSlice.ProtoReflect.Descriptor instead.
func (*CodeableConceptSlice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{10}
}

func (x *CodeableConceptSlice) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *CodeableConceptSlice) GetCodingSlice() []*CodeableConceptSlice_CodingSlice {
	if x != nil {
		return x.CodingSlice
	}
	return nil
}

func (x *CodeableConceptSlice) GetRules() codes_go_proto.SlicingRulesCode_Value {
	if x != nil {
		return x.Rules
	}
	return codes_go_proto.SlicingRulesCode_INVALID_UNINITIALIZED
}

// Definition for a complex extension, i.e. one that contains one or more nested
// simple or complex extension fields.
type ComplexExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementData                 *ElementData        `protobuf:"bytes,1,opt,name=element_data,json=elementData,proto3" json:"element_data,omitempty"`
	CanHaveAdditionalExtensions bool                `protobuf:"varint,2,opt,name=can_have_additional_extensions,json=canHaveAdditionalExtensions,proto3" json:"can_have_additional_extensions,omitempty"`
	SimpleField                 []*SimpleExtension  `protobuf:"bytes,3,rep,name=simple_field,json=simpleField,proto3" json:"simple_field,omitempty"`
	ComplexField                []*ComplexExtension `protobuf:"bytes,4,rep,name=complex_field,json=complexField,proto3" json:"complex_field,omitempty"`
}

func (x *ComplexExtension) Reset() {
	*x = ComplexExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexExtension) ProtoMessage() {}

func (x *ComplexExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexExtension.ProtoReflect.Descriptor instead.
func (*ComplexExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{11}
}

func (x *ComplexExtension) GetElementData() *ElementData {
	if x != nil {
		return x.ElementData
	}
	return nil
}

func (x *ComplexExtension) GetCanHaveAdditionalExtensions() bool {
	if x != nil {
		return x.CanHaveAdditionalExtensions
	}
	return false
}

func (x *ComplexExtension) GetSimpleField() []*SimpleExtension {
	if x != nil {
		return x.SimpleField
	}
	return nil
}

func (x *ComplexExtension) GetComplexField() []*ComplexExtension {
	if x != nil {
		return x.ComplexField
	}
	return nil
}

// Definition for a simple extension, i.e. one that contains
// only a primitive data type.
// TODO: support references with target profiles.
type SimpleExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementData *ElementData `protobuf:"bytes,1,opt,name=element_data,json=elementData,proto3" json:"element_data,omitempty"`
	// Must be one of the types listed in the Extension.value[x] element here:
	// http://hl7.org/fhir/extension.profile.json
	// If this field has size > 1 it will generate a choice-type value
	Type []string `protobuf:"bytes,2,rep,name=type,proto3" json:"type,omitempty"`
	// Code types can have further specifications -
	// e.g., fixed system, proto code type, or fixed values.
	CodeType          *CodeData `protobuf:"bytes,3,opt,name=code_type,json=codeType,proto3" json:"code_type,omitempty"`
	CanHaveExtensions bool      `protobuf:"varint,4,opt,name=can_have_extensions,json=canHaveExtensions,proto3" json:"can_have_extensions,omitempty"`
}

func (x *SimpleExtension) Reset() {
	*x = SimpleExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleExtension) ProtoMessage() {}

func (x *SimpleExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleExtension.ProtoReflect.Descriptor instead.
func (*SimpleExtension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{12}
}

func (x *SimpleExtension) GetElementData() *ElementData {
	if x != nil {
		return x.ElementData
	}
	return nil
}

func (x *SimpleExtension) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SimpleExtension) GetCodeType() *CodeData {
	if x != nil {
		return x.CodeType
	}
	return nil
}

func (x *SimpleExtension) GetCanHaveExtensions() bool {
	if x != nil {
		return x.CanHaveExtensions
	}
	return false
}

// Description of a data element being profiled.
type ElementData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name for the element.
	// For top-level elements:
	// * This will be the name of the generated message
	// * Must TitleCased and unique within all top-level elements in the package.
	// * The url will be this name appended to Extensions#base_url.
	// For subfields:
	// * This will be the name of the field
	// * Must jsonCased and unique within the containing message.
	// * If this represents a container field, the generated message will be
	//   this name in TitleCase.
	// * The url will be equal to the name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Size constraints for the element.
	SizeRestriction SizeRestriction `protobuf:"varint,2,opt,name=size_restriction,json=sizeRestriction,proto3,enum=google.fhir.proto.SizeRestriction" json:"size_restriction,omitempty"`
	// Human-readable description ofthe element.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Short description.
	// Optional - will re-use description if absent
	Short string `protobuf:"bytes,4,opt,name=short,proto3" json:"short,omitempty"`
	// Free-form comment
	// Optional
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// If set, provides an override for the structure definition URL.
	// Should ONLY be used on top-level elements.
	UrlOverride string `protobuf:"bytes,6,opt,name=url_override,json=urlOverride,proto3" json:"url_override,omitempty"`
}

func (x *ElementData) Reset() {
	*x = ElementData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementData) ProtoMessage() {}

func (x *ElementData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementData.ProtoReflect.Descriptor instead.
func (*ElementData) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{13}
}

func (x *ElementData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ElementData) GetSizeRestriction() SizeRestriction {
	if x != nil {
		return x.SizeRestriction
	}
	return SizeRestriction_UNSET
}

func (x *ElementData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ElementData) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *ElementData) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ElementData) GetUrlOverride() string {
	if x != nil {
		return x.UrlOverride
	}
	return ""
}

// Describes a code type with additional metadata
// (e.g., fixed system, binding name, or value)
type CodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fixed Url of the value set to use
	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	// "Strength" of value set binding - i.e., whether to allow codes that
	// are not in that value set.
	// Optional - defaults to required.
	BindingStrength codes_go_proto.BindingStrengthCode_Value `protobuf:"varint,2,opt,name=binding_strength,json=bindingStrength,proto3,enum=google.fhir.r4.core.BindingStrengthCode_Value" json:"binding_strength,omitempty"`
	// Optional - if set, this code will have a fixed value, and will not be
	// inlined as a field.
	FixedValue string `protobuf:"bytes,3,opt,name=fixed_value,json=fixedValue,proto3" json:"fixed_value,omitempty"`
}

func (x *CodeData) Reset() {
	*x = CodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeData) ProtoMessage() {}

func (x *CodeData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeData.ProtoReflect.Descriptor instead.
func (*CodeData) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{14}
}

func (x *CodeData) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *CodeData) GetBindingStrength() codes_go_proto.BindingStrengthCode_Value {
	if x != nil {
		return x.BindingStrength
	}
	return codes_go_proto.BindingStrengthCode_INVALID_UNINITIALIZED
}

func (x *CodeData) GetFixedValue() string {
	if x != nil {
		return x.FixedValue
	}
	return ""
}

// A compact representation of a code system used by the
// TerminologyGenerator to build the FHIR equivalent.
// See https://www.hl7.org/fhir/codesystem.html for
// the FHIR resource this will generate.
type CodeSystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets the FHIR CodeSystem.name field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Sets the FHIR CodeSystem.status field.
	Status codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,2,opt,name=status,proto3,enum=google.fhir.r4.core.PublicationStatusCode_Value" json:"status,omitempty"`
	// Sets the FHIR CodeSystem.description field.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Overrides the URL for the generated code system. The generator
	// will use the PackageInfo.baseUrl/ValuesetConfig.name if this is unset.
	UrlOverride string                      `protobuf:"bytes,4,opt,name=url_override,json=urlOverride,proto3" json:"url_override,omitempty"`
	Concept     []*CodeSystemConfig_Concept `protobuf:"bytes,5,rep,name=concept,proto3" json:"concept,omitempty"`
}

func (x *CodeSystemConfig) Reset() {
	*x = CodeSystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemConfig) ProtoMessage() {}

func (x *CodeSystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemConfig.ProtoReflect.Descriptor instead.
func (*CodeSystemConfig) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{15}
}

func (x *CodeSystemConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeSystemConfig) GetStatus() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Status
	}
	return codes_go_proto.PublicationStatusCode_INVALID_UNINITIALIZED
}

func (x *CodeSystemConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CodeSystemConfig) GetUrlOverride() string {
	if x != nil {
		return x.UrlOverride
	}
	return ""
}

func (x *CodeSystemConfig) GetConcept() []*CodeSystemConfig_Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

// A compact representation of a value set used by the
// TerminologyGenerator to build the FHIR equivalent.
// See https://www.hl7.org/fhir/valueset.html for the FHIR
// resource this will generate.
type ValueSetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets the FHIR ValueSet.name field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Sets the FHIR ValueSet.status field with the publication status.
	Status codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,2,opt,name=status,proto3,enum=google.fhir.r4.core.PublicationStatusCode_Value" json:"status,omitempty"`
	// Sets the FHIR ValueSet.description field.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Overrides the URL for the generated valueset. The generator
	// will use the PackageInfo.baseUrl/ValuesetConfig.name if this is unset.
	UrlOverride string                   `protobuf:"bytes,4,opt,name=url_override,json=urlOverride,proto3" json:"url_override,omitempty"`
	System      []*ValueSetConfig_System `protobuf:"bytes,5,rep,name=system,proto3" json:"system,omitempty"`
}

func (x *ValueSetConfig) Reset() {
	*x = ValueSetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetConfig) ProtoMessage() {}

func (x *ValueSetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetConfig.ProtoReflect.Descriptor instead.
func (*ValueSetConfig) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{16}
}

func (x *ValueSetConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValueSetConfig) GetStatus() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Status
	}
	return codes_go_proto.PublicationStatusCode_INVALID_UNINITIALIZED
}

func (x *ValueSetConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValueSetConfig) GetUrlOverride() string {
	if x != nil {
		return x.UrlOverride
	}
	return ""
}

func (x *ValueSetConfig) GetSystem() []*ValueSetConfig_System {
	if x != nil {
		return x.System
	}
	return nil
}

type CodeableConceptSlice_CodingSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementData *ElementData `protobuf:"bytes,1,opt,name=element_data,json=elementData,proto3" json:"element_data,omitempty"`
	CodeData    *CodeData    `protobuf:"bytes,2,opt,name=code_data,json=codeData,proto3" json:"code_data,omitempty"`
}

func (x *CodeableConceptSlice_CodingSlice) Reset() {
	*x = CodeableConceptSlice_CodingSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeableConceptSlice_CodingSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeableConceptSlice_CodingSlice) ProtoMessage() {}

func (x *CodeableConceptSlice_CodingSlice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeableConceptSlice_CodingSlice.ProtoReflect.Descriptor instead.
func (*CodeableConceptSlice_CodingSlice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CodeableConceptSlice_CodingSlice) GetElementData() *ElementData {
	if x != nil {
		return x.ElementData
	}
	return nil
}

func (x *CodeableConceptSlice_CodingSlice) GetCodeData() *CodeData {
	if x != nil {
		return x.CodeData
	}
	return nil
}

// Defines the CodeSystem.concept structure to be generated.
type CodeSystemConfig_Concept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets the FHIR Codesystem.concept.code field.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Sets the FHIR Codesystem.concept.display field.
	Display string `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	// Sets the FHIR Codesystem.concept.definition field.
	Definition string `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *CodeSystemConfig_Concept) Reset() {
	*x = CodeSystemConfig_Concept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemConfig_Concept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemConfig_Concept) ProtoMessage() {}

func (x *CodeSystemConfig_Concept) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemConfig_Concept.ProtoReflect.Descriptor instead.
func (*CodeSystemConfig_Concept) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CodeSystemConfig_Concept) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CodeSystemConfig_Concept) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *CodeSystemConfig_Concept) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// A code system and the subset of its values to include in the value set.
type ValueSetConfig_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The code system URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Codes from this system to include.
	Include []string `protobuf:"bytes,2,rep,name=include,proto3" json:"include,omitempty"`
	// Codes from this system to exclude.
	Exclude []string `protobuf:"bytes,3,rep,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *ValueSetConfig_System) Reset() {
	*x = ValueSetConfig_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetConfig_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetConfig_System) ProtoMessage() {}

func (x *ValueSetConfig_System) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_profile_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetConfig_System.ProtoReflect.Descriptor instead.
func (*ValueSetConfig_System) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ValueSetConfig_System) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ValueSetConfig_System) GetInclude() []string {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *ValueSetConfig_System) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

var File_proto_google_fhir_proto_profile_config_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_profile_config_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x07, 0x0a, 0x0b, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x68, 0x69,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x68, 0x69, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x66, 0x68, 0x69, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6a, 0x61, 0x76, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a,
	0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x78, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x6c, 0x0a, 0x17,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x1f, 0x0a, 0x07, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x50, 0x41, 0x43, 0x48, 0x45, 0x10, 0x01, 0x22, 0x4f, 0x0a, 0x19, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x22, 0x77, 0x0a, 0x15,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x53, 0x50, 0x4c, 0x49,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x50, 0x41, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x53, 0x10, 0x03, 0x42, 0x14, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x40, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xad, 0x01,
	0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x10,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01,
	0x0a, 0x0d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xd9, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x22, 0x95, 0x03, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5c, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60,
	0x0a, 0x17, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x14, 0x66, 0x68, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x68, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x12, 0x66, 0x68, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x14, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0xd3,
	0x01, 0x0a, 0x12, 0x46, 0x68, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x68, 0x69, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xd9, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x8a, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xab, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x1e, 0x63,
	0x61, 0x6e, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x76, 0x65, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x45, 0x0a, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61,
	0x76, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x76, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x72, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x72, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x9e,
	0x01, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x59, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd5, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x72, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x72, 0x6c, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x57,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x02, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x72,
	0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x72, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a,
	0x4e, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2a,
	0x64, 0x0a, 0x0f, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x53,
	0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x42, 0x64, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_profile_config_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_profile_config_proto_rawDescData = file_proto_google_fhir_proto_profile_config_proto_rawDesc
)

func file_proto_google_fhir_proto_profile_config_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_profile_config_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_profile_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_profile_config_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_profile_config_proto_rawDescData
}

var file_proto_google_fhir_proto_profile_config_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_google_fhir_proto_profile_config_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_google_fhir_proto_profile_config_proto_goTypes = []interface{}{
	(SizeRestriction)(0),                            // 0: google.fhir.proto.SizeRestriction
	(PackageInfo_License)(0),                        // 1: google.fhir.proto.PackageInfo.License
	(PackageInfo_ContainedResourceBehavior)(0),      // 2: google.fhir.proto.PackageInfo.ContainedResourceBehavior
	(PackageInfo_FileSplittingBehavior)(0),          // 3: google.fhir.proto.PackageInfo.FileSplittingBehavior
	(FhirPathConstraint_Severity)(0),                // 4: google.fhir.proto.FhirPathConstraint.Severity
	(*PackageInfo)(nil),                             // 5: google.fhir.proto.PackageInfo
	(*Profiles)(nil),                                // 6: google.fhir.proto.Profiles
	(*Extensions)(nil),                              // 7: google.fhir.proto.Extensions
	(*Terminologies)(nil),                           // 8: google.fhir.proto.Terminologies
	(*Profile)(nil),                                 // 9: google.fhir.proto.Profile
	(*FieldRestriction)(nil),                        // 10: google.fhir.proto.FieldRestriction
	(*ReferenceRestriction)(nil),                    // 11: google.fhir.proto.ReferenceRestriction
	(*ChoiceTypeRestriction)(nil),                   // 12: google.fhir.proto.ChoiceTypeRestriction
	(*FhirPathConstraint)(nil),                      // 13: google.fhir.proto.FhirPathConstraint
	(*ExtensionSlice)(nil),                          // 14: google.fhir.proto.ExtensionSlice
	(*CodeableConceptSlice)(nil),                    // 15: google.fhir.proto.CodeableConceptSlice
	(*ComplexExtension)(nil),                        // 16: google.fhir.proto.ComplexExtension
	(*SimpleExtension)(nil),                         // 17: google.fhir.proto.SimpleExtension
	(*ElementData)(nil),                             // 18: google.fhir.proto.ElementData
	(*CodeData)(nil),                                // 19: google.fhir.proto.CodeData
	(*CodeSystemConfig)(nil),                        // 20: google.fhir.proto.CodeSystemConfig
	(*ValueSetConfig)(nil),                          // 21: google.fhir.proto.ValueSetConfig
	(*CodeableConceptSlice_CodingSlice)(nil),        // 22: google.fhir.proto.CodeableConceptSlice.CodingSlice
	(*CodeSystemConfig_Concept)(nil),                // 23: google.fhir.proto.CodeSystemConfig.Concept
	(*ValueSetConfig_System)(nil),                   // 24: google.fhir.proto.ValueSetConfig.System
	(annotations_go_proto.FhirVersion)(0),           // 25: google.fhir.proto.FhirVersion
	(codes_go_proto.SlicingRulesCode_Value)(0),      // 26: google.fhir.r4.core.SlicingRulesCode.Value
	(codes_go_proto.BindingStrengthCode_Value)(0),   // 27: google.fhir.r4.core.BindingStrengthCode.Value
	(codes_go_proto.PublicationStatusCode_Value)(0), // 28: google.fhir.r4.core.PublicationStatusCode.Value
}
var file_proto_google_fhir_proto_profile_config_proto_depIdxs = []int32{
	25, // 0: google.fhir.proto.PackageInfo.fhir_version:type_name -> google.fhir.proto.FhirVersion
	1,  // 1: google.fhir.proto.PackageInfo.license:type_name -> google.fhir.proto.PackageInfo.License
	2,  // 2: google.fhir.proto.PackageInfo.contained_resource_behavior:type_name -> google.fhir.proto.PackageInfo.ContainedResourceBehavior
	3,  // 3: google.fhir.proto.PackageInfo.file_splitting_behavior:type_name -> google.fhir.proto.PackageInfo.FileSplittingBehavior
	9,  // 4: google.fhir.proto.Profiles.profile:type_name -> google.fhir.proto.Profile
	17, // 5: google.fhir.proto.Extensions.simple_extension:type_name -> google.fhir.proto.SimpleExtension
	16, // 6: google.fhir.proto.Extensions.complex_extension:type_name -> google.fhir.proto.ComplexExtension
	20, // 7: google.fhir.proto.Terminologies.code_system:type_name -> google.fhir.proto.CodeSystemConfig
	21, // 8: google.fhir.proto.Terminologies.value_set:type_name -> google.fhir.proto.ValueSetConfig
	18, // 9: google.fhir.proto.Profile.element_data:type_name -> google.fhir.proto.ElementData
	10, // 10: google.fhir.proto.Profile.restriction:type_name -> google.fhir.proto.FieldRestriction
	14, // 11: google.fhir.proto.Profile.extension_slice:type_name -> google.fhir.proto.ExtensionSlice
	15, // 12: google.fhir.proto.Profile.codeable_concept_slice:type_name -> google.fhir.proto.CodeableConceptSlice
	0,  // 13: google.fhir.proto.FieldRestriction.size_restriction:type_name -> google.fhir.proto.SizeRestriction
	11, // 14: google.fhir.proto.FieldRestriction.reference_restriction:type_name -> google.fhir.proto.ReferenceRestriction
	12, // 15: google.fhir.proto.FieldRestriction.choice_type_restriction:type_name -> google.fhir.proto.ChoiceTypeRestriction
	13, // 16: google.fhir.proto.FieldRestriction.fhir_path_constraint:type_name -> google.fhir.proto.FhirPathConstraint
	4,  // 17: google.fhir.proto.FhirPathConstraint.severity:type_name -> google.fhir.proto.FhirPathConstraint.Severity
	18, // 18: google.fhir.proto.ExtensionSlice.element_data:type_name -> google.fhir.proto.ElementData
	22, // 19: google.fhir.proto.CodeableConceptSlice.coding_slice:type_name -> google.fhir.proto.CodeableConceptSlice.CodingSlice
	26, // 20: google.fhir.proto.CodeableConceptSlice.rules:type_name -> google.fhir.r4.core.SlicingRulesCode.Value
	18, // 21: google.fhir.proto.ComplexExtension.element_data:type_name -> google.fhir.proto.ElementData
	17, // 22: google.fhir.proto.ComplexExtension.simple_field:type_name -> google.fhir.proto.SimpleExtension
	16, // 23: google.fhir.proto.ComplexExtension.complex_field:type_name -> google.fhir.proto.ComplexExtension
	18, // 24: google.fhir.proto.SimpleExtension.element_data:type_name -> google.fhir.proto.ElementData
	19, // 25: google.fhir.proto.SimpleExtension.code_type:type_name -> google.fhir.proto.CodeData
	0,  // 26: google.fhir.proto.ElementData.size_restriction:type_name -> google.fhir.proto.SizeRestriction
	27, // 27: google.fhir.proto.CodeData.binding_strength:type_name -> google.fhir.r4.core.BindingStrengthCode.Value
	28, // 28: google.fhir.proto.CodeSystemConfig.status:type_name -> google.fhir.r4.core.PublicationStatusCode.Value
	23, // 29: google.fhir.proto.CodeSystemConfig.concept:type_name -> google.fhir.proto.CodeSystemConfig.Concept
	28, // 30: google.fhir.proto.ValueSetConfig.status:type_name -> google.fhir.r4.core.PublicationStatusCode.Value
	24, // 31: google.fhir.proto.ValueSetConfig.system:type_name -> google.fhir.proto.ValueSetConfig.System
	18, // 32: google.fhir.proto.CodeableConceptSlice.CodingSlice.element_data:type_name -> google.fhir.proto.ElementData
	19, // 33: google.fhir.proto.CodeableConceptSlice.CodingSlice.code_data:type_name -> google.fhir.proto.CodeData
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_profile_config_proto_init() }
func file_proto_google_fhir_proto_profile_config_proto_init() {
	if File_proto_google_fhir_proto_profile_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Terminologies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoiceTypeRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FhirPathConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeableConceptSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeableConceptSlice_CodingSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemConfig_Concept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_profile_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetConfig_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_profile_config_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PackageInfo_LocalContainedResource)(nil),
		(*PackageInfo_ContainedResourcePackage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_profile_config_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_profile_config_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_profile_config_proto_depIdxs,
		EnumInfos:         file_proto_google_fhir_proto_profile_config_proto_enumTypes,
		MessageInfos:      file_proto_google_fhir_proto_profile_config_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_profile_config_proto = out.File
	file_proto_google_fhir_proto_profile_config_proto_rawDesc = nil
	file_proto_google_fhir_proto_profile_config_proto_goTypes = nil
	file_proto_google_fhir_proto_profile_config_proto_depIdxs = nil
}

//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/stu3/extensions.proto

package extensions_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/datatypes_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for administrative-status.
// Status of internal processing.
// See http://hl7.org/fhir/StructureDefinition/11179-de-administrative-status
type DataElementAdministrativeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *DataElementAdministrativeStatus) Reset() {
	*x = DataElementAdministrativeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementAdministrativeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementAdministrativeStatus) ProtoMessage() {}

func (x *DataElementAdministrativeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementAdministrativeStatus.ProtoReflect.Descriptor instead.
func (*DataElementAdministrativeStatus) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{0}
}

func (x *DataElementAdministrativeStatus) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementAdministrativeStatus) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for change-description.
// What's changed since the last "business" version?.
// See http://hl7.org/fhir/StructureDefinition/11179-de-change-description
type DataElementChangeDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *DataElementChangeDescription) Reset() {
	*x = DataElementChangeDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementChangeDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementChangeDescription) ProtoMessage() {}

func (x *DataElementChangeDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementChangeDescription.ProtoReflect.Descriptor instead.
func (*DataElementChangeDescription) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{1}
}

func (x *DataElementChangeDescription) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementChangeDescription) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for classification-or-context.
// context | classification.
// See
// http://hl7.org/fhir/StructureDefinition/11179-de-classification-or-context
type DataElementClassificationOrContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.ClassificationOrContextCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *DataElementClassificationOrContext) Reset() {
	*x = DataElementClassificationOrContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementClassificationOrContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementClassificationOrContext) ProtoMessage() {}

func (x *DataElementClassificationOrContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementClassificationOrContext.ProtoReflect.Descriptor instead.
func (*DataElementClassificationOrContext) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{2}
}

func (x *DataElementClassificationOrContext) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementClassificationOrContext) GetValueCode() *codes_go_proto.ClassificationOrContextCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for contact-address.
// How to mail contact.
// See http://hl7.org/fhir/StructureDefinition/11179-de-contact-address
type DataElementContactAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueAddress *datatypes_go_proto.Address `protobuf:"bytes,3,opt,name=value_address,json=valueAddress,proto3" json:"value_address,omitempty"`
}

func (x *DataElementContactAddress) Reset() {
	*x = DataElementContactAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementContactAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementContactAddress) ProtoMessage() {}

func (x *DataElementContactAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementContactAddress.ProtoReflect.Descriptor instead.
func (*DataElementContactAddress) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{3}
}

func (x *DataElementContactAddress) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementContactAddress) GetValueAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.ValueAddress
	}
	return nil
}

// Auto-generated from StructureDefinition for document-reference.
// Pointer to document related to data element.
// See http://hl7.org/fhir/StructureDefinition/11179-de-document-reference
type DataElementDocumentReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DataElementDocumentReference) Reset() {
	*x = DataElementDocumentReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementDocumentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementDocumentReference) ProtoMessage() {}

func (x *DataElementDocumentReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementDocumentReference.ProtoReflect.Descriptor instead.
func (*DataElementDocumentReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{4}
}

func (x *DataElementDocumentReference) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementDocumentReference) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for effective-period.
// When data element is "valid".
// See http://hl7.org/fhir/StructureDefinition/11179-de-effective-period
type DataElementEffectivePeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValuePeriod *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=value_period,json=valuePeriod,proto3" json:"value_period,omitempty"`
}

func (x *DataElementEffectivePeriod) Reset() {
	*x = DataElementEffectivePeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementEffectivePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementEffectivePeriod) ProtoMessage() {}

func (x *DataElementEffectivePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementEffectivePeriod.ProtoReflect.Descriptor instead.
func (*DataElementEffectivePeriod) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{5}
}

func (x *DataElementEffectivePeriod) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementEffectivePeriod) GetValuePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValuePeriod
	}
	return nil
}

// Auto-generated from StructureDefinition for is-data-element-concept.
// Is code the DEC for the data element?.
// See http://hl7.org/fhir/StructureDefinition/11179-de-is-data-element-concept
type DataElementIsDataElementConcept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *DataElementIsDataElementConcept) Reset() {
	*x = DataElementIsDataElementConcept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementIsDataElementConcept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementIsDataElementConcept) ProtoMessage() {}

func (x *DataElementIsDataElementConcept) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementIsDataElementConcept.ProtoReflect.Descriptor instead.
func (*DataElementIsDataElementConcept) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{6}
}

func (x *DataElementIsDataElementConcept) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementIsDataElementConcept) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for registry-org.
// Organization responsible for registry.
// See http://hl7.org/fhir/StructureDefinition/11179-de-registry-org
type DataElementRegistryOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DataElementRegistryOrg) Reset() {
	*x = DataElementRegistryOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementRegistryOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementRegistryOrg) ProtoMessage() {}

func (x *DataElementRegistryOrg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementRegistryOrg.ProtoReflect.Descriptor instead.
func (*DataElementRegistryOrg) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{7}
}

func (x *DataElementRegistryOrg) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementRegistryOrg) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for submitter-org.
// Who submitted data element to registry.
// See http://hl7.org/fhir/StructureDefinition/11179-de-submitter-org
type DataElementSubmitterOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DataElementSubmitterOrg) Reset() {
	*x = DataElementSubmitterOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementSubmitterOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementSubmitterOrg) ProtoMessage() {}

func (x *DataElementSubmitterOrg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementSubmitterOrg.ProtoReflect.Descriptor instead.
func (*DataElementSubmitterOrg) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{8}
}

func (x *DataElementSubmitterOrg) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementSubmitterOrg) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for objectClass.
// Object Class.
// See http://hl7.org/fhir/StructureDefinition/11179-objectClass
type ElementDefinitionObjectClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCoding *datatypes_go_proto.Coding `protobuf:"bytes,3,opt,name=value_coding,json=valueCoding,proto3" json:"value_coding,omitempty"`
}

func (x *ElementDefinitionObjectClass) Reset() {
	*x = ElementDefinitionObjectClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionObjectClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionObjectClass) ProtoMessage() {}

func (x *ElementDefinitionObjectClass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionObjectClass.ProtoReflect.Descriptor instead.
func (*ElementDefinitionObjectClass) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{9}
}

func (x *ElementDefinitionObjectClass) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionObjectClass) GetValueCoding() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ValueCoding
	}
	return nil
}

// Auto-generated from StructureDefinition for objectClassProperty.
// Object Class Property.
// See http://hl7.org/fhir/StructureDefinition/11179-objectClassProperty
type ElementDefinitionObjectClassProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCoding *datatypes_go_proto.Coding `protobuf:"bytes,3,opt,name=value_coding,json=valueCoding,proto3" json:"value_coding,omitempty"`
}

func (x *ElementDefinitionObjectClassProperty) Reset() {
	*x = ElementDefinitionObjectClassProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionObjectClassProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionObjectClassProperty) ProtoMessage() {}

func (x *ElementDefinitionObjectClassProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionObjectClassProperty.ProtoReflect.Descriptor instead.
func (*ElementDefinitionObjectClassProperty) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{10}
}

func (x *ElementDefinitionObjectClassProperty) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionObjectClassProperty) GetValueCoding() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ValueCoding
	}
	return nil
}

// Auto-generated from StructureDefinition for permitted-value-conceptmap.
// Mapping from permitted to transmitted.
// See http://hl7.org/fhir/StructureDefinition/11179-permitted-value-conceptmap
type PermittedValueConceptmap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *PermittedValueConceptmap) Reset() {
	*x = PermittedValueConceptmap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermittedValueConceptmap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermittedValueConceptmap) ProtoMessage() {}

func (x *PermittedValueConceptmap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermittedValueConceptmap.ProtoReflect.Descriptor instead.
func (*PermittedValueConceptmap) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{11}
}

func (x *PermittedValueConceptmap) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PermittedValueConceptmap) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for permitted-value-valueset.
// Permitted values.
// See http://hl7.org/fhir/StructureDefinition/11179-permitted-value-valueset
type PermittedValueValueset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *PermittedValueValueset) Reset() {
	*x = PermittedValueValueset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermittedValueValueset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermittedValueValueset) ProtoMessage() {}

func (x *PermittedValueValueset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermittedValueValueset.ProtoReflect.Descriptor instead.
func (*PermittedValueValueset) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{12}
}

func (x *PermittedValueValueset) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PermittedValueValueset) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for certainty.
// Certainty that the substance was the cause of the manifestation.
// See http://hl7.org/fhir/StructureDefinition/allergyintolerance-certainty
type AllergyIntoleranceCertainty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.AllergyIntoleranceCertaintyCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *AllergyIntoleranceCertainty) Reset() {
	*x = AllergyIntoleranceCertainty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCertainty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCertainty) ProtoMessage() {}

func (x *AllergyIntoleranceCertainty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCertainty.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCertainty) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{13}
}

func (x *AllergyIntoleranceCertainty) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceCertainty) GetValueCode() *codes_go_proto.AllergyIntoleranceCertaintyCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for duration.
// How long Manifestations persisted.
// See http://hl7.org/fhir/StructureDefinition/allergyintolerance-duration
type AllergyIntoleranceDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDuration *datatypes_go_proto.Duration `protobuf:"bytes,3,opt,name=value_duration,json=valueDuration,proto3" json:"value_duration,omitempty"`
}

func (x *AllergyIntoleranceDuration) Reset() {
	*x = AllergyIntoleranceDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceDuration) ProtoMessage() {}

func (x *AllergyIntoleranceDuration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceDuration.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceDuration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{14}
}

func (x *AllergyIntoleranceDuration) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceDuration) GetValueDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.ValueDuration
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonRefuted.
// Explanation associated with refuted status.
// See http://hl7.org/fhir/StructureDefinition/allergyintolerance-reasonRefuted
type AllergyIntoleranceReasonRefuted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *AllergyIntoleranceReasonRefuted) Reset() {
	*x = AllergyIntoleranceReasonRefuted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceReasonRefuted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceReasonRefuted) ProtoMessage() {}

func (x *AllergyIntoleranceReasonRefuted) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceReasonRefuted.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceReasonRefuted) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{15}
}

func (x *AllergyIntoleranceReasonRefuted) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceReasonRefuted) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for resolutionAge.
// Age that the allergy or intolerance resolved.
// See http://hl7.org/fhir/StructureDefinition/allergyintolerance-resolutionAge
type AllergyIntoleranceResolutionAge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueAge *datatypes_go_proto.Age `protobuf:"bytes,3,opt,name=value_age,json=valueAge,proto3" json:"value_age,omitempty"`
}

func (x *AllergyIntoleranceResolutionAge) Reset() {
	*x = AllergyIntoleranceResolutionAge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceResolutionAge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceResolutionAge) ProtoMessage() {}

func (x *AllergyIntoleranceResolutionAge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceResolutionAge.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceResolutionAge) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{16}
}

func (x *AllergyIntoleranceResolutionAge) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceResolutionAge) GetValueAge() *datatypes_go_proto.Age {
	if x != nil {
		return x.ValueAge
	}
	return nil
}

// Auto-generated from StructureDefinition for substanceExposureRisk.
// Exposure risk of adverse reaction (allergy or intolerance) to the specified
// substance/product. See
// http://hl7.org/fhir/StructureDefinition/allergyintolerance-substanceExposureRisk
type AllergyIntoleranceSubstanceExposureRisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Substance (or pharmaceutical product)
	Substance *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=substance,proto3" json:"substance,omitempty"`
	// known-reaction-risk | no-known-reaction-risk
	ExposureRisk *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=exposure_risk,json=exposureRisk,proto3" json:"exposure_risk,omitempty"`
}

func (x *AllergyIntoleranceSubstanceExposureRisk) Reset() {
	*x = AllergyIntoleranceSubstanceExposureRisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceSubstanceExposureRisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceSubstanceExposureRisk) ProtoMessage() {}

func (x *AllergyIntoleranceSubstanceExposureRisk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceSubstanceExposureRisk.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceSubstanceExposureRisk) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{17}
}

func (x *AllergyIntoleranceSubstanceExposureRisk) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceSubstanceExposureRisk) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AllergyIntoleranceSubstanceExposureRisk) GetSubstance() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Substance
	}
	return nil
}

func (x *AllergyIntoleranceSubstanceExposureRisk) GetExposureRisk() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ExposureRisk
	}
	return nil
}

// Auto-generated from StructureDefinition for Accession.
// Accession Number.
// See http://hl7.org/fhir/StructureDefinition/auditevent-Accession
type AuditEventAccession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,3,opt,name=value_identifier,json=valueIdentifier,proto3" json:"value_identifier,omitempty"`
}

func (x *AuditEventAccession) Reset() {
	*x = AuditEventAccession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventAccession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventAccession) ProtoMessage() {}

func (x *AuditEventAccession) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventAccession.ProtoReflect.Descriptor instead.
func (*AuditEventAccession) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{18}
}

func (x *AuditEventAccession) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventAccession) GetValueIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ValueIdentifier
	}
	return nil
}

// Auto-generated from StructureDefinition for Anonymized.
// Anonymized state.
// See http://hl7.org/fhir/StructureDefinition/auditevent-Anonymized
type AuditEventAnonymized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *AuditEventAnonymized) Reset() {
	*x = AuditEventAnonymized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventAnonymized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventAnonymized) ProtoMessage() {}

func (x *AuditEventAnonymized) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventAnonymized.ProtoReflect.Descriptor instead.
func (*AuditEventAnonymized) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{19}
}

func (x *AuditEventAnonymized) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventAnonymized) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for Encrypted.
// Encrypted state.
// See http://hl7.org/fhir/StructureDefinition/auditevent-Encrypted
type AuditEventEncrypted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *AuditEventEncrypted) Reset() {
	*x = AuditEventEncrypted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventEncrypted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventEncrypted) ProtoMessage() {}

func (x *AuditEventEncrypted) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventEncrypted.ProtoReflect.Descriptor instead.
func (*AuditEventEncrypted) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{20}
}

func (x *AuditEventEncrypted) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventEncrypted) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for Instance.
// SOP Instance UID value.
// See http://hl7.org/fhir/StructureDefinition/auditevent-Instance
type AuditEventInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,3,opt,name=value_identifier,json=valueIdentifier,proto3" json:"value_identifier,omitempty"`
}

func (x *AuditEventInstance) Reset() {
	*x = AuditEventInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventInstance) ProtoMessage() {}

func (x *AuditEventInstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventInstance.ProtoReflect.Descriptor instead.
func (*AuditEventInstance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{21}
}

func (x *AuditEventInstance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventInstance) GetValueIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ValueIdentifier
	}
	return nil
}

// Auto-generated from StructureDefinition for MPPS.
// MPPS instance UID.
// See http://hl7.org/fhir/StructureDefinition/auditevent-MPPS
type AuditEventMPPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,3,opt,name=value_identifier,json=valueIdentifier,proto3" json:"value_identifier,omitempty"`
}

func (x *AuditEventMPPS) Reset() {
	*x = AuditEventMPPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventMPPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventMPPS) ProtoMessage() {}

func (x *AuditEventMPPS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventMPPS.ProtoReflect.Descriptor instead.
func (*AuditEventMPPS) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{22}
}

func (x *AuditEventMPPS) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventMPPS) GetValueIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ValueIdentifier
	}
	return nil
}

// Auto-generated from StructureDefinition for NumberOfInstances.
// Number of SOP Instances referred to by this entity.
// See http://hl7.org/fhir/StructureDefinition/auditevent-NumberOfInstances
type AuditEventNumberOfInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *AuditEventNumberOfInstances) Reset() {
	*x = AuditEventNumberOfInstances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventNumberOfInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventNumberOfInstances) ProtoMessage() {}

func (x *AuditEventNumberOfInstances) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventNumberOfInstances.ProtoReflect.Descriptor instead.
func (*AuditEventNumberOfInstances) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{23}
}

func (x *AuditEventNumberOfInstances) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventNumberOfInstances) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for ParticipantObjectContainsStudy.
// Contains Study.
// See
// http://hl7.org/fhir/StructureDefinition/auditevent-ParticipantObjectContainsStudy
type AuditEventParticipantObjectContainsStudy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,3,opt,name=value_identifier,json=valueIdentifier,proto3" json:"value_identifier,omitempty"`
}

func (x *AuditEventParticipantObjectContainsStudy) Reset() {
	*x = AuditEventParticipantObjectContainsStudy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventParticipantObjectContainsStudy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventParticipantObjectContainsStudy) ProtoMessage() {}

func (x *AuditEventParticipantObjectContainsStudy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventParticipantObjectContainsStudy.ProtoReflect.Descriptor instead.
func (*AuditEventParticipantObjectContainsStudy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{24}
}

func (x *AuditEventParticipantObjectContainsStudy) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventParticipantObjectContainsStudy) GetValueIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ValueIdentifier
	}
	return nil
}

// Auto-generated from StructureDefinition for SOPClass.
// UIDs of SOP classes referred to.
// See http://hl7.org/fhir/StructureDefinition/auditevent-SOPClass
type AuditEventSOPClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *AuditEventSOPClass) Reset() {
	*x = AuditEventSOPClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventSOPClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventSOPClass) ProtoMessage() {}

func (x *AuditEventSOPClass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventSOPClass.ProtoReflect.Descriptor instead.
func (*AuditEventSOPClass) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{25}
}

func (x *AuditEventSOPClass) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AuditEventSOPClass) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for Birth Place.
// Place of Birth for patient.
// See http://hl7.org/fhir/StructureDefinition/birthPlace
type PatientBirthPlace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueAddress *datatypes_go_proto.Address `protobuf:"bytes,3,opt,name=value_address,json=valueAddress,proto3" json:"value_address,omitempty"`
}

func (x *PatientBirthPlace) Reset() {
	*x = PatientBirthPlace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientBirthPlace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientBirthPlace) ProtoMessage() {}

func (x *PatientBirthPlace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientBirthPlace.ProtoReflect.Descriptor instead.
func (*PatientBirthPlace) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{26}
}

func (x *PatientBirthPlace) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientBirthPlace) GetValueAddress() *datatypes_go_proto.Address {
	if x != nil {
		return x.ValueAddress
	}
	return nil
}

// Auto-generated from StructureDefinition for Body Site Instance.
// Target anatomic location or structure.
// See http://hl7.org/fhir/StructureDefinition/body-site-instance
type BodySiteInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *BodySiteInstance) Reset() {
	*x = BodySiteInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodySiteInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodySiteInstance) ProtoMessage() {}

func (x *BodySiteInstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodySiteInstance.ProtoReflect.Descriptor instead.
func (*BodySiteInstance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{27}
}

func (x *BodySiteInstance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BodySiteInstance) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for expectation.
// SHALL | SHOULD | MAY |SHOULD-NOT.
// See http://hl7.org/fhir/StructureDefinition/capabilitystatement-expectation
type CapabilityStatementExpectation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.ConformanceExpectationCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *CapabilityStatementExpectation) Reset() {
	*x = CapabilityStatementExpectation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityStatementExpectation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityStatementExpectation) ProtoMessage() {}

func (x *CapabilityStatementExpectation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityStatementExpectation.ProtoReflect.Descriptor instead.
func (*CapabilityStatementExpectation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{28}
}

func (x *CapabilityStatementExpectation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CapabilityStatementExpectation) GetValueCode() *codes_go_proto.ConformanceExpectationCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for prohibited.
// Functionality not allowed.
// See http://hl7.org/fhir/StructureDefinition/capabilitystatement-prohibited
type CapabilityStatementProhibited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *CapabilityStatementProhibited) Reset() {
	*x = CapabilityStatementProhibited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityStatementProhibited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityStatementProhibited) ProtoMessage() {}

func (x *CapabilityStatementProhibited) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityStatementProhibited.ProtoReflect.Descriptor instead.
func (*CapabilityStatementProhibited) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{29}
}

func (x *CapabilityStatementProhibited) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CapabilityStatementProhibited) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for search-parameter-combination.
// An allowable parameter combination.
// See
// http://hl7.org/fhir/StructureDefinition/capabilitystatement-search-parameter-combination
type CapabilityStatementSearchParameterCombination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// A required search parameter name
	Required []*datatypes_go_proto.String `protobuf:"bytes,4,rep,name=required,proto3" json:"required,omitempty"`
	// An optional search parameter name
	Optional []*datatypes_go_proto.String `protobuf:"bytes,5,rep,name=optional,proto3" json:"optional,omitempty"`
}

func (x *CapabilityStatementSearchParameterCombination) Reset() {
	*x = CapabilityStatementSearchParameterCombination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityStatementSearchParameterCombination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityStatementSearchParameterCombination) ProtoMessage() {}

func (x *CapabilityStatementSearchParameterCombination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityStatementSearchParameterCombination.ProtoReflect.Descriptor instead.
func (*CapabilityStatementSearchParameterCombination) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{30}
}

func (x *CapabilityStatementSearchParameterCombination) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CapabilityStatementSearchParameterCombination) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CapabilityStatementSearchParameterCombination) GetRequired() []*datatypes_go_proto.String {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *CapabilityStatementSearchParameterCombination) GetOptional() []*datatypes_go_proto.String {
	if x != nil {
		return x.Optional
	}
	return nil
}

// Auto-generated from StructureDefinition for supported-system.
// Code system not defined in a value set.
// See
// http://hl7.org/fhir/StructureDefinition/capabilitystatement-supported-system
type CapabilityStatementSupportedSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *CapabilityStatementSupportedSystem) Reset() {
	*x = CapabilityStatementSupportedSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityStatementSupportedSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityStatementSupportedSystem) ProtoMessage() {}

func (x *CapabilityStatementSupportedSystem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityStatementSupportedSystem.ProtoReflect.Descriptor instead.
func (*CapabilityStatementSupportedSystem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{31}
}

func (x *CapabilityStatementSupportedSystem) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CapabilityStatementSupportedSystem) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for websocket.
// Where server websocket end point is found.
// See http://hl7.org/fhir/StructureDefinition/capabilitystatement-websocket
type CapabilityStatementWebsocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *CapabilityStatementWebsocket) Reset() {
	*x = CapabilityStatementWebsocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityStatementWebsocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityStatementWebsocket) ProtoMessage() {}

func (x *CapabilityStatementWebsocket) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityStatementWebsocket.ProtoReflect.Descriptor instead.
func (*CapabilityStatementWebsocket) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{32}
}

func (x *CapabilityStatementWebsocket) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CapabilityStatementWebsocket) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for activity-title.
// Label for activity.
// See http://hl7.org/fhir/StructureDefinition/careplan-activity-title
type CarePlanActivityTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *CarePlanActivityTitle) Reset() {
	*x = CarePlanActivityTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanActivityTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanActivityTitle) ProtoMessage() {}

func (x *CarePlanActivityTitle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanActivityTitle.ProtoReflect.Descriptor instead.
func (*CarePlanActivityTitle) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{33}
}

func (x *CarePlanActivityTitle) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CarePlanActivityTitle) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for author.
// User or Org actually involved in creating the value set content.
// See http://hl7.org/fhir/StructureDefinition/codesystem-author
type CodeSystemAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *CodeSystemAuthor) Reset() {
	*x = CodeSystemAuthor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemAuthor) ProtoMessage() {}

func (x *CodeSystemAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemAuthor.ProtoReflect.Descriptor instead.
func (*CodeSystemAuthor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{34}
}

func (x *CodeSystemAuthor) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemAuthor) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for comment.
// Human-specified notes and other documentation.
// See http://hl7.org/fhir/StructureDefinition/codesystem-comment
type CodeSystemComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Remarks or other text
	Content *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// When the comment was created
	Timestamp *datatypes_go_proto.Instant `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CodeSystemComment) Reset() {
	*x = CodeSystemComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemComment) ProtoMessage() {}

func (x *CodeSystemComment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemComment.ProtoReflect.Descriptor instead.
func (*CodeSystemComment) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{35}
}

func (x *CodeSystemComment) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemComment) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CodeSystemComment) GetContent() *datatypes_go_proto.String {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *CodeSystemComment) GetTimestamp() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Auto-generated from StructureDefinition for comments.
// Comment about the use of this code in this context.
// See http://hl7.org/fhir/StructureDefinition/codesystem-comments
type CodeSystemComments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *CodeSystemComments) Reset() {
	*x = CodeSystemComments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemComments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemComments) ProtoMessage() {}

func (x *CodeSystemComments) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemComments.ProtoReflect.Descriptor instead.
func (*CodeSystemComments) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{36}
}

func (x *CodeSystemComments) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemComments) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for conceptOrder.
// Appearance order for user selection.
// See http://hl7.org/fhir/StructureDefinition/codesystem-conceptOrder
type CodeSystemConceptOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *CodeSystemConceptOrder) Reset() {
	*x = CodeSystemConceptOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemConceptOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemConceptOrder) ProtoMessage() {}

func (x *CodeSystemConceptOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemConceptOrder.ProtoReflect.Descriptor instead.
func (*CodeSystemConceptOrder) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{37}
}

func (x *CodeSystemConceptOrder) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemConceptOrder) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for deprecated.
// Whether the concept has been deprecated.
// See http://hl7.org/fhir/StructureDefinition/codesystem-deprecated
type CodeSystemDeprecated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *CodeSystemDeprecated) Reset() {
	*x = CodeSystemDeprecated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemDeprecated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemDeprecated) ProtoMessage() {}

func (x *CodeSystemDeprecated) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemDeprecated.ProtoReflect.Descriptor instead.
func (*CodeSystemDeprecated) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{38}
}

func (x *CodeSystemDeprecated) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemDeprecated) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for effectiveDate.
// When the value set version becomes Active and is available for use.
// See http://hl7.org/fhir/StructureDefinition/codesystem-effectiveDate
type CodeSystemEffectiveDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDate *datatypes_go_proto.Date `protobuf:"bytes,3,opt,name=value_date,json=valueDate,proto3" json:"value_date,omitempty"`
}

func (x *CodeSystemEffectiveDate) Reset() {
	*x = CodeSystemEffectiveDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemEffectiveDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemEffectiveDate) ProtoMessage() {}

func (x *CodeSystemEffectiveDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemEffectiveDate.ProtoReflect.Descriptor instead.
func (*CodeSystemEffectiveDate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{39}
}

func (x *CodeSystemEffectiveDate) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemEffectiveDate) GetValueDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ValueDate
	}
	return nil
}

// Auto-generated from StructureDefinition for expirationDate.
// When the value set version should no longer be used.
// See http://hl7.org/fhir/StructureDefinition/codesystem-expirationDate
type CodeSystemExpirationDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDate *datatypes_go_proto.Date `protobuf:"bytes,3,opt,name=value_date,json=valueDate,proto3" json:"value_date,omitempty"`
}

func (x *CodeSystemExpirationDate) Reset() {
	*x = CodeSystemExpirationDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemExpirationDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemExpirationDate) ProtoMessage() {}

func (x *CodeSystemExpirationDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemExpirationDate.ProtoReflect.Descriptor instead.
func (*CodeSystemExpirationDate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{40}
}

func (x *CodeSystemExpirationDate) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemExpirationDate) GetValueDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ValueDate
	}
	return nil
}

// Auto-generated from StructureDefinition for history.
// What has happened over time.
// See http://hl7.org/fhir/StructureDefinition/codesystem-history
type CodeSystemHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The name of this set of history entries
	Name     *datatypes_go_proto.String    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Revision []*CodeSystemHistory_Revision `protobuf:"bytes,5,rep,name=revision,proto3" json:"revision,omitempty"`
}

func (x *CodeSystemHistory) Reset() {
	*x = CodeSystemHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemHistory) ProtoMessage() {}

func (x *CodeSystemHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemHistory.ProtoReflect.Descriptor instead.
func (*CodeSystemHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{41}
}

func (x *CodeSystemHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CodeSystemHistory) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CodeSystemHistory) GetRevision() []*CodeSystemHistory_Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

// Auto-generated from StructureDefinition for keyWord.
// Descriptors and key terms for search.
// See http://hl7.org/fhir/StructureDefinition/codesystem-keyWord
type CodeSystemKeyWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *CodeSystemKeyWord) Reset() {
	*x = CodeSystemKeyWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemKeyWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemKeyWord) ProtoMessage() {}

func (x *CodeSystemKeyWord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemKeyWord.ProtoReflect.Descriptor instead.
func (*CodeSystemKeyWord) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{42}
}

func (x *CodeSystemKeyWord) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemKeyWord) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for label.
// E.g. "(a)", "1.", etc.
// See http://hl7.org/fhir/StructureDefinition/codesystem-label
type CodeSystemLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *CodeSystemLabel) Reset() {
	*x = CodeSystemLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemLabel) ProtoMessage() {}

func (x *CodeSystemLabel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemLabel.ProtoReflect.Descriptor instead.
func (*CodeSystemLabel) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{43}
}

func (x *CodeSystemLabel) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemLabel) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for map.
// A concept map relevant to interpret this value set.
// See http://hl7.org/fhir/StructureDefinition/codesystem-map
type CodeSystemMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *CodeSystemMap) Reset() {
	*x = CodeSystemMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemMap) ProtoMessage() {}

func (x *CodeSystemMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemMap.ProtoReflect.Descriptor instead.
func (*CodeSystemMap) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{44}
}

func (x *CodeSystemMap) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemMap) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for ordinalValue.
// Comparison value for ordinal codes.
// See http://hl7.org/fhir/StructureDefinition/codesystem-ordinalValue
type CodeSystemOrdinalValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDecimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=value_decimal,json=valueDecimal,proto3" json:"value_decimal,omitempty"`
}

func (x *CodeSystemOrdinalValue) Reset() {
	*x = CodeSystemOrdinalValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemOrdinalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemOrdinalValue) ProtoMessage() {}

func (x *CodeSystemOrdinalValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemOrdinalValue.ProtoReflect.Descriptor instead.
func (*CodeSystemOrdinalValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{45}
}

func (x *CodeSystemOrdinalValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemOrdinalValue) GetValueDecimal() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.ValueDecimal
	}
	return nil
}

// Auto-generated from StructureDefinition for otherName.
// Alternative names.
// See http://hl7.org/fhir/StructureDefinition/codesystem-otherName
type CodeSystemOtherName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Human readable, short and specific
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Which name is preferred for this language
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=preferred,proto3" json:"preferred,omitempty"`
}

func (x *CodeSystemOtherName) Reset() {
	*x = CodeSystemOtherName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemOtherName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemOtherName) ProtoMessage() {}

func (x *CodeSystemOtherName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemOtherName.ProtoReflect.Descriptor instead.
func (*CodeSystemOtherName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{46}
}

func (x *CodeSystemOtherName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemOtherName) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CodeSystemOtherName) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CodeSystemOtherName) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

// Auto-generated from StructureDefinition for reference.
// Url of Value set the code was chosen from.
// See http://hl7.org/fhir/StructureDefinition/codesystem-reference
type CodeSystemReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *CodeSystemReference) Reset() {
	*x = CodeSystemReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemReference) ProtoMessage() {}

func (x *CodeSystemReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemReference.ProtoReflect.Descriptor instead.
func (*CodeSystemReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{47}
}

func (x *CodeSystemReference) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemReference) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for replacedby.
// A code that replaces this.
// See http://hl7.org/fhir/StructureDefinition/codesystem-replacedby
type CodeSystemReplacedby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCoding *datatypes_go_proto.Coding `protobuf:"bytes,3,opt,name=value_coding,json=valueCoding,proto3" json:"value_coding,omitempty"`
}

func (x *CodeSystemReplacedby) Reset() {
	*x = CodeSystemReplacedby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemReplacedby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemReplacedby) ProtoMessage() {}

func (x *CodeSystemReplacedby) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemReplacedby.ProtoReflect.Descriptor instead.
func (*CodeSystemReplacedby) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{48}
}

func (x *CodeSystemReplacedby) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemReplacedby) GetValueCoding() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ValueCoding
	}
	return nil
}

// Auto-generated from StructureDefinition for sourceReference.
// Where did this content come from.
// See http://hl7.org/fhir/StructureDefinition/codesystem-sourceReference
type CodeSystemSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *CodeSystemSourceReference) Reset() {
	*x = CodeSystemSourceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemSourceReference) ProtoMessage() {}

func (x *CodeSystemSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemSourceReference.ProtoReflect.Descriptor instead.
func (*CodeSystemSourceReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{49}
}

func (x *CodeSystemSourceReference) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemSourceReference) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for subsumes.
// Codes that this concept subsumes that have already been declared elsewhere.
// See http://hl7.org/fhir/StructureDefinition/codesystem-subsumes
type CodeSystemSubsumes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *datatypes_go_proto.Code `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *CodeSystemSubsumes) Reset() {
	*x = CodeSystemSubsumes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemSubsumes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemSubsumes) ProtoMessage() {}

func (x *CodeSystemSubsumes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemSubsumes.ProtoReflect.Descriptor instead.
func (*CodeSystemSubsumes) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{50}
}

func (x *CodeSystemSubsumes) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemSubsumes) GetValueCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for trusted-expansion.
// Reference to a trusted expansion.
// See http://hl7.org/fhir/StructureDefinition/codesystem-trusted-expansion
type CodeSystemTrustedExpansion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *CodeSystemTrustedExpansion) Reset() {
	*x = CodeSystemTrustedExpansion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemTrustedExpansion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemTrustedExpansion) ProtoMessage() {}

func (x *CodeSystemTrustedExpansion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemTrustedExpansion.ProtoReflect.Descriptor instead.
func (*CodeSystemTrustedExpansion) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{51}
}

func (x *CodeSystemTrustedExpansion) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemTrustedExpansion) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for usage.
// Who has used and how?.
// See http://hl7.org/fhir/StructureDefinition/codesystem-usage
type CodeSystemUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// A consumer of or client for the value set
	User *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Implementation/project/standard that uses value set
	Use *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
}

func (x *CodeSystemUsage) Reset() {
	*x = CodeSystemUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemUsage) ProtoMessage() {}

func (x *CodeSystemUsage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemUsage.ProtoReflect.Descriptor instead.
func (*CodeSystemUsage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{52}
}

func (x *CodeSystemUsage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemUsage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CodeSystemUsage) GetUser() *datatypes_go_proto.String {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CodeSystemUsage) GetUse() *datatypes_go_proto.String {
	if x != nil {
		return x.Use
	}
	return nil
}

// Auto-generated from StructureDefinition for warning.
// Extra warning about the correct use of the value set.
// See http://hl7.org/fhir/StructureDefinition/codesystem-warning
type CodeSystemWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueMarkdown *datatypes_go_proto.Markdown `protobuf:"bytes,3,opt,name=value_markdown,json=valueMarkdown,proto3" json:"value_markdown,omitempty"`
}

func (x *CodeSystemWarning) Reset() {
	*x = CodeSystemWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemWarning) ProtoMessage() {}

func (x *CodeSystemWarning) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemWarning.ProtoReflect.Descriptor instead.
func (*CodeSystemWarning) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{53}
}

func (x *CodeSystemWarning) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemWarning) GetValueMarkdown() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.ValueMarkdown
	}
	return nil
}

// Auto-generated from StructureDefinition for workflowStatus.
// Indicates the state of development of the value set.
// See http://hl7.org/fhir/StructureDefinition/codesystem-workflowStatus
type CodeSystemWorkflowStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *CodeSystemWorkflowStatus) Reset() {
	*x = CodeSystemWorkflowStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemWorkflowStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemWorkflowStatus) ProtoMessage() {}

func (x *CodeSystemWorkflowStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemWorkflowStatus.ProtoReflect.Descriptor instead.
func (*CodeSystemWorkflowStatus) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{54}
}

func (x *CodeSystemWorkflowStatus) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemWorkflowStatus) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for sctdescid.
// SNOMED CT Description ID.
// See http://hl7.org/fhir/StructureDefinition/coding-sctdescid
type CodingSctdescid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueId *datatypes_go_proto.Id `protobuf:"bytes,3,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`
}

func (x *CodingSctdescid) Reset() {
	*x = CodingSctdescid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodingSctdescid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodingSctdescid) ProtoMessage() {}

func (x *CodingSctdescid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodingSctdescid.ProtoReflect.Descriptor instead.
func (*CodingSctdescid) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{55}
}

func (x *CodingSctdescid) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodingSctdescid) GetValueId() *datatypes_go_proto.Id {
	if x != nil {
		return x.ValueId
	}
	return nil
}

// Auto-generated from StructureDefinition for media.
// Attached media.
// See http://hl7.org/fhir/StructureDefinition/communication-media
type CommunicationMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueAttachment *datatypes_go_proto.Attachment `protobuf:"bytes,3,opt,name=value_attachment,json=valueAttachment,proto3" json:"value_attachment,omitempty"`
}

func (x *CommunicationMedia) Reset() {
	*x = CommunicationMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationMedia) ProtoMessage() {}

func (x *CommunicationMedia) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationMedia.ProtoReflect.Descriptor instead.
func (*CommunicationMedia) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{56}
}

func (x *CommunicationMedia) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationMedia) GetValueAttachment() *datatypes_go_proto.Attachment {
	if x != nil {
		return x.ValueAttachment
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonNotPerformed.
// Why the communication was not or could not be carried out.
// See http://hl7.org/fhir/StructureDefinition/communication-reasonNotPerformed
type CommunicationReasonNotPerformed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *CommunicationReasonNotPerformed) Reset() {
	*x = CommunicationReasonNotPerformed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationReasonNotPerformed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationReasonNotPerformed) ProtoMessage() {}

func (x *CommunicationReasonNotPerformed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationReasonNotPerformed.ProtoReflect.Descriptor instead.
func (*CommunicationReasonNotPerformed) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{57}
}

func (x *CommunicationReasonNotPerformed) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationReasonNotPerformed) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for definition.
// Instantiates protocol or definition.
// See http://hl7.org/fhir/StructureDefinition/communicationrequest-definition
type CommunicationRequestDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *CommunicationRequestDefinition_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CommunicationRequestDefinition) Reset() {
	*x = CommunicationRequestDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequestDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequestDefinition) ProtoMessage() {}

func (x *CommunicationRequestDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequestDefinition.ProtoReflect.Descriptor instead.
func (*CommunicationRequestDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{58}
}

func (x *CommunicationRequestDefinition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationRequestDefinition) GetValue() *CommunicationRequestDefinition_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for orderedBy.
// Agent that ordered the communication.
// See http://hl7.org/fhir/StructureDefinition/communicationrequest-orderedBy
type CommunicationRequestOrderedBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *CommunicationRequestOrderedBy_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CommunicationRequestOrderedBy) Reset() {
	*x = CommunicationRequestOrderedBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequestOrderedBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequestOrderedBy) ProtoMessage() {}

func (x *CommunicationRequestOrderedBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequestOrderedBy.ProtoReflect.Descriptor instead.
func (*CommunicationRequestOrderedBy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{59}
}

func (x *CommunicationRequestOrderedBy) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationRequestOrderedBy) GetValue() *CommunicationRequestOrderedBy_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonRejected.
// Why the recipient could not be act upon the request.
// See
// http://hl7.org/fhir/StructureDefinition/communicationrequest-reasonRejected
type CommunicationRequestReasonRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *CommunicationRequestReasonRejected) Reset() {
	*x = CommunicationRequestReasonRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequestReasonRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequestReasonRejected) ProtoMessage() {}

func (x *CommunicationRequestReasonRejected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequestReasonRejected.ProtoReflect.Descriptor instead.
func (*CommunicationRequestReasonRejected) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{60}
}

func (x *CommunicationRequestReasonRejected) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationRequestReasonRejected) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for relevantHistory.
// Key events in history of request.
// See
// http://hl7.org/fhir/StructureDefinition/communicationrequest-relevantHistory
type CommunicationRequestRelevantHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *CommunicationRequestRelevantHistory) Reset() {
	*x = CommunicationRequestRelevantHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequestRelevantHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequestRelevantHistory) ProtoMessage() {}

func (x *CommunicationRequestRelevantHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequestRelevantHistory.ProtoReflect.Descriptor instead.
func (*CommunicationRequestRelevantHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{61}
}

func (x *CommunicationRequestRelevantHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationRequestRelevantHistory) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for supportingInfo.
// Extra information to use in performing request.
// See
// http://hl7.org/fhir/StructureDefinition/communicationrequest-supportingInfo
type CommunicationRequestSupportingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *CommunicationRequestSupportingInfo) Reset() {
	*x = CommunicationRequestSupportingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequestSupportingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequestSupportingInfo) ProtoMessage() {}

func (x *CommunicationRequestSupportingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequestSupportingInfo.ProtoReflect.Descriptor instead.
func (*CommunicationRequestSupportingInfo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{62}
}

func (x *CommunicationRequestSupportingInfo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CommunicationRequestSupportingInfo) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for otherConfidentiality.
// Additional confidentiality codes.
// See
// http://hl7.org/fhir/StructureDefinition/composition-clindoc-otherConfidentiality
type CompositionOtherConfidentiality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCoding *datatypes_go_proto.Coding `protobuf:"bytes,3,opt,name=value_coding,json=valueCoding,proto3" json:"value_coding,omitempty"`
}

func (x *CompositionOtherConfidentiality) Reset() {
	*x = CompositionOtherConfidentiality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositionOtherConfidentiality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionOtherConfidentiality) ProtoMessage() {}

func (x *CompositionOtherConfidentiality) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionOtherConfidentiality.ProtoReflect.Descriptor instead.
func (*CompositionOtherConfidentiality) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{63}
}

func (x *CompositionOtherConfidentiality) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CompositionOtherConfidentiality) GetValueCoding() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ValueCoding
	}
	return nil
}

// Auto-generated from StructureDefinition for bidirectional.
// Whether the map can be interpreted in reverse.
// See http://hl7.org/fhir/StructureDefinition/concept-bidirectional
type ConceptMapBidirectional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *ConceptMapBidirectional) Reset() {
	*x = ConceptMapBidirectional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapBidirectional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapBidirectional) ProtoMessage() {}

func (x *ConceptMapBidirectional) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapBidirectional.ProtoReflect.Descriptor instead.
func (*ConceptMapBidirectional) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{64}
}

func (x *ConceptMapBidirectional) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConceptMapBidirectional) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for basedOn.
// Request fufilled by this condition.
// See http://hl7.org/fhir/StructureDefinition/condition-basedOn
type ConditionBasedOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ConditionBasedOn_Value    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConditionBasedOn) Reset() {
	*x = ConditionBasedOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionBasedOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionBasedOn) ProtoMessage() {}

func (x *ConditionBasedOn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionBasedOn.ProtoReflect.Descriptor instead.
func (*ConditionBasedOn) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{65}
}

func (x *ConditionBasedOn) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionBasedOn) GetValue() *ConditionBasedOn_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for criticality.
// Potential impact of the condition.
// See http://hl7.org/fhir/StructureDefinition/condition-criticality
type ConditionCriticality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ConditionCriticality) Reset() {
	*x = ConditionCriticality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionCriticality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionCriticality) ProtoMessage() {}

func (x *ConditionCriticality) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionCriticality.ProtoReflect.Descriptor instead.
func (*ConditionCriticality) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{66}
}

func (x *ConditionCriticality) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionCriticality) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for definition.
// Instantiates protocol or definition.
// See http://hl7.org/fhir/StructureDefinition/condition-definition
type ConditionDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ConditionDefinition) Reset() {
	*x = ConditionDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionDefinition) ProtoMessage() {}

func (x *ConditionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionDefinition.ProtoReflect.Descriptor instead.
func (*ConditionDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{67}
}

func (x *ConditionDefinition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionDefinition) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for dueTo.
// Causes for this Condition.
// See http://hl7.org/fhir/StructureDefinition/condition-dueTo
type ConditionDueTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ConditionDueTo_Value      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConditionDueTo) Reset() {
	*x = ConditionDueTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionDueTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionDueTo) ProtoMessage() {}

func (x *ConditionDueTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionDueTo.ProtoReflect.Descriptor instead.
func (*ConditionDueTo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{68}
}

func (x *ConditionDueTo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionDueTo) GetValue() *ConditionDueTo_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for occurredFollowing.
// Precedent for this Condition.
// See http://hl7.org/fhir/StructureDefinition/condition-occurredFollowing
type ConditionOccurredFollowing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ConditionOccurredFollowing_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConditionOccurredFollowing) Reset() {
	*x = ConditionOccurredFollowing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOccurredFollowing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOccurredFollowing) ProtoMessage() {}

func (x *ConditionOccurredFollowing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOccurredFollowing.ProtoReflect.Descriptor instead.
func (*ConditionOccurredFollowing) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{69}
}

func (x *ConditionOccurredFollowing) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionOccurredFollowing) GetValue() *ConditionOccurredFollowing_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for outcome.
// A consequence of the Condition.
// See http://hl7.org/fhir/StructureDefinition/condition-outcome
type ConditionOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ConditionOutcome) Reset() {
	*x = ConditionOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOutcome) ProtoMessage() {}

func (x *ConditionOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOutcome.ProtoReflect.Descriptor instead.
func (*ConditionOutcome) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{70}
}

func (x *ConditionOutcome) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionOutcome) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for partOf.
// Part of this condition.
// See http://hl7.org/fhir/StructureDefinition/condition-partOf
type ConditionPartOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ConditionPartOf_Value     `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConditionPartOf) Reset() {
	*x = ConditionPartOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionPartOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionPartOf) ProtoMessage() {}

func (x *ConditionPartOf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionPartOf.ProtoReflect.Descriptor instead.
func (*ConditionPartOf) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{71}
}

func (x *ConditionPartOf) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionPartOf) GetValue() *ConditionPartOf_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for ruledOut.
// Conditions ruled out for this condition.
// See http://hl7.org/fhir/StructureDefinition/condition-ruledOut
type ConditionRuledOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ConditionRuledOut) Reset() {
	*x = ConditionRuledOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionRuledOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionRuledOut) ProtoMessage() {}

func (x *ConditionRuledOut) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionRuledOut.ProtoReflect.Descriptor instead.
func (*ConditionRuledOut) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{72}
}

func (x *ConditionRuledOut) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionRuledOut) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for targetBodySite.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/condition-targetBodySite
type ConditionTargetBodySite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ConditionTargetBodySite) Reset() {
	*x = ConditionTargetBodySite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionTargetBodySite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionTargetBodySite) ProtoMessage() {}

func (x *ConditionTargetBodySite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionTargetBodySite.ProtoReflect.Descriptor instead.
func (*ConditionTargetBodySite) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{73}
}

func (x *ConditionTargetBodySite) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConditionTargetBodySite) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for location.
// A location specific constraint.
// See http://hl7.org/fhir/StructureDefinition/consent-location
type ConsentLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ConsentLocation) Reset() {
	*x = ConsentLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentLocation) ProtoMessage() {}

func (x *ConsentLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentLocation.ProtoReflect.Descriptor instead.
func (*ConsentLocation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{74}
}

func (x *ConsentLocation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConsentLocation) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for NotificationEndpoint.
// Notification Endpoint.
// See http://hl7.org/fhir/StructureDefinition/consent-NotificationEndpoint
type ConsentNotificationEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *ConsentNotificationEndpoint) Reset() {
	*x = ConsentNotificationEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentNotificationEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentNotificationEndpoint) ProtoMessage() {}

func (x *ConsentNotificationEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentNotificationEndpoint.ProtoReflect.Descriptor instead.
func (*ConsentNotificationEndpoint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{75}
}

func (x *ConsentNotificationEndpoint) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConsentNotificationEndpoint) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for Witness.
// Witness to Consent.
// See http://hl7.org/fhir/StructureDefinition/consent-Witness
type ConsentWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ConsentWitness_Value      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConsentWitness) Reset() {
	*x = ConsentWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentWitness) ProtoMessage() {}

func (x *ConsentWitness) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentWitness.ProtoReflect.Descriptor instead.
func (*ConsentWitness) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{76}
}

func (x *ConsentWitness) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConsentWitness) GetValue() *ConsentWitness_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for calculatedValue.
// A calculated value.
// See http://hl7.org/fhir/StructureDefinition/cqif-calculatedValue
type CalculatedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *CalculatedValue) Reset() {
	*x = CalculatedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedValue) ProtoMessage() {}

func (x *CalculatedValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedValue.ProtoReflect.Descriptor instead.
func (*CalculatedValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{77}
}

func (x *CalculatedValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CalculatedValue) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for citation.
// Bibliographic citation for the resource.
// See http://hl7.org/fhir/StructureDefinition/cqif-citation
type AttachmentCitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AttachmentCitation) Reset() {
	*x = AttachmentCitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachmentCitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentCitation) ProtoMessage() {}

func (x *AttachmentCitation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentCitation.ProtoReflect.Descriptor instead.
func (*AttachmentCitation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{78}
}

func (x *AttachmentCitation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AttachmentCitation) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for cqifCondition.
// A condition expression.
// See http://hl7.org/fhir/StructureDefinition/cqif-condition
type CqifCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *CqifCondition) Reset() {
	*x = CqifCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CqifCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CqifCondition) ProtoMessage() {}

func (x *CqifCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CqifCondition.ProtoReflect.Descriptor instead.
func (*CqifCondition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{79}
}

func (x *CqifCondition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CqifCondition) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for cqlExpression.
// CQL expression.
// See http://hl7.org/fhir/StructureDefinition/cqif-cqlExpression
type CqlExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *CqlExpression) Reset() {
	*x = CqlExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CqlExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CqlExpression) ProtoMessage() {}

func (x *CqlExpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CqlExpression.ProtoReflect.Descriptor instead.
func (*CqlExpression) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{80}
}

func (x *CqlExpression) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CqlExpression) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for fhirPathExpression.
// FHIRPath expression.
// See http://hl7.org/fhir/StructureDefinition/cqif-fhirPathExpression
type FhirPathExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *FhirPathExpression) Reset() {
	*x = FhirPathExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FhirPathExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FhirPathExpression) ProtoMessage() {}

func (x *FhirPathExpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FhirPathExpression.ProtoReflect.Descriptor instead.
func (*FhirPathExpression) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{81}
}

func (x *FhirPathExpression) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FhirPathExpression) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for encounterClass.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/cqif-guidanceencounterClass
type BasicEncounterClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *BasicEncounterClass) Reset() {
	*x = BasicEncounterClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicEncounterClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicEncounterClass) ProtoMessage() {}

func (x *BasicEncounterClass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicEncounterClass.ProtoReflect.Descriptor instead.
func (*BasicEncounterClass) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{82}
}

func (x *BasicEncounterClass) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicEncounterClass) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for encounterType.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/cqif-guidanceencounterType
type BasicEncounterType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *BasicEncounterType) Reset() {
	*x = BasicEncounterType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicEncounterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicEncounterType) ProtoMessage() {}

func (x *BasicEncounterType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicEncounterType.ProtoReflect.Descriptor instead.
func (*BasicEncounterType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{83}
}

func (x *BasicEncounterType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicEncounterType) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for initiatingOrganization.
// Extension.
// See
// http://hl7.org/fhir/StructureDefinition/cqif-guidanceinitiatingOrganization
type BasicInitiatingOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *BasicInitiatingOrganization) Reset() {
	*x = BasicInitiatingOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicInitiatingOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInitiatingOrganization) ProtoMessage() {}

func (x *BasicInitiatingOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInitiatingOrganization.ProtoReflect.Descriptor instead.
func (*BasicInitiatingOrganization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{84}
}

func (x *BasicInitiatingOrganization) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicInitiatingOrganization) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for initiatingPerson.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/cqif-guidanceinitiatingPerson
type BasicInitiatingPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *BasicInitiatingPerson_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BasicInitiatingPerson) Reset() {
	*x = BasicInitiatingPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicInitiatingPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInitiatingPerson) ProtoMessage() {}

func (x *BasicInitiatingPerson) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInitiatingPerson.ProtoReflect.Descriptor instead.
func (*BasicInitiatingPerson) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{85}
}

func (x *BasicInitiatingPerson) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicInitiatingPerson) GetValue() *BasicInitiatingPerson_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for receivingOrganization.
// Extension.
// See
// http://hl7.org/fhir/StructureDefinition/cqif-guidancereceivingOrganization
type BasicReceivingOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *BasicReceivingOrganization) Reset() {
	*x = BasicReceivingOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicReceivingOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicReceivingOrganization) ProtoMessage() {}

func (x *BasicReceivingOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicReceivingOrganization.ProtoReflect.Descriptor instead.
func (*BasicReceivingOrganization) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{86}
}

func (x *BasicReceivingOrganization) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicReceivingOrganization) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for receivingPerson.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/cqif-guidancereceivingPerson
type BasicReceivingPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *BasicReceivingPerson_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BasicReceivingPerson) Reset() {
	*x = BasicReceivingPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicReceivingPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicReceivingPerson) ProtoMessage() {}

func (x *BasicReceivingPerson) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicReceivingPerson.ProtoReflect.Descriptor instead.
func (*BasicReceivingPerson) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{87}
}

func (x *BasicReceivingPerson) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicReceivingPerson) GetValue() *BasicReceivingPerson_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for recipientLanguage.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/cqif-guidancerecipientLanguage
type BasicRecipientLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *BasicRecipientLanguage) Reset() {
	*x = BasicRecipientLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicRecipientLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicRecipientLanguage) ProtoMessage() {}

func (x *BasicRecipientLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicRecipientLanguage.ProtoReflect.Descriptor instead.
func (*BasicRecipientLanguage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{88}
}

func (x *BasicRecipientLanguage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicRecipientLanguage) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for recipientType.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/cqif-guidancerecipientType
type BasicRecipientType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *BasicRecipientType) Reset() {
	*x = BasicRecipientType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicRecipientType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicRecipientType) ProtoMessage() {}

func (x *BasicRecipientType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicRecipientType.ProtoReflect.Descriptor instead.
func (*BasicRecipientType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{89}
}

func (x *BasicRecipientType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicRecipientType) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for systemUserLanguage.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/cqif-guidancesystemUserLanguage
type BasicSystemUserLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *BasicSystemUserLanguage) Reset() {
	*x = BasicSystemUserLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicSystemUserLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicSystemUserLanguage) ProtoMessage() {}

func (x *BasicSystemUserLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicSystemUserLanguage.ProtoReflect.Descriptor instead.
func (*BasicSystemUserLanguage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{90}
}

func (x *BasicSystemUserLanguage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicSystemUserLanguage) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for systemUserTaskContext.
// The task the system user is performing.
// See
// http://hl7.org/fhir/StructureDefinition/cqif-guidancesystemUserTaskContext
type BasicSystemUserTaskContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *BasicSystemUserTaskContext) Reset() {
	*x = BasicSystemUserTaskContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicSystemUserTaskContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicSystemUserTaskContext) ProtoMessage() {}

func (x *BasicSystemUserTaskContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicSystemUserTaskContext.ProtoReflect.Descriptor instead.
func (*BasicSystemUserTaskContext) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{91}
}

func (x *BasicSystemUserTaskContext) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicSystemUserTaskContext) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for systemUserType.
// The type of user initiating the request.
// See http://hl7.org/fhir/StructureDefinition/cqif-guidancesystemUserType
type BasicSystemUserType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *BasicSystemUserType) Reset() {
	*x = BasicSystemUserType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicSystemUserType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicSystemUserType) ProtoMessage() {}

func (x *BasicSystemUserType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicSystemUserType.ProtoReflect.Descriptor instead.
func (*BasicSystemUserType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{92}
}

func (x *BasicSystemUserType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BasicSystemUserType) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for initialValue.
// An initial value expression.
// See http://hl7.org/fhir/StructureDefinition/cqif-initialValue
type InitialValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *InitialValue) Reset() {
	*x = InitialValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialValue) ProtoMessage() {}

func (x *InitialValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialValue.ProtoReflect.Descriptor instead.
func (*InitialValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{93}
}

func (x *InitialValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitialValue) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for cqifLibrary.
// A library containing logic used by the artifact.
// See http://hl7.org/fhir/StructureDefinition/cqif-library
type CqifLibrary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *CqifLibrary) Reset() {
	*x = CqifLibrary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CqifLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CqifLibrary) ProtoMessage() {}

func (x *CqifLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CqifLibrary.ProtoReflect.Descriptor instead.
func (*CqifLibrary) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{94}
}

func (x *CqifLibrary) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CqifLibrary) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for measureInfo.
// Measure criteria for the resource.
// See http://hl7.org/fhir/StructureDefinition/cqif-measureInfo
type MeasureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The measure being calculated
	Measure *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=measure,proto3" json:"measure,omitempty"`
	// The group identifier
	GroupIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,5,opt,name=group_identifier,json=groupIdentifier,proto3" json:"group_identifier,omitempty"`
	// The population identifier
	PopulationIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,6,opt,name=population_identifier,json=populationIdentifier,proto3" json:"population_identifier,omitempty"`
}

func (x *MeasureInfo) Reset() {
	*x = MeasureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureInfo) ProtoMessage() {}

func (x *MeasureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureInfo.ProtoReflect.Descriptor instead.
func (*MeasureInfo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{95}
}

func (x *MeasureInfo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MeasureInfo) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MeasureInfo) GetMeasure() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Measure
	}
	return nil
}

func (x *MeasureInfo) GetGroupIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.GroupIdentifier
	}
	return nil
}

func (x *MeasureInfo) GetPopulationIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.PopulationIdentifier
	}
	return nil
}

// Auto-generated from StructureDefinition for optionCode.
// Meaning of the response option.
// See http://hl7.org/fhir/StructureDefinition/cqif-optionCode
type QuestionnaireOptionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *QuestionnaireOptionCode) Reset() {
	*x = QuestionnaireOptionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireOptionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireOptionCode) ProtoMessage() {}

func (x *QuestionnaireOptionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireOptionCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireOptionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{96}
}

func (x *QuestionnaireOptionCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireOptionCode) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for qualityOfEvidence.
// The quality of the evidence.
// See http://hl7.org/fhir/StructureDefinition/cqif-qualityOfEvidence
type AttachmentQualityOfEvidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *AttachmentQualityOfEvidence) Reset() {
	*x = AttachmentQualityOfEvidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachmentQualityOfEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentQualityOfEvidence) ProtoMessage() {}

func (x *AttachmentQualityOfEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentQualityOfEvidence.ProtoReflect.Descriptor instead.
func (*AttachmentQualityOfEvidence) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{97}
}

func (x *AttachmentQualityOfEvidence) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AttachmentQualityOfEvidence) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for sourceValueSet.
// Source value set for the coding.
// See http://hl7.org/fhir/StructureDefinition/cqif-sourceValueSet
type CodingSourceValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *CodingSourceValueSet) Reset() {
	*x = CodingSourceValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodingSourceValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodingSourceValueSet) ProtoMessage() {}

func (x *CodingSourceValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodingSourceValueSet.ProtoReflect.Descriptor instead.
func (*CodingSourceValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{98}
}

func (x *CodingSourceValueSet) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodingSourceValueSet) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for strengthOfRecommendation.
// The strength of the recommendation.
// See http://hl7.org/fhir/StructureDefinition/cqif-strengthOfRecommendation
type AttachmentStrengthOfRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *AttachmentStrengthOfRecommendation) Reset() {
	*x = AttachmentStrengthOfRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachmentStrengthOfRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentStrengthOfRecommendation) ProtoMessage() {}

func (x *AttachmentStrengthOfRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentStrengthOfRecommendation.ProtoReflect.Descriptor instead.
func (*AttachmentStrengthOfRecommendation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{99}
}

func (x *AttachmentStrengthOfRecommendation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AttachmentStrengthOfRecommendation) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for Data Absent Reason.
// unknown | asked | temp | notasked | masked | unsupported | astext | error.
// See http://hl7.org/fhir/StructureDefinition/data-absent-reason
type DataAbsentReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.DataAbsentReasonCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *DataAbsentReason) Reset() {
	*x = DataAbsentReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAbsentReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAbsentReason) ProtoMessage() {}

func (x *DataAbsentReason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAbsentReason.ProtoReflect.Descriptor instead.
func (*DataAbsentReason) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{100}
}

func (x *DataAbsentReason) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataAbsentReason) GetValueCode() *codes_go_proto.DataAbsentReasonCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for datadictionary.
// Associates the structure definition with a collection of Data Elements.
// See http://hl7.org/fhir/StructureDefinition/datadictionary
type StructureDefinitionDatadictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *StructureDefinitionDatadictionary) Reset() {
	*x = StructureDefinitionDatadictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionDatadictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionDatadictionary) ProtoMessage() {}

func (x *StructureDefinitionDatadictionary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionDatadictionary.ProtoReflect.Descriptor instead.
func (*StructureDefinitionDatadictionary) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{101}
}

func (x *StructureDefinitionDatadictionary) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionDatadictionary) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for din.
// DIN | DIC | Distinct Idendification Code.
// See http://hl7.org/fhir/StructureDefinition/device-din
type DeviceDin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,3,opt,name=value_identifier,json=valueIdentifier,proto3" json:"value_identifier,omitempty"`
}

func (x *DeviceDin) Reset() {
	*x = DeviceDin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDin) ProtoMessage() {}

func (x *DeviceDin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDin.ProtoReflect.Descriptor instead.
func (*DeviceDin) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{102}
}

func (x *DeviceDin) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceDin) GetValueIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ValueIdentifier
	}
	return nil
}

// Auto-generated from StructureDefinition for implant-status.
// Implant Status.
// See http://hl7.org/fhir/StructureDefinition/device-implant-status
type DeviceImplantStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.ImplantStatusCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *DeviceImplantStatus) Reset() {
	*x = DeviceImplantStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceImplantStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceImplantStatus) ProtoMessage() {}

func (x *DeviceImplantStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceImplantStatus.ProtoReflect.Descriptor instead.
func (*DeviceImplantStatus) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{103}
}

func (x *DeviceImplantStatus) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceImplantStatus) GetValueCode() *codes_go_proto.ImplantStatusCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for patientInstruction.
// Patient Friendly Insructions.
// See http://hl7.org/fhir/StructureDefinition/devicerequest-patientInstruction
type DeviceRequestPatientInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Language
	Lang *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	// Text
	Content *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *DeviceRequestPatientInstruction) Reset() {
	*x = DeviceRequestPatientInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRequestPatientInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRequestPatientInstruction) ProtoMessage() {}

func (x *DeviceRequestPatientInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRequestPatientInstruction.ProtoReflect.Descriptor instead.
func (*DeviceRequestPatientInstruction) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{104}
}

func (x *DeviceRequestPatientInstruction) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceRequestPatientInstruction) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DeviceRequestPatientInstruction) GetLang() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Lang
	}
	return nil
}

func (x *DeviceRequestPatientInstruction) GetContent() *datatypes_go_proto.String {
	if x != nil {
		return x.Content
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonRejected.
// If request was rejected, why?.
// See http://hl7.org/fhir/StructureDefinition/devicerequest-reasonRejected
type DeviceRequestReasonRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *DeviceRequestReasonRejected) Reset() {
	*x = DeviceRequestReasonRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRequestReasonRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRequestReasonRejected) ProtoMessage() {}

func (x *DeviceRequestReasonRejected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRequestReasonRejected.ProtoReflect.Descriptor instead.
func (*DeviceRequestReasonRejected) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{105}
}

func (x *DeviceRequestReasonRejected) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceRequestReasonRejected) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for addendumOf.
// Additional or Supplement Content.
// See http://hl7.org/fhir/StructureDefinition/diagnosticReport-addendumOf
type DiagnosticReportAddendumOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DiagnosticReportAddendumOf) Reset() {
	*x = DiagnosticReportAddendumOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportAddendumOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportAddendumOf) ProtoMessage() {}

func (x *DiagnosticReportAddendumOf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportAddendumOf.ProtoReflect.Descriptor instead.
func (*DiagnosticReportAddendumOf) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{106}
}

func (x *DiagnosticReportAddendumOf) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportAddendumOf) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for extends.
// Related reports.
// See http://hl7.org/fhir/StructureDefinition/diagnosticReport-extends
type DiagnosticReportExtends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DiagnosticReportExtends) Reset() {
	*x = DiagnosticReportExtends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportExtends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportExtends) ProtoMessage() {}

func (x *DiagnosticReportExtends) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportExtends.ProtoReflect.Descriptor instead.
func (*DiagnosticReportExtends) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{107}
}

func (x *DiagnosticReportExtends) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportExtends) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for Analysis.
// Analysis.
// See http://hl7.org/fhir/StructureDefinition/DiagnosticReport-geneticsAnalysis
type DiagnosticReportAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Analysis type
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Analysis interpretation
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
}

func (x *DiagnosticReportAnalysis) Reset() {
	*x = DiagnosticReportAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportAnalysis) ProtoMessage() {}

func (x *DiagnosticReportAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportAnalysis.ProtoReflect.Descriptor instead.
func (*DiagnosticReportAnalysis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{108}
}

func (x *DiagnosticReportAnalysis) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportAnalysis) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticReportAnalysis) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DiagnosticReportAnalysis) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

// Auto-generated from StructureDefinition for AssessedCondition.
// AssessedCondition.
// See
// http://hl7.org/fhir/StructureDefinition/DiagnosticReport-geneticsAssessedCondition
type DiagnosticReportAssessedCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DiagnosticReportAssessedCondition) Reset() {
	*x = DiagnosticReportAssessedCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportAssessedCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportAssessedCondition) ProtoMessage() {}

func (x *DiagnosticReportAssessedCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportAssessedCondition.ProtoReflect.Descriptor instead.
func (*DiagnosticReportAssessedCondition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{109}
}

func (x *DiagnosticReportAssessedCondition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportAssessedCondition) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for FamilyMemberHistory.
// FamilyHistory.
// See
// http://hl7.org/fhir/StructureDefinition/DiagnosticReport-geneticsFamilyMemberHistory
type DiagnosticReportFamilyMemberHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DiagnosticReportFamilyMemberHistory) Reset() {
	*x = DiagnosticReportFamilyMemberHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportFamilyMemberHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportFamilyMemberHistory) ProtoMessage() {}

func (x *DiagnosticReportFamilyMemberHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportFamilyMemberHistory.ProtoReflect.Descriptor instead.
func (*DiagnosticReportFamilyMemberHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{110}
}

func (x *DiagnosticReportFamilyMemberHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportFamilyMemberHistory) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for locationPerformed.
// Location Performed.
// See
// http://hl7.org/fhir/StructureDefinition/diagnosticReport-locationPerformed
type DiagnosticReportLocationPerformed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DiagnosticReportLocationPerformed) Reset() {
	*x = DiagnosticReportLocationPerformed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportLocationPerformed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportLocationPerformed) ProtoMessage() {}

func (x *DiagnosticReportLocationPerformed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportLocationPerformed.ProtoReflect.Descriptor instead.
func (*DiagnosticReportLocationPerformed) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{111}
}

func (x *DiagnosticReportLocationPerformed) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportLocationPerformed) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for replaces.
// Replacement for another report.
// See http://hl7.org/fhir/StructureDefinition/diagnosticReport-replaces
type DiagnosticReportReplaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DiagnosticReportReplaces) Reset() {
	*x = DiagnosticReportReplaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportReplaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportReplaces) ProtoMessage() {}

func (x *DiagnosticReportReplaces) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportReplaces.ProtoReflect.Descriptor instead.
func (*DiagnosticReportReplaces) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{112}
}

func (x *DiagnosticReportReplaces) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportReplaces) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for summaryOf.
// Summary Of Other Reports.
// See http://hl7.org/fhir/StructureDefinition/diagnosticReport-summaryOf
type DiagnosticReportSummaryOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *DiagnosticReportSummaryOf) Reset() {
	*x = DiagnosticReportSummaryOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportSummaryOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportSummaryOf) ProtoMessage() {}

func (x *DiagnosticReportSummaryOf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportSummaryOf.ProtoReflect.Descriptor instead.
func (*DiagnosticReportSummaryOf) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{113}
}

func (x *DiagnosticReportSummaryOf) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportSummaryOf) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for allowedUnits.
// Units to use for measured value.
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-allowedUnits
type ElementDefinitionAllowedUnits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ElementDefinitionAllowedUnits_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElementDefinitionAllowedUnits) Reset() {
	*x = ElementDefinitionAllowedUnits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionAllowedUnits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionAllowedUnits) ProtoMessage() {}

func (x *ElementDefinitionAllowedUnits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionAllowedUnits.ProtoReflect.Descriptor instead.
func (*ElementDefinitionAllowedUnits) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{114}
}

func (x *ElementDefinitionAllowedUnits) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionAllowedUnits) GetValue() *ElementDefinitionAllowedUnits_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for bestpractice.
// Mark a warning invariant as 'best practice'.
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-bestpractice
type ElementDefinitionBestpractice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ElementDefinitionBestpractice_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElementDefinitionBestpractice) Reset() {
	*x = ElementDefinitionBestpractice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionBestpractice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionBestpractice) ProtoMessage() {}

func (x *ElementDefinitionBestpractice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionBestpractice.ProtoReflect.Descriptor instead.
func (*ElementDefinitionBestpractice) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{115}
}

func (x *ElementDefinitionBestpractice) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionBestpractice) GetValue() *ElementDefinitionBestpractice_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for bindingName.
// Suggested Name for code generation.
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-bindingName
type ElementDefinitionBindingName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ElementDefinitionBindingName) Reset() {
	*x = ElementDefinitionBindingName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionBindingName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionBindingName) ProtoMessage() {}

func (x *ElementDefinitionBindingName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionBindingName.ProtoReflect.Descriptor instead.
func (*ElementDefinitionBindingName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{116}
}

func (x *ElementDefinitionBindingName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionBindingName) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for equivalence.
// equivalent | equal | wider | subsumes | narrower | specializes | inexact |
// unmatched | disjoint. See
// http://hl7.org/fhir/StructureDefinition/elementdefinition-equivalence
type ElementDefinitionEquivalence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.ConceptMapEquivalenceCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *ElementDefinitionEquivalence) Reset() {
	*x = ElementDefinitionEquivalence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionEquivalence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionEquivalence) ProtoMessage() {}

func (x *ElementDefinitionEquivalence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionEquivalence.ProtoReflect.Descriptor instead.
func (*ElementDefinitionEquivalence) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{117}
}

func (x *ElementDefinitionEquivalence) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionEquivalence) GetValueCode() *codes_go_proto.ConceptMapEquivalenceCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for identifier.
// External Identifier associated with this element.
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-identifier
type ElementDefinitionIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,3,opt,name=value_identifier,json=valueIdentifier,proto3" json:"value_identifier,omitempty"`
}

func (x *ElementDefinitionIdentifier) Reset() {
	*x = ElementDefinitionIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionIdentifier) ProtoMessage() {}

func (x *ElementDefinitionIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionIdentifier.ProtoReflect.Descriptor instead.
func (*ElementDefinitionIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{118}
}

func (x *ElementDefinitionIdentifier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionIdentifier) GetValueIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ValueIdentifier
	}
	return nil
}

// Auto-generated from StructureDefinition for inheritedExtensibleValueSet.
// An extensible Value Set specified in a parent profile.
// See
// http://hl7.org/fhir/StructureDefinition/elementdefinition-inheritedExtensibleValueSet
type ElementDefinitionInheritedExtensibleValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ElementDefinitionInheritedExtensibleValueSet_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElementDefinitionInheritedExtensibleValueSet) Reset() {
	*x = ElementDefinitionInheritedExtensibleValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionInheritedExtensibleValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionInheritedExtensibleValueSet) ProtoMessage() {}

func (x *ElementDefinitionInheritedExtensibleValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionInheritedExtensibleValueSet.ProtoReflect.Descriptor instead.
func (*ElementDefinitionInheritedExtensibleValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{119}
}

func (x *ElementDefinitionInheritedExtensibleValueSet) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionInheritedExtensibleValueSet) GetValue() *ElementDefinitionInheritedExtensibleValueSet_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for isCommonBinding.
// Whether used on multiple resources.
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-isCommonBinding
type ElementDefinitionIsCommonBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *ElementDefinitionIsCommonBinding) Reset() {
	*x = ElementDefinitionIsCommonBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionIsCommonBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionIsCommonBinding) ProtoMessage() {}

func (x *ElementDefinitionIsCommonBinding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionIsCommonBinding.ProtoReflect.Descriptor instead.
func (*ElementDefinitionIsCommonBinding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{120}
}

func (x *ElementDefinitionIsCommonBinding) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionIsCommonBinding) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for maxValueSet.
// Maximum Value Set (when strength = extensible).
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-maxValueSet
type ElementDefinitionMaxValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ElementDefinitionMaxValueSet_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElementDefinitionMaxValueSet) Reset() {
	*x = ElementDefinitionMaxValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionMaxValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionMaxValueSet) ProtoMessage() {}

func (x *ElementDefinitionMaxValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionMaxValueSet.ProtoReflect.Descriptor instead.
func (*ElementDefinitionMaxValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{121}
}

func (x *ElementDefinitionMaxValueSet) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionMaxValueSet) GetValue() *ElementDefinitionMaxValueSet_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for minValueSet.
// Minimum Value Set (what system must support).
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-minValueSet
type ElementDefinitionMinValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ElementDefinitionMinValueSet_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElementDefinitionMinValueSet) Reset() {
	*x = ElementDefinitionMinValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionMinValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionMinValueSet) ProtoMessage() {}

func (x *ElementDefinitionMinValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionMinValueSet.ProtoReflect.Descriptor instead.
func (*ElementDefinitionMinValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{122}
}

func (x *ElementDefinitionMinValueSet) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionMinValueSet) GetValue() *ElementDefinitionMinValueSet_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for namespace.
// specifiy namespace other than http://hl7.org/fhir.
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-namespace
type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{123}
}

func (x *Namespace) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Namespace) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for question.
// Prompt for element phrased as question.
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-question
type ElementDefinitionQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ElementDefinitionQuestion) Reset() {
	*x = ElementDefinitionQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionQuestion) ProtoMessage() {}

func (x *ElementDefinitionQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionQuestion.ProtoReflect.Descriptor instead.
func (*ElementDefinitionQuestion) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{124}
}

func (x *ElementDefinitionQuestion) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionQuestion) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for selector.
// FHIRPath that defines the selection criteria for a slice.
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-selector
type ElementDefinitionSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ElementDefinitionSelector) Reset() {
	*x = ElementDefinitionSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionSelector) ProtoMessage() {}

func (x *ElementDefinitionSelector) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionSelector.ProtoReflect.Descriptor instead.
func (*ElementDefinitionSelector) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{125}
}

func (x *ElementDefinitionSelector) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionSelector) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for translatable.
// Whether translations apply to this element.
// See http://hl7.org/fhir/StructureDefinition/elementdefinition-translatable
type ElementDefinitionTranslatable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *ElementDefinitionTranslatable) Reset() {
	*x = ElementDefinitionTranslatable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionTranslatable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionTranslatable) ProtoMessage() {}

func (x *ElementDefinitionTranslatable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionTranslatable.ProtoReflect.Descriptor instead.
func (*ElementDefinitionTranslatable) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{126}
}

func (x *ElementDefinitionTranslatable) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionTranslatable) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for associatedEncounter.
// Associated Encounter.
// See http://hl7.org/fhir/StructureDefinition/encounter-associatedEncounter
type EncounterAssociatedEncounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *EncounterAssociatedEncounter) Reset() {
	*x = EncounterAssociatedEncounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterAssociatedEncounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterAssociatedEncounter) ProtoMessage() {}

func (x *EncounterAssociatedEncounter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterAssociatedEncounter.ProtoReflect.Descriptor instead.
func (*EncounterAssociatedEncounter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{127}
}

func (x *EncounterAssociatedEncounter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterAssociatedEncounter) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for modeOfArrival.
// The method of arrival of the patient into the facility.
// See http://hl7.org/fhir/StructureDefinition/encounter-modeOfArrival
type EncounterModeOfArrival struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCoding *datatypes_go_proto.Coding `protobuf:"bytes,3,opt,name=value_coding,json=valueCoding,proto3" json:"value_coding,omitempty"`
}

func (x *EncounterModeOfArrival) Reset() {
	*x = EncounterModeOfArrival{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterModeOfArrival) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterModeOfArrival) ProtoMessage() {}

func (x *EncounterModeOfArrival) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterModeOfArrival.ProtoReflect.Descriptor instead.
func (*EncounterModeOfArrival) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{128}
}

func (x *EncounterModeOfArrival) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterModeOfArrival) GetValueCoding() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ValueCoding
	}
	return nil
}

// Auto-generated from StructureDefinition for primaryDiagnosis.
// Primary Diagnosis of this encounter (priority order - 1 = highest).
// See http://hl7.org/fhir/StructureDefinition/encounter-primaryDiagnosis
type EncounterPrimaryDiagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValuePositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,3,opt,name=value_positive_int,json=valuePositiveInt,proto3" json:"value_positive_int,omitempty"`
}

func (x *EncounterPrimaryDiagnosis) Reset() {
	*x = EncounterPrimaryDiagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterPrimaryDiagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterPrimaryDiagnosis) ProtoMessage() {}

func (x *EncounterPrimaryDiagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterPrimaryDiagnosis.ProtoReflect.Descriptor instead.
func (*EncounterPrimaryDiagnosis) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{129}
}

func (x *EncounterPrimaryDiagnosis) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterPrimaryDiagnosis) GetValuePositiveInt() *datatypes_go_proto.PositiveInt {
	if x != nil {
		return x.ValuePositiveInt
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonCancelled.
// Explanation for cancellation.
// See http://hl7.org/fhir/StructureDefinition/encounter-reasonCancelled
type EncounterReasonCancelled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *EncounterReasonCancelled) Reset() {
	*x = EncounterReasonCancelled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterReasonCancelled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterReasonCancelled) ProtoMessage() {}

func (x *EncounterReasonCancelled) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterReasonCancelled.ProtoReflect.Descriptor instead.
func (*EncounterReasonCancelled) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{130}
}

func (x *EncounterReasonCancelled) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EncounterReasonCancelled) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for entryFormat.
// User prompt for format.
// See http://hl7.org/fhir/StructureDefinition/entryFormat
type EntryFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *EntryFormat) Reset() {
	*x = EntryFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryFormat) ProtoMessage() {}

func (x *EntryFormat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryFormat.ProtoReflect.Descriptor instead.
func (*EntryFormat) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{131}
}

func (x *EntryFormat) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EntryFormat) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for definition.
// Instantiates protocol or definition.
// See http://hl7.org/fhir/StructureDefinition/event-definition
type Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *Definition_Value          `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Definition) Reset() {
	*x = Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Definition) ProtoMessage() {}

func (x *Definition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Definition.ProtoReflect.Descriptor instead.
func (*Definition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{132}
}

func (x *Definition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Definition) GetValue() *Definition_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for notDone.
// Event did not occur.
// See http://hl7.org/fhir/StructureDefinition/event-notDone
type DiagnosticReportNotDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *DiagnosticReportNotDone) Reset() {
	*x = DiagnosticReportNotDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportNotDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportNotDone) ProtoMessage() {}

func (x *DiagnosticReportNotDone) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportNotDone.ProtoReflect.Descriptor instead.
func (*DiagnosticReportNotDone) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{133}
}

func (x *DiagnosticReportNotDone) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportNotDone) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for OnBehalfOf.
// Organization was acting for.
// See http://hl7.org/fhir/StructureDefinition/event-OnBehalfOf
type OnBehalfOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *OnBehalfOf) Reset() {
	*x = OnBehalfOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnBehalfOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnBehalfOf) ProtoMessage() {}

func (x *OnBehalfOf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnBehalfOf.ProtoReflect.Descriptor instead.
func (*OnBehalfOf) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{134}
}

func (x *OnBehalfOf) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OnBehalfOf) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for partOf.
// Part of referenced event.
// See http://hl7.org/fhir/StructureDefinition/event-partOf
type PartOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *PartOf) Reset() {
	*x = PartOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartOf) ProtoMessage() {}

func (x *PartOf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartOf.ProtoReflect.Descriptor instead.
func (*PartOf) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{135}
}

func (x *PartOf) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PartOf) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for performerRole.
// What type of performance was done.
// See http://hl7.org/fhir/StructureDefinition/event-performerRole
type ObservationPerformerRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationPerformerRole) Reset() {
	*x = ObservationPerformerRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationPerformerRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationPerformerRole) ProtoMessage() {}

func (x *ObservationPerformerRole) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationPerformerRole.ProtoReflect.Descriptor instead.
func (*ObservationPerformerRole) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{136}
}

func (x *ObservationPerformerRole) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationPerformerRole) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonCode.
// Why was event performed?.
// See http://hl7.org/fhir/StructureDefinition/event-reasonCode
type ReasonCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ReasonCode) Reset() {
	*x = ReasonCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasonCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasonCode) ProtoMessage() {}

func (x *ReasonCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasonCode.ProtoReflect.Descriptor instead.
func (*ReasonCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{137}
}

func (x *ReasonCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReasonCode) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonReference.
// Why was event performed?.
// See http://hl7.org/fhir/StructureDefinition/event-reasonReference
type ReasonReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ReasonReference_Value     `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReasonReference) Reset() {
	*x = ReasonReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasonReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasonReference) ProtoMessage() {}

func (x *ReasonReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasonReference.ProtoReflect.Descriptor instead.
func (*ReasonReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{138}
}

func (x *ReasonReference) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReasonReference) GetValue() *ReasonReference_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for observation.
// Genetic markers, ethnicity, etc.
// See
// http://hl7.org/fhir/StructureDefinition/family-member-history-genetics-observation
type FamilyMemberHistoryObservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *FamilyMemberHistoryObservation) Reset() {
	*x = FamilyMemberHistoryObservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryObservation) ProtoMessage() {}

func (x *FamilyMemberHistoryObservation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryObservation.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryObservation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{139}
}

func (x *FamilyMemberHistoryObservation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistoryObservation) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for parent.
// Mother(s) & Father(s) - genetic & other.
// See
// http://hl7.org/fhir/StructureDefinition/family-member-history-genetics-parent
type FamilyMemberHistoryParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// mother | father | adoptive mother | etc.
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Link to parent relative(s)
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *FamilyMemberHistoryParent) Reset() {
	*x = FamilyMemberHistoryParent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryParent) ProtoMessage() {}

func (x *FamilyMemberHistoryParent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryParent.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryParent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{140}
}

func (x *FamilyMemberHistoryParent) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistoryParent) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *FamilyMemberHistoryParent) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FamilyMemberHistoryParent) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Auto-generated from StructureDefinition for sibling.
// natural brother(s) & natural sister(s) - genetic & other.
// See
// http://hl7.org/fhir/StructureDefinition/family-member-history-genetics-sibling
type FamilyMemberHistorySibling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// sibling | brother | sister | etc.
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Link to sibling relative(s)
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *FamilyMemberHistorySibling) Reset() {
	*x = FamilyMemberHistorySibling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistorySibling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistorySibling) ProtoMessage() {}

func (x *FamilyMemberHistorySibling) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistorySibling.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistorySibling) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{141}
}

func (x *FamilyMemberHistorySibling) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistorySibling) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *FamilyMemberHistorySibling) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FamilyMemberHistorySibling) GetReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Auto-generated from StructureDefinition for abatement.
// When (or if) the family member's condition resolved.
// See http://hl7.org/fhir/StructureDefinition/familymemberhistory-abatement
type FamilyMemberHistoryAbatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *FamilyMemberHistoryAbatement_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FamilyMemberHistoryAbatement) Reset() {
	*x = FamilyMemberHistoryAbatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryAbatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryAbatement) ProtoMessage() {}

func (x *FamilyMemberHistoryAbatement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryAbatement.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryAbatement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{142}
}

func (x *FamilyMemberHistoryAbatement) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistoryAbatement) GetValue() *FamilyMemberHistoryAbatement_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for patient-record.
// Link to patient record.
// See
// http://hl7.org/fhir/StructureDefinition/familymemberhistory-patient-record
type FamilyMemberHistoryPatientRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *FamilyMemberHistoryPatientRecord) Reset() {
	*x = FamilyMemberHistoryPatientRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryPatientRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryPatientRecord) ProtoMessage() {}

func (x *FamilyMemberHistoryPatientRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryPatientRecord.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryPatientRecord) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{143}
}

func (x *FamilyMemberHistoryPatientRecord) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistoryPatientRecord) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for severity.
// The seriousness of the family member condition.
// See http://hl7.org/fhir/StructureDefinition/familymemberhistory-severity
type FamilyMemberHistorySeverity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *FamilyMemberHistorySeverity) Reset() {
	*x = FamilyMemberHistorySeverity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistorySeverity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistorySeverity) ProtoMessage() {}

func (x *FamilyMemberHistorySeverity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistorySeverity.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistorySeverity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{144}
}

func (x *FamilyMemberHistorySeverity) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistorySeverity) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for type.
// Purpose of the family member history.
// See http://hl7.org/fhir/StructureDefinition/familymemberhistory-type
type FamilyMemberHistoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *FamilyMemberHistoryType) Reset() {
	*x = FamilyMemberHistoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryType) ProtoMessage() {}

func (x *FamilyMemberHistoryType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryType.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{145}
}

func (x *FamilyMemberHistoryType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilyMemberHistoryType) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for detail.
// Resource with details for flag.
// See http://hl7.org/fhir/StructureDefinition/flag-detail
type FlagDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *FlagDetail) Reset() {
	*x = FlagDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagDetail) ProtoMessage() {}

func (x *FlagDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagDetail.ProtoReflect.Descriptor instead.
func (*FlagDetail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{146}
}

func (x *FlagDetail) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlagDetail) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for priority.
// An alarm code.
// See http://hl7.org/fhir/StructureDefinition/flag-priority
type FlagPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *FlagPriority) Reset() {
	*x = FlagPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagPriority) ProtoMessage() {}

func (x *FlagPriority) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagPriority.ProtoReflect.Descriptor instead.
func (*FlagPriority) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{147}
}

func (x *FlagPriority) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlagPriority) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for Geolocation.
// The absolute geographic location.
// See http://hl7.org/fhir/StructureDefinition/geolocation
type AddressGeolocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Latitude with WGS84 datum
	Latitude *datatypes_go_proto.Decimal `protobuf:"bytes,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude with WGS84 datum
	Longitude *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *AddressGeolocation) Reset() {
	*x = AddressGeolocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressGeolocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGeolocation) ProtoMessage() {}

func (x *AddressGeolocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGeolocation.ProtoReflect.Descriptor instead.
func (*AddressGeolocation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{148}
}

func (x *AddressGeolocation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressGeolocation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *AddressGeolocation) GetLatitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Latitude
	}
	return nil
}

func (x *AddressGeolocation) GetLongitude() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.Longitude
	}
	return nil
}

// Auto-generated from StructureDefinition for acceptance.
// Individual acceptance of goal.
// See http://hl7.org/fhir/StructureDefinition/goal-acceptance
type GoalAcceptance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Individual whose acceptance is reflected
	Individual *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=individual,proto3" json:"individual,omitempty"`
	// agree | disagree | pending
	Status *codes_go_proto.GoalAcceptanceStatusCode `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Priority of goal for individual
	Priority *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *GoalAcceptance) Reset() {
	*x = GoalAcceptance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalAcceptance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalAcceptance) ProtoMessage() {}

func (x *GoalAcceptance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalAcceptance.ProtoReflect.Descriptor instead.
func (*GoalAcceptance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{149}
}

func (x *GoalAcceptance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalAcceptance) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *GoalAcceptance) GetIndividual() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Individual
	}
	return nil
}

func (x *GoalAcceptance) GetStatus() *codes_go_proto.GoalAcceptanceStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GoalAcceptance) GetPriority() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Priority
	}
	return nil
}

// Auto-generated from StructureDefinition for pertainsToGoal.
// Pertains to goal.
// See http://hl7.org/fhir/StructureDefinition/goal-pertainsToGoal
type ResourcePertainsToGoal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ResourcePertainsToGoal) Reset() {
	*x = ResourcePertainsToGoal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePertainsToGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePertainsToGoal) ProtoMessage() {}

func (x *ResourcePertainsToGoal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePertainsToGoal.ProtoReflect.Descriptor instead.
func (*ResourcePertainsToGoal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{150}
}

func (x *ResourcePertainsToGoal) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourcePertainsToGoal) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonRejected.
// The reason the goal was not accepted.
// See http://hl7.org/fhir/StructureDefinition/goal-reasonRejected
type GoalReasonRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *GoalReasonRejected) Reset() {
	*x = GoalReasonRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalReasonRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalReasonRejected) ProtoMessage() {}

func (x *GoalReasonRejected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalReasonRejected.ProtoReflect.Descriptor instead.
func (*GoalReasonRejected) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{151}
}

func (x *GoalReasonRejected) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalReasonRejected) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for relationship.
// Goals related to this Goal.
// See http://hl7.org/fhir/StructureDefinition/goal-relationship
type GoalRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// predecessor | successor | replacement | other
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Related goal
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *GoalRelationship) Reset() {
	*x = GoalRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalRelationship) ProtoMessage() {}

func (x *GoalRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalRelationship.ProtoReflect.Descriptor instead.
func (*GoalRelationship) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{152}
}

func (x *GoalRelationship) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GoalRelationship) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *GoalRelationship) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GoalRelationship) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Auto-generated from StructureDefinition for allele-database.
// Allele Database.
// See
// http://hl7.org/fhir/StructureDefinition/hla-genotyping-results-allele-database
type DiagnosticReportAlleleDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *DiagnosticReportAlleleDatabase) Reset() {
	*x = DiagnosticReportAlleleDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportAlleleDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportAlleleDatabase) ProtoMessage() {}

func (x *DiagnosticReportAlleleDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportAlleleDatabase.ProtoReflect.Descriptor instead.
func (*DiagnosticReportAlleleDatabase) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{153}
}

func (x *DiagnosticReportAlleleDatabase) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportAlleleDatabase) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for glstring.
// glstring.
// See http://hl7.org/fhir/StructureDefinition/hla-genotyping-results-glstring
type DiagnosticReportGlstring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// glstring.url
	Url *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// glstring.text
	Text *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *DiagnosticReportGlstring) Reset() {
	*x = DiagnosticReportGlstring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportGlstring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportGlstring) ProtoMessage() {}

func (x *DiagnosticReportGlstring) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportGlstring.ProtoReflect.Descriptor instead.
func (*DiagnosticReportGlstring) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{154}
}

func (x *DiagnosticReportGlstring) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportGlstring) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticReportGlstring) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *DiagnosticReportGlstring) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for haploid.
// haploid.
// See http://hl7.org/fhir/StructureDefinition/hla-genotyping-results-haploid
type DiagnosticReportHaploid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// haploid-locus
	Locus *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=locus,proto3" json:"locus,omitempty"`
	// haploid-type
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// haploid-method
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *DiagnosticReportHaploid) Reset() {
	*x = DiagnosticReportHaploid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportHaploid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportHaploid) ProtoMessage() {}

func (x *DiagnosticReportHaploid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportHaploid.ProtoReflect.Descriptor instead.
func (*DiagnosticReportHaploid) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{155}
}

func (x *DiagnosticReportHaploid) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportHaploid) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticReportHaploid) GetLocus() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Locus
	}
	return nil
}

func (x *DiagnosticReportHaploid) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DiagnosticReportHaploid) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

// Auto-generated from StructureDefinition for method.
// The platform, methodology and software applied at the time of the
// genotyping.
// See http://hl7.org/fhir/StructureDefinition/hla-genotyping-results-method
type DiagnosticReportMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *DiagnosticReportMethod) Reset() {
	*x = DiagnosticReportMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportMethod) ProtoMessage() {}

func (x *DiagnosticReportMethod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportMethod.ProtoReflect.Descriptor instead.
func (*DiagnosticReportMethod) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{156}
}

func (x *DiagnosticReportMethod) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportMethod) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for http-response-header.
// HTTP header returned by the interaction.
// See http://hl7.org/fhir/StructureDefinition/http-response-header
type BundleHttpResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *BundleHttpResponseHeader) Reset() {
	*x = BundleHttpResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleHttpResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleHttpResponseHeader) ProtoMessage() {}

func (x *BundleHttpResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleHttpResponseHeader.ProtoReflect.Descriptor instead.
func (*BundleHttpResponseHeader) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{157}
}

func (x *BundleHttpResponseHeader) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BundleHttpResponseHeader) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for assembly-order.
// Preferred display order of name parts.
// See http://hl7.org/fhir/StructureDefinition/humanname-assembly-order
type HumanNameAssemblyOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.HumanNameAssemblyOrderCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *HumanNameAssemblyOrder) Reset() {
	*x = HumanNameAssemblyOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameAssemblyOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameAssemblyOrder) ProtoMessage() {}

func (x *HumanNameAssemblyOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameAssemblyOrder.ProtoReflect.Descriptor instead.
func (*HumanNameAssemblyOrder) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{158}
}

func (x *HumanNameAssemblyOrder) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNameAssemblyOrder) GetValueCode() *codes_go_proto.HumanNameAssemblyOrderCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for fathers-family.
// Portion of family name derived from father.
// See http://hl7.org/fhir/StructureDefinition/humanname-fathers-family
type HumanNameFathersFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *HumanNameFathersFamily) Reset() {
	*x = HumanNameFathersFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameFathersFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameFathersFamily) ProtoMessage() {}

func (x *HumanNameFathersFamily) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameFathersFamily.ProtoReflect.Descriptor instead.
func (*HumanNameFathersFamily) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{159}
}

func (x *HumanNameFathersFamily) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNameFathersFamily) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for mothers-family.
// Portion of family name derived from mother.
// See http://hl7.org/fhir/StructureDefinition/humanname-mothers-family
type HumanNameMothersFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *HumanNameMothersFamily) Reset() {
	*x = HumanNameMothersFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameMothersFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameMothersFamily) ProtoMessage() {}

func (x *HumanNameMothersFamily) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameMothersFamily.ProtoReflect.Descriptor instead.
func (*HumanNameMothersFamily) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{160}
}

func (x *HumanNameMothersFamily) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNameMothersFamily) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for own-name.
// Portion derived from person's own surname.
// See http://hl7.org/fhir/StructureDefinition/humanname-own-name
type HumanNameOwnName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *HumanNameOwnName) Reset() {
	*x = HumanNameOwnName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameOwnName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameOwnName) ProtoMessage() {}

func (x *HumanNameOwnName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameOwnName.ProtoReflect.Descriptor instead.
func (*HumanNameOwnName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{161}
}

func (x *HumanNameOwnName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNameOwnName) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for own-prefix.
// Voorvoegsel derived from person's own surname.
// See http://hl7.org/fhir/StructureDefinition/humanname-own-prefix
type HumanNameOwnPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *HumanNameOwnPrefix) Reset() {
	*x = HumanNameOwnPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameOwnPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameOwnPrefix) ProtoMessage() {}

func (x *HumanNameOwnPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameOwnPrefix.ProtoReflect.Descriptor instead.
func (*HumanNameOwnPrefix) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{162}
}

func (x *HumanNameOwnPrefix) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNameOwnPrefix) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for partner-name.
// Portion derived from person's partner's surname.
// See http://hl7.org/fhir/StructureDefinition/humanname-partner-name
type HumanNamePartnerName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *HumanNamePartnerName) Reset() {
	*x = HumanNamePartnerName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNamePartnerName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNamePartnerName) ProtoMessage() {}

func (x *HumanNamePartnerName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNamePartnerName.ProtoReflect.Descriptor instead.
func (*HumanNamePartnerName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{163}
}

func (x *HumanNamePartnerName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNamePartnerName) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for partner-prefix.
// Voorvoegsel derived from person's partner's surname.
// See http://hl7.org/fhir/StructureDefinition/humanname-partner-prefix
type HumanNamePartnerPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *HumanNamePartnerPrefix) Reset() {
	*x = HumanNamePartnerPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNamePartnerPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNamePartnerPrefix) ProtoMessage() {}

func (x *HumanNamePartnerPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNamePartnerPrefix.ProtoReflect.Descriptor instead.
func (*HumanNamePartnerPrefix) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{164}
}

func (x *HumanNamePartnerPrefix) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNamePartnerPrefix) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for validDate.
// External Identifier associated with this element.
// See http://hl7.org/fhir/StructureDefinition/identifier-validDate
type IdentifierValidDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDateTime *datatypes_go_proto.DateTime `protobuf:"bytes,3,opt,name=value_date_time,json=valueDateTime,proto3" json:"value_date_time,omitempty"`
}

func (x *IdentifierValidDate) Reset() {
	*x = IdentifierValidDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierValidDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierValidDate) ProtoMessage() {}

func (x *IdentifierValidDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierValidDate.ProtoReflect.Descriptor instead.
func (*IdentifierValidDate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{165}
}

func (x *IdentifierValidDate) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IdentifierValidDate) GetValueDateTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ValueDateTime
	}
	return nil
}

// Auto-generated from StructureDefinition for page.
// Page for this resource.
// See http://hl7.org/fhir/StructureDefinition/implementationguide-page
type ImplementationGuidePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *ImplementationGuidePage) Reset() {
	*x = ImplementationGuidePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationGuidePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationGuidePage) ProtoMessage() {}

func (x *ImplementationGuidePage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationGuidePage.ProtoReflect.Descriptor instead.
func (*ImplementationGuidePage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{166}
}

func (x *ImplementationGuidePage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ImplementationGuidePage) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for AD-use.
// BAD | CONF | HP | HV | DIR | PUB | PHYS | PST.
// See http://hl7.org/fhir/StructureDefinition/iso21090-AD-use
type AddressADUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.PostalAddressUseTypeCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *AddressADUse) Reset() {
	*x = AddressADUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADUse) ProtoMessage() {}

func (x *AddressADUse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADUse.ProtoReflect.Descriptor instead.
func (*AddressADUse) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{167}
}

func (x *AddressADUse) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADUse) GetValueCode() *codes_go_proto.PostalAddressUseTypeCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-additionalLocator.
// additionalLocator.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-additionalLocator
type AddressADXPAdditionalLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPAdditionalLocator) Reset() {
	*x = AddressADXPAdditionalLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPAdditionalLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPAdditionalLocator) ProtoMessage() {}

func (x *AddressADXPAdditionalLocator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPAdditionalLocator.ProtoReflect.Descriptor instead.
func (*AddressADXPAdditionalLocator) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{168}
}

func (x *AddressADXPAdditionalLocator) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPAdditionalLocator) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-buildingNumberSuffix.
// buildingNumberSuffix.
// See
// http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-buildingNumberSuffix
type AddressADXPBuildingNumberSuffix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPBuildingNumberSuffix) Reset() {
	*x = AddressADXPBuildingNumberSuffix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPBuildingNumberSuffix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPBuildingNumberSuffix) ProtoMessage() {}

func (x *AddressADXPBuildingNumberSuffix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPBuildingNumberSuffix.ProtoReflect.Descriptor instead.
func (*AddressADXPBuildingNumberSuffix) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{169}
}

func (x *AddressADXPBuildingNumberSuffix) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPBuildingNumberSuffix) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-careOf.
// careOf.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-careOf
type AddressADXPCareOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPCareOf) Reset() {
	*x = AddressADXPCareOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPCareOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPCareOf) ProtoMessage() {}

func (x *AddressADXPCareOf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPCareOf.ProtoReflect.Descriptor instead.
func (*AddressADXPCareOf) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{170}
}

func (x *AddressADXPCareOf) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPCareOf) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-censusTract.
// censusTract.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-censusTract
type AddressADXPCensusTract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPCensusTract) Reset() {
	*x = AddressADXPCensusTract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPCensusTract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPCensusTract) ProtoMessage() {}

func (x *AddressADXPCensusTract) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPCensusTract.ProtoReflect.Descriptor instead.
func (*AddressADXPCensusTract) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{171}
}

func (x *AddressADXPCensusTract) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPCensusTract) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-delimiter.
// delimiter.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-delimiter
type AddressADXPDelimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPDelimiter) Reset() {
	*x = AddressADXPDelimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPDelimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPDelimiter) ProtoMessage() {}

func (x *AddressADXPDelimiter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPDelimiter.ProtoReflect.Descriptor instead.
func (*AddressADXPDelimiter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{172}
}

func (x *AddressADXPDelimiter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPDelimiter) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-deliveryAddressLine.
// deliveryAddressLine.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryAddressLine
type AddressADXPDeliveryAddressLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPDeliveryAddressLine) Reset() {
	*x = AddressADXPDeliveryAddressLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPDeliveryAddressLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPDeliveryAddressLine) ProtoMessage() {}

func (x *AddressADXPDeliveryAddressLine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPDeliveryAddressLine.ProtoReflect.Descriptor instead.
func (*AddressADXPDeliveryAddressLine) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{173}
}

func (x *AddressADXPDeliveryAddressLine) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPDeliveryAddressLine) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-deliveryInstallationArea.
// deliveryInstallationArea.
// See
// http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryInstallationArea
type AddressADXPDeliveryInstallationArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPDeliveryInstallationArea) Reset() {
	*x = AddressADXPDeliveryInstallationArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPDeliveryInstallationArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPDeliveryInstallationArea) ProtoMessage() {}

func (x *AddressADXPDeliveryInstallationArea) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPDeliveryInstallationArea.ProtoReflect.Descriptor instead.
func (*AddressADXPDeliveryInstallationArea) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{174}
}

func (x *AddressADXPDeliveryInstallationArea) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPDeliveryInstallationArea) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for
// ADXP-deliveryInstallationQualifier. deliveryInstallationQualifier. See
// http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryInstallationQualifier
type AddressADXPDeliveryInstallationQualifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPDeliveryInstallationQualifier) Reset() {
	*x = AddressADXPDeliveryInstallationQualifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPDeliveryInstallationQualifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPDeliveryInstallationQualifier) ProtoMessage() {}

func (x *AddressADXPDeliveryInstallationQualifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPDeliveryInstallationQualifier.ProtoReflect.Descriptor instead.
func (*AddressADXPDeliveryInstallationQualifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{175}
}

func (x *AddressADXPDeliveryInstallationQualifier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPDeliveryInstallationQualifier) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-deliveryInstallationType.
// deliveryInstallationType.
// See
// http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryInstallationType
type AddressADXPDeliveryInstallationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPDeliveryInstallationType) Reset() {
	*x = AddressADXPDeliveryInstallationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPDeliveryInstallationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPDeliveryInstallationType) ProtoMessage() {}

func (x *AddressADXPDeliveryInstallationType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPDeliveryInstallationType.ProtoReflect.Descriptor instead.
func (*AddressADXPDeliveryInstallationType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{176}
}

func (x *AddressADXPDeliveryInstallationType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPDeliveryInstallationType) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-deliveryMode.
// deliveryMode.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryMode
type AddressADXPDeliveryMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPDeliveryMode) Reset() {
	*x = AddressADXPDeliveryMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPDeliveryMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPDeliveryMode) ProtoMessage() {}

func (x *AddressADXPDeliveryMode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPDeliveryMode.ProtoReflect.Descriptor instead.
func (*AddressADXPDeliveryMode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{177}
}

func (x *AddressADXPDeliveryMode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPDeliveryMode) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-deliveryModeIdentifier.
// deliveryModeIdentifier.
// See
// http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryModeIdentifier
type AddressADXPDeliveryModeIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPDeliveryModeIdentifier) Reset() {
	*x = AddressADXPDeliveryModeIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPDeliveryModeIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPDeliveryModeIdentifier) ProtoMessage() {}

func (x *AddressADXPDeliveryModeIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPDeliveryModeIdentifier.ProtoReflect.Descriptor instead.
func (*AddressADXPDeliveryModeIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{178}
}

func (x *AddressADXPDeliveryModeIdentifier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPDeliveryModeIdentifier) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-direction.
// direction.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-direction
type AddressADXPDirection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPDirection) Reset() {
	*x = AddressADXPDirection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPDirection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPDirection) ProtoMessage() {}

func (x *AddressADXPDirection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPDirection.ProtoReflect.Descriptor instead.
func (*AddressADXPDirection) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{179}
}

func (x *AddressADXPDirection) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPDirection) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-houseNumber.
// houseNumber.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber
type AddressADXPHouseNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPHouseNumber) Reset() {
	*x = AddressADXPHouseNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPHouseNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPHouseNumber) ProtoMessage() {}

func (x *AddressADXPHouseNumber) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPHouseNumber.ProtoReflect.Descriptor instead.
func (*AddressADXPHouseNumber) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{180}
}

func (x *AddressADXPHouseNumber) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPHouseNumber) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-houseNumberNumeric.
// houseNumberNumeric.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumberNumeric
type AddressADXPHouseNumberNumeric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPHouseNumberNumeric) Reset() {
	*x = AddressADXPHouseNumberNumeric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPHouseNumberNumeric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPHouseNumberNumeric) ProtoMessage() {}

func (x *AddressADXPHouseNumberNumeric) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPHouseNumberNumeric.ProtoReflect.Descriptor instead.
func (*AddressADXPHouseNumberNumeric) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{181}
}

func (x *AddressADXPHouseNumberNumeric) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPHouseNumberNumeric) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-postBox.
// postBox.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-postBox
type AddressADXPPostBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPPostBox) Reset() {
	*x = AddressADXPPostBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPPostBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPPostBox) ProtoMessage() {}

func (x *AddressADXPPostBox) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPPostBox.ProtoReflect.Descriptor instead.
func (*AddressADXPPostBox) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{182}
}

func (x *AddressADXPPostBox) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPPostBox) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-precinct.
// precinct.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-precinct
type AddressADXPPrecinct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPPrecinct) Reset() {
	*x = AddressADXPPrecinct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPPrecinct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPPrecinct) ProtoMessage() {}

func (x *AddressADXPPrecinct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPPrecinct.ProtoReflect.Descriptor instead.
func (*AddressADXPPrecinct) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{183}
}

func (x *AddressADXPPrecinct) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPPrecinct) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-streetAddressLine.
// streetAddressLine.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetAddressLine
type AddressADXPStreetAddressLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPStreetAddressLine) Reset() {
	*x = AddressADXPStreetAddressLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPStreetAddressLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPStreetAddressLine) ProtoMessage() {}

func (x *AddressADXPStreetAddressLine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPStreetAddressLine.ProtoReflect.Descriptor instead.
func (*AddressADXPStreetAddressLine) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{184}
}

func (x *AddressADXPStreetAddressLine) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPStreetAddressLine) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-streetName.
// streetName.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName
type AddressADXPStreetName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPStreetName) Reset() {
	*x = AddressADXPStreetName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPStreetName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPStreetName) ProtoMessage() {}

func (x *AddressADXPStreetName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPStreetName.ProtoReflect.Descriptor instead.
func (*AddressADXPStreetName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{185}
}

func (x *AddressADXPStreetName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPStreetName) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-streetNameBase.
// streetNameBase.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetNameBase
type AddressADXPStreetNameBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPStreetNameBase) Reset() {
	*x = AddressADXPStreetNameBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPStreetNameBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPStreetNameBase) ProtoMessage() {}

func (x *AddressADXPStreetNameBase) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPStreetNameBase.ProtoReflect.Descriptor instead.
func (*AddressADXPStreetNameBase) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{186}
}

func (x *AddressADXPStreetNameBase) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPStreetNameBase) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-streetNameType.
// streetNameType.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetNameType
type AddressADXPStreetNameType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPStreetNameType) Reset() {
	*x = AddressADXPStreetNameType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPStreetNameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPStreetNameType) ProtoMessage() {}

func (x *AddressADXPStreetNameType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPStreetNameType.ProtoReflect.Descriptor instead.
func (*AddressADXPStreetNameType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{187}
}

func (x *AddressADXPStreetNameType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPStreetNameType) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-unitID.
// unitID.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-unitID
type AddressADXPUnitID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPUnitID) Reset() {
	*x = AddressADXPUnitID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPUnitID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPUnitID) ProtoMessage() {}

func (x *AddressADXPUnitID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPUnitID.ProtoReflect.Descriptor instead.
func (*AddressADXPUnitID) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{188}
}

func (x *AddressADXPUnitID) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPUnitID) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ADXP-unitType.
// unitType.
// See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-unitType
type AddressADXPUnitType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AddressADXPUnitType) Reset() {
	*x = AddressADXPUnitType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressADXPUnitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressADXPUnitType) ProtoMessage() {}

func (x *AddressADXPUnitType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressADXPUnitType.ProtoReflect.Descriptor instead.
func (*AddressADXPUnitType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{189}
}

func (x *AddressADXPUnitType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddressADXPUnitType) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for CO-value.
// Numerical value associated with the code.
// See http://hl7.org/fhir/StructureDefinition/iso21090-CO-value
type CodingCOValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDecimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=value_decimal,json=valueDecimal,proto3" json:"value_decimal,omitempty"`
}

func (x *CodingCOValue) Reset() {
	*x = CodingCOValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodingCOValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodingCOValue) ProtoMessage() {}

func (x *CodingCOValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodingCOValue.ProtoReflect.Descriptor instead.
func (*CodingCOValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{190}
}

func (x *CodingCOValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodingCOValue) GetValueDecimal() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.ValueDecimal
	}
	return nil
}

// Auto-generated from StructureDefinition for EN-qualifier.
// LS | AC | NB | PR | HON | BR | AD | SP | MID | CL | IN | VV.
// See http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier
type HumanNameENQualifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.EntityNamePartQualifierCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *HumanNameENQualifier) Reset() {
	*x = HumanNameENQualifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameENQualifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameENQualifier) ProtoMessage() {}

func (x *HumanNameENQualifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameENQualifier.ProtoReflect.Descriptor instead.
func (*HumanNameENQualifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{191}
}

func (x *HumanNameENQualifier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNameENQualifier) GetValueCode() *codes_go_proto.EntityNamePartQualifierCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for EN-representation.
// ABC | IDE | SYL.
// See http://hl7.org/fhir/StructureDefinition/iso21090-EN-representation
type HumanNameENRepresentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.NameRepresentationUseCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *HumanNameENRepresentation) Reset() {
	*x = HumanNameENRepresentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameENRepresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameENRepresentation) ProtoMessage() {}

func (x *HumanNameENRepresentation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameENRepresentation.ProtoReflect.Descriptor instead.
func (*HumanNameENRepresentation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{192}
}

func (x *HumanNameENRepresentation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanNameENRepresentation) GetValueCode() *codes_go_proto.NameRepresentationUseCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for nullFlavor.
// NI | OTH | NINF | PINF | UNK | ASKU | NAV | NASK | TRC | MSK | NA | QS.
// See http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor
type AnyNullFlavor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.NullFlavorCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *AnyNullFlavor) Reset() {
	*x = AnyNullFlavor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyNullFlavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyNullFlavor) ProtoMessage() {}

func (x *AnyNullFlavor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyNullFlavor.ProtoReflect.Descriptor instead.
func (*AnyNullFlavor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{193}
}

func (x *AnyNullFlavor) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AnyNullFlavor) GetValueCode() *codes_go_proto.NullFlavorCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for preferred.
// Preferred.
// See http://hl7.org/fhir/StructureDefinition/iso21090-preferred
type AnyPreferred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *AnyPreferred) Reset() {
	*x = AnyPreferred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyPreferred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyPreferred) ProtoMessage() {}

func (x *AnyPreferred) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyPreferred.ProtoReflect.Descriptor instead.
func (*AnyPreferred) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{194}
}

func (x *AnyPreferred) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AnyPreferred) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for SC-coding.
// code for string.
// See http://hl7.org/fhir/StructureDefinition/iso21090-SC-coding
type StringSCCoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCoding *datatypes_go_proto.Coding `protobuf:"bytes,3,opt,name=value_coding,json=valueCoding,proto3" json:"value_coding,omitempty"`
}

func (x *StringSCCoding) Reset() {
	*x = StringSCCoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringSCCoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSCCoding) ProtoMessage() {}

func (x *StringSCCoding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSCCoding.ProtoReflect.Descriptor instead.
func (*StringSCCoding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{195}
}

func (x *StringSCCoding) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StringSCCoding) GetValueCoding() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ValueCoding
	}
	return nil
}

// Auto-generated from StructureDefinition for TEL-address.
// RFC 3966 compliant telephone or fax number.
// See http://hl7.org/fhir/StructureDefinition/iso21090-TEL-address
type ContactPointTELAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *ContactPointTELAddress) Reset() {
	*x = ContactPointTELAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPointTELAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPointTELAddress) ProtoMessage() {}

func (x *ContactPointTELAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPointTELAddress.ProtoReflect.Descriptor instead.
func (*ContactPointTELAddress) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{196}
}

func (x *ContactPointTELAddress) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactPointTELAddress) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for uncertainty.
// Standard Deviation (same units as the quantity).
// See http://hl7.org/fhir/StructureDefinition/iso21090-uncertainty
type QuantityUncertainty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDecimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=value_decimal,json=valueDecimal,proto3" json:"value_decimal,omitempty"`
}

func (x *QuantityUncertainty) Reset() {
	*x = QuantityUncertainty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantityUncertainty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantityUncertainty) ProtoMessage() {}

func (x *QuantityUncertainty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantityUncertainty.ProtoReflect.Descriptor instead.
func (*QuantityUncertainty) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{197}
}

func (x *QuantityUncertainty) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuantityUncertainty) GetValueDecimal() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.ValueDecimal
	}
	return nil
}

// Auto-generated from StructureDefinition for uncertaintyType.
// Probability Distribution Type for uncertainty.
// See http://hl7.org/fhir/StructureDefinition/iso21090-uncertaintyType
type QuantityUncertaintyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.ProbabilityDistributionTypeCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *QuantityUncertaintyType) Reset() {
	*x = QuantityUncertaintyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantityUncertaintyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantityUncertaintyType) ProtoMessage() {}

func (x *QuantityUncertaintyType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantityUncertaintyType.ProtoReflect.Descriptor instead.
func (*QuantityUncertaintyType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{198}
}

func (x *QuantityUncertaintyType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuantityUncertaintyType) GetValueCode() *codes_go_proto.ProbabilityDistributionTypeCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for verification.
// verification.
// See http://hl7.org/fhir/StructureDefinition/iso21090-verification
type AnyVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *AnyVerification) Reset() {
	*x = AnyVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyVerification) ProtoMessage() {}

func (x *AnyVerification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyVerification.ProtoReflect.Descriptor instead.
func (*AnyVerification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{199}
}

func (x *AnyVerification) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AnyVerification) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for alias.
// Alias.
// See http://hl7.org/fhir/StructureDefinition/location-alias
type LocationAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *LocationAlias) Reset() {
	*x = LocationAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationAlias) ProtoMessage() {}

func (x *LocationAlias) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationAlias.ProtoReflect.Descriptor instead.
func (*LocationAlias) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{200}
}

func (x *LocationAlias) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LocationAlias) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for location-distance.
// The distance this resource is from a provided location (geocode point).
// See http://hl7.org/fhir/StructureDefinition/location-distance
type BundleLocationDistance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDistance *datatypes_go_proto.Distance `protobuf:"bytes,3,opt,name=value_distance,json=valueDistance,proto3" json:"value_distance,omitempty"`
}

func (x *BundleLocationDistance) Reset() {
	*x = BundleLocationDistance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleLocationDistance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleLocationDistance) ProtoMessage() {}

func (x *BundleLocationDistance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleLocationDistance.ProtoReflect.Descriptor instead.
func (*BundleLocationDistance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{201}
}

func (x *BundleLocationDistance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BundleLocationDistance) GetValueDistance() *datatypes_go_proto.Distance {
	if x != nil {
		return x.ValueDistance
	}
	return nil
}

// Auto-generated from StructureDefinition for mapSourcePublisher.
// Who published the mapping source.
// See http://hl7.org/fhir/StructureDefinition/mapSourcePublisher
type DataElementMapSourcePublisher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *DataElementMapSourcePublisher) Reset() {
	*x = DataElementMapSourcePublisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElementMapSourcePublisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElementMapSourcePublisher) ProtoMessage() {}

func (x *DataElementMapSourcePublisher) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElementMapSourcePublisher.ProtoReflect.Descriptor instead.
func (*DataElementMapSourcePublisher) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{202}
}

func (x *DataElementMapSourcePublisher) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataElementMapSourcePublisher) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for match-grade.
// How likely this resource is to be a match.
// See http://hl7.org/fhir/StructureDefinition/match-grade
type BundleMatchGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.MatchGradeCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *BundleMatchGrade) Reset() {
	*x = BundleMatchGrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleMatchGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleMatchGrade) ProtoMessage() {}

func (x *BundleMatchGrade) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleMatchGrade.ProtoReflect.Descriptor instead.
func (*BundleMatchGrade) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{203}
}

func (x *BundleMatchGrade) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BundleMatchGrade) GetValueCode() *codes_go_proto.MatchGradeCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for maxDecimalPlaces.
// Maximum digits after decimal.
// See http://hl7.org/fhir/StructureDefinition/maxDecimalPlaces
type MaxDecimalPlaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *MaxDecimalPlaces) Reset() {
	*x = MaxDecimalPlaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxDecimalPlaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxDecimalPlaces) ProtoMessage() {}

func (x *MaxDecimalPlaces) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxDecimalPlaces.ProtoReflect.Descriptor instead.
func (*MaxDecimalPlaces) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{204}
}

func (x *MaxDecimalPlaces) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MaxDecimalPlaces) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for maxSize.
// Max size in MB.
// See http://hl7.org/fhir/StructureDefinition/maxSize
type MaxSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDecimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=value_decimal,json=valueDecimal,proto3" json:"value_decimal,omitempty"`
}

func (x *MaxSize) Reset() {
	*x = MaxSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxSize) ProtoMessage() {}

func (x *MaxSize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxSize.ProtoReflect.Descriptor instead.
func (*MaxSize) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{205}
}

func (x *MaxSize) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MaxSize) GetValueDecimal() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.ValueDecimal
	}
	return nil
}

// Auto-generated from StructureDefinition for maxValue.
// Must be <= this value.
// See http://hl7.org/fhir/StructureDefinition/maxValue
type QuestionnaireMaxValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *QuestionnaireMaxValue_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QuestionnaireMaxValue) Reset() {
	*x = QuestionnaireMaxValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireMaxValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireMaxValue) ProtoMessage() {}

func (x *QuestionnaireMaxValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireMaxValue.ProtoReflect.Descriptor instead.
func (*QuestionnaireMaxValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{206}
}

func (x *QuestionnaireMaxValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireMaxValue) GetValue() *QuestionnaireMaxValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for usualRoute.
// Typical application route.
// See http://hl7.org/fhir/StructureDefinition/medication-usualRoute
type MedicationUsualRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *MedicationUsualRoute) Reset() {
	*x = MedicationUsualRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationUsualRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationUsualRoute) ProtoMessage() {}

func (x *MedicationUsualRoute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationUsualRoute.ProtoReflect.Descriptor instead.
func (*MedicationUsualRoute) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{207}
}

func (x *MedicationUsualRoute) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationUsualRoute) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for validityPeriod.
// Time interval for medication administration.
// See http://hl7.org/fhir/StructureDefinition/medicationdispense-validityPeriod
type MedicationDispenseValidityPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValuePeriod *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=value_period,json=valuePeriod,proto3" json:"value_period,omitempty"`
}

func (x *MedicationDispenseValidityPeriod) Reset() {
	*x = MedicationDispenseValidityPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispenseValidityPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispenseValidityPeriod) ProtoMessage() {}

func (x *MedicationDispenseValidityPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispenseValidityPeriod.ProtoReflect.Descriptor instead.
func (*MedicationDispenseValidityPeriod) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{208}
}

func (x *MedicationDispenseValidityPeriod) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationDispenseValidityPeriod) GetValuePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValuePeriod
	}
	return nil
}

// Auto-generated from StructureDefinition for Prescriber.
// Who ordered the initial medication(s).
// See http://hl7.org/fhir/StructureDefinition/medicationstatement-Prescriber
type MedicationStatementPrescriber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *MedicationStatementPrescriber) Reset() {
	*x = MedicationStatementPrescriber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatementPrescriber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatementPrescriber) ProtoMessage() {}

func (x *MedicationStatementPrescriber) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatementPrescriber.ProtoReflect.Descriptor instead.
func (*MedicationStatementPrescriber) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{209}
}

func (x *MedicationStatementPrescriber) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MedicationStatementPrescriber) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for messageheader-response-request.
// messageheader initiator requests a response.
// See http://hl7.org/fhir/StructureDefinition/messageheader-response-request
type MessageHeaderMessageheaderResponseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.MessageHeaderResponseRequestCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *MessageHeaderMessageheaderResponseRequest) Reset() {
	*x = MessageHeaderMessageheaderResponseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageHeaderMessageheaderResponseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeaderMessageheaderResponseRequest) ProtoMessage() {}

func (x *MessageHeaderMessageheaderResponseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeaderMessageheaderResponseRequest.ProtoReflect.Descriptor instead.
func (*MessageHeaderMessageheaderResponseRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{210}
}

func (x *MessageHeaderMessageheaderResponseRequest) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageHeaderMessageheaderResponseRequest) GetValueCode() *codes_go_proto.MessageHeaderResponseRequestCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for mimeType.
// Type of attachment.
// See http://hl7.org/fhir/StructureDefinition/mimeType
type MimeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *datatypes_go_proto.MimeTypeCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *MimeType) Reset() {
	*x = MimeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MimeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MimeType) ProtoMessage() {}

func (x *MimeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MimeType.ProtoReflect.Descriptor instead.
func (*MimeType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{211}
}

func (x *MimeType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MimeType) GetValueCode() *datatypes_go_proto.MimeTypeCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for minLength.
// At least this many characters.
// See http://hl7.org/fhir/StructureDefinition/minLength
type MinLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *MinLength) Reset() {
	*x = MinLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinLength) ProtoMessage() {}

func (x *MinLength) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinLength.ProtoReflect.Descriptor instead.
func (*MinLength) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{212}
}

func (x *MinLength) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MinLength) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for minValue.
// Must be >= this value.
// See http://hl7.org/fhir/StructureDefinition/minValue
type QuestionnaireMinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *QuestionnaireMinValue_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QuestionnaireMinValue) Reset() {
	*x = QuestionnaireMinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireMinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireMinValue) ProtoMessage() {}

func (x *QuestionnaireMinValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireMinValue.ProtoReflect.Descriptor instead.
func (*QuestionnaireMinValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{213}
}

func (x *QuestionnaireMinValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireMinValue) GetValue() *QuestionnaireMinValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for bodyPosition.
// The body position during the observation.
// See http://hl7.org/fhir/StructureDefinition/observation-bodyPosition
type ObservationBodyPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationBodyPosition) Reset() {
	*x = ObservationBodyPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationBodyPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationBodyPosition) ProtoMessage() {}

func (x *ObservationBodyPosition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationBodyPosition.ProtoReflect.Descriptor instead.
func (*ObservationBodyPosition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{214}
}

func (x *ObservationBodyPosition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationBodyPosition) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for delta.
// Qualitative change or trend in the measurement.
// See http://hl7.org/fhir/StructureDefinition/observation-delta
type ObservationDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationDelta) Reset() {
	*x = ObservationDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationDelta) ProtoMessage() {}

func (x *ObservationDelta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationDelta.ProtoReflect.Descriptor instead.
func (*ObservationDelta) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{215}
}

func (x *ObservationDelta) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationDelta) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for eventTiming.
// Approximate time of observation.
// See http://hl7.org/fhir/StructureDefinition/observation-eventTiming
type ObservationEventTiming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Life events
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// How close to event
	Offset *datatypes_go_proto.Quantity `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ObservationEventTiming) Reset() {
	*x = ObservationEventTiming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationEventTiming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationEventTiming) ProtoMessage() {}

func (x *ObservationEventTiming) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationEventTiming.ProtoReflect.Descriptor instead.
func (*ObservationEventTiming) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{216}
}

func (x *ObservationEventTiming) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationEventTiming) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ObservationEventTiming) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ObservationEventTiming) GetOffset() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.Offset
	}
	return nil
}

// Auto-generated from StructureDefinition for focal-subject.
// Focal Subject.
// See http://hl7.org/fhir/StructureDefinition/observation-focal-subject
type ObservationFocalSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationFocalSubject) Reset() {
	*x = ObservationFocalSubject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationFocalSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationFocalSubject) ProtoMessage() {}

func (x *ObservationFocalSubject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationFocalSubject.ProtoReflect.Descriptor instead.
func (*ObservationFocalSubject) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{217}
}

func (x *ObservationFocalSubject) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationFocalSubject) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for AlleleName.
// Name of allele.
// See http://hl7.org/fhir/StructureDefinition/observation-geneticsAlleleName
type ObservationAlleleName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationAlleleName) Reset() {
	*x = ObservationAlleleName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationAlleleName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationAlleleName) ProtoMessage() {}

func (x *ObservationAlleleName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationAlleleName.ProtoReflect.Descriptor instead.
func (*ObservationAlleleName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{218}
}

func (x *ObservationAlleleName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationAlleleName) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for AllelicFrequency.
// Allele frequency.
// See
// http://hl7.org/fhir/StructureDefinition/observation-geneticsAllelicFrequency
type ObservationAllelicFrequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDecimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=value_decimal,json=valueDecimal,proto3" json:"value_decimal,omitempty"`
}

func (x *ObservationAllelicFrequency) Reset() {
	*x = ObservationAllelicFrequency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationAllelicFrequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationAllelicFrequency) ProtoMessage() {}

func (x *ObservationAllelicFrequency) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationAllelicFrequency.ProtoReflect.Descriptor instead.
func (*ObservationAllelicFrequency) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{219}
}

func (x *ObservationAllelicFrequency) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationAllelicFrequency) GetValueDecimal() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.ValueDecimal
	}
	return nil
}

// Auto-generated from StructureDefinition for AllelicState.
// The level of occurrence of a single DNA sequence variant within a set of
// chromosomes: Heteroplasmic / Homoplasmic / Homozygous / Heterozygous /
// Hemizygous. See
// http://hl7.org/fhir/StructureDefinition/observation-geneticsAllelicState
type ObservationAllelicState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationAllelicState) Reset() {
	*x = ObservationAllelicState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationAllelicState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationAllelicState) ProtoMessage() {}

func (x *ObservationAllelicState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationAllelicState.ProtoReflect.Descriptor instead.
func (*ObservationAllelicState) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{220}
}

func (x *ObservationAllelicState) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationAllelicState) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for AminoAcidChangeName.
// HGVS nomenclature for observed Amino Acid Change.
// See
// http://hl7.org/fhir/StructureDefinition/observation-geneticsAminoAcidChangeName
type ObservationAminoAcidChangeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationAminoAcidChangeName) Reset() {
	*x = ObservationAminoAcidChangeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationAminoAcidChangeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationAminoAcidChangeName) ProtoMessage() {}

func (x *ObservationAminoAcidChangeName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationAminoAcidChangeName.ProtoReflect.Descriptor instead.
func (*ObservationAminoAcidChangeName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{221}
}

func (x *ObservationAminoAcidChangeName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationAminoAcidChangeName) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for AminoAcidChangeType.
// Amino Acid Change Type.
// See
// http://hl7.org/fhir/StructureDefinition/observation-geneticsAminoAcidChangeType
type ObservationAminoAcidChangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationAminoAcidChangeType) Reset() {
	*x = ObservationAminoAcidChangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationAminoAcidChangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationAminoAcidChangeType) ProtoMessage() {}

func (x *ObservationAminoAcidChangeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationAminoAcidChangeType.ProtoReflect.Descriptor instead.
func (*ObservationAminoAcidChangeType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{222}
}

func (x *ObservationAminoAcidChangeType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationAminoAcidChangeType) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for CopyNumberEvent.
// Copy number variation.
// See
// http://hl7.org/fhir/StructureDefinition/observation-geneticsCopyNumberEvent
type ObservationCopyNumberEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationCopyNumberEvent) Reset() {
	*x = ObservationCopyNumberEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationCopyNumberEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationCopyNumberEvent) ProtoMessage() {}

func (x *ObservationCopyNumberEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationCopyNumberEvent.ProtoReflect.Descriptor instead.
func (*ObservationCopyNumberEvent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{223}
}

func (x *ObservationCopyNumberEvent) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationCopyNumberEvent) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for DNARegionName.
// DNA region name.
// See http://hl7.org/fhir/StructureDefinition/observation-geneticsDNARegionName
type ObservationDNARegionName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ObservationDNARegionName) Reset() {
	*x = ObservationDNARegionName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationDNARegionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationDNARegionName) ProtoMessage() {}

func (x *ObservationDNARegionName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationDNARegionName.ProtoReflect.Descriptor instead.
func (*ObservationDNARegionName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{224}
}

func (x *ObservationDNARegionName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationDNARegionName) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for DNASequenceVariantName.
// HGVS nomenclature for observed DNA sequence variant.
// See
// http://hl7.org/fhir/StructureDefinition/observation-geneticsDNASequenceVariantName
type ObservationDNASequenceVariantName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationDNASequenceVariantName) Reset() {
	*x = ObservationDNASequenceVariantName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationDNASequenceVariantName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationDNASequenceVariantName) ProtoMessage() {}

func (x *ObservationDNASequenceVariantName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationDNASequenceVariantName.ProtoReflect.Descriptor instead.
func (*ObservationDNASequenceVariantName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{225}
}

func (x *ObservationDNASequenceVariantName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationDNASequenceVariantName) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for DNASequenceVariantType.
// DNA sequence variant type.
// See
// http://hl7.org/fhir/StructureDefinition/observation-geneticsDNASequenceVariantType
type ObservationDNASequenceVariantType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationDNASequenceVariantType) Reset() {
	*x = ObservationDNASequenceVariantType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationDNASequenceVariantType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationDNASequenceVariantType) ProtoMessage() {}

func (x *ObservationDNASequenceVariantType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationDNASequenceVariantType.ProtoReflect.Descriptor instead.
func (*ObservationDNASequenceVariantType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{226}
}

func (x *ObservationDNASequenceVariantType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationDNASequenceVariantType) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for DNAVariantId.
// DNA sequence variant ID.
// See http://hl7.org/fhir/StructureDefinition/observation-geneticsDNAVariantId
type ObservationDNAVariantId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationDNAVariantId) Reset() {
	*x = ObservationDNAVariantId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationDNAVariantId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationDNAVariantId) ProtoMessage() {}

func (x *ObservationDNAVariantId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationDNAVariantId.ProtoReflect.Descriptor instead.
func (*ObservationDNAVariantId) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{227}
}

func (x *ObservationDNAVariantId) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationDNAVariantId) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for Gene.
// HGNC gene symbol.
// See http://hl7.org/fhir/StructureDefinition/observation-geneticsGene
type ObservationGene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationGene) Reset() {
	*x = ObservationGene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationGene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGene) ProtoMessage() {}

func (x *ObservationGene) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGene.ProtoReflect.Descriptor instead.
func (*ObservationGene) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{228}
}

func (x *ObservationGene) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationGene) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for GenomicSourceClass.
// Genomic source class.
// See
// http://hl7.org/fhir/StructureDefinition/observation-geneticsGenomicSourceClass
type ObservationGenomicSourceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ObservationGenomicSourceClass) Reset() {
	*x = ObservationGenomicSourceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationGenomicSourceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGenomicSourceClass) ProtoMessage() {}

func (x *ObservationGenomicSourceClass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGenomicSourceClass.ProtoReflect.Descriptor instead.
func (*ObservationGenomicSourceClass) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{229}
}

func (x *ObservationGenomicSourceClass) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationGenomicSourceClass) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for Interpretation.
// Clinical interpretations for variant.
// See
// http://hl7.org/fhir/StructureDefinition/observation-geneticsInterpretation
type ObservationInterpretation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ObservationInterpretation) Reset() {
	*x = ObservationInterpretation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationInterpretation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationInterpretation) ProtoMessage() {}

func (x *ObservationInterpretation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationInterpretation.ProtoReflect.Descriptor instead.
func (*ObservationInterpretation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{230}
}

func (x *ObservationInterpretation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationInterpretation) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for PhaseSet.
// Phase set identifier (UUID/OID).
// See http://hl7.org/fhir/StructureDefinition/observation-geneticsPhaseSet
type ObservationPhaseSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *ObservationPhaseSet) Reset() {
	*x = ObservationPhaseSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationPhaseSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationPhaseSet) ProtoMessage() {}

func (x *ObservationPhaseSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationPhaseSet.ProtoReflect.Descriptor instead.
func (*ObservationPhaseSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{231}
}

func (x *ObservationPhaseSet) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationPhaseSet) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for Sequence.
// Sequence.
// See http://hl7.org/fhir/StructureDefinition/observation-geneticsSequence
type ObservationSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ObservationSequence) Reset() {
	*x = ObservationSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationSequence) ProtoMessage() {}

func (x *ObservationSequence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationSequence.ProtoReflect.Descriptor instead.
func (*ObservationSequence) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{232}
}

func (x *ObservationSequence) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationSequence) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for time-offset.
// Time Offset for interlacing.
// See http://hl7.org/fhir/StructureDefinition/observation-time-offset
type ObservationTimeOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *ObservationTimeOffset) Reset() {
	*x = ObservationTimeOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationTimeOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationTimeOffset) ProtoMessage() {}

func (x *ObservationTimeOffset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationTimeOffset.ProtoReflect.Descriptor instead.
func (*ObservationTimeOffset) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{233}
}

func (x *ObservationTimeOffset) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationTimeOffset) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for administration.
// Actual medication record, if known.
// See http://hl7.org/fhir/StructureDefinition/openEHR-administration
type AllergyIntoleranceAdministration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *AllergyIntoleranceAdministration) Reset() {
	*x = AllergyIntoleranceAdministration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceAdministration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceAdministration) ProtoMessage() {}

func (x *AllergyIntoleranceAdministration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceAdministration.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceAdministration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{234}
}

func (x *AllergyIntoleranceAdministration) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceAdministration) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for careplan.
// Clinical Management Details.
// See http://hl7.org/fhir/StructureDefinition/openEHR-careplan
type AllergyIntoleranceCareplan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *AllergyIntoleranceCareplan) Reset() {
	*x = AllergyIntoleranceCareplan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCareplan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCareplan) ProtoMessage() {}

func (x *AllergyIntoleranceCareplan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCareplan.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCareplan) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{235}
}

func (x *AllergyIntoleranceCareplan) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceCareplan) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for exposureDate.
// Date(/time) of first exposure to Substance.
// See http://hl7.org/fhir/StructureDefinition/openEHR-exposureDate
type AllergyIntoleranceExposureDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDateTime *datatypes_go_proto.DateTime `protobuf:"bytes,3,opt,name=value_date_time,json=valueDateTime,proto3" json:"value_date_time,omitempty"`
}

func (x *AllergyIntoleranceExposureDate) Reset() {
	*x = AllergyIntoleranceExposureDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceExposureDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceExposureDate) ProtoMessage() {}

func (x *AllergyIntoleranceExposureDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceExposureDate.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceExposureDate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{236}
}

func (x *AllergyIntoleranceExposureDate) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceExposureDate) GetValueDateTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ValueDateTime
	}
	return nil
}

// Auto-generated from StructureDefinition for exposureDescription.
// Text description about exposure to the Substance.
// See http://hl7.org/fhir/StructureDefinition/openEHR-exposureDescription
type AllergyIntoleranceExposureDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AllergyIntoleranceExposureDescription) Reset() {
	*x = AllergyIntoleranceExposureDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceExposureDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceExposureDescription) ProtoMessage() {}

func (x *AllergyIntoleranceExposureDescription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceExposureDescription.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceExposureDescription) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{237}
}

func (x *AllergyIntoleranceExposureDescription) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceExposureDescription) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for exposureDuration.
// Amount of time individual was exposed to Substance.
// See http://hl7.org/fhir/StructureDefinition/openEHR-exposureDuration
type AllergyIntoleranceExposureDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDuration *datatypes_go_proto.Duration `protobuf:"bytes,3,opt,name=value_duration,json=valueDuration,proto3" json:"value_duration,omitempty"`
}

func (x *AllergyIntoleranceExposureDuration) Reset() {
	*x = AllergyIntoleranceExposureDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceExposureDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceExposureDuration) ProtoMessage() {}

func (x *AllergyIntoleranceExposureDuration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceExposureDuration.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceExposureDuration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{238}
}

func (x *AllergyIntoleranceExposureDuration) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceExposureDuration) GetValueDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.ValueDuration
	}
	return nil
}

// Auto-generated from StructureDefinition for location.
// Body site of manifestations.
// See http://hl7.org/fhir/StructureDefinition/openEHR-location
type AllergyIntoleranceLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *AllergyIntoleranceLocation) Reset() {
	*x = AllergyIntoleranceLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceLocation) ProtoMessage() {}

func (x *AllergyIntoleranceLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceLocation.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceLocation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{239}
}

func (x *AllergyIntoleranceLocation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceLocation) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for management.
// Clinical Management Description.
// See http://hl7.org/fhir/StructureDefinition/openEHR-management
type AllergyIntoleranceManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *AllergyIntoleranceManagement) Reset() {
	*x = AllergyIntoleranceManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceManagement) ProtoMessage() {}

func (x *AllergyIntoleranceManagement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceManagement.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceManagement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{240}
}

func (x *AllergyIntoleranceManagement) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceManagement) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for test.
// Observations that confirm or refute.
// See http://hl7.org/fhir/StructureDefinition/openEHR-test
type AllergyIntoleranceTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *AllergyIntoleranceTest_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AllergyIntoleranceTest) Reset() {
	*x = AllergyIntoleranceTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceTest) ProtoMessage() {}

func (x *AllergyIntoleranceTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceTest.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceTest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{241}
}

func (x *AllergyIntoleranceTest) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AllergyIntoleranceTest) GetValue() *AllergyIntoleranceTest_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for authority.
// Reference to where the rule is defined.
// See http://hl7.org/fhir/StructureDefinition/operationoutcome-authority
type OperationOutcomeAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *OperationOutcomeAuthority) Reset() {
	*x = OperationOutcomeAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationOutcomeAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationOutcomeAuthority) ProtoMessage() {}

func (x *OperationOutcomeAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationOutcomeAuthority.ProtoReflect.Descriptor instead.
func (*OperationOutcomeAuthority) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{242}
}

func (x *OperationOutcomeAuthority) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationOutcomeAuthority) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for detectedIssue.
// Reference to a contra-indication that is the basis for this error.
// See http://hl7.org/fhir/StructureDefinition/operationoutcome-detectedIssue
type OperationOutcomeDetectedIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *OperationOutcomeDetectedIssue) Reset() {
	*x = OperationOutcomeDetectedIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationOutcomeDetectedIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationOutcomeDetectedIssue) ProtoMessage() {}

func (x *OperationOutcomeDetectedIssue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationOutcomeDetectedIssue.ProtoReflect.Descriptor instead.
func (*OperationOutcomeDetectedIssue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{243}
}

func (x *OperationOutcomeDetectedIssue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationOutcomeDetectedIssue) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for issue-source.
// Source of a validation message.
// See http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-source
type OperationOutcomeIssueSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *OperationOutcomeIssueSource) Reset() {
	*x = OperationOutcomeIssueSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationOutcomeIssueSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationOutcomeIssueSource) ProtoMessage() {}

func (x *OperationOutcomeIssueSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationOutcomeIssueSource.ProtoReflect.Descriptor instead.
func (*OperationOutcomeIssueSource) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{244}
}

func (x *OperationOutcomeIssueSource) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationOutcomeIssueSource) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for alias.
// Alias.
// See http://hl7.org/fhir/StructureDefinition/organization-alias
type OrganizationAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *OrganizationAlias) Reset() {
	*x = OrganizationAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationAlias) ProtoMessage() {}

func (x *OrganizationAlias) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationAlias.ProtoReflect.Descriptor instead.
func (*OrganizationAlias) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{245}
}

func (x *OrganizationAlias) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OrganizationAlias) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for period.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/organization-period
type OrganizationPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValuePeriod *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=value_period,json=valuePeriod,proto3" json:"value_period,omitempty"`
}

func (x *OrganizationPeriod) Reset() {
	*x = OrganizationPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationPeriod) ProtoMessage() {}

func (x *OrganizationPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationPeriod.ProtoReflect.Descriptor instead.
func (*OrganizationPeriod) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{246}
}

func (x *OrganizationPeriod) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OrganizationPeriod) GetValuePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValuePeriod
	}
	return nil
}

// Auto-generated from StructureDefinition for preferredContact.
// Extension.
// See http://hl7.org/fhir/StructureDefinition/organization-preferredContact
type OrganizationPreferredContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *OrganizationPreferredContact) Reset() {
	*x = OrganizationPreferredContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationPreferredContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationPreferredContact) ProtoMessage() {}

func (x *OrganizationPreferredContact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationPreferredContact.ProtoReflect.Descriptor instead.
func (*OrganizationPreferredContact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{247}
}

func (x *OrganizationPreferredContact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OrganizationPreferredContact) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for adoptionInfo.
// The adoption status of the patient.
// See http://hl7.org/fhir/StructureDefinition/patient-adoptionInfo
type PatientAdoptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *PatientAdoptionInfo) Reset() {
	*x = PatientAdoptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientAdoptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientAdoptionInfo) ProtoMessage() {}

func (x *PatientAdoptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientAdoptionInfo.ProtoReflect.Descriptor instead.
func (*PatientAdoptionInfo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{248}
}

func (x *PatientAdoptionInfo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientAdoptionInfo) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for birthTime.
// Time of day of birth.
// See http://hl7.org/fhir/StructureDefinition/patient-birthTime
type PatientBirthTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDateTime *datatypes_go_proto.DateTime `protobuf:"bytes,3,opt,name=value_date_time,json=valueDateTime,proto3" json:"value_date_time,omitempty"`
}

func (x *PatientBirthTime) Reset() {
	*x = PatientBirthTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientBirthTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientBirthTime) ProtoMessage() {}

func (x *PatientBirthTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientBirthTime.ProtoReflect.Descriptor instead.
func (*PatientBirthTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{249}
}

func (x *PatientBirthTime) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientBirthTime) GetValueDateTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ValueDateTime
	}
	return nil
}

// Auto-generated from StructureDefinition for cadavericDonor.
// Post-mortem donor status.
// See http://hl7.org/fhir/StructureDefinition/patient-cadavericDonor
type PatientCadavericDonor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *PatientCadavericDonor) Reset() {
	*x = PatientCadavericDonor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientCadavericDonor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientCadavericDonor) ProtoMessage() {}

func (x *PatientCadavericDonor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientCadavericDonor.ProtoReflect.Descriptor instead.
func (*PatientCadavericDonor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{250}
}

func (x *PatientCadavericDonor) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientCadavericDonor) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for citizenship.
// Nation(s) where the patient claims citizenship.
// See http://hl7.org/fhir/StructureDefinition/patient-citizenship
type PatientCitizenship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Nation code of citizenship
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Time period of citizenship
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *PatientCitizenship) Reset() {
	*x = PatientCitizenship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientCitizenship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientCitizenship) ProtoMessage() {}

func (x *PatientCitizenship) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientCitizenship.ProtoReflect.Descriptor instead.
func (*PatientCitizenship) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{251}
}

func (x *PatientCitizenship) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientCitizenship) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientCitizenship) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *PatientCitizenship) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for clinicalTrial.
// The patient's participation in clinical trials.
// See http://hl7.org/fhir/StructureDefinition/patient-clinicalTrial
type PatientClinicalTrial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// National Clinical Trial number
	Nct *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=nct,json=NCT,proto3" json:"nct,omitempty"`
	// The period of participation in the clinical trial
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// The reason for participation in the clinical trial
	Reason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *PatientClinicalTrial) Reset() {
	*x = PatientClinicalTrial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientClinicalTrial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientClinicalTrial) ProtoMessage() {}

func (x *PatientClinicalTrial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientClinicalTrial.ProtoReflect.Descriptor instead.
func (*PatientClinicalTrial) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{252}
}

func (x *PatientClinicalTrial) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientClinicalTrial) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientClinicalTrial) GetNct() *datatypes_go_proto.String {
	if x != nil {
		return x.Nct
	}
	return nil
}

func (x *PatientClinicalTrial) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *PatientClinicalTrial) GetReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Reason
	}
	return nil
}

// Auto-generated from StructureDefinition for congregation.
// A group of place of religious practice.
// See http://hl7.org/fhir/StructureDefinition/patient-congregation
type PatientCongregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *PatientCongregation) Reset() {
	*x = PatientCongregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientCongregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientCongregation) ProtoMessage() {}

func (x *PatientCongregation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientCongregation.ProtoReflect.Descriptor instead.
func (*PatientCongregation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{253}
}

func (x *PatientCongregation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientCongregation) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for disability.
// Condition(s) limiting movement, senses, or activities.
// See http://hl7.org/fhir/StructureDefinition/patient-disability
type PatientDisability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *PatientDisability) Reset() {
	*x = PatientDisability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientDisability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientDisability) ProtoMessage() {}

func (x *PatientDisability) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientDisability.ProtoReflect.Descriptor instead.
func (*PatientDisability) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{254}
}

func (x *PatientDisability) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientDisability) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for importance.
// Special status given the patient.
// See http://hl7.org/fhir/StructureDefinition/patient-importance
type PatientImportance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *PatientImportance) Reset() {
	*x = PatientImportance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientImportance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientImportance) ProtoMessage() {}

func (x *PatientImportance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientImportance.ProtoReflect.Descriptor instead.
func (*PatientImportance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{255}
}

func (x *PatientImportance) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientImportance) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for interpreterRequired.
// Whether the patient needs an interpreter.
// See http://hl7.org/fhir/StructureDefinition/patient-interpreterRequired
type PatientInterpreterRequired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *PatientInterpreterRequired) Reset() {
	*x = PatientInterpreterRequired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientInterpreterRequired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientInterpreterRequired) ProtoMessage() {}

func (x *PatientInterpreterRequired) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientInterpreterRequired.ProtoReflect.Descriptor instead.
func (*PatientInterpreterRequired) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{256}
}

func (x *PatientInterpreterRequired) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientInterpreterRequired) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for mothersMaidenName.
// Mother's Maiden name.
// See http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName
type PatientMothersMaidenName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *PatientMothersMaidenName) Reset() {
	*x = PatientMothersMaidenName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientMothersMaidenName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientMothersMaidenName) ProtoMessage() {}

func (x *PatientMothersMaidenName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientMothersMaidenName.ProtoReflect.Descriptor instead.
func (*PatientMothersMaidenName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{257}
}

func (x *PatientMothersMaidenName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientMothersMaidenName) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for nationality.
// Nationality.
// See http://hl7.org/fhir/StructureDefinition/patient-nationality
type PatientNationality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Nationality Code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Nationality Period
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *PatientNationality) Reset() {
	*x = PatientNationality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientNationality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientNationality) ProtoMessage() {}

func (x *PatientNationality) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientNationality.ProtoReflect.Descriptor instead.
func (*PatientNationality) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{258}
}

func (x *PatientNationality) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientNationality) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *PatientNationality) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *PatientNationality) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for religion.
// The patient's professed religious affiliations.
// See http://hl7.org/fhir/StructureDefinition/patient-religion
type PatientReligion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *PatientReligion) Reset() {
	*x = PatientReligion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientReligion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientReligion) ProtoMessage() {}

func (x *PatientReligion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientReligion.ProtoReflect.Descriptor instead.
func (*PatientReligion) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{259}
}

func (x *PatientReligion) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PatientReligion) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for doseType.
// The type of dose, e.g., loading.
// See http://hl7.org/fhir/StructureDefinition/pharmacy-core-doseType
type DoseType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *DoseType) Reset() {
	*x = DoseType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoseType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoseType) ProtoMessage() {}

func (x *DoseType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoseType.ProtoReflect.Descriptor instead.
func (*DoseType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{260}
}

func (x *DoseType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DoseType) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for infuseOver.
// The length of the infusion.
// See http://hl7.org/fhir/StructureDefinition/pharmacy-core-infuseOver
type InfuseOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDuration *datatypes_go_proto.Duration `protobuf:"bytes,3,opt,name=value_duration,json=valueDuration,proto3" json:"value_duration,omitempty"`
}

func (x *InfuseOver) Reset() {
	*x = InfuseOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfuseOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfuseOver) ProtoMessage() {}

func (x *InfuseOver) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfuseOver.ProtoReflect.Descriptor instead.
func (*InfuseOver) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{261}
}

func (x *InfuseOver) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InfuseOver) GetValueDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.ValueDuration
	}
	return nil
}

// Auto-generated from StructureDefinition for maxDeliveryRate.
// The maximum rate of substance administration.
// See http://hl7.org/fhir/StructureDefinition/pharmacy-core-maxDeliveryRate
type MaxDeliveryRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueRatio *datatypes_go_proto.Ratio `protobuf:"bytes,3,opt,name=value_ratio,json=valueRatio,proto3" json:"value_ratio,omitempty"`
}

func (x *MaxDeliveryRate) Reset() {
	*x = MaxDeliveryRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxDeliveryRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxDeliveryRate) ProtoMessage() {}

func (x *MaxDeliveryRate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxDeliveryRate.ProtoReflect.Descriptor instead.
func (*MaxDeliveryRate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{262}
}

func (x *MaxDeliveryRate) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MaxDeliveryRate) GetValueRatio() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.ValueRatio
	}
	return nil
}

// Auto-generated from StructureDefinition for maxDeliveryVolume.
// The maximum amount of fluid to infuse.
// See http://hl7.org/fhir/StructureDefinition/pharmacy-core-maxDeliveryVolume
type MaxDeliveryVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueQuantity *datatypes_go_proto.Quantity `protobuf:"bytes,3,opt,name=value_quantity,json=valueQuantity,proto3" json:"value_quantity,omitempty"`
}

func (x *MaxDeliveryVolume) Reset() {
	*x = MaxDeliveryVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxDeliveryVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxDeliveryVolume) ProtoMessage() {}

func (x *MaxDeliveryVolume) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxDeliveryVolume.ProtoReflect.Descriptor instead.
func (*MaxDeliveryVolume) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{263}
}

func (x *MaxDeliveryVolume) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MaxDeliveryVolume) GetValueQuantity() *datatypes_go_proto.Quantity {
	if x != nil {
		return x.ValueQuantity
	}
	return nil
}

// Auto-generated from StructureDefinition for minDosePerPeriod.
// The minimum quantity of substance per period.
// See http://hl7.org/fhir/StructureDefinition/pharmacy-core-minDosePerPeriod
type MinDosePerPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueRatio *datatypes_go_proto.Ratio `protobuf:"bytes,3,opt,name=value_ratio,json=valueRatio,proto3" json:"value_ratio,omitempty"`
}

func (x *MinDosePerPeriod) Reset() {
	*x = MinDosePerPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinDosePerPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinDosePerPeriod) ProtoMessage() {}

func (x *MinDosePerPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinDosePerPeriod.ProtoReflect.Descriptor instead.
func (*MinDosePerPeriod) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{264}
}

func (x *MinDosePerPeriod) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MinDosePerPeriod) GetValueRatio() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.ValueRatio
	}
	return nil
}

// Auto-generated from StructureDefinition for rateGoal.
// The target rate for the infusion.
// See http://hl7.org/fhir/StructureDefinition/pharmacy-core-rateGoal
type RateGoal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueRatio *datatypes_go_proto.Ratio `protobuf:"bytes,3,opt,name=value_ratio,json=valueRatio,proto3" json:"value_ratio,omitempty"`
}

func (x *RateGoal) Reset() {
	*x = RateGoal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateGoal) ProtoMessage() {}

func (x *RateGoal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateGoal.ProtoReflect.Descriptor instead.
func (*RateGoal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{265}
}

func (x *RateGoal) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RateGoal) GetValueRatio() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.ValueRatio
	}
	return nil
}

// Auto-generated from StructureDefinition for rateIncrement.
// Change in dosing rate per interval.
// See http://hl7.org/fhir/StructureDefinition/pharmacy-core-rateIncrement
type RateIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueRatio *datatypes_go_proto.Ratio `protobuf:"bytes,3,opt,name=value_ratio,json=valueRatio,proto3" json:"value_ratio,omitempty"`
}

func (x *RateIncrement) Reset() {
	*x = RateIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateIncrement) ProtoMessage() {}

func (x *RateIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateIncrement.ProtoReflect.Descriptor instead.
func (*RateIncrement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{266}
}

func (x *RateIncrement) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RateIncrement) GetValueRatio() *datatypes_go_proto.Ratio {
	if x != nil {
		return x.ValueRatio
	}
	return nil
}

// Auto-generated from StructureDefinition for rateIncrementInterval.
// The period of time between rate increments.
// See
// http://hl7.org/fhir/StructureDefinition/pharmacy-core-rateIncrementInterval
type RateIncrementInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDuration *datatypes_go_proto.Duration `protobuf:"bytes,3,opt,name=value_duration,json=valueDuration,proto3" json:"value_duration,omitempty"`
}

func (x *RateIncrementInterval) Reset() {
	*x = RateIncrementInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateIncrementInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateIncrementInterval) ProtoMessage() {}

func (x *RateIncrementInterval) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateIncrementInterval.ProtoReflect.Descriptor instead.
func (*RateIncrementInterval) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{267}
}

func (x *RateIncrementInterval) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RateIncrementInterval) GetValueDuration() *datatypes_go_proto.Duration {
	if x != nil {
		return x.ValueDuration
	}
	return nil
}

// Auto-generated from StructureDefinition for refillsRemaining.
// Number of refills allowed.
// See http://hl7.org/fhir/StructureDefinition/pharmacy-core-refillsRemaining
type RefillsRemaining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *RefillsRemaining) Reset() {
	*x = RefillsRemaining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefillsRemaining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefillsRemaining) ProtoMessage() {}

func (x *RefillsRemaining) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefillsRemaining.ProtoReflect.Descriptor instead.
func (*RefillsRemaining) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{268}
}

func (x *RefillsRemaining) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RefillsRemaining) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for animalSpecies.
// The Species of the Service Animal.
// See http://hl7.org/fhir/StructureDefinition/practitioner-animalSpecies
type AnimalSpecies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *AnimalSpecies) Reset() {
	*x = AnimalSpecies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimalSpecies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimalSpecies) ProtoMessage() {}

func (x *AnimalSpecies) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimalSpecies.ProtoReflect.Descriptor instead.
func (*AnimalSpecies) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{269}
}

func (x *AnimalSpecies) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AnimalSpecies) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for classification.
// Classification of the provider.
// See http://hl7.org/fhir/StructureDefinition/practitioner-classification
type PractitionerClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *PractitionerClassification) Reset() {
	*x = PractitionerClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PractitionerClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PractitionerClassification) ProtoMessage() {}

func (x *PractitionerClassification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PractitionerClassification.ProtoReflect.Descriptor instead.
func (*PractitionerClassification) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{270}
}

func (x *PractitionerClassification) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PractitionerClassification) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for primaryInd.
// Indicator of primary specialty.
// See http://hl7.org/fhir/StructureDefinition/practitionerrole-primaryInd
type PractitionerRolePrimaryInd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *PractitionerRolePrimaryInd) Reset() {
	*x = PractitionerRolePrimaryInd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PractitionerRolePrimaryInd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PractitionerRolePrimaryInd) ProtoMessage() {}

func (x *PractitionerRolePrimaryInd) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PractitionerRolePrimaryInd.ProtoReflect.Descriptor instead.
func (*PractitionerRolePrimaryInd) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{271}
}

func (x *PractitionerRolePrimaryInd) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PractitionerRolePrimaryInd) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for approachBodySite.
// The access point or points used for this procedure.
// See http://hl7.org/fhir/StructureDefinition/procedure-approachBodySite
type ProcedureApproachBodySite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ProcedureApproachBodySite) Reset() {
	*x = ProcedureApproachBodySite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureApproachBodySite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureApproachBodySite) ProtoMessage() {}

func (x *ProcedureApproachBodySite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureApproachBodySite.ProtoReflect.Descriptor instead.
func (*ProcedureApproachBodySite) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{272}
}

func (x *ProcedureApproachBodySite) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureApproachBodySite) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for causedBy.
// Related item that caused this procedure.
// See http://hl7.org/fhir/StructureDefinition/procedure-causedBy
type ProcedureCausedBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *ProcedureCausedBy_Value   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProcedureCausedBy) Reset() {
	*x = ProcedureCausedBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureCausedBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureCausedBy) ProtoMessage() {}

func (x *ProcedureCausedBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureCausedBy.ProtoReflect.Descriptor instead.
func (*ProcedureCausedBy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{273}
}

func (x *ProcedureCausedBy) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureCausedBy) GetValue() *ProcedureCausedBy_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for incisionDateTime.
// The first incision time.
// See http://hl7.org/fhir/StructureDefinition/procedure-incisionDateTime
type ProcedureIncisionDateTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDateTime *datatypes_go_proto.DateTime `protobuf:"bytes,3,opt,name=value_date_time,json=valueDateTime,proto3" json:"value_date_time,omitempty"`
}

func (x *ProcedureIncisionDateTime) Reset() {
	*x = ProcedureIncisionDateTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureIncisionDateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureIncisionDateTime) ProtoMessage() {}

func (x *ProcedureIncisionDateTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureIncisionDateTime.ProtoReflect.Descriptor instead.
func (*ProcedureIncisionDateTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{274}
}

func (x *ProcedureIncisionDateTime) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureIncisionDateTime) GetValueDateTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.ValueDateTime
	}
	return nil
}

// Auto-generated from StructureDefinition for method.
// The method used to perform the procedure.
// See http://hl7.org/fhir/StructureDefinition/procedure-method
type ProcedureMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ProcedureMethod) Reset() {
	*x = ProcedureMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureMethod) ProtoMessage() {}

func (x *ProcedureMethod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureMethod.ProtoReflect.Descriptor instead.
func (*ProcedureMethod) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{275}
}

func (x *ProcedureMethod) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureMethod) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for progressStatus.
// A details procedure progress.
// See http://hl7.org/fhir/StructureDefinition/procedure-progressStatus
type ProcedureProgressStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ProcedureProgressStatus) Reset() {
	*x = ProcedureProgressStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureProgressStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureProgressStatus) ProtoMessage() {}

func (x *ProcedureProgressStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureProgressStatus.ProtoReflect.Descriptor instead.
func (*ProcedureProgressStatus) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{276}
}

func (x *ProcedureProgressStatus) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureProgressStatus) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for schedule.
// Schedule followed.
// See http://hl7.org/fhir/StructureDefinition/procedure-schedule
type ProcedureSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueTiming *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=value_timing,json=valueTiming,proto3" json:"value_timing,omitempty"`
}

func (x *ProcedureSchedule) Reset() {
	*x = ProcedureSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureSchedule) ProtoMessage() {}

func (x *ProcedureSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureSchedule.ProtoReflect.Descriptor instead.
func (*ProcedureSchedule) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{277}
}

func (x *ProcedureSchedule) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureSchedule) GetValueTiming() *datatypes_go_proto.Timing {
	if x != nil {
		return x.ValueTiming
	}
	return nil
}

// Auto-generated from StructureDefinition for targetBodySite.
// The target point for this procedure.
// See http://hl7.org/fhir/StructureDefinition/procedure-targetBodySite
type ProcedureTargetBodySite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ProcedureTargetBodySite) Reset() {
	*x = ProcedureTargetBodySite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureTargetBodySite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureTargetBodySite) ProtoMessage() {}

func (x *ProcedureTargetBodySite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureTargetBodySite.ProtoReflect.Descriptor instead.
func (*ProcedureTargetBodySite) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{278}
}

func (x *ProcedureTargetBodySite) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureTargetBodySite) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for approachBodySite.
// The requested access point or points used for this procedure.
// See http://hl7.org/fhir/StructureDefinition/procedurerequest-approachBodySite
type ProcedureRequestApproachBodySite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ProcedureRequestApproachBodySite) Reset() {
	*x = ProcedureRequestApproachBodySite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequestApproachBodySite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequestApproachBodySite) ProtoMessage() {}

func (x *ProcedureRequestApproachBodySite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequestApproachBodySite.ProtoReflect.Descriptor instead.
func (*ProcedureRequestApproachBodySite) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{279}
}

func (x *ProcedureRequestApproachBodySite) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequestApproachBodySite) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for authorizedBy.
// Authorizer of the request.
// See http://hl7.org/fhir/StructureDefinition/procedurerequest-authorizedBy
type ProcedureRequestAuthorizedBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ProcedureRequestAuthorizedBy) Reset() {
	*x = ProcedureRequestAuthorizedBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequestAuthorizedBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequestAuthorizedBy) ProtoMessage() {}

func (x *ProcedureRequestAuthorizedBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequestAuthorizedBy.ProtoReflect.Descriptor instead.
func (*ProcedureRequestAuthorizedBy) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{280}
}

func (x *ProcedureRequestAuthorizedBy) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequestAuthorizedBy) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for Item.
// The items the orderer requested.
// See http://hl7.org/fhir/StructureDefinition/procedurerequest-geneticsItem
type DiagnosticReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code to indicate the item (test, panel or sequence variant) being ordered
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Indicate the genetic variant ordered to be tested
	GeneticsObservation *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=genetics_observation,json=geneticsObservation,proto3" json:"genetics_observation,omitempty"`
	// If this item relates to specific specimens
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// proposed | draft | planned | requested | received | accepted | in-progress
	// | review | completed | cancelled | suspended | rejected | failed
	Status *datatypes_go_proto.Code `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DiagnosticReportItem) Reset() {
	*x = DiagnosticReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportItem) ProtoMessage() {}

func (x *DiagnosticReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportItem.ProtoReflect.Descriptor instead.
func (*DiagnosticReportItem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{281}
}

func (x *DiagnosticReportItem) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticReportItem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticReportItem) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *DiagnosticReportItem) GetGeneticsObservation() *datatypes_go_proto.Reference {
	if x != nil {
		return x.GeneticsObservation
	}
	return nil
}

func (x *DiagnosticReportItem) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *DiagnosticReportItem) GetStatus() *datatypes_go_proto.Code {
	if x != nil {
		return x.Status
	}
	return nil
}

// Auto-generated from StructureDefinition for precondition.
// The condition or state of the patient for this test.
// See http://hl7.org/fhir/StructureDefinition/procedurerequest-precondition
type ProcedureRequestPrecondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ProcedureRequestPrecondition) Reset() {
	*x = ProcedureRequestPrecondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequestPrecondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequestPrecondition) ProtoMessage() {}

func (x *ProcedureRequestPrecondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequestPrecondition.ProtoReflect.Descriptor instead.
func (*ProcedureRequestPrecondition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{282}
}

func (x *ProcedureRequestPrecondition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequestPrecondition) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for questionnaireRequest.
// Questionnaire to be ordered.
// See
// http://hl7.org/fhir/StructureDefinition/procedurerequest-questionnaireRequest
type ProcedureRequestQuestionnaireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ProcedureRequestQuestionnaireRequest) Reset() {
	*x = ProcedureRequestQuestionnaireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequestQuestionnaireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequestQuestionnaireRequest) ProtoMessage() {}

func (x *ProcedureRequestQuestionnaireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequestQuestionnaireRequest.ProtoReflect.Descriptor instead.
func (*ProcedureRequestQuestionnaireRequest) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{283}
}

func (x *ProcedureRequestQuestionnaireRequest) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequestQuestionnaireRequest) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonRefused.
// Reason for refusal.
// See http://hl7.org/fhir/StructureDefinition/procedurerequest-reasonRefused
type ProcedureRequestReasonRefused struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ProcedureRequestReasonRefused) Reset() {
	*x = ProcedureRequestReasonRefused{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequestReasonRefused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequestReasonRefused) ProtoMessage() {}

func (x *ProcedureRequestReasonRefused) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequestReasonRefused.ProtoReflect.Descriptor instead.
func (*ProcedureRequestReasonRefused) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{284}
}

func (x *ProcedureRequestReasonRefused) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequestReasonRefused) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonRejected.
// The reason the order was rejected.
// See http://hl7.org/fhir/StructureDefinition/procedurerequest-reasonRejected
type ProcedureRequestReasonRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ProcedureRequestReasonRejected) Reset() {
	*x = ProcedureRequestReasonRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequestReasonRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequestReasonRejected) ProtoMessage() {}

func (x *ProcedureRequestReasonRejected) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequestReasonRejected.ProtoReflect.Descriptor instead.
func (*ProcedureRequestReasonRejected) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{285}
}

func (x *ProcedureRequestReasonRejected) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequestReasonRejected) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for targetBodySite.
// The requested target point for this procedure.
// See http://hl7.org/fhir/StructureDefinition/procedurerequest-targetBodySite
type ProcedureRequestTargetBodySite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ProcedureRequestTargetBodySite) Reset() {
	*x = ProcedureRequestTargetBodySite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureRequestTargetBodySite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureRequestTargetBodySite) ProtoMessage() {}

func (x *ProcedureRequestTargetBodySite) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureRequestTargetBodySite.ProtoReflect.Descriptor instead.
func (*ProcedureRequestTargetBodySite) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{286}
}

func (x *ProcedureRequestTargetBodySite) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedureRequestTargetBodySite) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for allowedProfile.
// Allowed profile for reference.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-allowedProfile
type QuestionnaireAllowedProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *QuestionnaireAllowedProfile) Reset() {
	*x = QuestionnaireAllowedProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireAllowedProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireAllowedProfile) ProtoMessage() {}

func (x *QuestionnaireAllowedProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireAllowedProfile.ProtoReflect.Descriptor instead.
func (*QuestionnaireAllowedProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{287}
}

func (x *QuestionnaireAllowedProfile) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireAllowedProfile) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for allowedResource.
// Allowed resource for reference.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-allowedResource
type QuestionnaireAllowedResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.ResourceTypeCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *QuestionnaireAllowedResource) Reset() {
	*x = QuestionnaireAllowedResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireAllowedResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireAllowedResource) ProtoMessage() {}

func (x *QuestionnaireAllowedResource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireAllowedResource.ProtoReflect.Descriptor instead.
func (*QuestionnaireAllowedResource) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{288}
}

func (x *QuestionnaireAllowedResource) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireAllowedResource) GetValueCode() *codes_go_proto.ResourceTypeCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for baseType.
// Base Type for answer.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-baseType
type QuestionnaireBaseType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.DataTypeCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *QuestionnaireBaseType) Reset() {
	*x = QuestionnaireBaseType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireBaseType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireBaseType) ProtoMessage() {}

func (x *QuestionnaireBaseType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireBaseType.ProtoReflect.Descriptor instead.
func (*QuestionnaireBaseType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{289}
}

func (x *QuestionnaireBaseType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireBaseType) GetValueCode() *codes_go_proto.DataTypeCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for choiceOrientation.
// horizontal | vertical.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-choiceOrientation
type QuestionnaireChoiceOrientation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.ChoiceListOrientationCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *QuestionnaireChoiceOrientation) Reset() {
	*x = QuestionnaireChoiceOrientation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireChoiceOrientation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireChoiceOrientation) ProtoMessage() {}

func (x *QuestionnaireChoiceOrientation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireChoiceOrientation.ProtoReflect.Descriptor instead.
func (*QuestionnaireChoiceOrientation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{290}
}

func (x *QuestionnaireChoiceOrientation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireChoiceOrientation) GetValueCode() *codes_go_proto.ChoiceListOrientationCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for deMap.
// Map linking questions to DataElements.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-deMap
type QuestionnaireDeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *QuestionnaireDeMap) Reset() {
	*x = QuestionnaireDeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireDeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireDeMap) ProtoMessage() {}

func (x *QuestionnaireDeMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireDeMap.ProtoReflect.Descriptor instead.
func (*QuestionnaireDeMap) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{291}
}

func (x *QuestionnaireDeMap) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireDeMap) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for displayCategory.
// Purpose of rendered text.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory
type QuestionnaireDisplayCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *QuestionnaireDisplayCategory) Reset() {
	*x = QuestionnaireDisplayCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireDisplayCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireDisplayCategory) ProtoMessage() {}

func (x *QuestionnaireDisplayCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireDisplayCategory.ProtoReflect.Descriptor instead.
func (*QuestionnaireDisplayCategory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{292}
}

func (x *QuestionnaireDisplayCategory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireDisplayCategory) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for fhirType.
// The underlying FHIR data type.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-fhirType
type QuestionnaireFhirType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *QuestionnaireFhirType) Reset() {
	*x = QuestionnaireFhirType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireFhirType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireFhirType) ProtoMessage() {}

func (x *QuestionnaireFhirType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireFhirType.ProtoReflect.Descriptor instead.
func (*QuestionnaireFhirType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{293}
}

func (x *QuestionnaireFhirType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireFhirType) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for hidden.
// Don't display to user.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-hidden
type QuestionnaireHidden struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *QuestionnaireHidden) Reset() {
	*x = QuestionnaireHidden{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireHidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireHidden) ProtoMessage() {}

func (x *QuestionnaireHidden) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireHidden.ProtoReflect.Descriptor instead.
func (*QuestionnaireHidden) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{294}
}

func (x *QuestionnaireHidden) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireHidden) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for itemControl.
// E.g. Fly-over, Table, Checkbox, Combo-box, Lookup, etc.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl
type QuestionnaireItemControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *QuestionnaireItemControl) Reset() {
	*x = QuestionnaireItemControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemControl) ProtoMessage() {}

func (x *QuestionnaireItemControl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemControl.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemControl) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{295}
}

func (x *QuestionnaireItemControl) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireItemControl) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for lookupQuestionnaire.
// Questionnaire to populate a reference.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-lookupQuestionnaire
type QuestionnaireLookupQuestionnaire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *QuestionnaireLookupQuestionnaire) Reset() {
	*x = QuestionnaireLookupQuestionnaire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireLookupQuestionnaire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireLookupQuestionnaire) ProtoMessage() {}

func (x *QuestionnaireLookupQuestionnaire) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireLookupQuestionnaire.ProtoReflect.Descriptor instead.
func (*QuestionnaireLookupQuestionnaire) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{296}
}

func (x *QuestionnaireLookupQuestionnaire) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireLookupQuestionnaire) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for maxOccurs.
// Maximum repetitions.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-maxOccurs
type QuestionnaireMaxOccurs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *QuestionnaireMaxOccurs) Reset() {
	*x = QuestionnaireMaxOccurs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireMaxOccurs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireMaxOccurs) ProtoMessage() {}

func (x *QuestionnaireMaxOccurs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireMaxOccurs.ProtoReflect.Descriptor instead.
func (*QuestionnaireMaxOccurs) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{297}
}

func (x *QuestionnaireMaxOccurs) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireMaxOccurs) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for minOccurs.
// Minimum repetitions.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-minOccurs
type QuestionnaireMinOccurs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *QuestionnaireMinOccurs) Reset() {
	*x = QuestionnaireMinOccurs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireMinOccurs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireMinOccurs) ProtoMessage() {}

func (x *QuestionnaireMinOccurs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireMinOccurs.ProtoReflect.Descriptor instead.
func (*QuestionnaireMinOccurs) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{298}
}

func (x *QuestionnaireMinOccurs) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireMinOccurs) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for optionExclusive.
// Option is exclusive.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive
type QuestionnaireOptionExclusive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *QuestionnaireOptionExclusive) Reset() {
	*x = QuestionnaireOptionExclusive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireOptionExclusive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireOptionExclusive) ProtoMessage() {}

func (x *QuestionnaireOptionExclusive) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireOptionExclusive.ProtoReflect.Descriptor instead.
func (*QuestionnaireOptionExclusive) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{299}
}

func (x *QuestionnaireOptionExclusive) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireOptionExclusive) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for optionPrefix.
// E.g. "(a)", "1.", etc.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-optionPrefix
type QuestionnaireOptionPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *QuestionnaireOptionPrefix) Reset() {
	*x = QuestionnaireOptionPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireOptionPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireOptionPrefix) ProtoMessage() {}

func (x *QuestionnaireOptionPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireOptionPrefix.ProtoReflect.Descriptor instead.
func (*QuestionnaireOptionPrefix) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{300}
}

func (x *QuestionnaireOptionPrefix) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireOptionPrefix) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for ordinalValue.
// Comparison value for ordinal codes.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-ordinalValue
type QuestionnaireOrdinalValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDecimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=value_decimal,json=valueDecimal,proto3" json:"value_decimal,omitempty"`
}

func (x *QuestionnaireOrdinalValue) Reset() {
	*x = QuestionnaireOrdinalValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireOrdinalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireOrdinalValue) ProtoMessage() {}

func (x *QuestionnaireOrdinalValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireOrdinalValue.ProtoReflect.Descriptor instead.
func (*QuestionnaireOrdinalValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{301}
}

func (x *QuestionnaireOrdinalValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireOrdinalValue) GetValueDecimal() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.ValueDecimal
	}
	return nil
}

// Auto-generated from StructureDefinition for referenceFilter.
// Filter to apply when looking up references.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-referenceFilter
type QuestionnaireReferenceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *QuestionnaireReferenceFilter) Reset() {
	*x = QuestionnaireReferenceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireReferenceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireReferenceFilter) ProtoMessage() {}

func (x *QuestionnaireReferenceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireReferenceFilter.ProtoReflect.Descriptor instead.
func (*QuestionnaireReferenceFilter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{302}
}

func (x *QuestionnaireReferenceFilter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireReferenceFilter) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for sourceStructureMap.
// Map that can populate this questionnaire.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-sourceStructureMap
type QuestionnaireSourceStructureMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *QuestionnaireSourceStructureMap) Reset() {
	*x = QuestionnaireSourceStructureMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireSourceStructureMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireSourceStructureMap) ProtoMessage() {}

func (x *QuestionnaireSourceStructureMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireSourceStructureMap.ProtoReflect.Descriptor instead.
func (*QuestionnaireSourceStructureMap) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{303}
}

func (x *QuestionnaireSourceStructureMap) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireSourceStructureMap) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for studyprotocolIdentifier.
// Study Protocol Identifier.
// See
// http://hl7.org/fhir/StructureDefinition/questionnaire-studyprotocolIdentifier
type QuestionnaireStudyprotocolIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueIdentifier *datatypes_go_proto.Identifier `protobuf:"bytes,3,opt,name=value_identifier,json=valueIdentifier,proto3" json:"value_identifier,omitempty"`
}

func (x *QuestionnaireStudyprotocolIdentifier) Reset() {
	*x = QuestionnaireStudyprotocolIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireStudyprotocolIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireStudyprotocolIdentifier) ProtoMessage() {}

func (x *QuestionnaireStudyprotocolIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireStudyprotocolIdentifier.ProtoReflect.Descriptor instead.
func (*QuestionnaireStudyprotocolIdentifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{304}
}

func (x *QuestionnaireStudyprotocolIdentifier) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireStudyprotocolIdentifier) GetValueIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.ValueIdentifier
	}
	return nil
}

// Auto-generated from StructureDefinition for supportLink.
// Supporting information.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-supportLink
type QuestionnaireSupportLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *QuestionnaireSupportLink) Reset() {
	*x = QuestionnaireSupportLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireSupportLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireSupportLink) ProtoMessage() {}

func (x *QuestionnaireSupportLink) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireSupportLink.ProtoReflect.Descriptor instead.
func (*QuestionnaireSupportLink) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{305}
}

func (x *QuestionnaireSupportLink) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireSupportLink) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for targetStructureMap.
// Map to artifacts that can be populated from this Questionnaire.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-targetStructureMap
type QuestionnaireTargetStructureMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *QuestionnaireTargetStructureMap) Reset() {
	*x = QuestionnaireTargetStructureMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireTargetStructureMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireTargetStructureMap) ProtoMessage() {}

func (x *QuestionnaireTargetStructureMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireTargetStructureMap.ProtoReflect.Descriptor instead.
func (*QuestionnaireTargetStructureMap) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{306}
}

func (x *QuestionnaireTargetStructureMap) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireTargetStructureMap) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for unit.
// Unit for numeric answer.
// See http://hl7.org/fhir/StructureDefinition/questionnaire-unit
type QuestionnaireUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCoding *datatypes_go_proto.Coding `protobuf:"bytes,3,opt,name=value_coding,json=valueCoding,proto3" json:"value_coding,omitempty"`
}

func (x *QuestionnaireUnit) Reset() {
	*x = QuestionnaireUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireUnit) ProtoMessage() {}

func (x *QuestionnaireUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireUnit.ProtoReflect.Descriptor instead.
func (*QuestionnaireUnit) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{307}
}

func (x *QuestionnaireUnit) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireUnit) GetValueCoding() *datatypes_go_proto.Coding {
	if x != nil {
		return x.ValueCoding
	}
	return nil
}

// Auto-generated from StructureDefinition for usageMode.
// capture | display | display-non-empty | capture-display |
// capture-display-non-empty. See
// http://hl7.org/fhir/StructureDefinition/questionnaire-usageMode
type QuestionnaireUsageMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.QuestionnaireItemUsageModeCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *QuestionnaireUsageMode) Reset() {
	*x = QuestionnaireUsageMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireUsageMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireUsageMode) ProtoMessage() {}

func (x *QuestionnaireUsageMode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireUsageMode.ProtoReflect.Descriptor instead.
func (*QuestionnaireUsageMode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{308}
}

func (x *QuestionnaireUsageMode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireUsageMode) GetValueCode() *codes_go_proto.QuestionnaireItemUsageModeCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for author.
// Who answered question/group.
// See http://hl7.org/fhir/StructureDefinition/questionnaireresponse-author
type QuestionnaireResponseAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *QuestionnaireResponseAuthor_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QuestionnaireResponseAuthor) Reset() {
	*x = QuestionnaireResponseAuthor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseAuthor) ProtoMessage() {}

func (x *QuestionnaireResponseAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseAuthor.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseAuthor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{309}
}

func (x *QuestionnaireResponseAuthor) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponseAuthor) GetValue() *QuestionnaireResponseAuthor_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for note.
// Comments about response.
// See http://hl7.org/fhir/StructureDefinition/questionnaireresponse-note
type QuestionnaireResponseNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueAnnotation *datatypes_go_proto.Annotation `protobuf:"bytes,3,opt,name=value_annotation,json=valueAnnotation,proto3" json:"value_annotation,omitempty"`
}

func (x *QuestionnaireResponseNote) Reset() {
	*x = QuestionnaireResponseNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseNote) ProtoMessage() {}

func (x *QuestionnaireResponseNote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseNote.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseNote) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{310}
}

func (x *QuestionnaireResponseNote) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponseNote) GetValueAnnotation() *datatypes_go_proto.Annotation {
	if x != nil {
		return x.ValueAnnotation
	}
	return nil
}

// Auto-generated from StructureDefinition for reason.
// Why response was created.
// See http://hl7.org/fhir/StructureDefinition/questionnaireresponse-reason
type QuestionnaireResponseReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *QuestionnaireResponseReason) Reset() {
	*x = QuestionnaireResponseReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseReason) ProtoMessage() {}

func (x *QuestionnaireResponseReason) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseReason.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseReason) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{311}
}

func (x *QuestionnaireResponseReason) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponseReason) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for reviewer.
// Who verified completion of form?.
// See http://hl7.org/fhir/StructureDefinition/questionnaireresponse-reviewer
type QuestionnaireResponseReviewer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *QuestionnaireResponseReviewer) Reset() {
	*x = QuestionnaireResponseReviewer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseReviewer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseReviewer) ProtoMessage() {}

func (x *QuestionnaireResponseReviewer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseReviewer.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseReviewer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{312}
}

func (x *QuestionnaireResponseReviewer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *QuestionnaireResponseReviewer) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for reasonRefused.
// Reason referral was refused.
// See http://hl7.org/fhir/StructureDefinition/referralrequest-reasonRefused
type ReferralRequestReasonRefused struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *ReferralRequestReasonRefused) Reset() {
	*x = ReferralRequestReasonRefused{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralRequestReasonRefused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralRequestReasonRefused) ProtoMessage() {}

func (x *ReferralRequestReasonRefused) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralRequestReasonRefused.ProtoReflect.Descriptor instead.
func (*ReferralRequestReasonRefused) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{313}
}

func (x *ReferralRequestReasonRefused) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferralRequestReasonRefused) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for regex.
// Regular expression pattern.
// See http://hl7.org/fhir/StructureDefinition/regex
type Regex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *Regex) Reset() {
	*x = Regex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regex) ProtoMessage() {}

func (x *Regex) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regex.ProtoReflect.Descriptor instead.
func (*Regex) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{314}
}

func (x *Regex) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Regex) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for Rendered Value.
// What should be displayed to human (if default is not appropriate).
// See http://hl7.org/fhir/StructureDefinition/rendered-value
type RenderedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *RenderedValue) Reset() {
	*x = RenderedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderedValue) ProtoMessage() {}

func (x *RenderedValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderedValue.ProtoReflect.Descriptor instead.
func (*RenderedValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{315}
}

func (x *RenderedValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RenderedValue) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for markdown.
// String equivalent with markdown.
// See http://hl7.org/fhir/StructureDefinition/rendering-markdown
type StringMarkdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueMarkdown *datatypes_go_proto.Markdown `protobuf:"bytes,3,opt,name=value_markdown,json=valueMarkdown,proto3" json:"value_markdown,omitempty"`
}

func (x *StringMarkdown) Reset() {
	*x = StringMarkdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMarkdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMarkdown) ProtoMessage() {}

func (x *StringMarkdown) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMarkdown.ProtoReflect.Descriptor instead.
func (*StringMarkdown) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{316}
}

func (x *StringMarkdown) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StringMarkdown) GetValueMarkdown() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.ValueMarkdown
	}
	return nil
}

// Auto-generated from StructureDefinition for style.
// Html style value.
// See http://hl7.org/fhir/StructureDefinition/rendering-style
type Style struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *Style) Reset() {
	*x = Style{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Style) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Style) ProtoMessage() {}

func (x *Style) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Style.ProtoReflect.Descriptor instead.
func (*Style) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{317}
}

func (x *Style) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Style) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for styleSensitive.
// Are styles important for processing?.
// See http://hl7.org/fhir/StructureDefinition/rendering-styleSensitive
type StyleSensitive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *StyleSensitive) Reset() {
	*x = StyleSensitive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleSensitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleSensitive) ProtoMessage() {}

func (x *StyleSensitive) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleSensitive.ProtoReflect.Descriptor instead.
func (*StyleSensitive) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{318}
}

func (x *StyleSensitive) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StyleSensitive) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for xhtml.
// String equivalent with html markup.
// See http://hl7.org/fhir/StructureDefinition/rendering-xhtml
type StringXhtml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *StringXhtml) Reset() {
	*x = StringXhtml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringXhtml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringXhtml) ProtoMessage() {}

func (x *StringXhtml) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringXhtml.ProtoReflect.Descriptor instead.
func (*StringXhtml) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{319}
}

func (x *StringXhtml) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StringXhtml) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for approvalDate.
// When resource approved by publisher.
// See http://hl7.org/fhir/StructureDefinition/resource-approvalDate
type ApprovalDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDate *datatypes_go_proto.Date `protobuf:"bytes,3,opt,name=value_date,json=valueDate,proto3" json:"value_date,omitempty"`
}

func (x *ApprovalDate) Reset() {
	*x = ApprovalDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalDate) ProtoMessage() {}

func (x *ApprovalDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalDate.ProtoReflect.Descriptor instead.
func (*ApprovalDate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{320}
}

func (x *ApprovalDate) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ApprovalDate) GetValueDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ValueDate
	}
	return nil
}

// Auto-generated from StructureDefinition for effectivePeriod.
// The effective date range for the resource.
// See http://hl7.org/fhir/StructureDefinition/resource-effectivePeriod
type EffectivePeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValuePeriod *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=value_period,json=valuePeriod,proto3" json:"value_period,omitempty"`
}

func (x *EffectivePeriod) Reset() {
	*x = EffectivePeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectivePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectivePeriod) ProtoMessage() {}

func (x *EffectivePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectivePeriod.ProtoReflect.Descriptor instead.
func (*EffectivePeriod) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{321}
}

func (x *EffectivePeriod) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EffectivePeriod) GetValuePeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.ValuePeriod
	}
	return nil
}

// Auto-generated from StructureDefinition for lastReviewDate.
// Last review date for the resource.
// See http://hl7.org/fhir/StructureDefinition/resource-lastReviewDate
type LastReviewDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDate *datatypes_go_proto.Date `protobuf:"bytes,3,opt,name=value_date,json=valueDate,proto3" json:"value_date,omitempty"`
}

func (x *LastReviewDate) Reset() {
	*x = LastReviewDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastReviewDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastReviewDate) ProtoMessage() {}

func (x *LastReviewDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastReviewDate.ProtoReflect.Descriptor instead.
func (*LastReviewDate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{322}
}

func (x *LastReviewDate) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LastReviewDate) GetValueDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ValueDate
	}
	return nil
}

// Auto-generated from StructureDefinition for collectionPriority.
// Urgency for collection.
// See http://hl7.org/fhir/StructureDefinition/specimen-collectionPriority
type SpecimenCollectionPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *SpecimenCollectionPriority) Reset() {
	*x = SpecimenCollectionPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenCollectionPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenCollectionPriority) ProtoMessage() {}

func (x *SpecimenCollectionPriority) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenCollectionPriority.ProtoReflect.Descriptor instead.
func (*SpecimenCollectionPriority) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{323}
}

func (x *SpecimenCollectionPriority) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenCollectionPriority) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for isDryWeight.
// Whether quantity is a dry weight.
// See http://hl7.org/fhir/StructureDefinition/specimen-isDryWeight
type SpecimenIsDryWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *SpecimenIsDryWeight) Reset() {
	*x = SpecimenIsDryWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenIsDryWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenIsDryWeight) ProtoMessage() {}

func (x *SpecimenIsDryWeight) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenIsDryWeight.ProtoReflect.Descriptor instead.
func (*SpecimenIsDryWeight) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{324}
}

func (x *SpecimenIsDryWeight) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenIsDryWeight) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for processingTime.
// Time of processing.
// See http://hl7.org/fhir/StructureDefinition/specimen-processingTime
type SpecimenProcessingTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *SpecimenProcessingTime_Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SpecimenProcessingTime) Reset() {
	*x = SpecimenProcessingTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenProcessingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenProcessingTime) ProtoMessage() {}

func (x *SpecimenProcessingTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenProcessingTime.ProtoReflect.Descriptor instead.
func (*SpecimenProcessingTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{325}
}

func (x *SpecimenProcessingTime) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenProcessingTime) GetValue() *SpecimenProcessingTime_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for sequenceNumber.
// The sequence number of the sample.
// See http://hl7.org/fhir/StructureDefinition/specimen-sequenceNumber
type SpecimenSequenceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *SpecimenSequenceNumber) Reset() {
	*x = SpecimenSequenceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenSequenceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenSequenceNumber) ProtoMessage() {}

func (x *SpecimenSequenceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenSequenceNumber.ProtoReflect.Descriptor instead.
func (*SpecimenSequenceNumber) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{326}
}

func (x *SpecimenSequenceNumber) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenSequenceNumber) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for specialHandling.
// Special handling of the specimen.
// See http://hl7.org/fhir/StructureDefinition/specimen-specialHandling
type SpecimenSpecialHandling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,3,opt,name=value_codeable_concept,json=valueCodeableConcept,proto3" json:"value_codeable_concept,omitempty"`
}

func (x *SpecimenSpecialHandling) Reset() {
	*x = SpecimenSpecialHandling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenSpecialHandling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenSpecialHandling) ProtoMessage() {}

func (x *SpecimenSpecialHandling) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenSpecialHandling.ProtoReflect.Descriptor instead.
func (*SpecimenSpecialHandling) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{327}
}

func (x *SpecimenSpecialHandling) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SpecimenSpecialHandling) GetValueCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ValueCodeableConcept
	}
	return nil
}

// Auto-generated from StructureDefinition for ancestor.
// StructureDefinition this is derived from.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-ancestor
type StructureDefinitionAncestor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *StructureDefinitionAncestor) Reset() {
	*x = StructureDefinitionAncestor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionAncestor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionAncestor) ProtoMessage() {}

func (x *StructureDefinitionAncestor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionAncestor.ProtoReflect.Descriptor instead.
func (*StructureDefinitionAncestor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{328}
}

func (x *StructureDefinitionAncestor) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionAncestor) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for annotation.
// Additional notes about any item in a structure definition.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-annotation
type StructureDefinitionAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueAnnotation *datatypes_go_proto.Annotation `protobuf:"bytes,3,opt,name=value_annotation,json=valueAnnotation,proto3" json:"value_annotation,omitempty"`
}

func (x *StructureDefinitionAnnotation) Reset() {
	*x = StructureDefinitionAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionAnnotation) ProtoMessage() {}

func (x *StructureDefinitionAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionAnnotation.ProtoReflect.Descriptor instead.
func (*StructureDefinitionAnnotation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{329}
}

func (x *StructureDefinitionAnnotation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionAnnotation) GetValueAnnotation() *datatypes_go_proto.Annotation {
	if x != nil {
		return x.ValueAnnotation
	}
	return nil
}

// Auto-generated from StructureDefinition for ballot-status.
// HL7 Ballot status of artifact.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-ballot-status
type BallotStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *BallotStatus) Reset() {
	*x = BallotStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallotStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallotStatus) ProtoMessage() {}

func (x *BallotStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallotStatus.ProtoReflect.Descriptor instead.
func (*BallotStatus) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{330}
}

func (x *BallotStatus) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BallotStatus) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for category.
// Category from official resource list.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-category
type StructureDefinitionCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *StructureDefinitionCategory) Reset() {
	*x = StructureDefinitionCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionCategory) ProtoMessage() {}

func (x *StructureDefinitionCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionCategory.ProtoReflect.Descriptor instead.
func (*StructureDefinitionCategory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{331}
}

func (x *StructureDefinitionCategory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionCategory) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for display-hint.
// Hinting information for the narrative generator.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-display-hint
type ElementDefinitionDisplayHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ElementDefinitionDisplayHint) Reset() {
	*x = ElementDefinitionDisplayHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionDisplayHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionDisplayHint) ProtoMessage() {}

func (x *ElementDefinitionDisplayHint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionDisplayHint.ProtoReflect.Descriptor instead.
func (*ElementDefinitionDisplayHint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{332}
}

func (x *ElementDefinitionDisplayHint) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionDisplayHint) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for explicit-type-name.
// Advisory - name of Type for implementations.
// See
// http://hl7.org/fhir/StructureDefinition/structuredefinition-explicit-type-name
type ElementDefinitionExplicitTypeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ElementDefinitionExplicitTypeName) Reset() {
	*x = ElementDefinitionExplicitTypeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionExplicitTypeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionExplicitTypeName) ProtoMessage() {}

func (x *ElementDefinitionExplicitTypeName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionExplicitTypeName.ProtoReflect.Descriptor instead.
func (*ElementDefinitionExplicitTypeName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{333}
}

func (x *ElementDefinitionExplicitTypeName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionExplicitTypeName) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for fmm-no-warnings.
// FMM Level (if no warnings).
// See
// http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm-no-warnings
type StructureDefinitionFmmNoWarnings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *StructureDefinitionFmmNoWarnings) Reset() {
	*x = StructureDefinitionFmmNoWarnings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionFmmNoWarnings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionFmmNoWarnings) ProtoMessage() {}

func (x *StructureDefinitionFmmNoWarnings) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionFmmNoWarnings.ProtoReflect.Descriptor instead.
func (*StructureDefinitionFmmNoWarnings) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{334}
}

func (x *StructureDefinitionFmmNoWarnings) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionFmmNoWarnings) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for fmm.
// FMM Level.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm
type Fmm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *Fmm) Reset() {
	*x = Fmm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fmm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fmm) ProtoMessage() {}

func (x *Fmm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fmm.ProtoReflect.Descriptor instead.
func (*Fmm) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{335}
}

func (x *Fmm) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Fmm) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for json-type.
// Json type of value property.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type
type ElementDefinitionJsonType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ElementDefinitionJsonType) Reset() {
	*x = ElementDefinitionJsonType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionJsonType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionJsonType) ProtoMessage() {}

func (x *ElementDefinitionJsonType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionJsonType.ProtoReflect.Descriptor instead.
func (*ElementDefinitionJsonType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{336}
}

func (x *ElementDefinitionJsonType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionJsonType) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for rdf-type.
// XML (Schema) type of attribute for RDF.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type
type ElementDefinitionRdfType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ElementDefinitionRdfType) Reset() {
	*x = ElementDefinitionRdfType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionRdfType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionRdfType) ProtoMessage() {}

func (x *ElementDefinitionRdfType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionRdfType.ProtoReflect.Descriptor instead.
func (*ElementDefinitionRdfType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{337}
}

func (x *ElementDefinitionRdfType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionRdfType) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for regex.
// Regex applies to the value.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-regex
type ElementDefinitionRegex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ElementDefinitionRegex) Reset() {
	*x = ElementDefinitionRegex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionRegex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionRegex) ProtoMessage() {}

func (x *ElementDefinitionRegex) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionRegex.ProtoReflect.Descriptor instead.
func (*ElementDefinitionRegex) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{338}
}

func (x *ElementDefinitionRegex) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionRegex) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for summary.
// Additional text for the summary presentation.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-summary
type StructureDefinitionSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueMarkdown *datatypes_go_proto.Markdown `protobuf:"bytes,3,opt,name=value_markdown,json=valueMarkdown,proto3" json:"value_markdown,omitempty"`
}

func (x *StructureDefinitionSummary) Reset() {
	*x = StructureDefinitionSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionSummary) ProtoMessage() {}

func (x *StructureDefinitionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionSummary.ProtoReflect.Descriptor instead.
func (*StructureDefinitionSummary) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{339}
}

func (x *StructureDefinitionSummary) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionSummary) GetValueMarkdown() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.ValueMarkdown
	}
	return nil
}

// Auto-generated from StructureDefinition for table-name.
// Show mappings in the summary table with this name.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-table-name
type StructureDefinitionTableName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *StructureDefinitionTableName) Reset() {
	*x = StructureDefinitionTableName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionTableName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionTableName) ProtoMessage() {}

func (x *StructureDefinitionTableName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionTableName.ProtoReflect.Descriptor instead.
func (*StructureDefinitionTableName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{340}
}

func (x *StructureDefinitionTableName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionTableName) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for template-status.
// Template Status Code (more authoring statuses).
// See
// http://hl7.org/fhir/StructureDefinition/structuredefinition-template-status
type StructureDefinitionTemplateStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.TemplateStatusCodeCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *StructureDefinitionTemplateStatus) Reset() {
	*x = StructureDefinitionTemplateStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionTemplateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionTemplateStatus) ProtoMessage() {}

func (x *StructureDefinitionTemplateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionTemplateStatus.ProtoReflect.Descriptor instead.
func (*StructureDefinitionTemplateStatus) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{341}
}

func (x *StructureDefinitionTemplateStatus) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StructureDefinitionTemplateStatus) GetValueCode() *codes_go_proto.TemplateStatusCodeCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for wg.
// Owning Work Group.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-wg
type Wg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueCode *codes_go_proto.HL7WorkgroupCode `protobuf:"bytes,3,opt,name=value_code,json=valueCode,proto3" json:"value_code,omitempty"`
}

func (x *Wg) Reset() {
	*x = Wg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wg) ProtoMessage() {}

func (x *Wg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wg.ProtoReflect.Descriptor instead.
func (*Wg) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{342}
}

func (x *Wg) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Wg) GetValueCode() *codes_go_proto.HL7WorkgroupCode {
	if x != nil {
		return x.ValueCode
	}
	return nil
}

// Auto-generated from StructureDefinition for xml-type.
// XML (Schema) type of attribute.
// See http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type
type ElementDefinitionXmlType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ElementDefinitionXmlType) Reset() {
	*x = ElementDefinitionXmlType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionXmlType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionXmlType) ProtoMessage() {}

func (x *ElementDefinitionXmlType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionXmlType.ProtoReflect.Descriptor instead.
func (*ElementDefinitionXmlType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{343}
}

func (x *ElementDefinitionXmlType) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinitionXmlType) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for candidateList.
// List of possible owners of Task.
// See http://hl7.org/fhir/StructureDefinition/task-candidateList
type TaskCandidateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id    *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value *TaskCandidateList_Value   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TaskCandidateList) Reset() {
	*x = TaskCandidateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCandidateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCandidateList) ProtoMessage() {}

func (x *TaskCandidateList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCandidateList.ProtoReflect.Descriptor instead.
func (*TaskCandidateList) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{344}
}

func (x *TaskCandidateList) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskCandidateList) GetValue() *TaskCandidateList_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for replaces.
// Task(s) replaced by this Task.
// See http://hl7.org/fhir/StructureDefinition/task-replaces
type TaskReplaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *TaskReplaces) Reset() {
	*x = TaskReplaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReplaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReplaces) ProtoMessage() {}

func (x *TaskReplaces) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReplaces.ProtoReflect.Descriptor instead.
func (*TaskReplaces) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{345}
}

func (x *TaskReplaces) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskReplaces) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for daysOfCycle.
// Days on which the action should be performed.
// See http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle
type DaysOfCycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// What day to perform
	Day []*datatypes_go_proto.Integer `protobuf:"bytes,4,rep,name=day,proto3" json:"day,omitempty"`
}

func (x *DaysOfCycle) Reset() {
	*x = DaysOfCycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaysOfCycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaysOfCycle) ProtoMessage() {}

func (x *DaysOfCycle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaysOfCycle.ProtoReflect.Descriptor instead.
func (*DaysOfCycle) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{346}
}

func (x *DaysOfCycle) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DaysOfCycle) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DaysOfCycle) GetDay() []*datatypes_go_proto.Integer {
	if x != nil {
		return x.Day
	}
	return nil
}

// Auto-generated from StructureDefinition for exact.
// Whether specified times must be followed as closely as possible.
// See http://hl7.org/fhir/StructureDefinition/timing-exact
type TimingExact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *TimingExact) Reset() {
	*x = TimingExact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimingExact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimingExact) ProtoMessage() {}

func (x *TimingExact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimingExact.ProtoReflect.Descriptor instead.
func (*TimingExact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{347}
}

func (x *TimingExact) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TimingExact) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for Translation.
// Langauge Translation (Localization).
// See http://hl7.org/fhir/StructureDefinition/translation
type Translation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code for Language
	Lang    *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	Content *Translation_Content             `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Translation) Reset() {
	*x = Translation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Translation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Translation) ProtoMessage() {}

func (x *Translation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Translation.ProtoReflect.Descriptor instead.
func (*Translation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{348}
}

func (x *Translation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Translation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Translation) GetLang() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Lang
	}
	return nil
}

func (x *Translation) GetContent() *Translation_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

// Auto-generated from StructureDefinition for group.
// The group which this usage context is part of.
// See http://hl7.org/fhir/StructureDefinition/usagecontext-group
type UsageContextGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *UsageContextGroup) Reset() {
	*x = UsageContextGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageContextGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageContextGroup) ProtoMessage() {}

func (x *UsageContextGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageContextGroup.ProtoReflect.Descriptor instead.
func (*UsageContextGroup) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{349}
}

func (x *UsageContextGroup) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsageContextGroup) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for author.
// User or Org actually involved in creating the value set content.
// See http://hl7.org/fhir/StructureDefinition/valueset-author
type ValueSetAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ValueSetAuthor) Reset() {
	*x = ValueSetAuthor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetAuthor) ProtoMessage() {}

func (x *ValueSetAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetAuthor.ProtoReflect.Descriptor instead.
func (*ValueSetAuthor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{350}
}

func (x *ValueSetAuthor) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetAuthor) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for caseSensitive.
// If code is case sensitive.
// See http://hl7.org/fhir/StructureDefinition/valueset-caseSensitive
type ValueSetCaseSensitive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *ValueSetCaseSensitive) Reset() {
	*x = ValueSetCaseSensitive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetCaseSensitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetCaseSensitive) ProtoMessage() {}

func (x *ValueSetCaseSensitive) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetCaseSensitive.ProtoReflect.Descriptor instead.
func (*ValueSetCaseSensitive) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{351}
}

func (x *ValueSetCaseSensitive) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetCaseSensitive) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for comment.
// Human-specified notes and other documentation.
// See http://hl7.org/fhir/StructureDefinition/valueset-comment
type ValueSetComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Remarks or other text
	Content *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// When the comment was created
	Timestamp *datatypes_go_proto.Instant `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ValueSetComment) Reset() {
	*x = ValueSetComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetComment) ProtoMessage() {}

func (x *ValueSetComment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetComment.ProtoReflect.Descriptor instead.
func (*ValueSetComment) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{352}
}

func (x *ValueSetComment) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetComment) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSetComment) GetContent() *datatypes_go_proto.String {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ValueSetComment) GetTimestamp() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Auto-generated from StructureDefinition for comments.
// Comment about the use of this code in this context.
// See http://hl7.org/fhir/StructureDefinition/valueset-comments
type ValueSetComments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ValueSetComments) Reset() {
	*x = ValueSetComments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetComments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetComments) ProtoMessage() {}

func (x *ValueSetComments) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetComments.ProtoReflect.Descriptor instead.
func (*ValueSetComments) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{353}
}

func (x *ValueSetComments) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetComments) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for conceptOrder.
// Appearance order for user selection.
// See http://hl7.org/fhir/StructureDefinition/valueset-conceptOrder
type ValueSetConceptOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueInteger *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=value_integer,json=valueInteger,proto3" json:"value_integer,omitempty"`
}

func (x *ValueSetConceptOrder) Reset() {
	*x = ValueSetConceptOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetConceptOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetConceptOrder) ProtoMessage() {}

func (x *ValueSetConceptOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetConceptOrder.ProtoReflect.Descriptor instead.
func (*ValueSetConceptOrder) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{354}
}

func (x *ValueSetConceptOrder) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetConceptOrder) GetValueInteger() *datatypes_go_proto.Integer {
	if x != nil {
		return x.ValueInteger
	}
	return nil
}

// Auto-generated from StructureDefinition for definition.
// A definition for this code.
// See http://hl7.org/fhir/StructureDefinition/valueset-definition
type ValueSetDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ValueSetDefinition) Reset() {
	*x = ValueSetDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetDefinition) ProtoMessage() {}

func (x *ValueSetDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetDefinition.ProtoReflect.Descriptor instead.
func (*ValueSetDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{355}
}

func (x *ValueSetDefinition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetDefinition) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for effectiveDate.
// When the value set version becomes Active and is available for use.
// See http://hl7.org/fhir/StructureDefinition/valueset-effectiveDate
type ValueSetEffectiveDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDate *datatypes_go_proto.Date `protobuf:"bytes,3,opt,name=value_date,json=valueDate,proto3" json:"value_date,omitempty"`
}

func (x *ValueSetEffectiveDate) Reset() {
	*x = ValueSetEffectiveDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetEffectiveDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetEffectiveDate) ProtoMessage() {}

func (x *ValueSetEffectiveDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetEffectiveDate.ProtoReflect.Descriptor instead.
func (*ValueSetEffectiveDate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{356}
}

func (x *ValueSetEffectiveDate) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetEffectiveDate) GetValueDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ValueDate
	}
	return nil
}

// Auto-generated from StructureDefinition for expansionSource.
// ValueSet definition used to generate this expansion (logical URL).
// See http://hl7.org/fhir/StructureDefinition/valueset-expansionSource
type ValueSetExpansionSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *ValueSetExpansionSource) Reset() {
	*x = ValueSetExpansionSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetExpansionSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetExpansionSource) ProtoMessage() {}

func (x *ValueSetExpansionSource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetExpansionSource.ProtoReflect.Descriptor instead.
func (*ValueSetExpansionSource) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{357}
}

func (x *ValueSetExpansionSource) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetExpansionSource) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for expirationDate.
// When the value set version should no longer be used.
// See http://hl7.org/fhir/StructureDefinition/valueset-expirationDate
type ValueSetExpirationDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDate *datatypes_go_proto.Date `protobuf:"bytes,3,opt,name=value_date,json=valueDate,proto3" json:"value_date,omitempty"`
}

func (x *ValueSetExpirationDate) Reset() {
	*x = ValueSetExpirationDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetExpirationDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetExpirationDate) ProtoMessage() {}

func (x *ValueSetExpirationDate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetExpirationDate.ProtoReflect.Descriptor instead.
func (*ValueSetExpirationDate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{358}
}

func (x *ValueSetExpirationDate) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetExpirationDate) GetValueDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.ValueDate
	}
	return nil
}

// Auto-generated from StructureDefinition for history.
// What has happened over time.
// See http://hl7.org/fhir/StructureDefinition/valueset-history
type ValueSetHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The name of this set of history entries
	Name     *datatypes_go_proto.String  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Revision []*ValueSetHistory_Revision `protobuf:"bytes,5,rep,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ValueSetHistory) Reset() {
	*x = ValueSetHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetHistory) ProtoMessage() {}

func (x *ValueSetHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetHistory.ProtoReflect.Descriptor instead.
func (*ValueSetHistory) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{359}
}

func (x *ValueSetHistory) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetHistory) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSetHistory) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ValueSetHistory) GetRevision() []*ValueSetHistory_Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

// Auto-generated from StructureDefinition for keyWord.
// Descriptors and key terms for search.
// See http://hl7.org/fhir/StructureDefinition/valueset-keyWord
type ValueSetKeyWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ValueSetKeyWord) Reset() {
	*x = ValueSetKeyWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetKeyWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetKeyWord) ProtoMessage() {}

func (x *ValueSetKeyWord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetKeyWord.ProtoReflect.Descriptor instead.
func (*ValueSetKeyWord) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{360}
}

func (x *ValueSetKeyWord) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetKeyWord) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for label.
// E.g. "(a)", "1.", etc.
// See http://hl7.org/fhir/StructureDefinition/valueset-label
type ValueSetLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ValueSetLabel) Reset() {
	*x = ValueSetLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetLabel) ProtoMessage() {}

func (x *ValueSetLabel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetLabel.ProtoReflect.Descriptor instead.
func (*ValueSetLabel) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{361}
}

func (x *ValueSetLabel) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetLabel) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for map.
// A concept map relevant to interpret this value set.
// See http://hl7.org/fhir/StructureDefinition/valueset-map
type ValueSetMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ValueSetMap) Reset() {
	*x = ValueSetMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetMap) ProtoMessage() {}

func (x *ValueSetMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetMap.ProtoReflect.Descriptor instead.
func (*ValueSetMap) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{362}
}

func (x *ValueSetMap) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetMap) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for ordinalValue.
// Comparison value for ordinal codes.
// See http://hl7.org/fhir/StructureDefinition/valueset-ordinalValue
type ValueSetOrdinalValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueDecimal *datatypes_go_proto.Decimal `protobuf:"bytes,3,opt,name=value_decimal,json=valueDecimal,proto3" json:"value_decimal,omitempty"`
}

func (x *ValueSetOrdinalValue) Reset() {
	*x = ValueSetOrdinalValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetOrdinalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetOrdinalValue) ProtoMessage() {}

func (x *ValueSetOrdinalValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetOrdinalValue.ProtoReflect.Descriptor instead.
func (*ValueSetOrdinalValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{363}
}

func (x *ValueSetOrdinalValue) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetOrdinalValue) GetValueDecimal() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.ValueDecimal
	}
	return nil
}

// Auto-generated from StructureDefinition for otherName.
// Alternative names.
// See http://hl7.org/fhir/StructureDefinition/valueset-otherName
type ValueSetOtherName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Human readable, short and specific
	Name *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Which name is preferred for this language
	Preferred *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=preferred,proto3" json:"preferred,omitempty"`
}

func (x *ValueSetOtherName) Reset() {
	*x = ValueSetOtherName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetOtherName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetOtherName) ProtoMessage() {}

func (x *ValueSetOtherName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetOtherName.ProtoReflect.Descriptor instead.
func (*ValueSetOtherName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{364}
}

func (x *ValueSetOtherName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetOtherName) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSetOtherName) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ValueSetOtherName) GetPreferred() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Preferred
	}
	return nil
}

// Auto-generated from StructureDefinition for reference.
// Url of Value set the code was chosen from.
// See http://hl7.org/fhir/StructureDefinition/valueset-reference
type ValueSetReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *ValueSetReference) Reset() {
	*x = ValueSetReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetReference) ProtoMessage() {}

func (x *ValueSetReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetReference.ProtoReflect.Descriptor instead.
func (*ValueSetReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{365}
}

func (x *ValueSetReference) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetReference) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for sourceReference.
// Where did this content come from.
// See http://hl7.org/fhir/StructureDefinition/valueset-sourceReference
type ValueSetSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *ValueSetSourceReference) Reset() {
	*x = ValueSetSourceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetSourceReference) ProtoMessage() {}

func (x *ValueSetSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetSourceReference.ProtoReflect.Descriptor instead.
func (*ValueSetSourceReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{366}
}

func (x *ValueSetSourceReference) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetSourceReference) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for system.
// Code system resource.
// See http://hl7.org/fhir/StructureDefinition/valueset-system
type ValueSetSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueReference *datatypes_go_proto.Reference `protobuf:"bytes,3,opt,name=value_reference,json=valueReference,proto3" json:"value_reference,omitempty"`
}

func (x *ValueSetSystem) Reset() {
	*x = ValueSetSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetSystem) ProtoMessage() {}

func (x *ValueSetSystem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetSystem.ProtoReflect.Descriptor instead.
func (*ValueSetSystem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{367}
}

func (x *ValueSetSystem) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetSystem) GetValueReference() *datatypes_go_proto.Reference {
	if x != nil {
		return x.ValueReference
	}
	return nil
}

// Auto-generated from StructureDefinition for systemName.
// Code system name.
// See http://hl7.org/fhir/StructureDefinition/valueset-systemName
type ValueSetSystemName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ValueSetSystemName) Reset() {
	*x = ValueSetSystemName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetSystemName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetSystemName) ProtoMessage() {}

func (x *ValueSetSystemName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetSystemName.ProtoReflect.Descriptor instead.
func (*ValueSetSystemName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{368}
}

func (x *ValueSetSystemName) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetSystemName) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Auto-generated from StructureDefinition for systemRef.
// Where to find code system.
// See http://hl7.org/fhir/StructureDefinition/valueset-systemRef
type ValueSetSystemRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *ValueSetSystemRef) Reset() {
	*x = ValueSetSystemRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetSystemRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetSystemRef) ProtoMessage() {}

func (x *ValueSetSystemRef) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetSystemRef.ProtoReflect.Descriptor instead.
func (*ValueSetSystemRef) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{369}
}

func (x *ValueSetSystemRef) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetSystemRef) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for toocostly.
// The expansion is incomplete because the full expansion is too large.
// See http://hl7.org/fhir/StructureDefinition/valueset-toocostly
type ValueSetToocostly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *ValueSetToocostly) Reset() {
	*x = ValueSetToocostly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetToocostly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetToocostly) ProtoMessage() {}

func (x *ValueSetToocostly) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetToocostly.ProtoReflect.Descriptor instead.
func (*ValueSetToocostly) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{370}
}

func (x *ValueSetToocostly) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetToocostly) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for trusted-expansion.
// Reference to a trusted expansion.
// See http://hl7.org/fhir/StructureDefinition/valueset-trusted-expansion
type ValueSetTrustedExpansion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueUri *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=value_uri,json=valueUri,proto3" json:"value_uri,omitempty"`
}

func (x *ValueSetTrustedExpansion) Reset() {
	*x = ValueSetTrustedExpansion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetTrustedExpansion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetTrustedExpansion) ProtoMessage() {}

func (x *ValueSetTrustedExpansion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetTrustedExpansion.ProtoReflect.Descriptor instead.
func (*ValueSetTrustedExpansion) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{371}
}

func (x *ValueSetTrustedExpansion) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetTrustedExpansion) GetValueUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueUri
	}
	return nil
}

// Auto-generated from StructureDefinition for unclosed.
// The expansion is incomplete (perhaps because of post-coordination).
// See http://hl7.org/fhir/StructureDefinition/valueset-unclosed
type ValueSetUnclosed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueBoolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=value_boolean,json=valueBoolean,proto3" json:"value_boolean,omitempty"`
}

func (x *ValueSetUnclosed) Reset() {
	*x = ValueSetUnclosed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetUnclosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetUnclosed) ProtoMessage() {}

func (x *ValueSetUnclosed) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetUnclosed.ProtoReflect.Descriptor instead.
func (*ValueSetUnclosed) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{372}
}

func (x *ValueSetUnclosed) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetUnclosed) GetValueBoolean() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.ValueBoolean
	}
	return nil
}

// Auto-generated from StructureDefinition for usage.
// Who has used and how?.
// See http://hl7.org/fhir/StructureDefinition/valueset-usage
type ValueSetUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// A consumer of or client for the value set
	User *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Implementation/project/standard that uses value set
	Use *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
}

func (x *ValueSetUsage) Reset() {
	*x = ValueSetUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetUsage) ProtoMessage() {}

func (x *ValueSetUsage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetUsage.ProtoReflect.Descriptor instead.
func (*ValueSetUsage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{373}
}

func (x *ValueSetUsage) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetUsage) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ValueSetUsage) GetUser() *datatypes_go_proto.String {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ValueSetUsage) GetUse() *datatypes_go_proto.String {
	if x != nil {
		return x.Use
	}
	return nil
}

// Auto-generated from StructureDefinition for warning.
// Extra warning about the correct use of the value set.
// See http://hl7.org/fhir/StructureDefinition/valueset-warning
type ValueSetWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueMarkdown *datatypes_go_proto.Markdown `protobuf:"bytes,3,opt,name=value_markdown,json=valueMarkdown,proto3" json:"value_markdown,omitempty"`
}

func (x *ValueSetWarning) Reset() {
	*x = ValueSetWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetWarning) ProtoMessage() {}

func (x *ValueSetWarning) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetWarning.ProtoReflect.Descriptor instead.
func (*ValueSetWarning) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{374}
}

func (x *ValueSetWarning) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetWarning) GetValueMarkdown() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.ValueMarkdown
	}
	return nil
}

// Auto-generated from StructureDefinition for workflowStatus.
// Indicates the state of development of the value set.
// See http://hl7.org/fhir/StructureDefinition/valueset-workflowStatus
type ValueSetWorkflowStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Value of extension
	ValueString *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=value_string,json=valueString,proto3" json:"value_string,omitempty"`
}

func (x *ValueSetWorkflowStatus) Reset() {
	*x = ValueSetWorkflowStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetWorkflowStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetWorkflowStatus) ProtoMessage() {}

func (x *ValueSetWorkflowStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetWorkflowStatus.ProtoReflect.Descriptor instead.
func (*ValueSetWorkflowStatus) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{375}
}

func (x *ValueSetWorkflowStatus) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetWorkflowStatus) GetValueString() *datatypes_go_proto.String {
	if x != nil {
		return x.ValueString
	}
	return nil
}

// Audit of all changes for a history entry
type CodeSystemHistory_Revision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Date the change was made
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Version marker after the change was made
	IdSlice *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=id_slice,json=idSlice,proto3" json:"id_slice,omitempty"`
	// Who made the change
	Author *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	// Information about the change
	Notes *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *CodeSystemHistory_Revision) Reset() {
	*x = CodeSystemHistory_Revision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemHistory_Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemHistory_Revision) ProtoMessage() {}

func (x *CodeSystemHistory_Revision) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemHistory_Revision.ProtoReflect.Descriptor instead.
func (*CodeSystemHistory_Revision) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{41, 0}
}

func (x *CodeSystemHistory_Revision) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeSystemHistory_Revision) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *CodeSystemHistory_Revision) GetIdSlice() *datatypes_go_proto.String {
	if x != nil {
		return x.IdSlice
	}
	return nil
}

func (x *CodeSystemHistory_Revision) GetAuthor() *datatypes_go_proto.String {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CodeSystemHistory_Revision) GetNotes() *datatypes_go_proto.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

// Value of extension
type CommunicationRequestDefinition_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*CommunicationRequestDefinition_Value_Reference
	Value isCommunicationRequestDefinition_Value_Value `protobuf_oneof:"value"`
}

func (x *CommunicationRequestDefinition_Value) Reset() {
	*x = CommunicationRequestDefinition_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequestDefinition_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequestDefinition_Value) ProtoMessage() {}

func (x *CommunicationRequestDefinition_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequestDefinition_Value.ProtoReflect.Descriptor instead.
func (*CommunicationRequestDefinition_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{58, 0}
}

func (m *CommunicationRequestDefinition_Value) GetValue() isCommunicationRequestDefinition_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *CommunicationRequestDefinition_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*CommunicationRequestDefinition_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isCommunicationRequestDefinition_Value_Value interface {
	isCommunicationRequestDefinition_Value_Value()
}

type CommunicationRequestDefinition_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*CommunicationRequestDefinition_Value_Reference) isCommunicationRequestDefinition_Value_Value() {
}

// Value of extension
type CommunicationRequestOrderedBy_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*CommunicationRequestOrderedBy_Value_Reference
	Value isCommunicationRequestOrderedBy_Value_Value `protobuf_oneof:"value"`
}

func (x *CommunicationRequestOrderedBy_Value) Reset() {
	*x = CommunicationRequestOrderedBy_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRequestOrderedBy_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRequestOrderedBy_Value) ProtoMessage() {}

func (x *CommunicationRequestOrderedBy_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRequestOrderedBy_Value.ProtoReflect.Descriptor instead.
func (*CommunicationRequestOrderedBy_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{59, 0}
}

func (m *CommunicationRequestOrderedBy_Value) GetValue() isCommunicationRequestOrderedBy_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *CommunicationRequestOrderedBy_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*CommunicationRequestOrderedBy_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isCommunicationRequestOrderedBy_Value_Value interface {
	isCommunicationRequestOrderedBy_Value_Value()
}

type CommunicationRequestOrderedBy_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*CommunicationRequestOrderedBy_Value_Reference) isCommunicationRequestOrderedBy_Value_Value() {}

// Value of extension
type ConditionBasedOn_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConditionBasedOn_Value_Reference
	Value isConditionBasedOn_Value_Value `protobuf_oneof:"value"`
}

func (x *ConditionBasedOn_Value) Reset() {
	*x = ConditionBasedOn_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionBasedOn_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionBasedOn_Value) ProtoMessage() {}

func (x *ConditionBasedOn_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionBasedOn_Value.ProtoReflect.Descriptor instead.
func (*ConditionBasedOn_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{65, 0}
}

func (m *ConditionBasedOn_Value) GetValue() isConditionBasedOn_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConditionBasedOn_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ConditionBasedOn_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isConditionBasedOn_Value_Value interface {
	isConditionBasedOn_Value_Value()
}

type ConditionBasedOn_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*ConditionBasedOn_Value_Reference) isConditionBasedOn_Value_Value() {}

// Value of extension
type ConditionDueTo_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConditionDueTo_Value_CodeableConcept
	//	*ConditionDueTo_Value_Reference
	Value isConditionDueTo_Value_Value `protobuf_oneof:"value"`
}

func (x *ConditionDueTo_Value) Reset() {
	*x = ConditionDueTo_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionDueTo_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionDueTo_Value) ProtoMessage() {}

func (x *ConditionDueTo_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionDueTo_Value.ProtoReflect.Descriptor instead.
func (*ConditionDueTo_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{68, 0}
}

func (m *ConditionDueTo_Value) GetValue() isConditionDueTo_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConditionDueTo_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*ConditionDueTo_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ConditionDueTo_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ConditionDueTo_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isConditionDueTo_Value_Value interface {
	isConditionDueTo_Value_Value()
}

type ConditionDueTo_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ConditionDueTo_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ConditionDueTo_Value_CodeableConcept) isConditionDueTo_Value_Value() {}

func (*ConditionDueTo_Value_Reference) isConditionDueTo_Value_Value() {}

// Value of extension
type ConditionOccurredFollowing_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConditionOccurredFollowing_Value_CodeableConcept
	//	*ConditionOccurredFollowing_Value_Reference
	Value isConditionOccurredFollowing_Value_Value `protobuf_oneof:"value"`
}

func (x *ConditionOccurredFollowing_Value) Reset() {
	*x = ConditionOccurredFollowing_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOccurredFollowing_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOccurredFollowing_Value) ProtoMessage() {}

func (x *ConditionOccurredFollowing_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOccurredFollowing_Value.ProtoReflect.Descriptor instead.
func (*ConditionOccurredFollowing_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{69, 0}
}

func (m *ConditionOccurredFollowing_Value) GetValue() isConditionOccurredFollowing_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConditionOccurredFollowing_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*ConditionOccurredFollowing_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ConditionOccurredFollowing_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ConditionOccurredFollowing_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isConditionOccurredFollowing_Value_Value interface {
	isConditionOccurredFollowing_Value_Value()
}

type ConditionOccurredFollowing_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ConditionOccurredFollowing_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ConditionOccurredFollowing_Value_CodeableConcept) isConditionOccurredFollowing_Value_Value() {}

func (*ConditionOccurredFollowing_Value_Reference) isConditionOccurredFollowing_Value_Value() {}

// Value of extension
type ConditionPartOf_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConditionPartOf_Value_Reference
	Value isConditionPartOf_Value_Value `protobuf_oneof:"value"`
}

func (x *ConditionPartOf_Value) Reset() {
	*x = ConditionPartOf_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionPartOf_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionPartOf_Value) ProtoMessage() {}

func (x *ConditionPartOf_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionPartOf_Value.ProtoReflect.Descriptor instead.
func (*ConditionPartOf_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{71, 0}
}

func (m *ConditionPartOf_Value) GetValue() isConditionPartOf_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConditionPartOf_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ConditionPartOf_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isConditionPartOf_Value_Value interface {
	isConditionPartOf_Value_Value()
}

type ConditionPartOf_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*ConditionPartOf_Value_Reference) isConditionPartOf_Value_Value() {}

// Value of extension
type ConsentWitness_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConsentWitness_Value_Reference
	Value isConsentWitness_Value_Value `protobuf_oneof:"value"`
}

func (x *ConsentWitness_Value) Reset() {
	*x = ConsentWitness_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentWitness_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentWitness_Value) ProtoMessage() {}

func (x *ConsentWitness_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentWitness_Value.ProtoReflect.Descriptor instead.
func (*ConsentWitness_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{76, 0}
}

func (m *ConsentWitness_Value) GetValue() isConsentWitness_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConsentWitness_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ConsentWitness_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isConsentWitness_Value_Value interface {
	isConsentWitness_Value_Value()
}

type ConsentWitness_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*ConsentWitness_Value_Reference) isConsentWitness_Value_Value() {}

// Value of extension
type BasicInitiatingPerson_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*BasicInitiatingPerson_Value_Reference
	Value isBasicInitiatingPerson_Value_Value `protobuf_oneof:"value"`
}

func (x *BasicInitiatingPerson_Value) Reset() {
	*x = BasicInitiatingPerson_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicInitiatingPerson_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicInitiatingPerson_Value) ProtoMessage() {}

func (x *BasicInitiatingPerson_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicInitiatingPerson_Value.ProtoReflect.Descriptor instead.
func (*BasicInitiatingPerson_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{85, 0}
}

func (m *BasicInitiatingPerson_Value) GetValue() isBasicInitiatingPerson_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *BasicInitiatingPerson_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*BasicInitiatingPerson_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isBasicInitiatingPerson_Value_Value interface {
	isBasicInitiatingPerson_Value_Value()
}

type BasicInitiatingPerson_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*BasicInitiatingPerson_Value_Reference) isBasicInitiatingPerson_Value_Value() {}

// Value of extension
type BasicReceivingPerson_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*BasicReceivingPerson_Value_Reference
	Value isBasicReceivingPerson_Value_Value `protobuf_oneof:"value"`
}

func (x *BasicReceivingPerson_Value) Reset() {
	*x = BasicReceivingPerson_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicReceivingPerson_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicReceivingPerson_Value) ProtoMessage() {}

func (x *BasicReceivingPerson_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicReceivingPerson_Value.ProtoReflect.Descriptor instead.
func (*BasicReceivingPerson_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{87, 0}
}

func (m *BasicReceivingPerson_Value) GetValue() isBasicReceivingPerson_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *BasicReceivingPerson_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*BasicReceivingPerson_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isBasicReceivingPerson_Value_Value interface {
	isBasicReceivingPerson_Value_Value()
}

type BasicReceivingPerson_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*BasicReceivingPerson_Value_Reference) isBasicReceivingPerson_Value_Value() {}

// Value of extension
type ElementDefinitionAllowedUnits_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ElementDefinitionAllowedUnits_Value_CodeableConcept
	//	*ElementDefinitionAllowedUnits_Value_Reference
	Value isElementDefinitionAllowedUnits_Value_Value `protobuf_oneof:"value"`
}

func (x *ElementDefinitionAllowedUnits_Value) Reset() {
	*x = ElementDefinitionAllowedUnits_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionAllowedUnits_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionAllowedUnits_Value) ProtoMessage() {}

func (x *ElementDefinitionAllowedUnits_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionAllowedUnits_Value.ProtoReflect.Descriptor instead.
func (*ElementDefinitionAllowedUnits_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{114, 0}
}

func (m *ElementDefinitionAllowedUnits_Value) GetValue() isElementDefinitionAllowedUnits_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ElementDefinitionAllowedUnits_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*ElementDefinitionAllowedUnits_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinitionAllowedUnits_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ElementDefinitionAllowedUnits_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isElementDefinitionAllowedUnits_Value_Value interface {
	isElementDefinitionAllowedUnits_Value_Value()
}

type ElementDefinitionAllowedUnits_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinitionAllowedUnits_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ElementDefinitionAllowedUnits_Value_CodeableConcept) isElementDefinitionAllowedUnits_Value_Value() {
}

func (*ElementDefinitionAllowedUnits_Value_Reference) isElementDefinitionAllowedUnits_Value_Value() {}

// Value of extension
type ElementDefinitionBestpractice_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ElementDefinitionBestpractice_Value_Boolean
	//	*ElementDefinitionBestpractice_Value_CodeableConcept
	Value isElementDefinitionBestpractice_Value_Value `protobuf_oneof:"value"`
}

func (x *ElementDefinitionBestpractice_Value) Reset() {
	*x = ElementDefinitionBestpractice_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionBestpractice_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionBestpractice_Value) ProtoMessage() {}

func (x *ElementDefinitionBestpractice_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionBestpractice_Value.ProtoReflect.Descriptor instead.
func (*ElementDefinitionBestpractice_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{115, 0}
}

func (m *ElementDefinitionBestpractice_Value) GetValue() isElementDefinitionBestpractice_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ElementDefinitionBestpractice_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*ElementDefinitionBestpractice_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinitionBestpractice_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*ElementDefinitionBestpractice_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isElementDefinitionBestpractice_Value_Value interface {
	isElementDefinitionBestpractice_Value_Value()
}

type ElementDefinitionBestpractice_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type ElementDefinitionBestpractice_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*ElementDefinitionBestpractice_Value_Boolean) isElementDefinitionBestpractice_Value_Value() {}

func (*ElementDefinitionBestpractice_Value_CodeableConcept) isElementDefinitionBestpractice_Value_Value() {
}

// Value of extension
type ElementDefinitionInheritedExtensibleValueSet_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ElementDefinitionInheritedExtensibleValueSet_Value_Uri
	//	*ElementDefinitionInheritedExtensibleValueSet_Value_Reference
	Value isElementDefinitionInheritedExtensibleValueSet_Value_Value `protobuf_oneof:"value"`
}

func (x *ElementDefinitionInheritedExtensibleValueSet_Value) Reset() {
	*x = ElementDefinitionInheritedExtensibleValueSet_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionInheritedExtensibleValueSet_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionInheritedExtensibleValueSet_Value) ProtoMessage() {}

func (x *ElementDefinitionInheritedExtensibleValueSet_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionInheritedExtensibleValueSet_Value.ProtoReflect.Descriptor instead.
func (*ElementDefinitionInheritedExtensibleValueSet_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{119, 0}
}

func (m *ElementDefinitionInheritedExtensibleValueSet_Value) GetValue() isElementDefinitionInheritedExtensibleValueSet_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ElementDefinitionInheritedExtensibleValueSet_Value) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValue().(*ElementDefinitionInheritedExtensibleValueSet_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinitionInheritedExtensibleValueSet_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ElementDefinitionInheritedExtensibleValueSet_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isElementDefinitionInheritedExtensibleValueSet_Value_Value interface {
	isElementDefinitionInheritedExtensibleValueSet_Value_Value()
}

type ElementDefinitionInheritedExtensibleValueSet_Value_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ElementDefinitionInheritedExtensibleValueSet_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ElementDefinitionInheritedExtensibleValueSet_Value_Uri) isElementDefinitionInheritedExtensibleValueSet_Value_Value() {
}

func (*ElementDefinitionInheritedExtensibleValueSet_Value_Reference) isElementDefinitionInheritedExtensibleValueSet_Value_Value() {
}

// Value of extension
type ElementDefinitionMaxValueSet_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ElementDefinitionMaxValueSet_Value_Uri
	//	*ElementDefinitionMaxValueSet_Value_Reference
	Value isElementDefinitionMaxValueSet_Value_Value `protobuf_oneof:"value"`
}

func (x *ElementDefinitionMaxValueSet_Value) Reset() {
	*x = ElementDefinitionMaxValueSet_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionMaxValueSet_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionMaxValueSet_Value) ProtoMessage() {}

func (x *ElementDefinitionMaxValueSet_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionMaxValueSet_Value.ProtoReflect.Descriptor instead.
func (*ElementDefinitionMaxValueSet_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{121, 0}
}

func (m *ElementDefinitionMaxValueSet_Value) GetValue() isElementDefinitionMaxValueSet_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ElementDefinitionMaxValueSet_Value) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValue().(*ElementDefinitionMaxValueSet_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinitionMaxValueSet_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ElementDefinitionMaxValueSet_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isElementDefinitionMaxValueSet_Value_Value interface {
	isElementDefinitionMaxValueSet_Value_Value()
}

type ElementDefinitionMaxValueSet_Value_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ElementDefinitionMaxValueSet_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ElementDefinitionMaxValueSet_Value_Uri) isElementDefinitionMaxValueSet_Value_Value() {}

func (*ElementDefinitionMaxValueSet_Value_Reference) isElementDefinitionMaxValueSet_Value_Value() {}

// Value of extension
type ElementDefinitionMinValueSet_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ElementDefinitionMinValueSet_Value_Uri
	//	*ElementDefinitionMinValueSet_Value_Reference
	Value isElementDefinitionMinValueSet_Value_Value `protobuf_oneof:"value"`
}

func (x *ElementDefinitionMinValueSet_Value) Reset() {
	*x = ElementDefinitionMinValueSet_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinitionMinValueSet_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinitionMinValueSet_Value) ProtoMessage() {}

func (x *ElementDefinitionMinValueSet_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinitionMinValueSet_Value.ProtoReflect.Descriptor instead.
func (*ElementDefinitionMinValueSet_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{122, 0}
}

func (m *ElementDefinitionMinValueSet_Value) GetValue() isElementDefinitionMinValueSet_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ElementDefinitionMinValueSet_Value) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValue().(*ElementDefinitionMinValueSet_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinitionMinValueSet_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ElementDefinitionMinValueSet_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isElementDefinitionMinValueSet_Value_Value interface {
	isElementDefinitionMinValueSet_Value_Value()
}

type ElementDefinitionMinValueSet_Value_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ElementDefinitionMinValueSet_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ElementDefinitionMinValueSet_Value_Uri) isElementDefinitionMinValueSet_Value_Value() {}

func (*ElementDefinitionMinValueSet_Value_Reference) isElementDefinitionMinValueSet_Value_Value() {}

// Value of extension
type Definition_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Definition_Value_Reference
	Value isDefinition_Value_Value `protobuf_oneof:"value"`
}

func (x *Definition_Value) Reset() {
	*x = Definition_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Definition_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Definition_Value) ProtoMessage() {}

func (x *Definition_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Definition_Value.ProtoReflect.Descriptor instead.
func (*Definition_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{132, 0}
}

func (m *Definition_Value) GetValue() isDefinition_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Definition_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*Definition_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isDefinition_Value_Value interface {
	isDefinition_Value_Value()
}

type Definition_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*Definition_Value_Reference) isDefinition_Value_Value() {}

// Value of extension
type ReasonReference_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ReasonReference_Value_Reference
	Value isReasonReference_Value_Value `protobuf_oneof:"value"`
}

func (x *ReasonReference_Value) Reset() {
	*x = ReasonReference_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReasonReference_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReasonReference_Value) ProtoMessage() {}

func (x *ReasonReference_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReasonReference_Value.ProtoReflect.Descriptor instead.
func (*ReasonReference_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{138, 0}
}

func (m *ReasonReference_Value) GetValue() isReasonReference_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ReasonReference_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ReasonReference_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isReasonReference_Value_Value interface {
	isReasonReference_Value_Value()
}

type ReasonReference_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*ReasonReference_Value_Reference) isReasonReference_Value_Value() {}

// Value of extension
type FamilyMemberHistoryAbatement_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*FamilyMemberHistoryAbatement_Value_Date
	//	*FamilyMemberHistoryAbatement_Value_Age
	//	*FamilyMemberHistoryAbatement_Value_Boolean
	Value isFamilyMemberHistoryAbatement_Value_Value `protobuf_oneof:"value"`
}

func (x *FamilyMemberHistoryAbatement_Value) Reset() {
	*x = FamilyMemberHistoryAbatement_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyMemberHistoryAbatement_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyMemberHistoryAbatement_Value) ProtoMessage() {}

func (x *FamilyMemberHistoryAbatement_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyMemberHistoryAbatement_Value.ProtoReflect.Descriptor instead.
func (*FamilyMemberHistoryAbatement_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{142, 0}
}

func (m *FamilyMemberHistoryAbatement_Value) GetValue() isFamilyMemberHistoryAbatement_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FamilyMemberHistoryAbatement_Value) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetValue().(*FamilyMemberHistoryAbatement_Value_Date); ok {
		return x.Date
	}
	return nil
}

func (x *FamilyMemberHistoryAbatement_Value) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetValue().(*FamilyMemberHistoryAbatement_Value_Age); ok {
		return x.Age
	}
	return nil
}

func (x *FamilyMemberHistoryAbatement_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*FamilyMemberHistoryAbatement_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

type isFamilyMemberHistoryAbatement_Value_Value interface {
	isFamilyMemberHistoryAbatement_Value_Value()
}

type FamilyMemberHistoryAbatement_Value_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type FamilyMemberHistoryAbatement_Value_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type FamilyMemberHistoryAbatement_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,3,opt,name=boolean,proto3,oneof"`
}

func (*FamilyMemberHistoryAbatement_Value_Date) isFamilyMemberHistoryAbatement_Value_Value() {}

func (*FamilyMemberHistoryAbatement_Value_Age) isFamilyMemberHistoryAbatement_Value_Value() {}

func (*FamilyMemberHistoryAbatement_Value_Boolean) isFamilyMemberHistoryAbatement_Value_Value() {}

// Value of extension
type QuestionnaireMaxValue_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*QuestionnaireMaxValue_Value_Date
	//	*QuestionnaireMaxValue_Value_DateTime
	//	*QuestionnaireMaxValue_Value_Time
	//	*QuestionnaireMaxValue_Value_Instant
	//	*QuestionnaireMaxValue_Value_Decimal
	//	*QuestionnaireMaxValue_Value_Integer
	Value isQuestionnaireMaxValue_Value_Value `protobuf_oneof:"value"`
}

func (x *QuestionnaireMaxValue_Value) Reset() {
	*x = QuestionnaireMaxValue_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireMaxValue_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireMaxValue_Value) ProtoMessage() {}

func (x *QuestionnaireMaxValue_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireMaxValue_Value.ProtoReflect.Descriptor instead.
func (*QuestionnaireMaxValue_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{206, 0}
}

func (m *QuestionnaireMaxValue_Value) GetValue() isQuestionnaireMaxValue_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QuestionnaireMaxValue_Value) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetValue().(*QuestionnaireMaxValue_Value_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QuestionnaireMaxValue_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*QuestionnaireMaxValue_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QuestionnaireMaxValue_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*QuestionnaireMaxValue_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *QuestionnaireMaxValue_Value) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetValue().(*QuestionnaireMaxValue_Value_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *QuestionnaireMaxValue_Value) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetValue().(*QuestionnaireMaxValue_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *QuestionnaireMaxValue_Value) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetValue().(*QuestionnaireMaxValue_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

type isQuestionnaireMaxValue_Value_Value interface {
	isQuestionnaireMaxValue_Value_Value()
}

type QuestionnaireMaxValue_Value_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type QuestionnaireMaxValue_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QuestionnaireMaxValue_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,3,opt,name=time,proto3,oneof"`
}

type QuestionnaireMaxValue_Value_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,4,opt,name=instant,proto3,oneof"`
}

type QuestionnaireMaxValue_Value_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type QuestionnaireMaxValue_Value_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

func (*QuestionnaireMaxValue_Value_Date) isQuestionnaireMaxValue_Value_Value() {}

func (*QuestionnaireMaxValue_Value_DateTime) isQuestionnaireMaxValue_Value_Value() {}

func (*QuestionnaireMaxValue_Value_Time) isQuestionnaireMaxValue_Value_Value() {}

func (*QuestionnaireMaxValue_Value_Instant) isQuestionnaireMaxValue_Value_Value() {}

func (*QuestionnaireMaxValue_Value_Decimal) isQuestionnaireMaxValue_Value_Value() {}

func (*QuestionnaireMaxValue_Value_Integer) isQuestionnaireMaxValue_Value_Value() {}

// Value of extension
type QuestionnaireMinValue_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*QuestionnaireMinValue_Value_Date
	//	*QuestionnaireMinValue_Value_DateTime
	//	*QuestionnaireMinValue_Value_Time
	//	*QuestionnaireMinValue_Value_Instant
	//	*QuestionnaireMinValue_Value_Decimal
	//	*QuestionnaireMinValue_Value_Integer
	Value isQuestionnaireMinValue_Value_Value `protobuf_oneof:"value"`
}

func (x *QuestionnaireMinValue_Value) Reset() {
	*x = QuestionnaireMinValue_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireMinValue_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireMinValue_Value) ProtoMessage() {}

func (x *QuestionnaireMinValue_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireMinValue_Value.ProtoReflect.Descriptor instead.
func (*QuestionnaireMinValue_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{213, 0}
}

func (m *QuestionnaireMinValue_Value) GetValue() isQuestionnaireMinValue_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QuestionnaireMinValue_Value) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetValue().(*QuestionnaireMinValue_Value_Date); ok {
		return x.Date
	}
	return nil
}

func (x *QuestionnaireMinValue_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*QuestionnaireMinValue_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *QuestionnaireMinValue_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*QuestionnaireMinValue_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *QuestionnaireMinValue_Value) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetValue().(*QuestionnaireMinValue_Value_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *QuestionnaireMinValue_Value) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetValue().(*QuestionnaireMinValue_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *QuestionnaireMinValue_Value) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetValue().(*QuestionnaireMinValue_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

type isQuestionnaireMinValue_Value_Value interface {
	isQuestionnaireMinValue_Value_Value()
}

type QuestionnaireMinValue_Value_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type QuestionnaireMinValue_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type QuestionnaireMinValue_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,3,opt,name=time,proto3,oneof"`
}

type QuestionnaireMinValue_Value_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,4,opt,name=instant,proto3,oneof"`
}

type QuestionnaireMinValue_Value_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type QuestionnaireMinValue_Value_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

func (*QuestionnaireMinValue_Value_Date) isQuestionnaireMinValue_Value_Value() {}

func (*QuestionnaireMinValue_Value_DateTime) isQuestionnaireMinValue_Value_Value() {}

func (*QuestionnaireMinValue_Value_Time) isQuestionnaireMinValue_Value_Value() {}

func (*QuestionnaireMinValue_Value_Instant) isQuestionnaireMinValue_Value_Value() {}

func (*QuestionnaireMinValue_Value_Decimal) isQuestionnaireMinValue_Value_Value() {}

func (*QuestionnaireMinValue_Value_Integer) isQuestionnaireMinValue_Value_Value() {}

// Value of extension
type AllergyIntoleranceTest_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*AllergyIntoleranceTest_Value_Reference
	Value isAllergyIntoleranceTest_Value_Value `protobuf_oneof:"value"`
}

func (x *AllergyIntoleranceTest_Value) Reset() {
	*x = AllergyIntoleranceTest_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceTest_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceTest_Value) ProtoMessage() {}

func (x *AllergyIntoleranceTest_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceTest_Value.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceTest_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{241, 0}
}

func (m *AllergyIntoleranceTest_Value) GetValue() isAllergyIntoleranceTest_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AllergyIntoleranceTest_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*AllergyIntoleranceTest_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isAllergyIntoleranceTest_Value_Value interface {
	isAllergyIntoleranceTest_Value_Value()
}

type AllergyIntoleranceTest_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*AllergyIntoleranceTest_Value_Reference) isAllergyIntoleranceTest_Value_Value() {}

// Value of extension
type ProcedureCausedBy_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ProcedureCausedBy_Value_Reference
	Value isProcedureCausedBy_Value_Value `protobuf_oneof:"value"`
}

func (x *ProcedureCausedBy_Value) Reset() {
	*x = ProcedureCausedBy_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedureCausedBy_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureCausedBy_Value) ProtoMessage() {}

func (x *ProcedureCausedBy_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureCausedBy_Value.ProtoReflect.Descriptor instead.
func (*ProcedureCausedBy_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{273, 0}
}

func (m *ProcedureCausedBy_Value) GetValue() isProcedureCausedBy_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ProcedureCausedBy_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ProcedureCausedBy_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isProcedureCausedBy_Value_Value interface {
	isProcedureCausedBy_Value_Value()
}

type ProcedureCausedBy_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*ProcedureCausedBy_Value_Reference) isProcedureCausedBy_Value_Value() {}

// Value of extension
type QuestionnaireResponseAuthor_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*QuestionnaireResponseAuthor_Value_Reference
	Value isQuestionnaireResponseAuthor_Value_Value `protobuf_oneof:"value"`
}

func (x *QuestionnaireResponseAuthor_Value) Reset() {
	*x = QuestionnaireResponseAuthor_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseAuthor_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseAuthor_Value) ProtoMessage() {}

func (x *QuestionnaireResponseAuthor_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseAuthor_Value.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseAuthor_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{309, 0}
}

func (m *QuestionnaireResponseAuthor_Value) GetValue() isQuestionnaireResponseAuthor_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QuestionnaireResponseAuthor_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*QuestionnaireResponseAuthor_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isQuestionnaireResponseAuthor_Value_Value interface {
	isQuestionnaireResponseAuthor_Value_Value()
}

type QuestionnaireResponseAuthor_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*QuestionnaireResponseAuthor_Value_Reference) isQuestionnaireResponseAuthor_Value_Value() {}

// Value of extension
type SpecimenProcessingTime_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*SpecimenProcessingTime_Value_Period
	//	*SpecimenProcessingTime_Value_Duration
	Value isSpecimenProcessingTime_Value_Value `protobuf_oneof:"value"`
}

func (x *SpecimenProcessingTime_Value) Reset() {
	*x = SpecimenProcessingTime_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenProcessingTime_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenProcessingTime_Value) ProtoMessage() {}

func (x *SpecimenProcessingTime_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenProcessingTime_Value.ProtoReflect.Descriptor instead.
func (*SpecimenProcessingTime_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{325, 0}
}

func (m *SpecimenProcessingTime_Value) GetValue() isSpecimenProcessingTime_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SpecimenProcessingTime_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*SpecimenProcessingTime_Value_Period); ok {
		return x.Period
	}
	return nil
}

func (x *SpecimenProcessingTime_Value) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetValue().(*SpecimenProcessingTime_Value_Duration); ok {
		return x.Duration
	}
	return nil
}

type isSpecimenProcessingTime_Value_Value interface {
	isSpecimenProcessingTime_Value_Value()
}

type SpecimenProcessingTime_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type SpecimenProcessingTime_Value_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,2,opt,name=duration,proto3,oneof"`
}

func (*SpecimenProcessingTime_Value_Period) isSpecimenProcessingTime_Value_Value() {}

func (*SpecimenProcessingTime_Value_Duration) isSpecimenProcessingTime_Value_Value() {}

// Value of extension
type TaskCandidateList_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*TaskCandidateList_Value_Reference
	Value isTaskCandidateList_Value_Value `protobuf_oneof:"value"`
}

func (x *TaskCandidateList_Value) Reset() {
	*x = TaskCandidateList_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCandidateList_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCandidateList_Value) ProtoMessage() {}

func (x *TaskCandidateList_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCandidateList_Value.ProtoReflect.Descriptor instead.
func (*TaskCandidateList_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{344, 0}
}

func (m *TaskCandidateList_Value) GetValue() isTaskCandidateList_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TaskCandidateList_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*TaskCandidateList_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

type isTaskCandidateList_Value_Value interface {
	isTaskCandidateList_Value_Value()
}

type TaskCandidateList_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

func (*TaskCandidateList_Value_Reference) isTaskCandidateList_Value_Value() {}

// Content in other Language
type Translation_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Translation_Content_StringValue
	//	*Translation_Content_Markdown
	Content isTranslation_Content_Content `protobuf_oneof:"content"`
}

func (x *Translation_Content) Reset() {
	*x = Translation_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Translation_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Translation_Content) ProtoMessage() {}

func (x *Translation_Content) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Translation_Content.ProtoReflect.Descriptor instead.
func (*Translation_Content) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{348, 0}
}

func (m *Translation_Content) GetContent() isTranslation_Content_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Translation_Content) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetContent().(*Translation_Content_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Translation_Content) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetContent().(*Translation_Content_Markdown); ok {
		return x.Markdown
	}
	return nil
}

type isTranslation_Content_Content interface {
	isTranslation_Content_Content()
}

type Translation_Content_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type Translation_Content_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,2,opt,name=markdown,proto3,oneof"`
}

func (*Translation_Content_StringValue) isTranslation_Content_Content() {}

func (*Translation_Content_Markdown) isTranslation_Content_Content() {}

// Audit of all changes for a history entry
type ValueSetHistory_Revision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Date the change was made
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// Version marker after the change was made
	IdSlice *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=id_slice,json=idSlice,proto3" json:"id_slice,omitempty"`
	// Who made the change
	Author *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	// Information about the change
	Notes *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *ValueSetHistory_Revision) Reset() {
	*x = ValueSetHistory_Revision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSetHistory_Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSetHistory_Revision) ProtoMessage() {}

func (x *ValueSetHistory_Revision) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSetHistory_Revision.ProtoReflect.Descriptor instead.
func (*ValueSetHistory_Revision) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP(), []int{359, 0}
}

func (x *ValueSetHistory_Revision) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ValueSetHistory_Revision) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ValueSetHistory_Revision) GetIdSlice() *datatypes_go_proto.String {
	if x != nil {
		return x.IdSlice
	}
	return nil
}

func (x *ValueSetHistory_Revision) GetAuthor() *datatypes_go_proto.String {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ValueSetHistory_Revision) GetNotes() *datatypes_go_proto.String {
	if x != nil {
		return x.Notes
	}
	return nil
}

var File_proto_google_fhir_proto_stu3_extensions_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_stu3_extensions_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x02, 0x0a, 0x1f, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x89, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39,
	0x2d, 0x64, 0x65, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x1c, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x86, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39,
	0x2d, 0x64, 0x65, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x22, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x3a, 0x8d, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31,
	0x31, 0x31, 0x37, 0x39, 0x2d, 0x64, 0x65, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x72, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x97, 0x02, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39, 0x2d, 0x64, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x1c,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x63, 0x0a, 0x0f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31,
	0x31, 0x31, 0x37, 0x39, 0x2d, 0x64, 0x65, 0x2d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x1a, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52,
	0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x84, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39, 0x2d,
	0x64, 0x65, 0x2d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x1f, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x73, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x8b, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39,
	0x2d, 0x64, 0x65, 0x2d, 0x69, 0x73, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x16,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x4f, 0x72, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39, 0x2d, 0x64, 0x65, 0x2d, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2d, 0x6f, 0x72, 0x67, 0x22, 0xad, 0x02, 0x0a, 0x17, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x4f, 0x72, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39, 0x2d, 0x64, 0x65, 0x2d, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x2d, 0x6f, 0x72, 0x67, 0x22, 0x8f, 0x02, 0x0a, 0x1c, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x7c, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39, 0x2d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x24,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39, 0x2d, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xb6,
	0x02, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x8b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x48, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37, 0x39, 0x2d, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x6d, 0x61, 0x70, 0x22, 0xb0, 0x02, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x89,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x31, 0x31, 0x31, 0x37,
	0x39, 0x2d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x1b, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49,
	0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x22, 0x9e, 0x02, 0x0a,
	0x1a, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x02,
	0x0a, 0x1f, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x8b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x74, 0x65, 0x64, 0x22, 0x99,
	0x02, 0x0a, 0x1f, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x67, 0x65, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x65, 0x3a, 0x8b, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x65, 0x22, 0xd5, 0x03, 0x0a, 0x27, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x3a, 0x93, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x50, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x69,
	0x73, 0x6b, 0x22, 0x95, 0x02, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x14, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x8c, 0x02, 0x0a,
	0x13, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x12,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4d, 0x50, 0x50, 0x53, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x4d, 0x50, 0x50, 0x53, 0x22,
	0x9d, 0x02, 0x0a, 0x1b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0xc0, 0x02, 0x0a, 0x28, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x94, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x51, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x22, 0xa4, 0x02, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x4f, 0x50, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x53, 0x4f, 0x50, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x75, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x9d, 0x02, 0x0a,
	0x10, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x7d, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x2d, 0x73,
	0x69, 0x74, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb0, 0x02, 0x0a,
	0x1e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x51, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa1, 0x02, 0x0a, 0x1d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x89, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x65, 0x64, 0x22, 0xbe, 0x03, 0x0a, 0x2d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a, 0x9b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x58, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x22, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x55, 0x72, 0x69, 0x3a, 0x8f, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x93, 0x02, 0x0a, 0x1c, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x72, 0x69, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x8f, 0x02,
	0x0a, 0x15, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x6e,
	0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0x83, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x8c, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7e,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x93,
	0x02, 0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3a,
	0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x8f, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a,
	0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a,
	0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xcf, 0x05, 0x0a, 0x11, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0xc5, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x08,
	0x69, 0x64, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0e,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x02, 0x69, 0x64, 0x52, 0x07,
	0x69, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x85, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64,
	0x22, 0x81, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x98, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x4d, 0x61, 0x70, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x79, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6d, 0x61, 0x70, 0x22,
	0x93, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x13, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69, 0x3a, 0x7f, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x8c, 0x02,
	0x0a, 0x14, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x62, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x62, 0x79, 0x22, 0x8d, 0x02, 0x0a,
	0x19, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x55, 0x72, 0x69, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x81, 0x02, 0x0a,
	0x12, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x75,
	0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x75, 0x62, 0x73, 0x75, 0x6d, 0x65, 0x73,
	0x22, 0x90, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x2d, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x73, 0x65, 0x3a, 0x7b,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x11,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x94, 0x02, 0x0a, 0x18, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xf5, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x74, 0x64, 0x65,
	0x73, 0x63, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x73,
	0x63, 0x74, 0x64, 0x65, 0x73, 0x63, 0x69, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x7e,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0xbe,
	0x02, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x3a, 0x8b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x22,
	0xc5, 0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x5a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x89,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6f, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2c,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x47,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x03, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3d, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x89, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x22, 0xc4,
	0x02, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x8e, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a,
	0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x8f, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x4c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xc1, 0x02,
	0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x8e, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xaa, 0x02, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x93, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x50, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x63, 0x6c, 0x69, 0x6e, 0x64, 0x6f, 0x63, 0x2d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x92,
	0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x69, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0xa7, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4f,
	0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x7c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x39, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x7c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x22, 0xa8, 0x02,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xa8, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x60, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x14, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x9b, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x67, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x75, 0x65, 0x54, 0x6f, 0x22, 0xcb, 0x04, 0x0a,
	0x1a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x9b, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x67, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x22, 0x9f, 0x02, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x7c,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x9a, 0x03, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8c, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x72, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2f, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x7b, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x22, 0x9f, 0x02, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5b, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x7d, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x17,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x74, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a,
	0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69,
	0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xad, 0x03, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa2, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x7a,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x2d, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x0f, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71,
	0x69, 0x66, 0x2d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x78, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x63, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x01, 0x0a, 0x0d, 0x43, 0x71, 0x69, 0x66, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x79, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x43, 0x71, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x63, 0x71, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x02, 0x0a, 0x12, 0x46,
	0x68, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x66, 0x68, 0x69, 0x72, 0x50, 0x61, 0x74, 0x68, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x02, 0x0a, 0x13, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71,
	0x69, 0x66, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a,
	0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69,
	0x66, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x1b, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x8e, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x03, 0x0a, 0x15, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x81, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22,
	0xbc, 0x02, 0x0a, 0x1a, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e,
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x8d,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66,
	0x2d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc1,
	0x03, 0x0a, 0x14, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x3e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x22, 0xb3, 0x02, 0x0a, 0x16, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a,
	0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x89, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x67,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x85,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66,
	0x2d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x17, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x71, 0x69, 0x66, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xbb,
	0x02, 0x0a, 0x1a, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a,
	0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x8d, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x67,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xad, 0x02, 0x0a,
	0x13, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xff, 0x01, 0x0a,
	0x0c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x3a, 0x7c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69,
	0x66, 0x2d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91,
	0x02, 0x0a, 0x0b, 0x43, 0x71, 0x69, 0x66, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59,
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x77, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x22, 0xe0, 0x03, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x4d, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x57, 0x0a, 0x15, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x14, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa4, 0x02, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69,
	0x66, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x02, 0x0a,
	0x1b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x81, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x80, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x72, 0x69, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x71, 0x69, 0x66, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x22, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x71, 0x69, 0x66, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x79, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x22, 0x81, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x75, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x64, 0x69, 0x6e, 0x22, 0x92, 0x02, 0x0a,
	0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x80,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xa4, 0x03, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x8b, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x48,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x02, 0x0a, 0x1b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0xb9, 0x02, 0x0a, 0x1a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x4f, 0x66,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x62, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x61, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x4f, 0x66, 0x22, 0xb3, 0x02,
	0x0a, 0x17, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x83, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x18, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x8c, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x49, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x21, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x95, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x52, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xd6, 0x02, 0x0a, 0x23, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x65, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x19, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x13, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x97, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x54, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x67,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xbf, 0x02, 0x0a, 0x21, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x8d, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x22, 0xb5, 0x02, 0x0a,
	0x18, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x84, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x19, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x4f, 0x66, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x62, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x16,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x66, 0x22, 0xfa,
	0x03, 0x0a, 0x1d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc1, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x89, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xe4, 0x03, 0x0a, 0x1d,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x65, 0x73, 0x74, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x73, 0x74, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xab, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x89, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x65, 0x73, 0x74, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x1c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xab, 0x02, 0x0a, 0x1c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0xa6, 0x02, 0x0a, 0x1b, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x87,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x82, 0x04, 0x0a, 0x2c, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x51,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x98, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x55, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xa7, 0x02,
	0x0a, 0x20, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x8c, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x49, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xd2, 0x03, 0x0a, 0x1c, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x51, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xd2, 0x03, 0x0a,
	0x1c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2f, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x22, 0xfe, 0x01, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x19, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x02, 0x0a, 0x19,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x85, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0xa1, 0x02, 0x0a, 0x1d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x89, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x1c, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x4f, 0x66, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a,
	0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x22, 0xa6, 0x02, 0x0a, 0x19, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x51, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x22, 0xb0, 0x02,
	0x0a, 0x18, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x22, 0xf8, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x3a, 0x76, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x8d, 0x03, 0x0a, 0x0a,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x89, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6f, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x2c, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x7b,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x17,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x78, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x6e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x0a, 0x4f, 0x6e, 0x42, 0x65,
	0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x4f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c,
	0x66, 0x4f, 0x66, 0x22, 0x8d, 0x02, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a,
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x77, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x22, 0xa9, 0x02, 0x0a, 0x18, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a,
	0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22,
	0x98, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x7b, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x03, 0x0a, 0x0f, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x7d, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc7, 0x02,
	0x0a, 0x1e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5d, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x95, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x52, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x03, 0x0a, 0x19, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x90, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x2d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xaf, 0x03, 0x0a, 0x1a, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x91, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2d, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xf0, 0x03, 0x0a, 0x1c, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xba, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2d, 0x61, 0x62, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbd, 0x02, 0x0a,
	0x20, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x59, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0d, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x8d, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xb6, 0x02, 0x0a,
	0x1b, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x87, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xae, 0x02, 0x0a, 0x17, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x76, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x6c,
	0x61, 0x67, 0x2d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x97, 0x02, 0x0a, 0x0c, 0x46, 0x6c,
	0x61, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x78, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x89, 0x03, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x45, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x3a, 0x76, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xd7, 0x03, 0x0a, 0x0e, 0x47, 0x6f, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x12, 0x48,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x7a, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x16, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x6f,
	0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0a, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x7e, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x70, 0x65,
	0x72, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x6f, 0x47, 0x6f, 0x61, 0x6c, 0x22, 0xa3, 0x02, 0x0a,
	0x12, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67,
	0x6f, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x10, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x3a, 0x7c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x61,
	0x6c, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0xc3,
	0x02, 0x0a, 0x1e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x91, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c,
	0x61, 0x2d, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2d, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x18, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x67, 0x6c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0xd3, 0x03, 0x0a, 0x17, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x3b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x89, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65,
	0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2d, 0x68, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x16, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x8e, 0x02,
	0x0a, 0x18, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7f, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xa1,
	0x02, 0x0a, 0x16, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x83, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x91, 0x02, 0x0a, 0x16, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x2d,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x91, 0x02, 0x0a, 0x16, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x6d, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x84, 0x02, 0x0a, 0x10, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x77, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x6f, 0x77, 0x6e, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x88, 0x02, 0x0a, 0x12, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4f,
	0x77, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6e, 0x61, 0x6d,
	0x65, 0x2d, 0x6f, 0x77, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x8d, 0x02, 0x0a,
	0x14, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x2d,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x02, 0x0a,
	0x16, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6e, 0x61, 0x6d,
	0x65, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x22, 0x90, 0x02, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x67, 0x75, 0x69, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x8b, 0x02, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x55, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4f, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73,
	0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x2d, 0x75, 0x73, 0x65, 0x22, 0x9e, 0x02,
	0x0a, 0x1c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xa4,
	0x02, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x8d, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50,
	0x2d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x44, 0x58, 0x50, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7f,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31,
	0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x63, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x22,
	0x92, 0x02, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x43,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x84, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31,
	0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x44, 0x58, 0x50, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73,
	0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x64, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0xa2, 0x02, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x44, 0x58, 0x50, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x8c, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39,
	0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x23, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x91, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50,
	0x2d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x22, 0xb6, 0x02, 0x0a, 0x28, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x96, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x53, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d,
	0x41, 0x44, 0x58, 0x50, 0x2d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0xac, 0x02, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44,
	0x58, 0x50, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x91, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31,
	0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x94, 0x02, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58,
	0x50, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73,
	0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x21, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x8f, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x8e, 0x02, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x44, 0x58, 0x50, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a,
	0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f,
	0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x02, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x44, 0x58, 0x50, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa0, 0x02, 0x0a, 0x1d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x8b,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32,
	0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x22, 0x8a, 0x02, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x50, 0x6f, 0x73, 0x74,
	0x42, 0x6f, 0x78, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58,
	0x50, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x6f, 0x78, 0x22, 0x8c, 0x02, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x50, 0x72, 0x65, 0x63, 0x69, 0x6e, 0x63,
	0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x6e, 0x63, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x1c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x8a, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30,
	0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58,
	0x50, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x98, 0x02, 0x0a,
	0x19, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x53, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x87, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31,
	0x30, 0x39, 0x30, 0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41,
	0x44, 0x58, 0x50, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44,
	0x58, 0x50, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30,
	0x2d, 0x41, 0x44, 0x58, 0x50, 0x2d, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x8c, 0x02, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x44, 0x58, 0x50, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x41, 0x44,
	0x58, 0x50, 0x2d, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x0d,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x4f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x3a, 0x7c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x43, 0x4f, 0x2d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x9d, 0x02, 0x0a, 0x14, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x45,
	0x4e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x80,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32,
	0x31, 0x30, 0x39, 0x30, 0x2d, 0x45, 0x4e, 0x2d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0xa5, 0x02, 0x0a, 0x19, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x45,
	0x4e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x50, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x45, 0x4e, 0x2d, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x0d, 0x41, 0x6e,
	0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x6e, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x72, 0x22, 0x83, 0x02, 0x0a, 0x0c, 0x41, 0x6e, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0x82, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x43, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x7d,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31,
	0x30, 0x39, 0x30, 0x2d, 0x53, 0x43, 0x2d, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x83, 0x02,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x45,
	0x4c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x72, 0x69, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69,
	0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x54, 0x45, 0x4c, 0x2d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73,
	0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x79, 0x22, 0xa7, 0x02, 0x0a, 0x17, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55,
	0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56,
	0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f, 0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x75, 0x6e, 0x63,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x02, 0x0a,
	0x0f, 0x41, 0x6e, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a,
	0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x73, 0x6f,
	0x32, 0x31, 0x30, 0x39, 0x30, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xfd, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x79, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x16, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a,
	0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x7c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x1d, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x81, 0x02, 0x0a, 0x10, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x3a, 0x76, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x85, 0x02, 0x0a,
	0x10, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x3a, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x8a, 0x05, 0x0a, 0x15, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf8, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d,
	0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a,
	0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x8c, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x49,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x1d, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x89, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x50, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x22, 0xc0, 0x02, 0x0a, 0x29, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x89,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x08, 0x4d,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x73, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xf7, 0x01, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x74, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x8a, 0x05, 0x0a, 0x15,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf8, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x17, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x6f, 0x64,
	0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x02, 0x0a, 0x10, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x7c, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x85, 0x03, 0x0a, 0x16,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x82,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x22, 0xaf, 0x02, 0x0a, 0x17, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x84,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x89,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x1b, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x69,
	0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x3a, 0x8f, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0xb6, 0x02, 0x0a, 0x17, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x8b, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x1e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x69, 0x6e, 0x6f,
	0x41, 0x63, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x92, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x4f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41,
	0x6d, 0x69, 0x6e, 0x6f, 0x41, 0x63, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x1e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6d, 0x69, 0x6e, 0x6f, 0x41, 0x63, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x92, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6d, 0x69, 0x6e, 0x6f, 0x41, 0x63, 0x69, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x1a, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x8e, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x70, 0x79, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x18, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x4e, 0x41, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x8c, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x49, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x4e, 0x41, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x21, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x4e, 0x41, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a,
	0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x95, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x52, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x4e,
	0x41, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x21, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x4e, 0x41, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x95, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x52, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x4e, 0x41, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xb6, 0x02, 0x0a, 0x17, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x4e, 0x41, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a,
	0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x8b, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x4e,
	0x41, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x0f, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x83, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x47,
	0x65, 0x6e, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x1d, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x91, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x19, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x8d, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x74, 0x22, 0xab, 0x02, 0x0a, 0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x92, 0x02, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3a,
	0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xc2, 0x02, 0x0a, 0x20, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79,
	0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x48, 0x52, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x02, 0x0a, 0x1a, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x48, 0x52, 0x2d, 0x63, 0x61, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x7f,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x45,
	0x48, 0x52, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xa3, 0x02, 0x0a, 0x25, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x86, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x48,
	0x52, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x02, 0x0a, 0x22, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67,
	0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x48, 0x52, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x02, 0x0a, 0x1a,
	0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x48, 0x52, 0x2d, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x1c, 0x41, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x48, 0x52, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x03, 0x0a, 0x16, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x6a, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x27, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x77, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x45, 0x48, 0x52, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x19, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69,
	0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xbc, 0x02, 0x0a, 0x1d, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x89, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x2d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x2d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x11, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7d,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x87, 0x02,
	0x0a, 0x12, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x1c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x88,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x13, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x3a, 0x7c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x91,
	0x02, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x64, 0x61, 0x76, 0x65,
	0x72, 0x69, 0x63, 0x44, 0x6f, 0x6e, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x81,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x64, 0x61, 0x76, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x6e,
	0x6f, 0x72, 0x22, 0xfa, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x69,
	0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a,
	0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x2d, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22,
	0xbd, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6e, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03,
	0x4e, 0x43, 0x54, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x3a, 0x80, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x2d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x22,
	0x89, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x63,
	0x6f, 0x6e, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x02, 0x0a, 0x11,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0xa1, 0x02, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x94, 0x02, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x4d, 0x61,
	0x69, 0x64, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x6c,
	0x69, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x02, 0x0a, 0x08, 0x44, 0x6f, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70,
	0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x6f, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x75, 0x73, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x83, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x68, 0x61, 0x72, 0x6d,
	0x61, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x2d, 0x63, 0x6f,
	0x72, 0x65, 0x2d, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70,
	0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d, 0x61, 0x78,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x8e,
	0x02, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x44, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x3a, 0x89, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6d,
	0x69, 0x6e, 0x44, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0xfe, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x3a, 0x81, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61,
	0x63, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x61, 0x6c,
	0x22, 0x88, 0x02, 0x0a, 0x0d, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa1, 0x02, 0x0a, 0x15,
	0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x8e,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x4b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x68, 0x61, 0x72,
	0x6d, 0x61, 0x63, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0x94, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x89, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79,
	0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xa6, 0x02, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x2d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x22,
	0xb4, 0x02, 0x0a, 0x1a, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x86, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x1a, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x49, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x86, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x85,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x22, 0xec, 0x04, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xbd, 0x02, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0xf9, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a,
	0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x18,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x22, 0x9d, 0x02, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x85, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x2d, 0x69, 0x6e, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x3a,
	0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xab,
	0x02, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x2d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x22, 0xbd, 0x02, 0x0a,
	0x20, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x8c, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x22, 0xb9, 0x02, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a,
	0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x88, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x79, 0x22, 0xa2, 0x04, 0x0a, 0x14, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xb8, 0x02,
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x88, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x02, 0x0a, 0x24, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x3a, 0x90, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xba, 0x02, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x89, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0xb9, 0x02, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x3a, 0x8a, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x22, 0xbe, 0x02,
	0x0a, 0x1b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x65, 0x0a,
	0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x19, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xa2,
	0x02, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x47, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x2d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x62, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x8a, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x47, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x02, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x44, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5c, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x7e, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x22, 0xb8, 0x02,
	0x0a, 0x1c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x88, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x8e, 0x02, 0x0a, 0x15, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x46, 0x68, 0x69, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2d, 0x66, 0x68, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x13, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x2d, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xb0, 0x02, 0x0a, 0x18, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d,
	0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x9b, 0x02, 0x0a, 0x20,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69, 0x3a, 0x8c, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x49,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x16, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x6d, 0x61, 0x78, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x73, 0x22,
	0x93, 0x02, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x6d, 0x69, 0x6e, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x88, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x22, 0x99, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x02, 0x0a,
	0x1c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xbf, 0x02, 0x0a, 0x1f,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x5e, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a,
	0x8b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x22, 0xb8, 0x02,
	0x0a, 0x24, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x90, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4d, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x8b, 0x02, 0x0a, 0x18, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69, 0x3a,
	0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xbf, 0x02, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x8b, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x48,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x85, 0x02, 0x0a, 0x11, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x75, 0x6e, 0x69, 0x74,
	0x22, 0xa4, 0x02, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x3e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0xa2, 0x02, 0x0a, 0x19, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xb6,
	0x02, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x87, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xbb, 0x02, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x89, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x22, 0xb8, 0x02, 0x0a, 0x1c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64,
	0x22, 0xec, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x70, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x22,
	0xfd, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x3a, 0x79, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x88, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x83, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x2d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x58, 0x68, 0x74,
	0x6d, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x78, 0x68, 0x74, 0x6d,
	0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a,
	0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0x82, 0x02, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a,
	0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x1a, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x3a, 0x86, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x13,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x49, 0x73, 0x44, 0x72, 0x79, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x69,
	0x73, 0x44, 0x72, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb6, 0x03, 0x0a, 0x16, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x92, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x82,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xae, 0x02, 0x0a, 0x17, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x14,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x91, 0x02, 0x0a, 0x1b, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x55, 0x72, 0x69, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x22, 0xaa,
	0x02, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x89, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x0c,
	0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a,
	0x8c, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a,
	0x02, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x9f, 0x02, 0x0a, 0x1c,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a,
	0x8b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2d, 0x68, 0x69, 0x6e, 0x74, 0x22, 0xaa, 0x02,
	0x0a, 0x21, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x91, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x20, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6d, 0x6d, 0x4e, 0x6f, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x3a, 0x8e, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4b, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6d, 0x6d, 0x2d, 0x6e, 0x6f, 0x2d, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x03, 0x46, 0x6d, 0x6d, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x3a, 0x82, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x66, 0x6d, 0x6d, 0x22, 0x99, 0x02, 0x0a, 0x19, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x88, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x45,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6a, 0x73, 0x6f, 0x6e,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x18, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x64, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x64, 0x66, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x92, 0x02, 0x0a, 0x16, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x84, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x22, 0x9e, 0x02, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x3a, 0x86, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x9d, 0x02, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x89, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x46, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x8e, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x4b,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x02,
	0x57, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x4c, 0x37, 0x57, 0x6f, 0x72, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x81, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x77, 0x67, 0x22,
	0x97, 0x02, 0x0a, 0x18, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a,
	0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x78, 0x6d, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x11, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xae,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x50, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x90,
	0x02, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x56, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x78, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x22, 0xb8, 0x02, 0x0a, 0x0b, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x64, 0x61, 0x79, 0x3a, 0x7d, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x2d, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x22, 0xfc, 0x01, 0x0a,
	0x0b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x3a, 0x77, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x78, 0x61, 0x63, 0x74, 0x22, 0xa6, 0x04, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x4d,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x9c, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3a, 0x76, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7d, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xff, 0x01, 0x0a,
	0x0e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x91,
	0x02, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x43, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x81,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x02,
	0x0a, 0x10, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a,
	0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x88, 0x02, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x17, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69,
	0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x82,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x65, 0x74, 0x2d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xc9, 0x05, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xc5, 0x02, 0x0a, 0x08, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xaa,
	0xfc, 0x8f, 0x93, 0x06, 0x02, 0x69, 0x64, 0x52, 0x07, 0x69, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x81, 0x02, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x57,
	0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x6b, 0x65, 0x79, 0x57,
	0x6f, 0x72, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x79, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0x94, 0x02, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4d, 0x61,
	0x70, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x3a, 0x77, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x22, 0x8f, 0x02, 0x0a, 0x14, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x3a, 0x80, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfe, 0x02, 0x0a,
	0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x3a, 0x7d,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x65, 0x74, 0x2d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfc, 0x01,
	0x0a, 0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69, 0x3a, 0x7d, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x65, 0x74, 0x2d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x89, 0x02, 0x0a,
	0x17, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x72, 0x69, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x0e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a,
	0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xfc, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69, 0x3a,
	0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x66, 0x22, 0x88,
	0x02, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x6f, 0x63, 0x6f,
	0x73, 0x74, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d,
	0x74, 0x6f, 0x6f, 0x63, 0x6f, 0x73, 0x74, 0x6c, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x18, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x72, 0x69,
	0x3a, 0x85, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x2d, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x10, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x3a, 0x7c, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x75, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x22, 0xf1, 0x02, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x75, 0x73, 0x65, 0x3a, 0x79, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0x90, 0x02, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x82, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x65, 0x74, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x70, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6,
	0xb0, 0xb5, 0x07, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_stu3_extensions_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_stu3_extensions_proto_rawDescData = file_proto_google_fhir_proto_stu3_extensions_proto_rawDesc
)

func file_proto_google_fhir_proto_stu3_extensions_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_stu3_extensions_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_stu3_extensions_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_stu3_extensions_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_stu3_extensions_proto_rawDescData
}

var file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes = make([]protoimpl.MessageInfo, 403)
var file_proto_google_fhir_proto_stu3_extensions_proto_goTypes = []interface{}{
	(*DataElementAdministrativeStatus)(nil),               // 0: google.fhir.stu3.proto.DataElementAdministrativeStatus
	(*DataElementChangeDescription)(nil),                  // 1: google.fhir.stu3.proto.DataElementChangeDescription
	(*DataElementClassificationOrContext)(nil),            // 2: google.fhir.stu3.proto.DataElementClassificationOrContext
	(*DataElementContactAddress)(nil),                     // 3: google.fhir.stu3.proto.DataElementContactAddress
	(*DataElementDocumentReference)(nil),                  // 4: google.fhir.stu3.proto.DataElementDocumentReference
	(*DataElementEffectivePeriod)(nil),                    // 5: google.fhir.stu3.proto.DataElementEffectivePeriod
	(*DataElementIsDataElementConcept)(nil),               // 6: google.fhir.stu3.proto.DataElementIsDataElementConcept
	(*DataElementRegistryOrg)(nil),                        // 7: google.fhir.stu3.proto.DataElementRegistryOrg
	(*DataElementSubmitterOrg)(nil),                       // 8: google.fhir.stu3.proto.DataElementSubmitterOrg
	(*ElementDefinitionObjectClass)(nil),                  // 9: google.fhir.stu3.proto.ElementDefinitionObjectClass
	(*ElementDefinitionObjectClassProperty)(nil),          // 10: google.fhir.stu3.proto.ElementDefinitionObjectClassProperty
	(*PermittedValueConceptmap)(nil),                      // 11: google.fhir.stu3.proto.PermittedValueConceptmap
	(*PermittedValueValueset)(nil),                        // 12: google.fhir.stu3.proto.PermittedValueValueset
	(*AllergyIntoleranceCertainty)(nil),                   // 13: google.fhir.stu3.proto.AllergyIntoleranceCertainty
	(*AllergyIntoleranceDuration)(nil),                    // 14: google.fhir.stu3.proto.AllergyIntoleranceDuration
	(*AllergyIntoleranceReasonRefuted)(nil),               // 15: google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted
	(*AllergyIntoleranceResolutionAge)(nil),               // 16: google.fhir.stu3.proto.AllergyIntoleranceResolutionAge
	(*AllergyIntoleranceSubstanceExposureRisk)(nil),       // 17: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk
	(*AuditEventAccession)(nil),                           // 18: google.fhir.stu3.proto.AuditEventAccession
	(*AuditEventAnonymized)(nil),                          // 19: google.fhir.stu3.proto.AuditEventAnonymized
	(*AuditEventEncrypted)(nil),                           // 20: google.fhir.stu3.proto.AuditEventEncrypted
	(*AuditEventInstance)(nil),                            // 21: google.fhir.stu3.proto.AuditEventInstance
	(*AuditEventMPPS)(nil),                                // 22: google.fhir.stu3.proto.AuditEventMPPS
	(*AuditEventNumberOfInstances)(nil),                   // 23: google.fhir.stu3.proto.AuditEventNumberOfInstances
	(*AuditEventParticipantObjectContainsStudy)(nil),      // 24: google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy
	(*AuditEventSOPClass)(nil),                            // 25: google.fhir.stu3.proto.AuditEventSOPClass
	(*PatientBirthPlace)(nil),                             // 26: google.fhir.stu3.proto.PatientBirthPlace
	(*BodySiteInstance)(nil),                              // 27: google.fhir.stu3.proto.BodySiteInstance
	(*CapabilityStatementExpectation)(nil),                // 28: google.fhir.stu3.proto.CapabilityStatementExpectation
	(*CapabilityStatementProhibited)(nil),                 // 29: google.fhir.stu3.proto.CapabilityStatementProhibited
	(*CapabilityStatementSearchParameterCombination)(nil), // 30: google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination
	(*CapabilityStatementSupportedSystem)(nil),            // 31: google.fhir.stu3.proto.CapabilityStatementSupportedSystem
	(*CapabilityStatementWebsocket)(nil),                  // 32: google.fhir.stu3.proto.CapabilityStatementWebsocket
	(*CarePlanActivityTitle)(nil),                         // 33: google.fhir.stu3.proto.CarePlanActivityTitle
	(*CodeSystemAuthor)(nil),                              // 34: google.fhir.stu3.proto.CodeSystemAuthor
	(*CodeSystemComment)(nil),                             // 35: google.fhir.stu3.proto.CodeSystemComment
	(*CodeSystemComments)(nil),                            // 36: google.fhir.stu3.proto.CodeSystemComments
	(*CodeSystemConceptOrder)(nil),                        // 37: google.fhir.stu3.proto.CodeSystemConceptOrder
	(*CodeSystemDeprecated)(nil),                          // 38: google.fhir.stu3.proto.CodeSystemDeprecated
	(*CodeSystemEffectiveDate)(nil),                       // 39: google.fhir.stu3.proto.CodeSystemEffectiveDate
	(*CodeSystemExpirationDate)(nil),                      // 40: google.fhir.stu3.proto.CodeSystemExpirationDate
	(*CodeSystemHistory)(nil),                             // 41: google.fhir.stu3.proto.CodeSystemHistory
	(*CodeSystemKeyWord)(nil),                             // 42: google.fhir.stu3.proto.CodeSystemKeyWord
	(*CodeSystemLabel)(nil),                               // 43: google.fhir.stu3.proto.CodeSystemLabel
	(*CodeSystemMap)(nil),                                 // 44: google.fhir.stu3.proto.CodeSystemMap
	(*CodeSystemOrdinalValue)(nil),                        // 45: google.fhir.stu3.proto.CodeSystemOrdinalValue
	(*CodeSystemOtherName)(nil),                           // 46: google.fhir.stu3.proto.CodeSystemOtherName
	(*CodeSystemReference)(nil),                           // 47: google.fhir.stu3.proto.CodeSystemReference
	(*CodeSystemReplacedby)(nil),                          // 48: google.fhir.stu3.proto.CodeSystemReplacedby
	(*CodeSystemSourceReference)(nil),                     // 49: google.fhir.stu3.proto.CodeSystemSourceReference
	(*CodeSystemSubsumes)(nil),                            // 50: google.fhir.stu3.proto.CodeSystemSubsumes
	(*CodeSystemTrustedExpansion)(nil),                    // 51: google.fhir.stu3.proto.CodeSystemTrustedExpansion
	(*CodeSystemUsage)(nil),                               // 52: google.fhir.stu3.proto.CodeSystemUsage
	(*CodeSystemWarning)(nil),                             // 53: google.fhir.stu3.proto.CodeSystemWarning
	(*CodeSystemWorkflowStatus)(nil),                      // 54: google.fhir.stu3.proto.CodeSystemWorkflowStatus
	(*CodingSctdescid)(nil),                               // 55: google.fhir.stu3.proto.CodingSctdescid
	(*CommunicationMedia)(nil),                            // 56: google.fhir.stu3.proto.CommunicationMedia
	(*CommunicationReasonNotPerformed)(nil),               // 57: google.fhir.stu3.proto.CommunicationReasonNotPerformed
	(*CommunicationRequestDefinition)(nil),                // 58: google.fhir.stu3.proto.CommunicationRequestDefinition
	(*CommunicationRequestOrderedBy)(nil),                 // 59: google.fhir.stu3.proto.CommunicationRequestOrderedBy
	(*CommunicationRequestReasonRejected)(nil),            // 60: google.fhir.stu3.proto.CommunicationRequestReasonRejected
	(*CommunicationRequestRelevantHistory)(nil),           // 61: google.fhir.stu3.proto.CommunicationRequestRelevantHistory
	(*CommunicationRequestSupportingInfo)(nil),            // 62: google.fhir.stu3.proto.CommunicationRequestSupportingInfo
	(*CompositionOtherConfidentiality)(nil),               // 63: google.fhir.stu3.proto.CompositionOtherConfidentiality
	(*ConceptMapBidirectional)(nil),                       // 64: google.fhir.stu3.proto.ConceptMapBidirectional
	(*ConditionBasedOn)(nil),                              // 65: google.fhir.stu3.proto.ConditionBasedOn
	(*ConditionCriticality)(nil),                          // 66: google.fhir.stu3.proto.ConditionCriticality
	(*ConditionDefinition)(nil),                           // 67: google.fhir.stu3.proto.ConditionDefinition
	(*ConditionDueTo)(nil),                                // 68: google.fhir.stu3.proto.ConditionDueTo
	(*ConditionOccurredFollowing)(nil),                    // 69: google.fhir.stu3.proto.ConditionOccurredFollowing
	(*ConditionOutcome)(nil),                              // 70: google.fhir.stu3.proto.ConditionOutcome
	(*ConditionPartOf)(nil),                               // 71: google.fhir.stu3.proto.ConditionPartOf
	(*ConditionRuledOut)(nil),                             // 72: google.fhir.stu3.proto.ConditionRuledOut
	(*ConditionTargetBodySite)(nil),                       // 73: google.fhir.stu3.proto.ConditionTargetBodySite
	(*ConsentLocation)(nil),                               // 74: google.fhir.stu3.proto.ConsentLocation
	(*ConsentNotificationEndpoint)(nil),                   // 75: google.fhir.stu3.proto.ConsentNotificationEndpoint
	(*ConsentWitness)(nil),                                // 76: google.fhir.stu3.proto.ConsentWitness
	(*CalculatedValue)(nil),                               // 77: google.fhir.stu3.proto.CalculatedValue
	(*AttachmentCitation)(nil),                            // 78: google.fhir.stu3.proto.AttachmentCitation
	(*CqifCondition)(nil),                                 // 79: google.fhir.stu3.proto.CqifCondition
	(*CqlExpression)(nil),                                 // 80: google.fhir.stu3.proto.CqlExpression
	(*FhirPathExpression)(nil),                            // 81: google.fhir.stu3.proto.FhirPathExpression
	(*BasicEncounterClass)(nil),                           // 82: google.fhir.stu3.proto.BasicEncounterClass
	(*BasicEncounterType)(nil),                            // 83: google.fhir.stu3.proto.BasicEncounterType
	(*BasicInitiatingOrganization)(nil),                   // 84: google.fhir.stu3.proto.BasicInitiatingOrganization
	(*BasicInitiatingPerson)(nil),                         // 85: google.fhir.stu3.proto.BasicInitiatingPerson
	(*BasicReceivingOrganization)(nil),                    // 86: google.fhir.stu3.proto.BasicReceivingOrganization
	(*BasicReceivingPerson)(nil),                          // 87: google.fhir.stu3.proto.BasicReceivingPerson
	(*BasicRecipientLanguage)(nil),                        // 88: google.fhir.stu3.proto.BasicRecipientLanguage
	(*BasicRecipientType)(nil),                            // 89: google.fhir.stu3.proto.BasicRecipientType
	(*BasicSystemUserLanguage)(nil),                       // 90: google.fhir.stu3.proto.BasicSystemUserLanguage
	(*BasicSystemUserTaskContext)(nil),                    // 91: google.fhir.stu3.proto.BasicSystemUserTaskContext
	(*BasicSystemUserType)(nil),                           // 92: google.fhir.stu3.proto.BasicSystemUserType
	(*InitialValue)(nil),                                  // 93: google.fhir.stu3.proto.InitialValue
	(*CqifLibrary)(nil),                                   // 94: google.fhir.stu3.proto.CqifLibrary
	(*MeasureInfo)(nil),                                   // 95: google.fhir.stu3.proto.MeasureInfo
	(*QuestionnaireOptionCode)(nil),                       // 96: google.fhir.stu3.proto.QuestionnaireOptionCode
	(*AttachmentQualityOfEvidence)(nil),                   // 97: google.fhir.stu3.proto.AttachmentQualityOfEvidence
	(*CodingSourceValueSet)(nil),                          // 98: google.fhir.stu3.proto.CodingSourceValueSet
	(*AttachmentStrengthOfRecommendation)(nil),            // 99: google.fhir.stu3.proto.AttachmentStrengthOfRecommendation
	(*DataAbsentReason)(nil),                              // 100: google.fhir.stu3.proto.DataAbsentReason
	(*StructureDefinitionDatadictionary)(nil),             // 101: google.fhir.stu3.proto.StructureDefinitionDatadictionary
	(*DeviceDin)(nil),                                     // 102: google.fhir.stu3.proto.DeviceDin
	(*DeviceImplantStatus)(nil),                           // 103: google.fhir.stu3.proto.DeviceImplantStatus
	(*DeviceRequestPatientInstruction)(nil),               // 104: google.fhir.stu3.proto.DeviceRequestPatientInstruction
	(*DeviceRequestReasonRejected)(nil),                   // 105: google.fhir.stu3.proto.DeviceRequestReasonRejected
	(*DiagnosticReportAddendumOf)(nil),                    // 106: google.fhir.stu3.proto.DiagnosticReportAddendumOf
	(*DiagnosticReportExtends)(nil),                       // 107: google.fhir.stu3.proto.DiagnosticReportExtends
	(*DiagnosticReportAnalysis)(nil),                      // 108: google.fhir.stu3.proto.DiagnosticReportAnalysis
	(*DiagnosticReportAssessedCondition)(nil),             // 109: google.fhir.stu3.proto.DiagnosticReportAssessedCondition
	(*DiagnosticReportFamilyMemberHistory)(nil),           // 110: google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory
	(*DiagnosticReportLocationPerformed)(nil),             // 111: google.fhir.stu3.proto.DiagnosticReportLocationPerformed
	(*DiagnosticReportReplaces)(nil),                      // 112: google.fhir.stu3.proto.DiagnosticReportReplaces
	(*DiagnosticReportSummaryOf)(nil),                     // 113: google.fhir.stu3.proto.DiagnosticReportSummaryOf
	(*ElementDefinitionAllowedUnits)(nil),                 // 114: google.fhir.stu3.proto.ElementDefinitionAllowedUnits
	(*ElementDefinitionBestpractice)(nil),                 // 115: google.fhir.stu3.proto.ElementDefinitionBestpractice
	(*ElementDefinitionBindingName)(nil),                  // 116: google.fhir.stu3.proto.ElementDefinitionBindingName
	(*ElementDefinitionEquivalence)(nil),                  // 117: google.fhir.stu3.proto.ElementDefinitionEquivalence
	(*ElementDefinitionIdentifier)(nil),                   // 118: google.fhir.stu3.proto.ElementDefinitionIdentifier
	(*ElementDefinitionInheritedExtensibleValueSet)(nil),  // 119: google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet
	(*ElementDefinitionIsCommonBinding)(nil),              // 120: google.fhir.stu3.proto.ElementDefinitionIsCommonBinding
	(*ElementDefinitionMaxValueSet)(nil),                  // 121: google.fhir.stu3.proto.ElementDefinitionMaxValueSet
	(*ElementDefinitionMinValueSet)(nil),                  // 122: google.fhir.stu3.proto.ElementDefinitionMinValueSet
	(*Namespace)(nil),                                     // 123: google.fhir.stu3.proto.Namespace
	(*ElementDefinitionQuestion)(nil),                     // 124: google.fhir.stu3.proto.ElementDefinitionQuestion
	(*ElementDefinitionSelector)(nil),                     // 125: google.fhir.stu3.proto.ElementDefinitionSelector
	(*ElementDefinitionTranslatable)(nil),                 // 126: google.fhir.stu3.proto.ElementDefinitionTranslatable
	(*EncounterAssociatedEncounter)(nil),                  // 127: google.fhir.stu3.proto.EncounterAssociatedEncounter
	(*EncounterModeOfArrival)(nil),                        // 128: google.fhir.stu3.proto.EncounterModeOfArrival
	(*EncounterPrimaryDiagnosis)(nil),                     // 129: google.fhir.stu3.proto.EncounterPrimaryDiagnosis
	(*EncounterReasonCancelled)(nil),                      // 130: google.fhir.stu3.proto.EncounterReasonCancelled
	(*EntryFormat)(nil),                                   // 131: google.fhir.stu3.proto.EntryFormat
	(*Definition)(nil),                                    // 132: google.fhir.stu3.proto.Definition
	(*DiagnosticReportNotDone)(nil),                       // 133: google.fhir.stu3.proto.DiagnosticReportNotDone
	(*OnBehalfOf)(nil),                                    // 134: google.fhir.stu3.proto.OnBehalfOf
	(*PartOf)(nil),                                        // 135: google.fhir.stu3.proto.PartOf
	(*ObservationPerformerRole)(nil),                      // 136: google.fhir.stu3.proto.ObservationPerformerRole
	(*ReasonCode)(nil),                                    // 137: google.fhir.stu3.proto.ReasonCode
	(*ReasonReference)(nil),                               // 138: google.fhir.stu3.proto.ReasonReference
	(*FamilyMemberHistoryObservation)(nil),                // 139: google.fhir.stu3.proto.FamilyMemberHistoryObservation
	(*FamilyMemberHistoryParent)(nil),                     // 140: google.fhir.stu3.proto.FamilyMemberHistoryParent
	(*FamilyMemberHistorySibling)(nil),                    // 141: google.fhir.stu3.proto.FamilyMemberHistorySibling
	(*FamilyMemberHistoryAbatement)(nil),                  // 142: google.fhir.stu3.proto.FamilyMemberHistoryAbatement
	(*FamilyMemberHistoryPatientRecord)(nil),              // 143: google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord
	(*FamilyMemberHistorySeverity)(nil),                   // 144: google.fhir.stu3.proto.FamilyMemberHistorySeverity
	(*FamilyMemberHistoryType)(nil),                       // 145: google.fhir.stu3.proto.FamilyMemberHistoryType
	(*FlagDetail)(nil),                                    // 146: google.fhir.stu3.proto.FlagDetail
	(*FlagPriority)(nil),                                  // 147: google.fhir.stu3.proto.FlagPriority
	(*AddressGeolocation)(nil),                            // 148: google.fhir.stu3.proto.AddressGeolocation
	(*GoalAcceptance)(nil),                                // 149: google.fhir.stu3.proto.GoalAcceptance
	(*ResourcePertainsToGoal)(nil),                        // 150: google.fhir.stu3.proto.ResourcePertainsToGoal
	(*GoalReasonRejected)(nil),                            // 151: google.fhir.stu3.proto.GoalReasonRejected
	(*GoalRelationship)(nil),                              // 152: google.fhir.stu3.proto.GoalRelationship
	(*DiagnosticReportAlleleDatabase)(nil),                // 153: google.fhir.stu3.proto.DiagnosticReportAlleleDatabase
	(*DiagnosticReportGlstring)(nil),                      // 154: google.fhir.stu3.proto.DiagnosticReportGlstring
	(*DiagnosticReportHaploid)(nil),                       // 155: google.fhir.stu3.proto.DiagnosticReportHaploid
	(*DiagnosticReportMethod)(nil),                        // 156: google.fhir.stu3.proto.DiagnosticReportMethod
	(*BundleHttpResponseHeader)(nil),                      // 157: google.fhir.stu3.proto.BundleHttpResponseHeader
	(*HumanNameAssemblyOrder)(nil),                        // 158: google.fhir.stu3.proto.HumanNameAssemblyOrder
	(*HumanNameFathersFamily)(nil),                        // 159: google.fhir.stu3.proto.HumanNameFathersFamily
	(*HumanNameMothersFamily)(nil),                        // 160: google.fhir.stu3.proto.HumanNameMothersFamily
	(*HumanNameOwnName)(nil),                              // 161: google.fhir.stu3.proto.HumanNameOwnName
	(*HumanNameOwnPrefix)(nil),                            // 162: google.fhir.stu3.proto.HumanNameOwnPrefix
	(*HumanNamePartnerName)(nil),                          // 163: google.fhir.stu3.proto.HumanNamePartnerName
	(*HumanNamePartnerPrefix)(nil),                        // 164: google.fhir.stu3.proto.HumanNamePartnerPrefix
	(*IdentifierValidDate)(nil),                           // 165: google.fhir.stu3.proto.IdentifierValidDate
	(*ImplementationGuidePage)(nil),                       // 166: google.fhir.stu3.proto.ImplementationGuidePage
	(*AddressADUse)(nil),                                  // 167: google.fhir.stu3.proto.AddressADUse
	(*AddressADXPAdditionalLocator)(nil),                  // 168: google.fhir.stu3.proto.AddressADXPAdditionalLocator
	(*AddressADXPBuildingNumberSuffix)(nil),               // 169: google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix
	(*AddressADXPCareOf)(nil),                             // 170: google.fhir.stu3.proto.AddressADXPCareOf
	(*AddressADXPCensusTract)(nil),                        // 171: google.fhir.stu3.proto.AddressADXPCensusTract
	(*AddressADXPDelimiter)(nil),                          // 172: google.fhir.stu3.proto.AddressADXPDelimiter
	(*AddressADXPDeliveryAddressLine)(nil),                // 173: google.fhir.stu3.proto.AddressADXPDeliveryAddressLine
	(*AddressADXPDeliveryInstallationArea)(nil),           // 174: google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea
	(*AddressADXPDeliveryInstallationQualifier)(nil),      // 175: google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier
	(*AddressADXPDeliveryInstallationType)(nil),           // 176: google.fhir.stu3.proto.AddressADXPDeliveryInstallationType
	(*AddressADXPDeliveryMode)(nil),                       // 177: google.fhir.stu3.proto.AddressADXPDeliveryMode
	(*AddressADXPDeliveryModeIdentifier)(nil),             // 178: google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier
	(*AddressADXPDirection)(nil),                          // 179: google.fhir.stu3.proto.AddressADXPDirection
	(*AddressADXPHouseNumber)(nil),                        // 180: google.fhir.stu3.proto.AddressADXPHouseNumber
	(*AddressADXPHouseNumberNumeric)(nil),                 // 181: google.fhir.stu3.proto.AddressADXPHouseNumberNumeric
	(*AddressADXPPostBox)(nil),                            // 182: google.fhir.stu3.proto.AddressADXPPostBox
	(*AddressADXPPrecinct)(nil),                           // 183: google.fhir.stu3.proto.AddressADXPPrecinct
	(*AddressADXPStreetAddressLine)(nil),                  // 184: google.fhir.stu3.proto.AddressADXPStreetAddressLine
	(*AddressADXPStreetName)(nil),                         // 185: google.fhir.stu3.proto.AddressADXPStreetName
	(*AddressADXPStreetNameBase)(nil),                     // 186: google.fhir.stu3.proto.AddressADXPStreetNameBase
	(*AddressADXPStreetNameType)(nil),                     // 187: google.fhir.stu3.proto.AddressADXPStreetNameType
	(*AddressADXPUnitID)(nil),                             // 188: google.fhir.stu3.proto.AddressADXPUnitID
	(*AddressADXPUnitType)(nil),                           // 189: google.fhir.stu3.proto.AddressADXPUnitType
	(*CodingCOValue)(nil),                                 // 190: google.fhir.stu3.proto.CodingCOValue
	(*HumanNameENQualifier)(nil),                          // 191: google.fhir.stu3.proto.HumanNameENQualifier
	(*HumanNameENRepresentation)(nil),                     // 192: google.fhir.stu3.proto.HumanNameENRepresentation
	(*AnyNullFlavor)(nil),                                 // 193: google.fhir.stu3.proto.AnyNullFlavor
	(*AnyPreferred)(nil),                                  // 194: google.fhir.stu3.proto.AnyPreferred
	(*StringSCCoding)(nil),                                // 195: google.fhir.stu3.proto.StringSCCoding
	(*ContactPointTELAddress)(nil),                        // 196: google.fhir.stu3.proto.ContactPointTELAddress
	(*QuantityUncertainty)(nil),                           // 197: google.fhir.stu3.proto.QuantityUncertainty
	(*QuantityUncertaintyType)(nil),                       // 198: google.fhir.stu3.proto.QuantityUncertaintyType
	(*AnyVerification)(nil),                               // 199: google.fhir.stu3.proto.AnyVerification
	(*LocationAlias)(nil),                                 // 200: google.fhir.stu3.proto.LocationAlias
	(*BundleLocationDistance)(nil),                        // 201: google.fhir.stu3.proto.BundleLocationDistance
	(*DataElementMapSourcePublisher)(nil),                 // 202: google.fhir.stu3.proto.DataElementMapSourcePublisher
	(*BundleMatchGrade)(nil),                              // 203: google.fhir.stu3.proto.BundleMatchGrade
	(*MaxDecimalPlaces)(nil),                              // 204: google.fhir.stu3.proto.MaxDecimalPlaces
	(*MaxSize)(nil),                                       // 205: google.fhir.stu3.proto.MaxSize
	(*QuestionnaireMaxValue)(nil),                         // 206: google.fhir.stu3.proto.QuestionnaireMaxValue
	(*MedicationUsualRoute)(nil),                          // 207: google.fhir.stu3.proto.MedicationUsualRoute
	(*MedicationDispenseValidityPeriod)(nil),              // 208: google.fhir.stu3.proto.MedicationDispenseValidityPeriod
	(*MedicationStatementPrescriber)(nil),                 // 209: google.fhir.stu3.proto.MedicationStatementPrescriber
	(*MessageHeaderMessageheaderResponseRequest)(nil),     // 210: google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest
	(*MimeType)(nil),                                      // 211: google.fhir.stu3.proto.MimeType
	(*MinLength)(nil),                                     // 212: google.fhir.stu3.proto.MinLength
	(*QuestionnaireMinValue)(nil),                         // 213: google.fhir.stu3.proto.QuestionnaireMinValue
	(*ObservationBodyPosition)(nil),                       // 214: google.fhir.stu3.proto.ObservationBodyPosition
	(*ObservationDelta)(nil),                              // 215: google.fhir.stu3.proto.ObservationDelta
	(*ObservationEventTiming)(nil),                        // 216: google.fhir.stu3.proto.ObservationEventTiming
	(*ObservationFocalSubject)(nil),                       // 217: google.fhir.stu3.proto.ObservationFocalSubject
	(*ObservationAlleleName)(nil),                         // 218: google.fhir.stu3.proto.ObservationAlleleName
	(*ObservationAllelicFrequency)(nil),                   // 219: google.fhir.stu3.proto.ObservationAllelicFrequency
	(*ObservationAllelicState)(nil),                       // 220: google.fhir.stu3.proto.ObservationAllelicState
	(*ObservationAminoAcidChangeName)(nil),                // 221: google.fhir.stu3.proto.ObservationAminoAcidChangeName
	(*ObservationAminoAcidChangeType)(nil),                // 222: google.fhir.stu3.proto.ObservationAminoAcidChangeType
	(*ObservationCopyNumberEvent)(nil),                    // 223: google.fhir.stu3.proto.ObservationCopyNumberEvent
	(*ObservationDNARegionName)(nil),                      // 224: google.fhir.stu3.proto.ObservationDNARegionName
	(*ObservationDNASequenceVariantName)(nil),             // 225: google.fhir.stu3.proto.ObservationDNASequenceVariantName
	(*ObservationDNASequenceVariantType)(nil),             // 226: google.fhir.stu3.proto.ObservationDNASequenceVariantType
	(*ObservationDNAVariantId)(nil),                       // 227: google.fhir.stu3.proto.ObservationDNAVariantId
	(*ObservationGene)(nil),                               // 228: google.fhir.stu3.proto.ObservationGene
	(*ObservationGenomicSourceClass)(nil),                 // 229: google.fhir.stu3.proto.ObservationGenomicSourceClass
	(*ObservationInterpretation)(nil),                     // 230: google.fhir.stu3.proto.ObservationInterpretation
	(*ObservationPhaseSet)(nil),                           // 231: google.fhir.stu3.proto.ObservationPhaseSet
	(*ObservationSequence)(nil),                           // 232: google.fhir.stu3.proto.ObservationSequence
	(*ObservationTimeOffset)(nil),                         // 233: google.fhir.stu3.proto.ObservationTimeOffset
	(*AllergyIntoleranceAdministration)(nil),              // 234: google.fhir.stu3.proto.AllergyIntoleranceAdministration
	(*AllergyIntoleranceCareplan)(nil),                    // 235: google.fhir.stu3.proto.AllergyIntoleranceCareplan
	(*AllergyIntoleranceExposureDate)(nil),                // 236: google.fhir.stu3.proto.AllergyIntoleranceExposureDate
	(*AllergyIntoleranceExposureDescription)(nil),         // 237: google.fhir.stu3.proto.AllergyIntoleranceExposureDescription
	(*AllergyIntoleranceExposureDuration)(nil),            // 238: google.fhir.stu3.proto.AllergyIntoleranceExposureDuration
	(*AllergyIntoleranceLocation)(nil),                    // 239: google.fhir.stu3.proto.AllergyIntoleranceLocation
	(*AllergyIntoleranceManagement)(nil),                  // 240: google.fhir.stu3.proto.AllergyIntoleranceManagement
	(*AllergyIntoleranceTest)(nil),                        // 241: google.fhir.stu3.proto.AllergyIntoleranceTest
	(*OperationOutcomeAuthority)(nil),                     // 242: google.fhir.stu3.proto.OperationOutcomeAuthority
	(*OperationOutcomeDetectedIssue)(nil),                 // 243: google.fhir.stu3.proto.OperationOutcomeDetectedIssue
	(*OperationOutcomeIssueSource)(nil),                   // 244: google.fhir.stu3.proto.OperationOutcomeIssueSource
	(*OrganizationAlias)(nil),                             // 245: google.fhir.stu3.proto.OrganizationAlias
	(*OrganizationPeriod)(nil),                            // 246: google.fhir.stu3.proto.OrganizationPeriod
	(*OrganizationPreferredContact)(nil),                  // 247: google.fhir.stu3.proto.OrganizationPreferredContact
	(*PatientAdoptionInfo)(nil),                           // 248: google.fhir.stu3.proto.PatientAdoptionInfo
	(*PatientBirthTime)(nil),                              // 249: google.fhir.stu3.proto.PatientBirthTime
	(*PatientCadavericDonor)(nil),                         // 250: google.fhir.stu3.proto.PatientCadavericDonor
	(*PatientCitizenship)(nil),                            // 251: google.fhir.stu3.proto.PatientCitizenship
	(*PatientClinicalTrial)(nil),                          // 252: google.fhir.stu3.proto.PatientClinicalTrial
	(*PatientCongregation)(nil),                           // 253: google.fhir.stu3.proto.PatientCongregation
	(*PatientDisability)(nil),                             // 254: google.fhir.stu3.proto.PatientDisability
	(*PatientImportance)(nil),                             // 255: google.fhir.stu3.proto.PatientImportance
	(*PatientInterpreterRequired)(nil),                    // 256: google.fhir.stu3.proto.PatientInterpreterRequired
	(*PatientMothersMaidenName)(nil),                      // 257: google.fhir.stu3.proto.PatientMothersMaidenName
	(*PatientNationality)(nil),                            // 258: google.fhir.stu3.proto.PatientNationality
	(*PatientReligion)(nil),                               // 259: google.fhir.stu3.proto.PatientReligion
	(*DoseType)(nil),                                      // 260: google.fhir.stu3.proto.DoseType
	(*InfuseOver)(nil),                                    // 261: google.fhir.stu3.proto.InfuseOver
	(*MaxDeliveryRate)(nil),                               // 262: google.fhir.stu3.proto.MaxDeliveryRate
	(*MaxDeliveryVolume)(nil),                             // 263: google.fhir.stu3.proto.MaxDeliveryVolume
	(*MinDosePerPeriod)(nil),                              // 264: google.fhir.stu3.proto.MinDosePerPeriod
	(*RateGoal)(nil),                                      // 265: google.fhir.stu3.proto.RateGoal
	(*RateIncrement)(nil),                                 // 266: google.fhir.stu3.proto.RateIncrement
	(*RateIncrementInterval)(nil),                         // 267: google.fhir.stu3.proto.RateIncrementInterval
	(*RefillsRemaining)(nil),                              // 268: google.fhir.stu3.proto.RefillsRemaining
	(*AnimalSpecies)(nil),                                 // 269: google.fhir.stu3.proto.AnimalSpecies
	(*PractitionerClassification)(nil),                    // 270: google.fhir.stu3.proto.PractitionerClassification
	(*PractitionerRolePrimaryInd)(nil),                    // 271: google.fhir.stu3.proto.PractitionerRolePrimaryInd
	(*ProcedureApproachBodySite)(nil),                     // 272: google.fhir.stu3.proto.ProcedureApproachBodySite
	(*ProcedureCausedBy)(nil),                             // 273: google.fhir.stu3.proto.ProcedureCausedBy
	(*ProcedureIncisionDateTime)(nil),                     // 274: google.fhir.stu3.proto.ProcedureIncisionDateTime
	(*ProcedureMethod)(nil),                               // 275: google.fhir.stu3.proto.ProcedureMethod
	(*ProcedureProgressStatus)(nil),                       // 276: google.fhir.stu3.proto.ProcedureProgressStatus
	(*ProcedureSchedule)(nil),                             // 277: google.fhir.stu3.proto.ProcedureSchedule
	(*ProcedureTargetBodySite)(nil),                       // 278: google.fhir.stu3.proto.ProcedureTargetBodySite
	(*ProcedureRequestApproachBodySite)(nil),              // 279: google.fhir.stu3.proto.ProcedureRequestApproachBodySite
	(*ProcedureRequestAuthorizedBy)(nil),                  // 280: google.fhir.stu3.proto.ProcedureRequestAuthorizedBy
	(*DiagnosticReportItem)(nil),                          // 281: google.fhir.stu3.proto.DiagnosticReportItem
	(*ProcedureRequestPrecondition)(nil),                  // 282: google.fhir.stu3.proto.ProcedureRequestPrecondition
	(*ProcedureRequestQuestionnaireRequest)(nil),          // 283: google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest
	(*ProcedureRequestReasonRefused)(nil),                 // 284: google.fhir.stu3.proto.ProcedureRequestReasonRefused
	(*ProcedureRequestReasonRejected)(nil),                // 285: google.fhir.stu3.proto.ProcedureRequestReasonRejected
	(*ProcedureRequestTargetBodySite)(nil),                // 286: google.fhir.stu3.proto.ProcedureRequestTargetBodySite
	(*QuestionnaireAllowedProfile)(nil),                   // 287: google.fhir.stu3.proto.QuestionnaireAllowedProfile
	(*QuestionnaireAllowedResource)(nil),                  // 288: google.fhir.stu3.proto.QuestionnaireAllowedResource
	(*QuestionnaireBaseType)(nil),                         // 289: google.fhir.stu3.proto.QuestionnaireBaseType
	(*QuestionnaireChoiceOrientation)(nil),                // 290: google.fhir.stu3.proto.QuestionnaireChoiceOrientation
	(*QuestionnaireDeMap)(nil),                            // 291: google.fhir.stu3.proto.QuestionnaireDeMap
	(*QuestionnaireDisplayCategory)(nil),                  // 292: google.fhir.stu3.proto.QuestionnaireDisplayCategory
	(*QuestionnaireFhirType)(nil),                         // 293: google.fhir.stu3.proto.QuestionnaireFhirType
	(*QuestionnaireHidden)(nil),                           // 294: google.fhir.stu3.proto.QuestionnaireHidden
	(*QuestionnaireItemControl)(nil),                      // 295: google.fhir.stu3.proto.QuestionnaireItemControl
	(*QuestionnaireLookupQuestionnaire)(nil),              // 296: google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire
	(*QuestionnaireMaxOccurs)(nil),                        // 297: google.fhir.stu3.proto.QuestionnaireMaxOccurs
	(*QuestionnaireMinOccurs)(nil),                        // 298: google.fhir.stu3.proto.QuestionnaireMinOccurs
	(*QuestionnaireOptionExclusive)(nil),                  // 299: google.fhir.stu3.proto.QuestionnaireOptionExclusive
	(*QuestionnaireOptionPrefix)(nil),                     // 300: google.fhir.stu3.proto.QuestionnaireOptionPrefix
	(*QuestionnaireOrdinalValue)(nil),                     // 301: google.fhir.stu3.proto.QuestionnaireOrdinalValue
	(*QuestionnaireReferenceFilter)(nil),                  // 302: google.fhir.stu3.proto.QuestionnaireReferenceFilter
	(*QuestionnaireSourceStructureMap)(nil),               // 303: google.fhir.stu3.proto.QuestionnaireSourceStructureMap
	(*QuestionnaireStudyprotocolIdentifier)(nil),          // 304: google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier
	(*QuestionnaireSupportLink)(nil),                      // 305: google.fhir.stu3.proto.QuestionnaireSupportLink
	(*QuestionnaireTargetStructureMap)(nil),               // 306: google.fhir.stu3.proto.QuestionnaireTargetStructureMap
	(*QuestionnaireUnit)(nil),                             // 307: google.fhir.stu3.proto.QuestionnaireUnit
	(*QuestionnaireUsageMode)(nil),                        // 308: google.fhir.stu3.proto.QuestionnaireUsageMode
	(*QuestionnaireResponseAuthor)(nil),                   // 309: google.fhir.stu3.proto.QuestionnaireResponseAuthor
	(*QuestionnaireResponseNote)(nil),                     // 310: google.fhir.stu3.proto.QuestionnaireResponseNote
	(*QuestionnaireResponseReason)(nil),                   // 311: google.fhir.stu3.proto.QuestionnaireResponseReason
	(*QuestionnaireResponseReviewer)(nil),                 // 312: google.fhir.stu3.proto.QuestionnaireResponseReviewer
	(*ReferralRequestReasonRefused)(nil),                  // 313: google.fhir.stu3.proto.ReferralRequestReasonRefused
	(*Regex)(nil),                                         // 314: google.fhir.stu3.proto.Regex
	(*RenderedValue)(nil),                                 // 315: google.fhir.stu3.proto.RenderedValue
	(*StringMarkdown)(nil),                                // 316: google.fhir.stu3.proto.StringMarkdown
	(*Style)(nil),                                         // 317: google.fhir.stu3.proto.Style
	(*StyleSensitive)(nil),                                // 318: google.fhir.stu3.proto.StyleSensitive
	(*StringXhtml)(nil),                                   // 319: google.fhir.stu3.proto.StringXhtml
	(*ApprovalDate)(nil),                                  // 320: google.fhir.stu3.proto.ApprovalDate
	(*EffectivePeriod)(nil),                               // 321: google.fhir.stu3.proto.EffectivePeriod
	(*LastReviewDate)(nil),                                // 322: google.fhir.stu3.proto.LastReviewDate
	(*SpecimenCollectionPriority)(nil),                    // 323: google.fhir.stu3.proto.SpecimenCollectionPriority
	(*SpecimenIsDryWeight)(nil),                           // 324: google.fhir.stu3.proto.SpecimenIsDryWeight
	(*SpecimenProcessingTime)(nil),                        // 325: google.fhir.stu3.proto.SpecimenProcessingTime
	(*SpecimenSequenceNumber)(nil),                        // 326: google.fhir.stu3.proto.SpecimenSequenceNumber
	(*SpecimenSpecialHandling)(nil),                       // 327: google.fhir.stu3.proto.SpecimenSpecialHandling
	(*StructureDefinitionAncestor)(nil),                   // 328: google.fhir.stu3.proto.StructureDefinitionAncestor
	(*StructureDefinitionAnnotation)(nil),                 // 329: google.fhir.stu3.proto.StructureDefinitionAnnotation
	(*BallotStatus)(nil),                                  // 330: google.fhir.stu3.proto.BallotStatus
	(*StructureDefinitionCategory)(nil),                   // 331: google.fhir.stu3.proto.StructureDefinitionCategory
	(*ElementDefinitionDisplayHint)(nil),                  // 332: google.fhir.stu3.proto.ElementDefinitionDisplayHint
	(*ElementDefinitionExplicitTypeName)(nil),             // 333: google.fhir.stu3.proto.ElementDefinitionExplicitTypeName
	(*StructureDefinitionFmmNoWarnings)(nil),              // 334: google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings
	(*Fmm)(nil),                                           // 335: google.fhir.stu3.proto.Fmm
	(*ElementDefinitionJsonType)(nil),                     // 336: google.fhir.stu3.proto.ElementDefinitionJsonType
	(*ElementDefinitionRdfType)(nil),                      // 337: google.fhir.stu3.proto.ElementDefinitionRdfType
	(*ElementDefinitionRegex)(nil),                        // 338: google.fhir.stu3.proto.ElementDefinitionRegex
	(*StructureDefinitionSummary)(nil),                    // 339: google.fhir.stu3.proto.StructureDefinitionSummary
	(*StructureDefinitionTableName)(nil),                  // 340: google.fhir.stu3.proto.StructureDefinitionTableName
	(*StructureDefinitionTemplateStatus)(nil),             // 341: google.fhir.stu3.proto.StructureDefinitionTemplateStatus
	(*Wg)(nil),                                                 // 342: google.fhir.stu3.proto.Wg
	(*ElementDefinitionXmlType)(nil),                           // 343: google.fhir.stu3.proto.ElementDefinitionXmlType
	(*TaskCandidateList)(nil),                                  // 344: google.fhir.stu3.proto.TaskCandidateList
	(*TaskReplaces)(nil),                                       // 345: google.fhir.stu3.proto.TaskReplaces
	(*DaysOfCycle)(nil),                                        // 346: google.fhir.stu3.proto.DaysOfCycle
	(*TimingExact)(nil),                                        // 347: google.fhir.stu3.proto.TimingExact
	(*Translation)(nil),                                        // 348: google.fhir.stu3.proto.Translation
	(*UsageContextGroup)(nil),                                  // 349: google.fhir.stu3.proto.UsageContextGroup
	(*ValueSetAuthor)(nil),                                     // 350: google.fhir.stu3.proto.ValueSetAuthor
	(*ValueSetCaseSensitive)(nil),                              // 351: google.fhir.stu3.proto.ValueSetCaseSensitive
	(*ValueSetComment)(nil),                                    // 352: google.fhir.stu3.proto.ValueSetComment
	(*ValueSetComments)(nil),                                   // 353: google.fhir.stu3.proto.ValueSetComments
	(*ValueSetConceptOrder)(nil),                               // 354: google.fhir.stu3.proto.ValueSetConceptOrder
	(*ValueSetDefinition)(nil),                                 // 355: google.fhir.stu3.proto.ValueSetDefinition
	(*ValueSetEffectiveDate)(nil),                              // 356: google.fhir.stu3.proto.ValueSetEffectiveDate
	(*ValueSetExpansionSource)(nil),                            // 357: google.fhir.stu3.proto.ValueSetExpansionSource
	(*ValueSetExpirationDate)(nil),                             // 358: google.fhir.stu3.proto.ValueSetExpirationDate
	(*ValueSetHistory)(nil),                                    // 359: google.fhir.stu3.proto.ValueSetHistory
	(*ValueSetKeyWord)(nil),                                    // 360: google.fhir.stu3.proto.ValueSetKeyWord
	(*ValueSetLabel)(nil),                                      // 361: google.fhir.stu3.proto.ValueSetLabel
	(*ValueSetMap)(nil),                                        // 362: google.fhir.stu3.proto.ValueSetMap
	(*ValueSetOrdinalValue)(nil),                               // 363: google.fhir.stu3.proto.ValueSetOrdinalValue
	(*ValueSetOtherName)(nil),                                  // 364: google.fhir.stu3.proto.ValueSetOtherName
	(*ValueSetReference)(nil),                                  // 365: google.fhir.stu3.proto.ValueSetReference
	(*ValueSetSourceReference)(nil),                            // 366: google.fhir.stu3.proto.ValueSetSourceReference
	(*ValueSetSystem)(nil),                                     // 367: google.fhir.stu3.proto.ValueSetSystem
	(*ValueSetSystemName)(nil),                                 // 368: google.fhir.stu3.proto.ValueSetSystemName
	(*ValueSetSystemRef)(nil),                                  // 369: google.fhir.stu3.proto.ValueSetSystemRef
	(*ValueSetToocostly)(nil),                                  // 370: google.fhir.stu3.proto.ValueSetToocostly
	(*ValueSetTrustedExpansion)(nil),                           // 371: google.fhir.stu3.proto.ValueSetTrustedExpansion
	(*ValueSetUnclosed)(nil),                                   // 372: google.fhir.stu3.proto.ValueSetUnclosed
	(*ValueSetUsage)(nil),                                      // 373: google.fhir.stu3.proto.ValueSetUsage
	(*ValueSetWarning)(nil),                                    // 374: google.fhir.stu3.proto.ValueSetWarning
	(*ValueSetWorkflowStatus)(nil),                             // 375: google.fhir.stu3.proto.ValueSetWorkflowStatus
	(*CodeSystemHistory_Revision)(nil),                         // 376: google.fhir.stu3.proto.CodeSystemHistory.Revision
	(*CommunicationRequestDefinition_Value)(nil),               // 377: google.fhir.stu3.proto.CommunicationRequestDefinition.Value
	(*CommunicationRequestOrderedBy_Value)(nil),                // 378: google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value
	(*ConditionBasedOn_Value)(nil),                             // 379: google.fhir.stu3.proto.ConditionBasedOn.Value
	(*ConditionDueTo_Value)(nil),                               // 380: google.fhir.stu3.proto.ConditionDueTo.Value
	(*ConditionOccurredFollowing_Value)(nil),                   // 381: google.fhir.stu3.proto.ConditionOccurredFollowing.Value
	(*ConditionPartOf_Value)(nil),                              // 382: google.fhir.stu3.proto.ConditionPartOf.Value
	(*ConsentWitness_Value)(nil),                               // 383: google.fhir.stu3.proto.ConsentWitness.Value
	(*BasicInitiatingPerson_Value)(nil),                        // 384: google.fhir.stu3.proto.BasicInitiatingPerson.Value
	(*BasicReceivingPerson_Value)(nil),                         // 385: google.fhir.stu3.proto.BasicReceivingPerson.Value
	(*ElementDefinitionAllowedUnits_Value)(nil),                // 386: google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value
	(*ElementDefinitionBestpractice_Value)(nil),                // 387: google.fhir.stu3.proto.ElementDefinitionBestpractice.Value
	(*ElementDefinitionInheritedExtensibleValueSet_Value)(nil), // 388: google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value
	(*ElementDefinitionMaxValueSet_Value)(nil),                 // 389: google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value
	(*ElementDefinitionMinValueSet_Value)(nil),                 // 390: google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value
	(*Definition_Value)(nil),                                   // 391: google.fhir.stu3.proto.Definition.Value
	(*ReasonReference_Value)(nil),                              // 392: google.fhir.stu3.proto.ReasonReference.Value
	(*FamilyMemberHistoryAbatement_Value)(nil),                 // 393: google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value
	(*QuestionnaireMaxValue_Value)(nil),                        // 394: google.fhir.stu3.proto.QuestionnaireMaxValue.Value
	(*QuestionnaireMinValue_Value)(nil),                        // 395: google.fhir.stu3.proto.QuestionnaireMinValue.Value
	(*AllergyIntoleranceTest_Value)(nil),                       // 396: google.fhir.stu3.proto.AllergyIntoleranceTest.Value
	(*ProcedureCausedBy_Value)(nil),                            // 397: google.fhir.stu3.proto.ProcedureCausedBy.Value
	(*QuestionnaireResponseAuthor_Value)(nil),                  // 398: google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value
	(*SpecimenProcessingTime_Value)(nil),                       // 399: google.fhir.stu3.proto.SpecimenProcessingTime.Value
	(*TaskCandidateList_Value)(nil),                            // 400: google.fhir.stu3.proto.TaskCandidateList.Value
	(*Translation_Content)(nil),                                // 401: google.fhir.stu3.proto.Translation.Content
	(*ValueSetHistory_Revision)(nil),                           // 402: google.fhir.stu3.proto.ValueSetHistory.Revision
	(*datatypes_go_proto.String)(nil),                          // 403: google.fhir.stu3.proto.String
	(*datatypes_go_proto.CodeableConcept)(nil),                 // 404: google.fhir.stu3.proto.CodeableConcept
	(*codes_go_proto.ClassificationOrContextCode)(nil),         // 405: google.fhir.stu3.proto.ClassificationOrContextCode
	(*datatypes_go_proto.Address)(nil),                         // 406: google.fhir.stu3.proto.Address
	(*datatypes_go_proto.Reference)(nil),                       // 407: google.fhir.stu3.proto.Reference
	(*datatypes_go_proto.Period)(nil),                          // 408: google.fhir.stu3.proto.Period
	(*datatypes_go_proto.Boolean)(nil),                         // 409: google.fhir.stu3.proto.Boolean
	(*datatypes_go_proto.Coding)(nil),                          // 410: google.fhir.stu3.proto.Coding
	(*codes_go_proto.AllergyIntoleranceCertaintyCode)(nil),     // 411: google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode
	(*datatypes_go_proto.Duration)(nil),                        // 412: google.fhir.stu3.proto.Duration
	(*datatypes_go_proto.Age)(nil),                             // 413: google.fhir.stu3.proto.Age
	(*datatypes_go_proto.Extension)(nil),                       // 414: google.fhir.stu3.proto.Extension
	(*datatypes_go_proto.Identifier)(nil),                      // 415: google.fhir.stu3.proto.Identifier
	(*datatypes_go_proto.Integer)(nil),                         // 416: google.fhir.stu3.proto.Integer
	(*codes_go_proto.ConformanceExpectationCode)(nil),          // 417: google.fhir.stu3.proto.ConformanceExpectationCode
	(*datatypes_go_proto.Uri)(nil),                             // 418: google.fhir.stu3.proto.Uri
	(*datatypes_go_proto.Instant)(nil),                         // 419: google.fhir.stu3.proto.Instant
	(*datatypes_go_proto.Date)(nil),                            // 420: google.fhir.stu3.proto.Date
	(*datatypes_go_proto.Decimal)(nil),                         // 421: google.fhir.stu3.proto.Decimal
	(*datatypes_go_proto.Code)(nil),                            // 422: google.fhir.stu3.proto.Code
	(*datatypes_go_proto.Markdown)(nil),                        // 423: google.fhir.stu3.proto.Markdown
	(*datatypes_go_proto.Id)(nil),                              // 424: google.fhir.stu3.proto.Id
	(*datatypes_go_proto.Attachment)(nil),                      // 425: google.fhir.stu3.proto.Attachment
	(*codes_go_proto.DataAbsentReasonCode)(nil),                // 426: google.fhir.stu3.proto.DataAbsentReasonCode
	(*codes_go_proto.ImplantStatusCode)(nil),                   // 427: google.fhir.stu3.proto.ImplantStatusCode
	(*datatypes_go_proto.LanguageCode)(nil),                    // 428: google.fhir.stu3.proto.LanguageCode
	(*codes_go_proto.ConceptMapEquivalenceCode)(nil),           // 429: google.fhir.stu3.proto.ConceptMapEquivalenceCode
	(*datatypes_go_proto.PositiveInt)(nil),                     // 430: google.fhir.stu3.proto.PositiveInt
	(*codes_go_proto.GoalAcceptanceStatusCode)(nil),            // 431: google.fhir.stu3.proto.GoalAcceptanceStatusCode
	(*codes_go_proto.HumanNameAssemblyOrderCode)(nil),          // 432: google.fhir.stu3.proto.HumanNameAssemblyOrderCode
	(*datatypes_go_proto.DateTime)(nil),                        // 433: google.fhir.stu3.proto.DateTime
	(*codes_go_proto.PostalAddressUseTypeCode)(nil),            // 434: google.fhir.stu3.proto.PostalAddressUseTypeCode
	(*codes_go_proto.EntityNamePartQualifierCode)(nil),         // 435: google.fhir.stu3.proto.EntityNamePartQualifierCode
	(*codes_go_proto.NameRepresentationUseCode)(nil),           // 436: google.fhir.stu3.proto.NameRepresentationUseCode
	(*codes_go_proto.NullFlavorCode)(nil),                      // 437: google.fhir.stu3.proto.NullFlavorCode
	(*codes_go_proto.ProbabilityDistributionTypeCode)(nil),     // 438: google.fhir.stu3.proto.ProbabilityDistributionTypeCode
	(*datatypes_go_proto.Distance)(nil),                        // 439: google.fhir.stu3.proto.Distance
	(*codes_go_proto.MatchGradeCode)(nil),                      // 440: google.fhir.stu3.proto.MatchGradeCode
	(*codes_go_proto.MessageHeaderResponseRequestCode)(nil),    // 441: google.fhir.stu3.proto.MessageHeaderResponseRequestCode
	(*datatypes_go_proto.MimeTypeCode)(nil),                    // 442: google.fhir.stu3.proto.MimeTypeCode
	(*datatypes_go_proto.Quantity)(nil),                        // 443: google.fhir.stu3.proto.Quantity
	(*datatypes_go_proto.Ratio)(nil),                           // 444: google.fhir.stu3.proto.Ratio
	(*datatypes_go_proto.Timing)(nil),                          // 445: google.fhir.stu3.proto.Timing
	(*codes_go_proto.ResourceTypeCode)(nil),                    // 446: google.fhir.stu3.proto.ResourceTypeCode
	(*codes_go_proto.DataTypeCode)(nil),                        // 447: google.fhir.stu3.proto.DataTypeCode
	(*codes_go_proto.ChoiceListOrientationCode)(nil),           // 448: google.fhir.stu3.proto.ChoiceListOrientationCode
	(*codes_go_proto.QuestionnaireItemUsageModeCode)(nil),      // 449: google.fhir.stu3.proto.QuestionnaireItemUsageModeCode
	(*datatypes_go_proto.Annotation)(nil),                      // 450: google.fhir.stu3.proto.Annotation
	(*codes_go_proto.TemplateStatusCodeCode)(nil),              // 451: google.fhir.stu3.proto.TemplateStatusCodeCode
	(*codes_go_proto.HL7WorkgroupCode)(nil),                    // 452: google.fhir.stu3.proto.HL7WorkgroupCode
	(*datatypes_go_proto.Time)(nil),                            // 453: google.fhir.stu3.proto.Time
}
var file_proto_google_fhir_proto_stu3_extensions_proto_depIdxs = []int32{
	403, // 0: google.fhir.stu3.proto.DataElementAdministrativeStatus.id:type_name -> google.fhir.stu3.proto.String
	404, // 1: google.fhir.stu3.proto.DataElementAdministrativeStatus.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 2: google.fhir.stu3.proto.DataElementChangeDescription.id:type_name -> google.fhir.stu3.proto.String
	403, // 3: google.fhir.stu3.proto.DataElementChangeDescription.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 4: google.fhir.stu3.proto.DataElementClassificationOrContext.id:type_name -> google.fhir.stu3.proto.String
	405, // 5: google.fhir.stu3.proto.DataElementClassificationOrContext.value_code:type_name -> google.fhir.stu3.proto.ClassificationOrContextCode
	403, // 6: google.fhir.stu3.proto.DataElementContactAddress.id:type_name -> google.fhir.stu3.proto.String
	406, // 7: google.fhir.stu3.proto.DataElementContactAddress.value_address:type_name -> google.fhir.stu3.proto.Address
	403, // 8: google.fhir.stu3.proto.DataElementDocumentReference.id:type_name -> google.fhir.stu3.proto.String
	407, // 9: google.fhir.stu3.proto.DataElementDocumentReference.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 10: google.fhir.stu3.proto.DataElementEffectivePeriod.id:type_name -> google.fhir.stu3.proto.String
	408, // 11: google.fhir.stu3.proto.DataElementEffectivePeriod.value_period:type_name -> google.fhir.stu3.proto.Period
	403, // 12: google.fhir.stu3.proto.DataElementIsDataElementConcept.id:type_name -> google.fhir.stu3.proto.String
	409, // 13: google.fhir.stu3.proto.DataElementIsDataElementConcept.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 14: google.fhir.stu3.proto.DataElementRegistryOrg.id:type_name -> google.fhir.stu3.proto.String
	407, // 15: google.fhir.stu3.proto.DataElementRegistryOrg.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 16: google.fhir.stu3.proto.DataElementSubmitterOrg.id:type_name -> google.fhir.stu3.proto.String
	407, // 17: google.fhir.stu3.proto.DataElementSubmitterOrg.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 18: google.fhir.stu3.proto.ElementDefinitionObjectClass.id:type_name -> google.fhir.stu3.proto.String
	410, // 19: google.fhir.stu3.proto.ElementDefinitionObjectClass.value_coding:type_name -> google.fhir.stu3.proto.Coding
	403, // 20: google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.id:type_name -> google.fhir.stu3.proto.String
	410, // 21: google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.value_coding:type_name -> google.fhir.stu3.proto.Coding
	403, // 22: google.fhir.stu3.proto.PermittedValueConceptmap.id:type_name -> google.fhir.stu3.proto.String
	407, // 23: google.fhir.stu3.proto.PermittedValueConceptmap.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 24: google.fhir.stu3.proto.PermittedValueValueset.id:type_name -> google.fhir.stu3.proto.String
	407, // 25: google.fhir.stu3.proto.PermittedValueValueset.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 26: google.fhir.stu3.proto.AllergyIntoleranceCertainty.id:type_name -> google.fhir.stu3.proto.String
	411, // 27: google.fhir.stu3.proto.AllergyIntoleranceCertainty.value_code:type_name -> google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode
	403, // 28: google.fhir.stu3.proto.AllergyIntoleranceDuration.id:type_name -> google.fhir.stu3.proto.String
	412, // 29: google.fhir.stu3.proto.AllergyIntoleranceDuration.value_duration:type_name -> google.fhir.stu3.proto.Duration
	403, // 30: google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.id:type_name -> google.fhir.stu3.proto.String
	404, // 31: google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 32: google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.id:type_name -> google.fhir.stu3.proto.String
	413, // 33: google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.value_age:type_name -> google.fhir.stu3.proto.Age
	403, // 34: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.id:type_name -> google.fhir.stu3.proto.String
	414, // 35: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 36: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.substance:type_name -> google.fhir.stu3.proto.CodeableConcept
	404, // 37: google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.exposure_risk:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 38: google.fhir.stu3.proto.AuditEventAccession.id:type_name -> google.fhir.stu3.proto.String
	415, // 39: google.fhir.stu3.proto.AuditEventAccession.value_identifier:type_name -> google.fhir.stu3.proto.Identifier
	403, // 40: google.fhir.stu3.proto.AuditEventAnonymized.id:type_name -> google.fhir.stu3.proto.String
	409, // 41: google.fhir.stu3.proto.AuditEventAnonymized.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 42: google.fhir.stu3.proto.AuditEventEncrypted.id:type_name -> google.fhir.stu3.proto.String
	409, // 43: google.fhir.stu3.proto.AuditEventEncrypted.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 44: google.fhir.stu3.proto.AuditEventInstance.id:type_name -> google.fhir.stu3.proto.String
	415, // 45: google.fhir.stu3.proto.AuditEventInstance.value_identifier:type_name -> google.fhir.stu3.proto.Identifier
	403, // 46: google.fhir.stu3.proto.AuditEventMPPS.id:type_name -> google.fhir.stu3.proto.String
	415, // 47: google.fhir.stu3.proto.AuditEventMPPS.value_identifier:type_name -> google.fhir.stu3.proto.Identifier
	403, // 48: google.fhir.stu3.proto.AuditEventNumberOfInstances.id:type_name -> google.fhir.stu3.proto.String
	416, // 49: google.fhir.stu3.proto.AuditEventNumberOfInstances.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 50: google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.id:type_name -> google.fhir.stu3.proto.String
	415, // 51: google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.value_identifier:type_name -> google.fhir.stu3.proto.Identifier
	403, // 52: google.fhir.stu3.proto.AuditEventSOPClass.id:type_name -> google.fhir.stu3.proto.String
	407, // 53: google.fhir.stu3.proto.AuditEventSOPClass.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 54: google.fhir.stu3.proto.PatientBirthPlace.id:type_name -> google.fhir.stu3.proto.String
	406, // 55: google.fhir.stu3.proto.PatientBirthPlace.value_address:type_name -> google.fhir.stu3.proto.Address
	403, // 56: google.fhir.stu3.proto.BodySiteInstance.id:type_name -> google.fhir.stu3.proto.String
	407, // 57: google.fhir.stu3.proto.BodySiteInstance.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 58: google.fhir.stu3.proto.CapabilityStatementExpectation.id:type_name -> google.fhir.stu3.proto.String
	417, // 59: google.fhir.stu3.proto.CapabilityStatementExpectation.value_code:type_name -> google.fhir.stu3.proto.ConformanceExpectationCode
	403, // 60: google.fhir.stu3.proto.CapabilityStatementProhibited.id:type_name -> google.fhir.stu3.proto.String
	409, // 61: google.fhir.stu3.proto.CapabilityStatementProhibited.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 62: google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.id:type_name -> google.fhir.stu3.proto.String
	414, // 63: google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 64: google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.required:type_name -> google.fhir.stu3.proto.String
	403, // 65: google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.optional:type_name -> google.fhir.stu3.proto.String
	403, // 66: google.fhir.stu3.proto.CapabilityStatementSupportedSystem.id:type_name -> google.fhir.stu3.proto.String
	418, // 67: google.fhir.stu3.proto.CapabilityStatementSupportedSystem.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 68: google.fhir.stu3.proto.CapabilityStatementWebsocket.id:type_name -> google.fhir.stu3.proto.String
	418, // 69: google.fhir.stu3.proto.CapabilityStatementWebsocket.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 70: google.fhir.stu3.proto.CarePlanActivityTitle.id:type_name -> google.fhir.stu3.proto.String
	403, // 71: google.fhir.stu3.proto.CarePlanActivityTitle.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 72: google.fhir.stu3.proto.CodeSystemAuthor.id:type_name -> google.fhir.stu3.proto.String
	403, // 73: google.fhir.stu3.proto.CodeSystemAuthor.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 74: google.fhir.stu3.proto.CodeSystemComment.id:type_name -> google.fhir.stu3.proto.String
	414, // 75: google.fhir.stu3.proto.CodeSystemComment.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 76: google.fhir.stu3.proto.CodeSystemComment.content:type_name -> google.fhir.stu3.proto.String
	419, // 77: google.fhir.stu3.proto.CodeSystemComment.timestamp:type_name -> google.fhir.stu3.proto.Instant
	403, // 78: google.fhir.stu3.proto.CodeSystemComments.id:type_name -> google.fhir.stu3.proto.String
	403, // 79: google.fhir.stu3.proto.CodeSystemComments.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 80: google.fhir.stu3.proto.CodeSystemConceptOrder.id:type_name -> google.fhir.stu3.proto.String
	416, // 81: google.fhir.stu3.proto.CodeSystemConceptOrder.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 82: google.fhir.stu3.proto.CodeSystemDeprecated.id:type_name -> google.fhir.stu3.proto.String
	409, // 83: google.fhir.stu3.proto.CodeSystemDeprecated.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 84: google.fhir.stu3.proto.CodeSystemEffectiveDate.id:type_name -> google.fhir.stu3.proto.String
	420, // 85: google.fhir.stu3.proto.CodeSystemEffectiveDate.value_date:type_name -> google.fhir.stu3.proto.Date
	403, // 86: google.fhir.stu3.proto.CodeSystemExpirationDate.id:type_name -> google.fhir.stu3.proto.String
	420, // 87: google.fhir.stu3.proto.CodeSystemExpirationDate.value_date:type_name -> google.fhir.stu3.proto.Date
	403, // 88: google.fhir.stu3.proto.CodeSystemHistory.id:type_name -> google.fhir.stu3.proto.String
	414, // 89: google.fhir.stu3.proto.CodeSystemHistory.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 90: google.fhir.stu3.proto.CodeSystemHistory.name:type_name -> google.fhir.stu3.proto.String
	376, // 91: google.fhir.stu3.proto.CodeSystemHistory.revision:type_name -> google.fhir.stu3.proto.CodeSystemHistory.Revision
	403, // 92: google.fhir.stu3.proto.CodeSystemKeyWord.id:type_name -> google.fhir.stu3.proto.String
	403, // 93: google.fhir.stu3.proto.CodeSystemKeyWord.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 94: google.fhir.stu3.proto.CodeSystemLabel.id:type_name -> google.fhir.stu3.proto.String
	403, // 95: google.fhir.stu3.proto.CodeSystemLabel.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 96: google.fhir.stu3.proto.CodeSystemMap.id:type_name -> google.fhir.stu3.proto.String
	407, // 97: google.fhir.stu3.proto.CodeSystemMap.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 98: google.fhir.stu3.proto.CodeSystemOrdinalValue.id:type_name -> google.fhir.stu3.proto.String
	421, // 99: google.fhir.stu3.proto.CodeSystemOrdinalValue.value_decimal:type_name -> google.fhir.stu3.proto.Decimal
	403, // 100: google.fhir.stu3.proto.CodeSystemOtherName.id:type_name -> google.fhir.stu3.proto.String
	414, // 101: google.fhir.stu3.proto.CodeSystemOtherName.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 102: google.fhir.stu3.proto.CodeSystemOtherName.name:type_name -> google.fhir.stu3.proto.String
	409, // 103: google.fhir.stu3.proto.CodeSystemOtherName.preferred:type_name -> google.fhir.stu3.proto.Boolean
	403, // 104: google.fhir.stu3.proto.CodeSystemReference.id:type_name -> google.fhir.stu3.proto.String
	418, // 105: google.fhir.stu3.proto.CodeSystemReference.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 106: google.fhir.stu3.proto.CodeSystemReplacedby.id:type_name -> google.fhir.stu3.proto.String
	410, // 107: google.fhir.stu3.proto.CodeSystemReplacedby.value_coding:type_name -> google.fhir.stu3.proto.Coding
	403, // 108: google.fhir.stu3.proto.CodeSystemSourceReference.id:type_name -> google.fhir.stu3.proto.String
	418, // 109: google.fhir.stu3.proto.CodeSystemSourceReference.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 110: google.fhir.stu3.proto.CodeSystemSubsumes.id:type_name -> google.fhir.stu3.proto.String
	422, // 111: google.fhir.stu3.proto.CodeSystemSubsumes.value_code:type_name -> google.fhir.stu3.proto.Code
	403, // 112: google.fhir.stu3.proto.CodeSystemTrustedExpansion.id:type_name -> google.fhir.stu3.proto.String
	418, // 113: google.fhir.stu3.proto.CodeSystemTrustedExpansion.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 114: google.fhir.stu3.proto.CodeSystemUsage.id:type_name -> google.fhir.stu3.proto.String
	414, // 115: google.fhir.stu3.proto.CodeSystemUsage.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 116: google.fhir.stu3.proto.CodeSystemUsage.user:type_name -> google.fhir.stu3.proto.String
	403, // 117: google.fhir.stu3.proto.CodeSystemUsage.use:type_name -> google.fhir.stu3.proto.String
	403, // 118: google.fhir.stu3.proto.CodeSystemWarning.id:type_name -> google.fhir.stu3.proto.String
	423, // 119: google.fhir.stu3.proto.CodeSystemWarning.value_markdown:type_name -> google.fhir.stu3.proto.Markdown
	403, // 120: google.fhir.stu3.proto.CodeSystemWorkflowStatus.id:type_name -> google.fhir.stu3.proto.String
	403, // 121: google.fhir.stu3.proto.CodeSystemWorkflowStatus.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 122: google.fhir.stu3.proto.CodingSctdescid.id:type_name -> google.fhir.stu3.proto.String
	424, // 123: google.fhir.stu3.proto.CodingSctdescid.value_id:type_name -> google.fhir.stu3.proto.Id
	403, // 124: google.fhir.stu3.proto.CommunicationMedia.id:type_name -> google.fhir.stu3.proto.String
	425, // 125: google.fhir.stu3.proto.CommunicationMedia.value_attachment:type_name -> google.fhir.stu3.proto.Attachment
	403, // 126: google.fhir.stu3.proto.CommunicationReasonNotPerformed.id:type_name -> google.fhir.stu3.proto.String
	404, // 127: google.fhir.stu3.proto.CommunicationReasonNotPerformed.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 128: google.fhir.stu3.proto.CommunicationRequestDefinition.id:type_name -> google.fhir.stu3.proto.String
	377, // 129: google.fhir.stu3.proto.CommunicationRequestDefinition.value:type_name -> google.fhir.stu3.proto.CommunicationRequestDefinition.Value
	403, // 130: google.fhir.stu3.proto.CommunicationRequestOrderedBy.id:type_name -> google.fhir.stu3.proto.String
	378, // 131: google.fhir.stu3.proto.CommunicationRequestOrderedBy.value:type_name -> google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value
	403, // 132: google.fhir.stu3.proto.CommunicationRequestReasonRejected.id:type_name -> google.fhir.stu3.proto.String
	404, // 133: google.fhir.stu3.proto.CommunicationRequestReasonRejected.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 134: google.fhir.stu3.proto.CommunicationRequestRelevantHistory.id:type_name -> google.fhir.stu3.proto.String
	407, // 135: google.fhir.stu3.proto.CommunicationRequestRelevantHistory.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 136: google.fhir.stu3.proto.CommunicationRequestSupportingInfo.id:type_name -> google.fhir.stu3.proto.String
	407, // 137: google.fhir.stu3.proto.CommunicationRequestSupportingInfo.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 138: google.fhir.stu3.proto.CompositionOtherConfidentiality.id:type_name -> google.fhir.stu3.proto.String
	410, // 139: google.fhir.stu3.proto.CompositionOtherConfidentiality.value_coding:type_name -> google.fhir.stu3.proto.Coding
	403, // 140: google.fhir.stu3.proto.ConceptMapBidirectional.id:type_name -> google.fhir.stu3.proto.String
	409, // 141: google.fhir.stu3.proto.ConceptMapBidirectional.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 142: google.fhir.stu3.proto.ConditionBasedOn.id:type_name -> google.fhir.stu3.proto.String
	379, // 143: google.fhir.stu3.proto.ConditionBasedOn.value:type_name -> google.fhir.stu3.proto.ConditionBasedOn.Value
	403, // 144: google.fhir.stu3.proto.ConditionCriticality.id:type_name -> google.fhir.stu3.proto.String
	404, // 145: google.fhir.stu3.proto.ConditionCriticality.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 146: google.fhir.stu3.proto.ConditionDefinition.id:type_name -> google.fhir.stu3.proto.String
	407, // 147: google.fhir.stu3.proto.ConditionDefinition.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 148: google.fhir.stu3.proto.ConditionDueTo.id:type_name -> google.fhir.stu3.proto.String
	380, // 149: google.fhir.stu3.proto.ConditionDueTo.value:type_name -> google.fhir.stu3.proto.ConditionDueTo.Value
	403, // 150: google.fhir.stu3.proto.ConditionOccurredFollowing.id:type_name -> google.fhir.stu3.proto.String
	381, // 151: google.fhir.stu3.proto.ConditionOccurredFollowing.value:type_name -> google.fhir.stu3.proto.ConditionOccurredFollowing.Value
	403, // 152: google.fhir.stu3.proto.ConditionOutcome.id:type_name -> google.fhir.stu3.proto.String
	404, // 153: google.fhir.stu3.proto.ConditionOutcome.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 154: google.fhir.stu3.proto.ConditionPartOf.id:type_name -> google.fhir.stu3.proto.String
	382, // 155: google.fhir.stu3.proto.ConditionPartOf.value:type_name -> google.fhir.stu3.proto.ConditionPartOf.Value
	403, // 156: google.fhir.stu3.proto.ConditionRuledOut.id:type_name -> google.fhir.stu3.proto.String
	407, // 157: google.fhir.stu3.proto.ConditionRuledOut.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 158: google.fhir.stu3.proto.ConditionTargetBodySite.id:type_name -> google.fhir.stu3.proto.String
	407, // 159: google.fhir.stu3.proto.ConditionTargetBodySite.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 160: google.fhir.stu3.proto.ConsentLocation.id:type_name -> google.fhir.stu3.proto.String
	407, // 161: google.fhir.stu3.proto.ConsentLocation.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 162: google.fhir.stu3.proto.ConsentNotificationEndpoint.id:type_name -> google.fhir.stu3.proto.String
	418, // 163: google.fhir.stu3.proto.ConsentNotificationEndpoint.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 164: google.fhir.stu3.proto.ConsentWitness.id:type_name -> google.fhir.stu3.proto.String
	383, // 165: google.fhir.stu3.proto.ConsentWitness.value:type_name -> google.fhir.stu3.proto.ConsentWitness.Value
	403, // 166: google.fhir.stu3.proto.CalculatedValue.id:type_name -> google.fhir.stu3.proto.String
	403, // 167: google.fhir.stu3.proto.CalculatedValue.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 168: google.fhir.stu3.proto.AttachmentCitation.id:type_name -> google.fhir.stu3.proto.String
	403, // 169: google.fhir.stu3.proto.AttachmentCitation.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 170: google.fhir.stu3.proto.CqifCondition.id:type_name -> google.fhir.stu3.proto.String
	403, // 171: google.fhir.stu3.proto.CqifCondition.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 172: google.fhir.stu3.proto.CqlExpression.id:type_name -> google.fhir.stu3.proto.String
	403, // 173: google.fhir.stu3.proto.CqlExpression.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 174: google.fhir.stu3.proto.FhirPathExpression.id:type_name -> google.fhir.stu3.proto.String
	403, // 175: google.fhir.stu3.proto.FhirPathExpression.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 176: google.fhir.stu3.proto.BasicEncounterClass.id:type_name -> google.fhir.stu3.proto.String
	404, // 177: google.fhir.stu3.proto.BasicEncounterClass.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 178: google.fhir.stu3.proto.BasicEncounterType.id:type_name -> google.fhir.stu3.proto.String
	404, // 179: google.fhir.stu3.proto.BasicEncounterType.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 180: google.fhir.stu3.proto.BasicInitiatingOrganization.id:type_name -> google.fhir.stu3.proto.String
	407, // 181: google.fhir.stu3.proto.BasicInitiatingOrganization.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 182: google.fhir.stu3.proto.BasicInitiatingPerson.id:type_name -> google.fhir.stu3.proto.String
	384, // 183: google.fhir.stu3.proto.BasicInitiatingPerson.value:type_name -> google.fhir.stu3.proto.BasicInitiatingPerson.Value
	403, // 184: google.fhir.stu3.proto.BasicReceivingOrganization.id:type_name -> google.fhir.stu3.proto.String
	407, // 185: google.fhir.stu3.proto.BasicReceivingOrganization.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 186: google.fhir.stu3.proto.BasicReceivingPerson.id:type_name -> google.fhir.stu3.proto.String
	385, // 187: google.fhir.stu3.proto.BasicReceivingPerson.value:type_name -> google.fhir.stu3.proto.BasicReceivingPerson.Value
	403, // 188: google.fhir.stu3.proto.BasicRecipientLanguage.id:type_name -> google.fhir.stu3.proto.String
	404, // 189: google.fhir.stu3.proto.BasicRecipientLanguage.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 190: google.fhir.stu3.proto.BasicRecipientType.id:type_name -> google.fhir.stu3.proto.String
	404, // 191: google.fhir.stu3.proto.BasicRecipientType.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 192: google.fhir.stu3.proto.BasicSystemUserLanguage.id:type_name -> google.fhir.stu3.proto.String
	404, // 193: google.fhir.stu3.proto.BasicSystemUserLanguage.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 194: google.fhir.stu3.proto.BasicSystemUserTaskContext.id:type_name -> google.fhir.stu3.proto.String
	404, // 195: google.fhir.stu3.proto.BasicSystemUserTaskContext.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 196: google.fhir.stu3.proto.BasicSystemUserType.id:type_name -> google.fhir.stu3.proto.String
	404, // 197: google.fhir.stu3.proto.BasicSystemUserType.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 198: google.fhir.stu3.proto.InitialValue.id:type_name -> google.fhir.stu3.proto.String
	403, // 199: google.fhir.stu3.proto.InitialValue.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 200: google.fhir.stu3.proto.CqifLibrary.id:type_name -> google.fhir.stu3.proto.String
	407, // 201: google.fhir.stu3.proto.CqifLibrary.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 202: google.fhir.stu3.proto.MeasureInfo.id:type_name -> google.fhir.stu3.proto.String
	414, // 203: google.fhir.stu3.proto.MeasureInfo.extension:type_name -> google.fhir.stu3.proto.Extension
	407, // 204: google.fhir.stu3.proto.MeasureInfo.measure:type_name -> google.fhir.stu3.proto.Reference
	415, // 205: google.fhir.stu3.proto.MeasureInfo.group_identifier:type_name -> google.fhir.stu3.proto.Identifier
	415, // 206: google.fhir.stu3.proto.MeasureInfo.population_identifier:type_name -> google.fhir.stu3.proto.Identifier
	403, // 207: google.fhir.stu3.proto.QuestionnaireOptionCode.id:type_name -> google.fhir.stu3.proto.String
	404, // 208: google.fhir.stu3.proto.QuestionnaireOptionCode.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 209: google.fhir.stu3.proto.AttachmentQualityOfEvidence.id:type_name -> google.fhir.stu3.proto.String
	404, // 210: google.fhir.stu3.proto.AttachmentQualityOfEvidence.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 211: google.fhir.stu3.proto.CodingSourceValueSet.id:type_name -> google.fhir.stu3.proto.String
	418, // 212: google.fhir.stu3.proto.CodingSourceValueSet.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 213: google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.id:type_name -> google.fhir.stu3.proto.String
	404, // 214: google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 215: google.fhir.stu3.proto.DataAbsentReason.id:type_name -> google.fhir.stu3.proto.String
	426, // 216: google.fhir.stu3.proto.DataAbsentReason.value_code:type_name -> google.fhir.stu3.proto.DataAbsentReasonCode
	403, // 217: google.fhir.stu3.proto.StructureDefinitionDatadictionary.id:type_name -> google.fhir.stu3.proto.String
	403, // 218: google.fhir.stu3.proto.StructureDefinitionDatadictionary.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 219: google.fhir.stu3.proto.DeviceDin.id:type_name -> google.fhir.stu3.proto.String
	415, // 220: google.fhir.stu3.proto.DeviceDin.value_identifier:type_name -> google.fhir.stu3.proto.Identifier
	403, // 221: google.fhir.stu3.proto.DeviceImplantStatus.id:type_name -> google.fhir.stu3.proto.String
	427, // 222: google.fhir.stu3.proto.DeviceImplantStatus.value_code:type_name -> google.fhir.stu3.proto.ImplantStatusCode
	403, // 223: google.fhir.stu3.proto.DeviceRequestPatientInstruction.id:type_name -> google.fhir.stu3.proto.String
	414, // 224: google.fhir.stu3.proto.DeviceRequestPatientInstruction.extension:type_name -> google.fhir.stu3.proto.Extension
	428, // 225: google.fhir.stu3.proto.DeviceRequestPatientInstruction.lang:type_name -> google.fhir.stu3.proto.LanguageCode
	403, // 226: google.fhir.stu3.proto.DeviceRequestPatientInstruction.content:type_name -> google.fhir.stu3.proto.String
	403, // 227: google.fhir.stu3.proto.DeviceRequestReasonRejected.id:type_name -> google.fhir.stu3.proto.String
	404, // 228: google.fhir.stu3.proto.DeviceRequestReasonRejected.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 229: google.fhir.stu3.proto.DiagnosticReportAddendumOf.id:type_name -> google.fhir.stu3.proto.String
	407, // 230: google.fhir.stu3.proto.DiagnosticReportAddendumOf.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 231: google.fhir.stu3.proto.DiagnosticReportExtends.id:type_name -> google.fhir.stu3.proto.String
	407, // 232: google.fhir.stu3.proto.DiagnosticReportExtends.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 233: google.fhir.stu3.proto.DiagnosticReportAnalysis.id:type_name -> google.fhir.stu3.proto.String
	414, // 234: google.fhir.stu3.proto.DiagnosticReportAnalysis.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 235: google.fhir.stu3.proto.DiagnosticReportAnalysis.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	404, // 236: google.fhir.stu3.proto.DiagnosticReportAnalysis.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 237: google.fhir.stu3.proto.DiagnosticReportAssessedCondition.id:type_name -> google.fhir.stu3.proto.String
	407, // 238: google.fhir.stu3.proto.DiagnosticReportAssessedCondition.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 239: google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.id:type_name -> google.fhir.stu3.proto.String
	407, // 240: google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 241: google.fhir.stu3.proto.DiagnosticReportLocationPerformed.id:type_name -> google.fhir.stu3.proto.String
	407, // 242: google.fhir.stu3.proto.DiagnosticReportLocationPerformed.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 243: google.fhir.stu3.proto.DiagnosticReportReplaces.id:type_name -> google.fhir.stu3.proto.String
	407, // 244: google.fhir.stu3.proto.DiagnosticReportReplaces.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 245: google.fhir.stu3.proto.DiagnosticReportSummaryOf.id:type_name -> google.fhir.stu3.proto.String
	407, // 246: google.fhir.stu3.proto.DiagnosticReportSummaryOf.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 247: google.fhir.stu3.proto.ElementDefinitionAllowedUnits.id:type_name -> google.fhir.stu3.proto.String
	386, // 248: google.fhir.stu3.proto.ElementDefinitionAllowedUnits.value:type_name -> google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value
	403, // 249: google.fhir.stu3.proto.ElementDefinitionBestpractice.id:type_name -> google.fhir.stu3.proto.String
	387, // 250: google.fhir.stu3.proto.ElementDefinitionBestpractice.value:type_name -> google.fhir.stu3.proto.ElementDefinitionBestpractice.Value
	403, // 251: google.fhir.stu3.proto.ElementDefinitionBindingName.id:type_name -> google.fhir.stu3.proto.String
	403, // 252: google.fhir.stu3.proto.ElementDefinitionBindingName.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 253: google.fhir.stu3.proto.ElementDefinitionEquivalence.id:type_name -> google.fhir.stu3.proto.String
	429, // 254: google.fhir.stu3.proto.ElementDefinitionEquivalence.value_code:type_name -> google.fhir.stu3.proto.ConceptMapEquivalenceCode
	403, // 255: google.fhir.stu3.proto.ElementDefinitionIdentifier.id:type_name -> google.fhir.stu3.proto.String
	415, // 256: google.fhir.stu3.proto.ElementDefinitionIdentifier.value_identifier:type_name -> google.fhir.stu3.proto.Identifier
	403, // 257: google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.id:type_name -> google.fhir.stu3.proto.String
	388, // 258: google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.value:type_name -> google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value
	403, // 259: google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.id:type_name -> google.fhir.stu3.proto.String
	409, // 260: google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 261: google.fhir.stu3.proto.ElementDefinitionMaxValueSet.id:type_name -> google.fhir.stu3.proto.String
	389, // 262: google.fhir.stu3.proto.ElementDefinitionMaxValueSet.value:type_name -> google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value
	403, // 263: google.fhir.stu3.proto.ElementDefinitionMinValueSet.id:type_name -> google.fhir.stu3.proto.String
	390, // 264: google.fhir.stu3.proto.ElementDefinitionMinValueSet.value:type_name -> google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value
	403, // 265: google.fhir.stu3.proto.Namespace.id:type_name -> google.fhir.stu3.proto.String
	418, // 266: google.fhir.stu3.proto.Namespace.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 267: google.fhir.stu3.proto.ElementDefinitionQuestion.id:type_name -> google.fhir.stu3.proto.String
	403, // 268: google.fhir.stu3.proto.ElementDefinitionQuestion.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 269: google.fhir.stu3.proto.ElementDefinitionSelector.id:type_name -> google.fhir.stu3.proto.String
	403, // 270: google.fhir.stu3.proto.ElementDefinitionSelector.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 271: google.fhir.stu3.proto.ElementDefinitionTranslatable.id:type_name -> google.fhir.stu3.proto.String
	409, // 272: google.fhir.stu3.proto.ElementDefinitionTranslatable.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 273: google.fhir.stu3.proto.EncounterAssociatedEncounter.id:type_name -> google.fhir.stu3.proto.String
	407, // 274: google.fhir.stu3.proto.EncounterAssociatedEncounter.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 275: google.fhir.stu3.proto.EncounterModeOfArrival.id:type_name -> google.fhir.stu3.proto.String
	410, // 276: google.fhir.stu3.proto.EncounterModeOfArrival.value_coding:type_name -> google.fhir.stu3.proto.Coding
	403, // 277: google.fhir.stu3.proto.EncounterPrimaryDiagnosis.id:type_name -> google.fhir.stu3.proto.String
	430, // 278: google.fhir.stu3.proto.EncounterPrimaryDiagnosis.value_positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	403, // 279: google.fhir.stu3.proto.EncounterReasonCancelled.id:type_name -> google.fhir.stu3.proto.String
	404, // 280: google.fhir.stu3.proto.EncounterReasonCancelled.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 281: google.fhir.stu3.proto.EntryFormat.id:type_name -> google.fhir.stu3.proto.String
	403, // 282: google.fhir.stu3.proto.EntryFormat.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 283: google.fhir.stu3.proto.Definition.id:type_name -> google.fhir.stu3.proto.String
	391, // 284: google.fhir.stu3.proto.Definition.value:type_name -> google.fhir.stu3.proto.Definition.Value
	403, // 285: google.fhir.stu3.proto.DiagnosticReportNotDone.id:type_name -> google.fhir.stu3.proto.String
	409, // 286: google.fhir.stu3.proto.DiagnosticReportNotDone.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 287: google.fhir.stu3.proto.OnBehalfOf.id:type_name -> google.fhir.stu3.proto.String
	407, // 288: google.fhir.stu3.proto.OnBehalfOf.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 289: google.fhir.stu3.proto.PartOf.id:type_name -> google.fhir.stu3.proto.String
	407, // 290: google.fhir.stu3.proto.PartOf.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 291: google.fhir.stu3.proto.ObservationPerformerRole.id:type_name -> google.fhir.stu3.proto.String
	404, // 292: google.fhir.stu3.proto.ObservationPerformerRole.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 293: google.fhir.stu3.proto.ReasonCode.id:type_name -> google.fhir.stu3.proto.String
	404, // 294: google.fhir.stu3.proto.ReasonCode.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 295: google.fhir.stu3.proto.ReasonReference.id:type_name -> google.fhir.stu3.proto.String
	392, // 296: google.fhir.stu3.proto.ReasonReference.value:type_name -> google.fhir.stu3.proto.ReasonReference.Value
	403, // 297: google.fhir.stu3.proto.FamilyMemberHistoryObservation.id:type_name -> google.fhir.stu3.proto.String
	407, // 298: google.fhir.stu3.proto.FamilyMemberHistoryObservation.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 299: google.fhir.stu3.proto.FamilyMemberHistoryParent.id:type_name -> google.fhir.stu3.proto.String
	414, // 300: google.fhir.stu3.proto.FamilyMemberHistoryParent.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 301: google.fhir.stu3.proto.FamilyMemberHistoryParent.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	407, // 302: google.fhir.stu3.proto.FamilyMemberHistoryParent.reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 303: google.fhir.stu3.proto.FamilyMemberHistorySibling.id:type_name -> google.fhir.stu3.proto.String
	414, // 304: google.fhir.stu3.proto.FamilyMemberHistorySibling.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 305: google.fhir.stu3.proto.FamilyMemberHistorySibling.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	407, // 306: google.fhir.stu3.proto.FamilyMemberHistorySibling.reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 307: google.fhir.stu3.proto.FamilyMemberHistoryAbatement.id:type_name -> google.fhir.stu3.proto.String
	393, // 308: google.fhir.stu3.proto.FamilyMemberHistoryAbatement.value:type_name -> google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value
	403, // 309: google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.id:type_name -> google.fhir.stu3.proto.String
	407, // 310: google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 311: google.fhir.stu3.proto.FamilyMemberHistorySeverity.id:type_name -> google.fhir.stu3.proto.String
	404, // 312: google.fhir.stu3.proto.FamilyMemberHistorySeverity.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 313: google.fhir.stu3.proto.FamilyMemberHistoryType.id:type_name -> google.fhir.stu3.proto.String
	404, // 314: google.fhir.stu3.proto.FamilyMemberHistoryType.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 315: google.fhir.stu3.proto.FlagDetail.id:type_name -> google.fhir.stu3.proto.String
	407, // 316: google.fhir.stu3.proto.FlagDetail.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 317: google.fhir.stu3.proto.FlagPriority.id:type_name -> google.fhir.stu3.proto.String
	404, // 318: google.fhir.stu3.proto.FlagPriority.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 319: google.fhir.stu3.proto.AddressGeolocation.id:type_name -> google.fhir.stu3.proto.String
	414, // 320: google.fhir.stu3.proto.AddressGeolocation.extension:type_name -> google.fhir.stu3.proto.Extension
	421, // 321: google.fhir.stu3.proto.AddressGeolocation.latitude:type_name -> google.fhir.stu3.proto.Decimal
	421, // 322: google.fhir.stu3.proto.AddressGeolocation.longitude:type_name -> google.fhir.stu3.proto.Decimal
	403, // 323: google.fhir.stu3.proto.GoalAcceptance.id:type_name -> google.fhir.stu3.proto.String
	414, // 324: google.fhir.stu3.proto.GoalAcceptance.extension:type_name -> google.fhir.stu3.proto.Extension
	407, // 325: google.fhir.stu3.proto.GoalAcceptance.individual:type_name -> google.fhir.stu3.proto.Reference
	431, // 326: google.fhir.stu3.proto.GoalAcceptance.status:type_name -> google.fhir.stu3.proto.GoalAcceptanceStatusCode
	404, // 327: google.fhir.stu3.proto.GoalAcceptance.priority:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 328: google.fhir.stu3.proto.ResourcePertainsToGoal.id:type_name -> google.fhir.stu3.proto.String
	407, // 329: google.fhir.stu3.proto.ResourcePertainsToGoal.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 330: google.fhir.stu3.proto.GoalReasonRejected.id:type_name -> google.fhir.stu3.proto.String
	404, // 331: google.fhir.stu3.proto.GoalReasonRejected.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 332: google.fhir.stu3.proto.GoalRelationship.id:type_name -> google.fhir.stu3.proto.String
	414, // 333: google.fhir.stu3.proto.GoalRelationship.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 334: google.fhir.stu3.proto.GoalRelationship.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	407, // 335: google.fhir.stu3.proto.GoalRelationship.target:type_name -> google.fhir.stu3.proto.Reference
	403, // 336: google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.id:type_name -> google.fhir.stu3.proto.String
	404, // 337: google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 338: google.fhir.stu3.proto.DiagnosticReportGlstring.id:type_name -> google.fhir.stu3.proto.String
	414, // 339: google.fhir.stu3.proto.DiagnosticReportGlstring.extension:type_name -> google.fhir.stu3.proto.Extension
	418, // 340: google.fhir.stu3.proto.DiagnosticReportGlstring.url:type_name -> google.fhir.stu3.proto.Uri
	403, // 341: google.fhir.stu3.proto.DiagnosticReportGlstring.text:type_name -> google.fhir.stu3.proto.String
	403, // 342: google.fhir.stu3.proto.DiagnosticReportHaploid.id:type_name -> google.fhir.stu3.proto.String
	414, // 343: google.fhir.stu3.proto.DiagnosticReportHaploid.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 344: google.fhir.stu3.proto.DiagnosticReportHaploid.locus:type_name -> google.fhir.stu3.proto.CodeableConcept
	404, // 345: google.fhir.stu3.proto.DiagnosticReportHaploid.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	404, // 346: google.fhir.stu3.proto.DiagnosticReportHaploid.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 347: google.fhir.stu3.proto.DiagnosticReportMethod.id:type_name -> google.fhir.stu3.proto.String
	404, // 348: google.fhir.stu3.proto.DiagnosticReportMethod.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 349: google.fhir.stu3.proto.BundleHttpResponseHeader.id:type_name -> google.fhir.stu3.proto.String
	403, // 350: google.fhir.stu3.proto.BundleHttpResponseHeader.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 351: google.fhir.stu3.proto.HumanNameAssemblyOrder.id:type_name -> google.fhir.stu3.proto.String
	432, // 352: google.fhir.stu3.proto.HumanNameAssemblyOrder.value_code:type_name -> google.fhir.stu3.proto.HumanNameAssemblyOrderCode
	403, // 353: google.fhir.stu3.proto.HumanNameFathersFamily.id:type_name -> google.fhir.stu3.proto.String
	403, // 354: google.fhir.stu3.proto.HumanNameFathersFamily.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 355: google.fhir.stu3.proto.HumanNameMothersFamily.id:type_name -> google.fhir.stu3.proto.String
	403, // 356: google.fhir.stu3.proto.HumanNameMothersFamily.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 357: google.fhir.stu3.proto.HumanNameOwnName.id:type_name -> google.fhir.stu3.proto.String
	403, // 358: google.fhir.stu3.proto.HumanNameOwnName.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 359: google.fhir.stu3.proto.HumanNameOwnPrefix.id:type_name -> google.fhir.stu3.proto.String
	403, // 360: google.fhir.stu3.proto.HumanNameOwnPrefix.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 361: google.fhir.stu3.proto.HumanNamePartnerName.id:type_name -> google.fhir.stu3.proto.String
	403, // 362: google.fhir.stu3.proto.HumanNamePartnerName.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 363: google.fhir.stu3.proto.HumanNamePartnerPrefix.id:type_name -> google.fhir.stu3.proto.String
	403, // 364: google.fhir.stu3.proto.HumanNamePartnerPrefix.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 365: google.fhir.stu3.proto.IdentifierValidDate.id:type_name -> google.fhir.stu3.proto.String
	433, // 366: google.fhir.stu3.proto.IdentifierValidDate.value_date_time:type_name -> google.fhir.stu3.proto.DateTime
	403, // 367: google.fhir.stu3.proto.ImplementationGuidePage.id:type_name -> google.fhir.stu3.proto.String
	418, // 368: google.fhir.stu3.proto.ImplementationGuidePage.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 369: google.fhir.stu3.proto.AddressADUse.id:type_name -> google.fhir.stu3.proto.String
	434, // 370: google.fhir.stu3.proto.AddressADUse.value_code:type_name -> google.fhir.stu3.proto.PostalAddressUseTypeCode
	403, // 371: google.fhir.stu3.proto.AddressADXPAdditionalLocator.id:type_name -> google.fhir.stu3.proto.String
	403, // 372: google.fhir.stu3.proto.AddressADXPAdditionalLocator.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 373: google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.id:type_name -> google.fhir.stu3.proto.String
	403, // 374: google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 375: google.fhir.stu3.proto.AddressADXPCareOf.id:type_name -> google.fhir.stu3.proto.String
	403, // 376: google.fhir.stu3.proto.AddressADXPCareOf.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 377: google.fhir.stu3.proto.AddressADXPCensusTract.id:type_name -> google.fhir.stu3.proto.String
	403, // 378: google.fhir.stu3.proto.AddressADXPCensusTract.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 379: google.fhir.stu3.proto.AddressADXPDelimiter.id:type_name -> google.fhir.stu3.proto.String
	403, // 380: google.fhir.stu3.proto.AddressADXPDelimiter.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 381: google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.id:type_name -> google.fhir.stu3.proto.String
	403, // 382: google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 383: google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.id:type_name -> google.fhir.stu3.proto.String
	403, // 384: google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 385: google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.id:type_name -> google.fhir.stu3.proto.String
	403, // 386: google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 387: google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.id:type_name -> google.fhir.stu3.proto.String
	403, // 388: google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 389: google.fhir.stu3.proto.AddressADXPDeliveryMode.id:type_name -> google.fhir.stu3.proto.String
	403, // 390: google.fhir.stu3.proto.AddressADXPDeliveryMode.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 391: google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.id:type_name -> google.fhir.stu3.proto.String
	403, // 392: google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 393: google.fhir.stu3.proto.AddressADXPDirection.id:type_name -> google.fhir.stu3.proto.String
	403, // 394: google.fhir.stu3.proto.AddressADXPDirection.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 395: google.fhir.stu3.proto.AddressADXPHouseNumber.id:type_name -> google.fhir.stu3.proto.String
	403, // 396: google.fhir.stu3.proto.AddressADXPHouseNumber.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 397: google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.id:type_name -> google.fhir.stu3.proto.String
	403, // 398: google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 399: google.fhir.stu3.proto.AddressADXPPostBox.id:type_name -> google.fhir.stu3.proto.String
	403, // 400: google.fhir.stu3.proto.AddressADXPPostBox.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 401: google.fhir.stu3.proto.AddressADXPPrecinct.id:type_name -> google.fhir.stu3.proto.String
	403, // 402: google.fhir.stu3.proto.AddressADXPPrecinct.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 403: google.fhir.stu3.proto.AddressADXPStreetAddressLine.id:type_name -> google.fhir.stu3.proto.String
	403, // 404: google.fhir.stu3.proto.AddressADXPStreetAddressLine.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 405: google.fhir.stu3.proto.AddressADXPStreetName.id:type_name -> google.fhir.stu3.proto.String
	403, // 406: google.fhir.stu3.proto.AddressADXPStreetName.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 407: google.fhir.stu3.proto.AddressADXPStreetNameBase.id:type_name -> google.fhir.stu3.proto.String
	403, // 408: google.fhir.stu3.proto.AddressADXPStreetNameBase.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 409: google.fhir.stu3.proto.AddressADXPStreetNameType.id:type_name -> google.fhir.stu3.proto.String
	403, // 410: google.fhir.stu3.proto.AddressADXPStreetNameType.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 411: google.fhir.stu3.proto.AddressADXPUnitID.id:type_name -> google.fhir.stu3.proto.String
	403, // 412: google.fhir.stu3.proto.AddressADXPUnitID.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 413: google.fhir.stu3.proto.AddressADXPUnitType.id:type_name -> google.fhir.stu3.proto.String
	403, // 414: google.fhir.stu3.proto.AddressADXPUnitType.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 415: google.fhir.stu3.proto.CodingCOValue.id:type_name -> google.fhir.stu3.proto.String
	421, // 416: google.fhir.stu3.proto.CodingCOValue.value_decimal:type_name -> google.fhir.stu3.proto.Decimal
	403, // 417: google.fhir.stu3.proto.HumanNameENQualifier.id:type_name -> google.fhir.stu3.proto.String
	435, // 418: google.fhir.stu3.proto.HumanNameENQualifier.value_code:type_name -> google.fhir.stu3.proto.EntityNamePartQualifierCode
	403, // 419: google.fhir.stu3.proto.HumanNameENRepresentation.id:type_name -> google.fhir.stu3.proto.String
	436, // 420: google.fhir.stu3.proto.HumanNameENRepresentation.value_code:type_name -> google.fhir.stu3.proto.NameRepresentationUseCode
	403, // 421: google.fhir.stu3.proto.AnyNullFlavor.id:type_name -> google.fhir.stu3.proto.String
	437, // 422: google.fhir.stu3.proto.AnyNullFlavor.value_code:type_name -> google.fhir.stu3.proto.NullFlavorCode
	403, // 423: google.fhir.stu3.proto.AnyPreferred.id:type_name -> google.fhir.stu3.proto.String
	409, // 424: google.fhir.stu3.proto.AnyPreferred.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 425: google.fhir.stu3.proto.StringSCCoding.id:type_name -> google.fhir.stu3.proto.String
	410, // 426: google.fhir.stu3.proto.StringSCCoding.value_coding:type_name -> google.fhir.stu3.proto.Coding
	403, // 427: google.fhir.stu3.proto.ContactPointTELAddress.id:type_name -> google.fhir.stu3.proto.String
	418, // 428: google.fhir.stu3.proto.ContactPointTELAddress.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 429: google.fhir.stu3.proto.QuantityUncertainty.id:type_name -> google.fhir.stu3.proto.String
	421, // 430: google.fhir.stu3.proto.QuantityUncertainty.value_decimal:type_name -> google.fhir.stu3.proto.Decimal
	403, // 431: google.fhir.stu3.proto.QuantityUncertaintyType.id:type_name -> google.fhir.stu3.proto.String
	438, // 432: google.fhir.stu3.proto.QuantityUncertaintyType.value_code:type_name -> google.fhir.stu3.proto.ProbabilityDistributionTypeCode
	403, // 433: google.fhir.stu3.proto.AnyVerification.id:type_name -> google.fhir.stu3.proto.String
	404, // 434: google.fhir.stu3.proto.AnyVerification.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 435: google.fhir.stu3.proto.LocationAlias.id:type_name -> google.fhir.stu3.proto.String
	403, // 436: google.fhir.stu3.proto.LocationAlias.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 437: google.fhir.stu3.proto.BundleLocationDistance.id:type_name -> google.fhir.stu3.proto.String
	439, // 438: google.fhir.stu3.proto.BundleLocationDistance.value_distance:type_name -> google.fhir.stu3.proto.Distance
	403, // 439: google.fhir.stu3.proto.DataElementMapSourcePublisher.id:type_name -> google.fhir.stu3.proto.String
	403, // 440: google.fhir.stu3.proto.DataElementMapSourcePublisher.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 441: google.fhir.stu3.proto.BundleMatchGrade.id:type_name -> google.fhir.stu3.proto.String
	440, // 442: google.fhir.stu3.proto.BundleMatchGrade.value_code:type_name -> google.fhir.stu3.proto.MatchGradeCode
	403, // 443: google.fhir.stu3.proto.MaxDecimalPlaces.id:type_name -> google.fhir.stu3.proto.String
	416, // 444: google.fhir.stu3.proto.MaxDecimalPlaces.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 445: google.fhir.stu3.proto.MaxSize.id:type_name -> google.fhir.stu3.proto.String
	421, // 446: google.fhir.stu3.proto.MaxSize.value_decimal:type_name -> google.fhir.stu3.proto.Decimal
	403, // 447: google.fhir.stu3.proto.QuestionnaireMaxValue.id:type_name -> google.fhir.stu3.proto.String
	394, // 448: google.fhir.stu3.proto.QuestionnaireMaxValue.value:type_name -> google.fhir.stu3.proto.QuestionnaireMaxValue.Value
	403, // 449: google.fhir.stu3.proto.MedicationUsualRoute.id:type_name -> google.fhir.stu3.proto.String
	404, // 450: google.fhir.stu3.proto.MedicationUsualRoute.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 451: google.fhir.stu3.proto.MedicationDispenseValidityPeriod.id:type_name -> google.fhir.stu3.proto.String
	408, // 452: google.fhir.stu3.proto.MedicationDispenseValidityPeriod.value_period:type_name -> google.fhir.stu3.proto.Period
	403, // 453: google.fhir.stu3.proto.MedicationStatementPrescriber.id:type_name -> google.fhir.stu3.proto.String
	407, // 454: google.fhir.stu3.proto.MedicationStatementPrescriber.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 455: google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.id:type_name -> google.fhir.stu3.proto.String
	441, // 456: google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.value_code:type_name -> google.fhir.stu3.proto.MessageHeaderResponseRequestCode
	403, // 457: google.fhir.stu3.proto.MimeType.id:type_name -> google.fhir.stu3.proto.String
	442, // 458: google.fhir.stu3.proto.MimeType.value_code:type_name -> google.fhir.stu3.proto.MimeTypeCode
	403, // 459: google.fhir.stu3.proto.MinLength.id:type_name -> google.fhir.stu3.proto.String
	416, // 460: google.fhir.stu3.proto.MinLength.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 461: google.fhir.stu3.proto.QuestionnaireMinValue.id:type_name -> google.fhir.stu3.proto.String
	395, // 462: google.fhir.stu3.proto.QuestionnaireMinValue.value:type_name -> google.fhir.stu3.proto.QuestionnaireMinValue.Value
	403, // 463: google.fhir.stu3.proto.ObservationBodyPosition.id:type_name -> google.fhir.stu3.proto.String
	404, // 464: google.fhir.stu3.proto.ObservationBodyPosition.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 465: google.fhir.stu3.proto.ObservationDelta.id:type_name -> google.fhir.stu3.proto.String
	404, // 466: google.fhir.stu3.proto.ObservationDelta.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 467: google.fhir.stu3.proto.ObservationEventTiming.id:type_name -> google.fhir.stu3.proto.String
	414, // 468: google.fhir.stu3.proto.ObservationEventTiming.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 469: google.fhir.stu3.proto.ObservationEventTiming.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	443, // 470: google.fhir.stu3.proto.ObservationEventTiming.offset:type_name -> google.fhir.stu3.proto.Quantity
	403, // 471: google.fhir.stu3.proto.ObservationFocalSubject.id:type_name -> google.fhir.stu3.proto.String
	404, // 472: google.fhir.stu3.proto.ObservationFocalSubject.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 473: google.fhir.stu3.proto.ObservationAlleleName.id:type_name -> google.fhir.stu3.proto.String
	404, // 474: google.fhir.stu3.proto.ObservationAlleleName.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 475: google.fhir.stu3.proto.ObservationAllelicFrequency.id:type_name -> google.fhir.stu3.proto.String
	421, // 476: google.fhir.stu3.proto.ObservationAllelicFrequency.value_decimal:type_name -> google.fhir.stu3.proto.Decimal
	403, // 477: google.fhir.stu3.proto.ObservationAllelicState.id:type_name -> google.fhir.stu3.proto.String
	404, // 478: google.fhir.stu3.proto.ObservationAllelicState.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 479: google.fhir.stu3.proto.ObservationAminoAcidChangeName.id:type_name -> google.fhir.stu3.proto.String
	404, // 480: google.fhir.stu3.proto.ObservationAminoAcidChangeName.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 481: google.fhir.stu3.proto.ObservationAminoAcidChangeType.id:type_name -> google.fhir.stu3.proto.String
	404, // 482: google.fhir.stu3.proto.ObservationAminoAcidChangeType.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 483: google.fhir.stu3.proto.ObservationCopyNumberEvent.id:type_name -> google.fhir.stu3.proto.String
	404, // 484: google.fhir.stu3.proto.ObservationCopyNumberEvent.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 485: google.fhir.stu3.proto.ObservationDNARegionName.id:type_name -> google.fhir.stu3.proto.String
	403, // 486: google.fhir.stu3.proto.ObservationDNARegionName.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 487: google.fhir.stu3.proto.ObservationDNASequenceVariantName.id:type_name -> google.fhir.stu3.proto.String
	404, // 488: google.fhir.stu3.proto.ObservationDNASequenceVariantName.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 489: google.fhir.stu3.proto.ObservationDNASequenceVariantType.id:type_name -> google.fhir.stu3.proto.String
	404, // 490: google.fhir.stu3.proto.ObservationDNASequenceVariantType.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 491: google.fhir.stu3.proto.ObservationDNAVariantId.id:type_name -> google.fhir.stu3.proto.String
	404, // 492: google.fhir.stu3.proto.ObservationDNAVariantId.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 493: google.fhir.stu3.proto.ObservationGene.id:type_name -> google.fhir.stu3.proto.String
	404, // 494: google.fhir.stu3.proto.ObservationGene.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 495: google.fhir.stu3.proto.ObservationGenomicSourceClass.id:type_name -> google.fhir.stu3.proto.String
	404, // 496: google.fhir.stu3.proto.ObservationGenomicSourceClass.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 497: google.fhir.stu3.proto.ObservationInterpretation.id:type_name -> google.fhir.stu3.proto.String
	407, // 498: google.fhir.stu3.proto.ObservationInterpretation.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 499: google.fhir.stu3.proto.ObservationPhaseSet.id:type_name -> google.fhir.stu3.proto.String
	418, // 500: google.fhir.stu3.proto.ObservationPhaseSet.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 501: google.fhir.stu3.proto.ObservationSequence.id:type_name -> google.fhir.stu3.proto.String
	407, // 502: google.fhir.stu3.proto.ObservationSequence.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 503: google.fhir.stu3.proto.ObservationTimeOffset.id:type_name -> google.fhir.stu3.proto.String
	416, // 504: google.fhir.stu3.proto.ObservationTimeOffset.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 505: google.fhir.stu3.proto.AllergyIntoleranceAdministration.id:type_name -> google.fhir.stu3.proto.String
	407, // 506: google.fhir.stu3.proto.AllergyIntoleranceAdministration.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 507: google.fhir.stu3.proto.AllergyIntoleranceCareplan.id:type_name -> google.fhir.stu3.proto.String
	407, // 508: google.fhir.stu3.proto.AllergyIntoleranceCareplan.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 509: google.fhir.stu3.proto.AllergyIntoleranceExposureDate.id:type_name -> google.fhir.stu3.proto.String
	433, // 510: google.fhir.stu3.proto.AllergyIntoleranceExposureDate.value_date_time:type_name -> google.fhir.stu3.proto.DateTime
	403, // 511: google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.id:type_name -> google.fhir.stu3.proto.String
	403, // 512: google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 513: google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.id:type_name -> google.fhir.stu3.proto.String
	412, // 514: google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.value_duration:type_name -> google.fhir.stu3.proto.Duration
	403, // 515: google.fhir.stu3.proto.AllergyIntoleranceLocation.id:type_name -> google.fhir.stu3.proto.String
	404, // 516: google.fhir.stu3.proto.AllergyIntoleranceLocation.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 517: google.fhir.stu3.proto.AllergyIntoleranceManagement.id:type_name -> google.fhir.stu3.proto.String
	403, // 518: google.fhir.stu3.proto.AllergyIntoleranceManagement.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 519: google.fhir.stu3.proto.AllergyIntoleranceTest.id:type_name -> google.fhir.stu3.proto.String
	396, // 520: google.fhir.stu3.proto.AllergyIntoleranceTest.value:type_name -> google.fhir.stu3.proto.AllergyIntoleranceTest.Value
	403, // 521: google.fhir.stu3.proto.OperationOutcomeAuthority.id:type_name -> google.fhir.stu3.proto.String
	418, // 522: google.fhir.stu3.proto.OperationOutcomeAuthority.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 523: google.fhir.stu3.proto.OperationOutcomeDetectedIssue.id:type_name -> google.fhir.stu3.proto.String
	407, // 524: google.fhir.stu3.proto.OperationOutcomeDetectedIssue.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 525: google.fhir.stu3.proto.OperationOutcomeIssueSource.id:type_name -> google.fhir.stu3.proto.String
	403, // 526: google.fhir.stu3.proto.OperationOutcomeIssueSource.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 527: google.fhir.stu3.proto.OrganizationAlias.id:type_name -> google.fhir.stu3.proto.String
	403, // 528: google.fhir.stu3.proto.OrganizationAlias.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 529: google.fhir.stu3.proto.OrganizationPeriod.id:type_name -> google.fhir.stu3.proto.String
	408, // 530: google.fhir.stu3.proto.OrganizationPeriod.value_period:type_name -> google.fhir.stu3.proto.Period
	403, // 531: google.fhir.stu3.proto.OrganizationPreferredContact.id:type_name -> google.fhir.stu3.proto.String
	409, // 532: google.fhir.stu3.proto.OrganizationPreferredContact.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 533: google.fhir.stu3.proto.PatientAdoptionInfo.id:type_name -> google.fhir.stu3.proto.String
	404, // 534: google.fhir.stu3.proto.PatientAdoptionInfo.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 535: google.fhir.stu3.proto.PatientBirthTime.id:type_name -> google.fhir.stu3.proto.String
	433, // 536: google.fhir.stu3.proto.PatientBirthTime.value_date_time:type_name -> google.fhir.stu3.proto.DateTime
	403, // 537: google.fhir.stu3.proto.PatientCadavericDonor.id:type_name -> google.fhir.stu3.proto.String
	409, // 538: google.fhir.stu3.proto.PatientCadavericDonor.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 539: google.fhir.stu3.proto.PatientCitizenship.id:type_name -> google.fhir.stu3.proto.String
	414, // 540: google.fhir.stu3.proto.PatientCitizenship.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 541: google.fhir.stu3.proto.PatientCitizenship.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	408, // 542: google.fhir.stu3.proto.PatientCitizenship.period:type_name -> google.fhir.stu3.proto.Period
	403, // 543: google.fhir.stu3.proto.PatientClinicalTrial.id:type_name -> google.fhir.stu3.proto.String
	414, // 544: google.fhir.stu3.proto.PatientClinicalTrial.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 545: google.fhir.stu3.proto.PatientClinicalTrial.nct:type_name -> google.fhir.stu3.proto.String
	408, // 546: google.fhir.stu3.proto.PatientClinicalTrial.period:type_name -> google.fhir.stu3.proto.Period
	404, // 547: google.fhir.stu3.proto.PatientClinicalTrial.reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 548: google.fhir.stu3.proto.PatientCongregation.id:type_name -> google.fhir.stu3.proto.String
	403, // 549: google.fhir.stu3.proto.PatientCongregation.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 550: google.fhir.stu3.proto.PatientDisability.id:type_name -> google.fhir.stu3.proto.String
	404, // 551: google.fhir.stu3.proto.PatientDisability.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 552: google.fhir.stu3.proto.PatientImportance.id:type_name -> google.fhir.stu3.proto.String
	404, // 553: google.fhir.stu3.proto.PatientImportance.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 554: google.fhir.stu3.proto.PatientInterpreterRequired.id:type_name -> google.fhir.stu3.proto.String
	409, // 555: google.fhir.stu3.proto.PatientInterpreterRequired.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 556: google.fhir.stu3.proto.PatientMothersMaidenName.id:type_name -> google.fhir.stu3.proto.String
	403, // 557: google.fhir.stu3.proto.PatientMothersMaidenName.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 558: google.fhir.stu3.proto.PatientNationality.id:type_name -> google.fhir.stu3.proto.String
	414, // 559: google.fhir.stu3.proto.PatientNationality.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 560: google.fhir.stu3.proto.PatientNationality.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	408, // 561: google.fhir.stu3.proto.PatientNationality.period:type_name -> google.fhir.stu3.proto.Period
	403, // 562: google.fhir.stu3.proto.PatientReligion.id:type_name -> google.fhir.stu3.proto.String
	404, // 563: google.fhir.stu3.proto.PatientReligion.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 564: google.fhir.stu3.proto.DoseType.id:type_name -> google.fhir.stu3.proto.String
	404, // 565: google.fhir.stu3.proto.DoseType.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 566: google.fhir.stu3.proto.InfuseOver.id:type_name -> google.fhir.stu3.proto.String
	412, // 567: google.fhir.stu3.proto.InfuseOver.value_duration:type_name -> google.fhir.stu3.proto.Duration
	403, // 568: google.fhir.stu3.proto.MaxDeliveryRate.id:type_name -> google.fhir.stu3.proto.String
	444, // 569: google.fhir.stu3.proto.MaxDeliveryRate.value_ratio:type_name -> google.fhir.stu3.proto.Ratio
	403, // 570: google.fhir.stu3.proto.MaxDeliveryVolume.id:type_name -> google.fhir.stu3.proto.String
	443, // 571: google.fhir.stu3.proto.MaxDeliveryVolume.value_quantity:type_name -> google.fhir.stu3.proto.Quantity
	403, // 572: google.fhir.stu3.proto.MinDosePerPeriod.id:type_name -> google.fhir.stu3.proto.String
	444, // 573: google.fhir.stu3.proto.MinDosePerPeriod.value_ratio:type_name -> google.fhir.stu3.proto.Ratio
	403, // 574: google.fhir.stu3.proto.RateGoal.id:type_name -> google.fhir.stu3.proto.String
	444, // 575: google.fhir.stu3.proto.RateGoal.value_ratio:type_name -> google.fhir.stu3.proto.Ratio
	403, // 576: google.fhir.stu3.proto.RateIncrement.id:type_name -> google.fhir.stu3.proto.String
	444, // 577: google.fhir.stu3.proto.RateIncrement.value_ratio:type_name -> google.fhir.stu3.proto.Ratio
	403, // 578: google.fhir.stu3.proto.RateIncrementInterval.id:type_name -> google.fhir.stu3.proto.String
	412, // 579: google.fhir.stu3.proto.RateIncrementInterval.value_duration:type_name -> google.fhir.stu3.proto.Duration
	403, // 580: google.fhir.stu3.proto.RefillsRemaining.id:type_name -> google.fhir.stu3.proto.String
	416, // 581: google.fhir.stu3.proto.RefillsRemaining.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 582: google.fhir.stu3.proto.AnimalSpecies.id:type_name -> google.fhir.stu3.proto.String
	404, // 583: google.fhir.stu3.proto.AnimalSpecies.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 584: google.fhir.stu3.proto.PractitionerClassification.id:type_name -> google.fhir.stu3.proto.String
	404, // 585: google.fhir.stu3.proto.PractitionerClassification.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 586: google.fhir.stu3.proto.PractitionerRolePrimaryInd.id:type_name -> google.fhir.stu3.proto.String
	409, // 587: google.fhir.stu3.proto.PractitionerRolePrimaryInd.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 588: google.fhir.stu3.proto.ProcedureApproachBodySite.id:type_name -> google.fhir.stu3.proto.String
	407, // 589: google.fhir.stu3.proto.ProcedureApproachBodySite.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 590: google.fhir.stu3.proto.ProcedureCausedBy.id:type_name -> google.fhir.stu3.proto.String
	397, // 591: google.fhir.stu3.proto.ProcedureCausedBy.value:type_name -> google.fhir.stu3.proto.ProcedureCausedBy.Value
	403, // 592: google.fhir.stu3.proto.ProcedureIncisionDateTime.id:type_name -> google.fhir.stu3.proto.String
	433, // 593: google.fhir.stu3.proto.ProcedureIncisionDateTime.value_date_time:type_name -> google.fhir.stu3.proto.DateTime
	403, // 594: google.fhir.stu3.proto.ProcedureMethod.id:type_name -> google.fhir.stu3.proto.String
	404, // 595: google.fhir.stu3.proto.ProcedureMethod.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 596: google.fhir.stu3.proto.ProcedureProgressStatus.id:type_name -> google.fhir.stu3.proto.String
	404, // 597: google.fhir.stu3.proto.ProcedureProgressStatus.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 598: google.fhir.stu3.proto.ProcedureSchedule.id:type_name -> google.fhir.stu3.proto.String
	445, // 599: google.fhir.stu3.proto.ProcedureSchedule.value_timing:type_name -> google.fhir.stu3.proto.Timing
	403, // 600: google.fhir.stu3.proto.ProcedureTargetBodySite.id:type_name -> google.fhir.stu3.proto.String
	407, // 601: google.fhir.stu3.proto.ProcedureTargetBodySite.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 602: google.fhir.stu3.proto.ProcedureRequestApproachBodySite.id:type_name -> google.fhir.stu3.proto.String
	407, // 603: google.fhir.stu3.proto.ProcedureRequestApproachBodySite.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 604: google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.id:type_name -> google.fhir.stu3.proto.String
	407, // 605: google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 606: google.fhir.stu3.proto.DiagnosticReportItem.id:type_name -> google.fhir.stu3.proto.String
	414, // 607: google.fhir.stu3.proto.DiagnosticReportItem.extension:type_name -> google.fhir.stu3.proto.Extension
	404, // 608: google.fhir.stu3.proto.DiagnosticReportItem.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	407, // 609: google.fhir.stu3.proto.DiagnosticReportItem.genetics_observation:type_name -> google.fhir.stu3.proto.Reference
	407, // 610: google.fhir.stu3.proto.DiagnosticReportItem.specimen:type_name -> google.fhir.stu3.proto.Reference
	422, // 611: google.fhir.stu3.proto.DiagnosticReportItem.status:type_name -> google.fhir.stu3.proto.Code
	403, // 612: google.fhir.stu3.proto.ProcedureRequestPrecondition.id:type_name -> google.fhir.stu3.proto.String
	404, // 613: google.fhir.stu3.proto.ProcedureRequestPrecondition.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 614: google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.id:type_name -> google.fhir.stu3.proto.String
	407, // 615: google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 616: google.fhir.stu3.proto.ProcedureRequestReasonRefused.id:type_name -> google.fhir.stu3.proto.String
	404, // 617: google.fhir.stu3.proto.ProcedureRequestReasonRefused.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 618: google.fhir.stu3.proto.ProcedureRequestReasonRejected.id:type_name -> google.fhir.stu3.proto.String
	404, // 619: google.fhir.stu3.proto.ProcedureRequestReasonRejected.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 620: google.fhir.stu3.proto.ProcedureRequestTargetBodySite.id:type_name -> google.fhir.stu3.proto.String
	407, // 621: google.fhir.stu3.proto.ProcedureRequestTargetBodySite.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 622: google.fhir.stu3.proto.QuestionnaireAllowedProfile.id:type_name -> google.fhir.stu3.proto.String
	407, // 623: google.fhir.stu3.proto.QuestionnaireAllowedProfile.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 624: google.fhir.stu3.proto.QuestionnaireAllowedResource.id:type_name -> google.fhir.stu3.proto.String
	446, // 625: google.fhir.stu3.proto.QuestionnaireAllowedResource.value_code:type_name -> google.fhir.stu3.proto.ResourceTypeCode
	403, // 626: google.fhir.stu3.proto.QuestionnaireBaseType.id:type_name -> google.fhir.stu3.proto.String
	447, // 627: google.fhir.stu3.proto.QuestionnaireBaseType.value_code:type_name -> google.fhir.stu3.proto.DataTypeCode
	403, // 628: google.fhir.stu3.proto.QuestionnaireChoiceOrientation.id:type_name -> google.fhir.stu3.proto.String
	448, // 629: google.fhir.stu3.proto.QuestionnaireChoiceOrientation.value_code:type_name -> google.fhir.stu3.proto.ChoiceListOrientationCode
	403, // 630: google.fhir.stu3.proto.QuestionnaireDeMap.id:type_name -> google.fhir.stu3.proto.String
	407, // 631: google.fhir.stu3.proto.QuestionnaireDeMap.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 632: google.fhir.stu3.proto.QuestionnaireDisplayCategory.id:type_name -> google.fhir.stu3.proto.String
	404, // 633: google.fhir.stu3.proto.QuestionnaireDisplayCategory.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 634: google.fhir.stu3.proto.QuestionnaireFhirType.id:type_name -> google.fhir.stu3.proto.String
	403, // 635: google.fhir.stu3.proto.QuestionnaireFhirType.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 636: google.fhir.stu3.proto.QuestionnaireHidden.id:type_name -> google.fhir.stu3.proto.String
	409, // 637: google.fhir.stu3.proto.QuestionnaireHidden.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 638: google.fhir.stu3.proto.QuestionnaireItemControl.id:type_name -> google.fhir.stu3.proto.String
	404, // 639: google.fhir.stu3.proto.QuestionnaireItemControl.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 640: google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.id:type_name -> google.fhir.stu3.proto.String
	418, // 641: google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 642: google.fhir.stu3.proto.QuestionnaireMaxOccurs.id:type_name -> google.fhir.stu3.proto.String
	416, // 643: google.fhir.stu3.proto.QuestionnaireMaxOccurs.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 644: google.fhir.stu3.proto.QuestionnaireMinOccurs.id:type_name -> google.fhir.stu3.proto.String
	416, // 645: google.fhir.stu3.proto.QuestionnaireMinOccurs.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 646: google.fhir.stu3.proto.QuestionnaireOptionExclusive.id:type_name -> google.fhir.stu3.proto.String
	409, // 647: google.fhir.stu3.proto.QuestionnaireOptionExclusive.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 648: google.fhir.stu3.proto.QuestionnaireOptionPrefix.id:type_name -> google.fhir.stu3.proto.String
	403, // 649: google.fhir.stu3.proto.QuestionnaireOptionPrefix.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 650: google.fhir.stu3.proto.QuestionnaireOrdinalValue.id:type_name -> google.fhir.stu3.proto.String
	421, // 651: google.fhir.stu3.proto.QuestionnaireOrdinalValue.value_decimal:type_name -> google.fhir.stu3.proto.Decimal
	403, // 652: google.fhir.stu3.proto.QuestionnaireReferenceFilter.id:type_name -> google.fhir.stu3.proto.String
	403, // 653: google.fhir.stu3.proto.QuestionnaireReferenceFilter.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 654: google.fhir.stu3.proto.QuestionnaireSourceStructureMap.id:type_name -> google.fhir.stu3.proto.String
	407, // 655: google.fhir.stu3.proto.QuestionnaireSourceStructureMap.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 656: google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.id:type_name -> google.fhir.stu3.proto.String
	415, // 657: google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.value_identifier:type_name -> google.fhir.stu3.proto.Identifier
	403, // 658: google.fhir.stu3.proto.QuestionnaireSupportLink.id:type_name -> google.fhir.stu3.proto.String
	418, // 659: google.fhir.stu3.proto.QuestionnaireSupportLink.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 660: google.fhir.stu3.proto.QuestionnaireTargetStructureMap.id:type_name -> google.fhir.stu3.proto.String
	407, // 661: google.fhir.stu3.proto.QuestionnaireTargetStructureMap.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 662: google.fhir.stu3.proto.QuestionnaireUnit.id:type_name -> google.fhir.stu3.proto.String
	410, // 663: google.fhir.stu3.proto.QuestionnaireUnit.value_coding:type_name -> google.fhir.stu3.proto.Coding
	403, // 664: google.fhir.stu3.proto.QuestionnaireUsageMode.id:type_name -> google.fhir.stu3.proto.String
	449, // 665: google.fhir.stu3.proto.QuestionnaireUsageMode.value_code:type_name -> google.fhir.stu3.proto.QuestionnaireItemUsageModeCode
	403, // 666: google.fhir.stu3.proto.QuestionnaireResponseAuthor.id:type_name -> google.fhir.stu3.proto.String
	398, // 667: google.fhir.stu3.proto.QuestionnaireResponseAuthor.value:type_name -> google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value
	403, // 668: google.fhir.stu3.proto.QuestionnaireResponseNote.id:type_name -> google.fhir.stu3.proto.String
	450, // 669: google.fhir.stu3.proto.QuestionnaireResponseNote.value_annotation:type_name -> google.fhir.stu3.proto.Annotation
	403, // 670: google.fhir.stu3.proto.QuestionnaireResponseReason.id:type_name -> google.fhir.stu3.proto.String
	404, // 671: google.fhir.stu3.proto.QuestionnaireResponseReason.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 672: google.fhir.stu3.proto.QuestionnaireResponseReviewer.id:type_name -> google.fhir.stu3.proto.String
	407, // 673: google.fhir.stu3.proto.QuestionnaireResponseReviewer.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 674: google.fhir.stu3.proto.ReferralRequestReasonRefused.id:type_name -> google.fhir.stu3.proto.String
	404, // 675: google.fhir.stu3.proto.ReferralRequestReasonRefused.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 676: google.fhir.stu3.proto.Regex.id:type_name -> google.fhir.stu3.proto.String
	403, // 677: google.fhir.stu3.proto.Regex.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 678: google.fhir.stu3.proto.RenderedValue.id:type_name -> google.fhir.stu3.proto.String
	403, // 679: google.fhir.stu3.proto.RenderedValue.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 680: google.fhir.stu3.proto.StringMarkdown.id:type_name -> google.fhir.stu3.proto.String
	423, // 681: google.fhir.stu3.proto.StringMarkdown.value_markdown:type_name -> google.fhir.stu3.proto.Markdown
	403, // 682: google.fhir.stu3.proto.Style.id:type_name -> google.fhir.stu3.proto.String
	403, // 683: google.fhir.stu3.proto.Style.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 684: google.fhir.stu3.proto.StyleSensitive.id:type_name -> google.fhir.stu3.proto.String
	409, // 685: google.fhir.stu3.proto.StyleSensitive.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 686: google.fhir.stu3.proto.StringXhtml.id:type_name -> google.fhir.stu3.proto.String
	403, // 687: google.fhir.stu3.proto.StringXhtml.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 688: google.fhir.stu3.proto.ApprovalDate.id:type_name -> google.fhir.stu3.proto.String
	420, // 689: google.fhir.stu3.proto.ApprovalDate.value_date:type_name -> google.fhir.stu3.proto.Date
	403, // 690: google.fhir.stu3.proto.EffectivePeriod.id:type_name -> google.fhir.stu3.proto.String
	408, // 691: google.fhir.stu3.proto.EffectivePeriod.value_period:type_name -> google.fhir.stu3.proto.Period
	403, // 692: google.fhir.stu3.proto.LastReviewDate.id:type_name -> google.fhir.stu3.proto.String
	420, // 693: google.fhir.stu3.proto.LastReviewDate.value_date:type_name -> google.fhir.stu3.proto.Date
	403, // 694: google.fhir.stu3.proto.SpecimenCollectionPriority.id:type_name -> google.fhir.stu3.proto.String
	404, // 695: google.fhir.stu3.proto.SpecimenCollectionPriority.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 696: google.fhir.stu3.proto.SpecimenIsDryWeight.id:type_name -> google.fhir.stu3.proto.String
	409, // 697: google.fhir.stu3.proto.SpecimenIsDryWeight.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 698: google.fhir.stu3.proto.SpecimenProcessingTime.id:type_name -> google.fhir.stu3.proto.String
	399, // 699: google.fhir.stu3.proto.SpecimenProcessingTime.value:type_name -> google.fhir.stu3.proto.SpecimenProcessingTime.Value
	403, // 700: google.fhir.stu3.proto.SpecimenSequenceNumber.id:type_name -> google.fhir.stu3.proto.String
	416, // 701: google.fhir.stu3.proto.SpecimenSequenceNumber.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 702: google.fhir.stu3.proto.SpecimenSpecialHandling.id:type_name -> google.fhir.stu3.proto.String
	404, // 703: google.fhir.stu3.proto.SpecimenSpecialHandling.value_codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	403, // 704: google.fhir.stu3.proto.StructureDefinitionAncestor.id:type_name -> google.fhir.stu3.proto.String
	418, // 705: google.fhir.stu3.proto.StructureDefinitionAncestor.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 706: google.fhir.stu3.proto.StructureDefinitionAnnotation.id:type_name -> google.fhir.stu3.proto.String
	450, // 707: google.fhir.stu3.proto.StructureDefinitionAnnotation.value_annotation:type_name -> google.fhir.stu3.proto.Annotation
	403, // 708: google.fhir.stu3.proto.BallotStatus.id:type_name -> google.fhir.stu3.proto.String
	403, // 709: google.fhir.stu3.proto.BallotStatus.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 710: google.fhir.stu3.proto.StructureDefinitionCategory.id:type_name -> google.fhir.stu3.proto.String
	403, // 711: google.fhir.stu3.proto.StructureDefinitionCategory.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 712: google.fhir.stu3.proto.ElementDefinitionDisplayHint.id:type_name -> google.fhir.stu3.proto.String
	403, // 713: google.fhir.stu3.proto.ElementDefinitionDisplayHint.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 714: google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.id:type_name -> google.fhir.stu3.proto.String
	403, // 715: google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 716: google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.id:type_name -> google.fhir.stu3.proto.String
	416, // 717: google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 718: google.fhir.stu3.proto.Fmm.id:type_name -> google.fhir.stu3.proto.String
	416, // 719: google.fhir.stu3.proto.Fmm.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 720: google.fhir.stu3.proto.ElementDefinitionJsonType.id:type_name -> google.fhir.stu3.proto.String
	403, // 721: google.fhir.stu3.proto.ElementDefinitionJsonType.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 722: google.fhir.stu3.proto.ElementDefinitionRdfType.id:type_name -> google.fhir.stu3.proto.String
	403, // 723: google.fhir.stu3.proto.ElementDefinitionRdfType.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 724: google.fhir.stu3.proto.ElementDefinitionRegex.id:type_name -> google.fhir.stu3.proto.String
	403, // 725: google.fhir.stu3.proto.ElementDefinitionRegex.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 726: google.fhir.stu3.proto.StructureDefinitionSummary.id:type_name -> google.fhir.stu3.proto.String
	423, // 727: google.fhir.stu3.proto.StructureDefinitionSummary.value_markdown:type_name -> google.fhir.stu3.proto.Markdown
	403, // 728: google.fhir.stu3.proto.StructureDefinitionTableName.id:type_name -> google.fhir.stu3.proto.String
	403, // 729: google.fhir.stu3.proto.StructureDefinitionTableName.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 730: google.fhir.stu3.proto.StructureDefinitionTemplateStatus.id:type_name -> google.fhir.stu3.proto.String
	451, // 731: google.fhir.stu3.proto.StructureDefinitionTemplateStatus.value_code:type_name -> google.fhir.stu3.proto.TemplateStatusCodeCode
	403, // 732: google.fhir.stu3.proto.Wg.id:type_name -> google.fhir.stu3.proto.String
	452, // 733: google.fhir.stu3.proto.Wg.value_code:type_name -> google.fhir.stu3.proto.HL7WorkgroupCode
	403, // 734: google.fhir.stu3.proto.ElementDefinitionXmlType.id:type_name -> google.fhir.stu3.proto.String
	403, // 735: google.fhir.stu3.proto.ElementDefinitionXmlType.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 736: google.fhir.stu3.proto.TaskCandidateList.id:type_name -> google.fhir.stu3.proto.String
	400, // 737: google.fhir.stu3.proto.TaskCandidateList.value:type_name -> google.fhir.stu3.proto.TaskCandidateList.Value
	403, // 738: google.fhir.stu3.proto.TaskReplaces.id:type_name -> google.fhir.stu3.proto.String
	407, // 739: google.fhir.stu3.proto.TaskReplaces.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 740: google.fhir.stu3.proto.DaysOfCycle.id:type_name -> google.fhir.stu3.proto.String
	414, // 741: google.fhir.stu3.proto.DaysOfCycle.extension:type_name -> google.fhir.stu3.proto.Extension
	416, // 742: google.fhir.stu3.proto.DaysOfCycle.day:type_name -> google.fhir.stu3.proto.Integer
	403, // 743: google.fhir.stu3.proto.TimingExact.id:type_name -> google.fhir.stu3.proto.String
	409, // 744: google.fhir.stu3.proto.TimingExact.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 745: google.fhir.stu3.proto.Translation.id:type_name -> google.fhir.stu3.proto.String
	414, // 746: google.fhir.stu3.proto.Translation.extension:type_name -> google.fhir.stu3.proto.Extension
	428, // 747: google.fhir.stu3.proto.Translation.lang:type_name -> google.fhir.stu3.proto.LanguageCode
	401, // 748: google.fhir.stu3.proto.Translation.content:type_name -> google.fhir.stu3.proto.Translation.Content
	403, // 749: google.fhir.stu3.proto.UsageContextGroup.id:type_name -> google.fhir.stu3.proto.String
	403, // 750: google.fhir.stu3.proto.UsageContextGroup.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 751: google.fhir.stu3.proto.ValueSetAuthor.id:type_name -> google.fhir.stu3.proto.String
	403, // 752: google.fhir.stu3.proto.ValueSetAuthor.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 753: google.fhir.stu3.proto.ValueSetCaseSensitive.id:type_name -> google.fhir.stu3.proto.String
	409, // 754: google.fhir.stu3.proto.ValueSetCaseSensitive.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 755: google.fhir.stu3.proto.ValueSetComment.id:type_name -> google.fhir.stu3.proto.String
	414, // 756: google.fhir.stu3.proto.ValueSetComment.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 757: google.fhir.stu3.proto.ValueSetComment.content:type_name -> google.fhir.stu3.proto.String
	419, // 758: google.fhir.stu3.proto.ValueSetComment.timestamp:type_name -> google.fhir.stu3.proto.Instant
	403, // 759: google.fhir.stu3.proto.ValueSetComments.id:type_name -> google.fhir.stu3.proto.String
	403, // 760: google.fhir.stu3.proto.ValueSetComments.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 761: google.fhir.stu3.proto.ValueSetConceptOrder.id:type_name -> google.fhir.stu3.proto.String
	416, // 762: google.fhir.stu3.proto.ValueSetConceptOrder.value_integer:type_name -> google.fhir.stu3.proto.Integer
	403, // 763: google.fhir.stu3.proto.ValueSetDefinition.id:type_name -> google.fhir.stu3.proto.String
	403, // 764: google.fhir.stu3.proto.ValueSetDefinition.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 765: google.fhir.stu3.proto.ValueSetEffectiveDate.id:type_name -> google.fhir.stu3.proto.String
	420, // 766: google.fhir.stu3.proto.ValueSetEffectiveDate.value_date:type_name -> google.fhir.stu3.proto.Date
	403, // 767: google.fhir.stu3.proto.ValueSetExpansionSource.id:type_name -> google.fhir.stu3.proto.String
	418, // 768: google.fhir.stu3.proto.ValueSetExpansionSource.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 769: google.fhir.stu3.proto.ValueSetExpirationDate.id:type_name -> google.fhir.stu3.proto.String
	420, // 770: google.fhir.stu3.proto.ValueSetExpirationDate.value_date:type_name -> google.fhir.stu3.proto.Date
	403, // 771: google.fhir.stu3.proto.ValueSetHistory.id:type_name -> google.fhir.stu3.proto.String
	414, // 772: google.fhir.stu3.proto.ValueSetHistory.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 773: google.fhir.stu3.proto.ValueSetHistory.name:type_name -> google.fhir.stu3.proto.String
	402, // 774: google.fhir.stu3.proto.ValueSetHistory.revision:type_name -> google.fhir.stu3.proto.ValueSetHistory.Revision
	403, // 775: google.fhir.stu3.proto.ValueSetKeyWord.id:type_name -> google.fhir.stu3.proto.String
	403, // 776: google.fhir.stu3.proto.ValueSetKeyWord.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 777: google.fhir.stu3.proto.ValueSetLabel.id:type_name -> google.fhir.stu3.proto.String
	403, // 778: google.fhir.stu3.proto.ValueSetLabel.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 779: google.fhir.stu3.proto.ValueSetMap.id:type_name -> google.fhir.stu3.proto.String
	407, // 780: google.fhir.stu3.proto.ValueSetMap.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 781: google.fhir.stu3.proto.ValueSetOrdinalValue.id:type_name -> google.fhir.stu3.proto.String
	421, // 782: google.fhir.stu3.proto.ValueSetOrdinalValue.value_decimal:type_name -> google.fhir.stu3.proto.Decimal
	403, // 783: google.fhir.stu3.proto.ValueSetOtherName.id:type_name -> google.fhir.stu3.proto.String
	414, // 784: google.fhir.stu3.proto.ValueSetOtherName.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 785: google.fhir.stu3.proto.ValueSetOtherName.name:type_name -> google.fhir.stu3.proto.String
	409, // 786: google.fhir.stu3.proto.ValueSetOtherName.preferred:type_name -> google.fhir.stu3.proto.Boolean
	403, // 787: google.fhir.stu3.proto.ValueSetReference.id:type_name -> google.fhir.stu3.proto.String
	418, // 788: google.fhir.stu3.proto.ValueSetReference.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 789: google.fhir.stu3.proto.ValueSetSourceReference.id:type_name -> google.fhir.stu3.proto.String
	418, // 790: google.fhir.stu3.proto.ValueSetSourceReference.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 791: google.fhir.stu3.proto.ValueSetSystem.id:type_name -> google.fhir.stu3.proto.String
	407, // 792: google.fhir.stu3.proto.ValueSetSystem.value_reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 793: google.fhir.stu3.proto.ValueSetSystemName.id:type_name -> google.fhir.stu3.proto.String
	403, // 794: google.fhir.stu3.proto.ValueSetSystemName.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 795: google.fhir.stu3.proto.ValueSetSystemRef.id:type_name -> google.fhir.stu3.proto.String
	418, // 796: google.fhir.stu3.proto.ValueSetSystemRef.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 797: google.fhir.stu3.proto.ValueSetToocostly.id:type_name -> google.fhir.stu3.proto.String
	409, // 798: google.fhir.stu3.proto.ValueSetToocostly.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 799: google.fhir.stu3.proto.ValueSetTrustedExpansion.id:type_name -> google.fhir.stu3.proto.String
	418, // 800: google.fhir.stu3.proto.ValueSetTrustedExpansion.value_uri:type_name -> google.fhir.stu3.proto.Uri
	403, // 801: google.fhir.stu3.proto.ValueSetUnclosed.id:type_name -> google.fhir.stu3.proto.String
	409, // 802: google.fhir.stu3.proto.ValueSetUnclosed.value_boolean:type_name -> google.fhir.stu3.proto.Boolean
	403, // 803: google.fhir.stu3.proto.ValueSetUsage.id:type_name -> google.fhir.stu3.proto.String
	414, // 804: google.fhir.stu3.proto.ValueSetUsage.extension:type_name -> google.fhir.stu3.proto.Extension
	403, // 805: google.fhir.stu3.proto.ValueSetUsage.user:type_name -> google.fhir.stu3.proto.String
	403, // 806: google.fhir.stu3.proto.ValueSetUsage.use:type_name -> google.fhir.stu3.proto.String
	403, // 807: google.fhir.stu3.proto.ValueSetWarning.id:type_name -> google.fhir.stu3.proto.String
	423, // 808: google.fhir.stu3.proto.ValueSetWarning.value_markdown:type_name -> google.fhir.stu3.proto.Markdown
	403, // 809: google.fhir.stu3.proto.ValueSetWorkflowStatus.id:type_name -> google.fhir.stu3.proto.String
	403, // 810: google.fhir.stu3.proto.ValueSetWorkflowStatus.value_string:type_name -> google.fhir.stu3.proto.String
	403, // 811: google.fhir.stu3.proto.CodeSystemHistory.Revision.id:type_name -> google.fhir.stu3.proto.String
	433, // 812: google.fhir.stu3.proto.CodeSystemHistory.Revision.date:type_name -> google.fhir.stu3.proto.DateTime
	403, // 813: google.fhir.stu3.proto.CodeSystemHistory.Revision.id_slice:type_name -> google.fhir.stu3.proto.String
	403, // 814: google.fhir.stu3.proto.CodeSystemHistory.Revision.author:type_name -> google.fhir.stu3.proto.String
	403, // 815: google.fhir.stu3.proto.CodeSystemHistory.Revision.notes:type_name -> google.fhir.stu3.proto.String
	407, // 816: google.fhir.stu3.proto.CommunicationRequestDefinition.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 817: google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 818: google.fhir.stu3.proto.ConditionBasedOn.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	404, // 819: google.fhir.stu3.proto.ConditionDueTo.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	407, // 820: google.fhir.stu3.proto.ConditionDueTo.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	404, // 821: google.fhir.stu3.proto.ConditionOccurredFollowing.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	407, // 822: google.fhir.stu3.proto.ConditionOccurredFollowing.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 823: google.fhir.stu3.proto.ConditionPartOf.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 824: google.fhir.stu3.proto.ConsentWitness.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 825: google.fhir.stu3.proto.BasicInitiatingPerson.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 826: google.fhir.stu3.proto.BasicReceivingPerson.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	404, // 827: google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	407, // 828: google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	409, // 829: google.fhir.stu3.proto.ElementDefinitionBestpractice.Value.boolean:type_name -> google.fhir.stu3.proto.Boolean
	404, // 830: google.fhir.stu3.proto.ElementDefinitionBestpractice.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	418, // 831: google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value.uri:type_name -> google.fhir.stu3.proto.Uri
	407, // 832: google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	418, // 833: google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value.uri:type_name -> google.fhir.stu3.proto.Uri
	407, // 834: google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	418, // 835: google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value.uri:type_name -> google.fhir.stu3.proto.Uri
	407, // 836: google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 837: google.fhir.stu3.proto.Definition.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 838: google.fhir.stu3.proto.ReasonReference.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	420, // 839: google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.date:type_name -> google.fhir.stu3.proto.Date
	413, // 840: google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.age:type_name -> google.fhir.stu3.proto.Age
	409, // 841: google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.boolean:type_name -> google.fhir.stu3.proto.Boolean
	420, // 842: google.fhir.stu3.proto.QuestionnaireMaxValue.Value.date:type_name -> google.fhir.stu3.proto.Date
	433, // 843: google.fhir.stu3.proto.QuestionnaireMaxValue.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	453, // 844: google.fhir.stu3.proto.QuestionnaireMaxValue.Value.time:type_name -> google.fhir.stu3.proto.Time
	419, // 845: google.fhir.stu3.proto.QuestionnaireMaxValue.Value.instant:type_name -> google.fhir.stu3.proto.Instant
	421, // 846: google.fhir.stu3.proto.QuestionnaireMaxValue.Value.decimal:type_name -> google.fhir.stu3.proto.Decimal
	416, // 847: google.fhir.stu3.proto.QuestionnaireMaxValue.Value.integer:type_name -> google.fhir.stu3.proto.Integer
	420, // 848: google.fhir.stu3.proto.QuestionnaireMinValue.Value.date:type_name -> google.fhir.stu3.proto.Date
	433, // 849: google.fhir.stu3.proto.QuestionnaireMinValue.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	453, // 850: google.fhir.stu3.proto.QuestionnaireMinValue.Value.time:type_name -> google.fhir.stu3.proto.Time
	419, // 851: google.fhir.stu3.proto.QuestionnaireMinValue.Value.instant:type_name -> google.fhir.stu3.proto.Instant
	421, // 852: google.fhir.stu3.proto.QuestionnaireMinValue.Value.decimal:type_name -> google.fhir.stu3.proto.Decimal
	416, // 853: google.fhir.stu3.proto.QuestionnaireMinValue.Value.integer:type_name -> google.fhir.stu3.proto.Integer
	407, // 854: google.fhir.stu3.proto.AllergyIntoleranceTest.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 855: google.fhir.stu3.proto.ProcedureCausedBy.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	407, // 856: google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	408, // 857: google.fhir.stu3.proto.SpecimenProcessingTime.Value.period:type_name -> google.fhir.stu3.proto.Period
	412, // 858: google.fhir.stu3.proto.SpecimenProcessingTime.Value.duration:type_name -> google.fhir.stu3.proto.Duration
	407, // 859: google.fhir.stu3.proto.TaskCandidateList.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	403, // 860: google.fhir.stu3.proto.Translation.Content.string_value:type_name -> google.fhir.stu3.proto.String
	423, // 861: google.fhir.stu3.proto.Translation.Content.markdown:type_name -> google.fhir.stu3.proto.Markdown
	403, // 862: google.fhir.stu3.proto.ValueSetHistory.Revision.id:type_name -> google.fhir.stu3.proto.String
	433, // 863: google.fhir.stu3.proto.ValueSetHistory.Revision.date:type_name -> google.fhir.stu3.proto.DateTime
	403, // 864: google.fhir.stu3.proto.ValueSetHistory.Revision.id_slice:type_name -> google.fhir.stu3.proto.String
	403, // 865: google.fhir.stu3.proto.ValueSetHistory.Revision.author:type_name -> google.fhir.stu3.proto.String
	403, // 866: google.fhir.stu3.proto.ValueSetHistory.Revision.notes:type_name -> google.fhir.stu3.proto.String
	867, // [867:867] is the sub-list for method output_type
	867, // [867:867] is the sub-list for method input_type
	867, // [867:867] is the sub-list for extension type_name
	867, // [867:867] is the sub-list for extension extendee
	0,   // [0:867] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_stu3_extensions_proto_init() }
func file_proto_google_fhir_proto_stu3_extensions_proto_init() {
	if File_proto_google_fhir_proto_stu3_extensions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementAdministrativeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementChangeDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementClassificationOrContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementContactAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementDocumentReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementEffectivePeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementIsDataElementConcept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementRegistryOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementSubmitterOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionObjectClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionObjectClassProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermittedValueConceptmap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermittedValueValueset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCertainty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceReasonRefuted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceResolutionAge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceSubstanceExposureRisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventAccession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventAnonymized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventEncrypted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventMPPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventNumberOfInstances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventParticipantObjectContainsStudy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventSOPClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientBirthPlace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodySiteInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityStatementExpectation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityStatementProhibited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityStatementSearchParameterCombination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityStatementSupportedSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityStatementWebsocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanActivityTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemAuthor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemComments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemConceptOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemDeprecated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemEffectiveDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemExpirationDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemKeyWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemOrdinalValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemOtherName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemReplacedby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemSourceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemSubsumes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemTrustedExpansion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemWorkflowStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodingSctdescid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationReasonNotPerformed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequestDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequestOrderedBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequestReasonRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequestRelevantHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequestSupportingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositionOtherConfidentiality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapBidirectional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionBasedOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionCriticality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionDueTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOccurredFollowing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionPartOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionRuledOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionTargetBodySite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentNotificationEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachmentCitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CqifCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CqlExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FhirPathExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicEncounterClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicEncounterType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicInitiatingOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicInitiatingPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicReceivingOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicReceivingPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicRecipientLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicRecipientType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicSystemUserLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicSystemUserTaskContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicSystemUserType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CqifLibrary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireOptionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachmentQualityOfEvidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodingSourceValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachmentStrengthOfRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAbsentReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionDatadictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceImplantStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRequestPatientInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRequestReasonRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportAddendumOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportExtends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportAssessedCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportFamilyMemberHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportLocationPerformed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportReplaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportSummaryOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionAllowedUnits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionBestpractice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionBindingName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionEquivalence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionInheritedExtensibleValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionIsCommonBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionMaxValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionMinValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionTranslatable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterAssociatedEncounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterModeOfArrival); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterPrimaryDiagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterReasonCancelled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportNotDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnBehalfOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationPerformerRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasonCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasonReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryObservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryParent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistorySibling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryAbatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryPatientRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistorySeverity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressGeolocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalAcceptance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePertainsToGoal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalReasonRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportAlleleDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportGlstring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportHaploid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleHttpResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameAssemblyOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameFathersFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameMothersFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameOwnName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameOwnPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNamePartnerName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNamePartnerPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierValidDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationGuidePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPAdditionalLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPBuildingNumberSuffix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPCareOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPCensusTract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPDelimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPDeliveryAddressLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPDeliveryInstallationArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPDeliveryInstallationQualifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPDeliveryInstallationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPDeliveryMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPDeliveryModeIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPDirection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPHouseNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPHouseNumberNumeric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPPostBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPPrecinct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPStreetAddressLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPStreetName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPStreetNameBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPStreetNameType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPUnitID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressADXPUnitType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodingCOValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameENQualifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameENRepresentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyNullFlavor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyPreferred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringSCCoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPointTELAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantityUncertainty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantityUncertaintyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleLocationDistance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElementMapSourcePublisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleMatchGrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxDecimalPlaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireMaxValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationUsualRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispenseValidityPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatementPrescriber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageHeaderMessageheaderResponseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MimeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireMinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationBodyPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationEventTiming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationFocalSubject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationAlleleName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationAllelicFrequency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationAllelicState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationAminoAcidChangeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationAminoAcidChangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationCopyNumberEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationDNARegionName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationDNASequenceVariantName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationDNASequenceVariantType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationDNAVariantId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationGene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationGenomicSourceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationInterpretation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationPhaseSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationTimeOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceAdministration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCareplan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceExposureDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceExposureDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceExposureDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationOutcomeAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationOutcomeDetectedIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationOutcomeIssueSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationPreferredContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientAdoptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientBirthTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientCadavericDonor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientCitizenship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientClinicalTrial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientCongregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientDisability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientImportance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientInterpreterRequired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientMothersMaidenName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientNationality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientReligion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoseType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfuseOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxDeliveryRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxDeliveryVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinDosePerPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateGoal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateIncrementInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefillsRemaining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnimalSpecies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PractitionerClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PractitionerRolePrimaryInd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureApproachBodySite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureCausedBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureIncisionDateTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureProgressStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureTargetBodySite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequestApproachBodySite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequestAuthorizedBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequestPrecondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequestQuestionnaireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequestReasonRefused); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequestReasonRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureRequestTargetBodySite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireAllowedProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireAllowedResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireBaseType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireChoiceOrientation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireDeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireDisplayCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireFhirType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireHidden); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireLookupQuestionnaire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireMaxOccurs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireMinOccurs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireOptionExclusive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireOptionPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireOrdinalValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireReferenceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireSourceStructureMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireStudyprotocolIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireSupportLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireTargetStructureMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireUsageMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseAuthor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseReviewer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralRequestReasonRefused); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Regex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMarkdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Style); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleSensitive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringXhtml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectivePeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastReviewDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenCollectionPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenIsDryWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenProcessingTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenSequenceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenSpecialHandling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionAncestor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallotStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionDisplayHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionExplicitTypeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionFmmNoWarnings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fmm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionJsonType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionRdfType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionRegex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionTableName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionTemplateStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionXmlType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCandidateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReplaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaysOfCycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimingExact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Translation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageContextGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetAuthor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetCaseSensitive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetComments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetConceptOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetEffectiveDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetExpansionSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetExpirationDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetKeyWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetOrdinalValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetOtherName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetSourceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetSystemName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetSystemRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetToocostly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetTrustedExpansion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetUnclosed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetWorkflowStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemHistory_Revision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequestDefinition_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRequestOrderedBy_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionBasedOn_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionDueTo_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOccurredFollowing_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionPartOf_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentWitness_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicInitiatingPerson_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicReceivingPerson_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionAllowedUnits_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionBestpractice_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionInheritedExtensibleValueSet_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionMaxValueSet_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinitionMinValueSet_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Definition_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReasonReference_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyMemberHistoryAbatement_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireMaxValue_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireMinValue_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceTest_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedureCausedBy_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseAuthor_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenProcessingTime_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCandidateList_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Translation_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSetHistory_Revision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[377].OneofWrappers = []interface{}{
		(*CommunicationRequestDefinition_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[378].OneofWrappers = []interface{}{
		(*CommunicationRequestOrderedBy_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[379].OneofWrappers = []interface{}{
		(*ConditionBasedOn_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[380].OneofWrappers = []interface{}{
		(*ConditionDueTo_Value_CodeableConcept)(nil),
		(*ConditionDueTo_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[381].OneofWrappers = []interface{}{
		(*ConditionOccurredFollowing_Value_CodeableConcept)(nil),
		(*ConditionOccurredFollowing_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[382].OneofWrappers = []interface{}{
		(*ConditionPartOf_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[383].OneofWrappers = []interface{}{
		(*ConsentWitness_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[384].OneofWrappers = []interface{}{
		(*BasicInitiatingPerson_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[385].OneofWrappers = []interface{}{
		(*BasicReceivingPerson_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[386].OneofWrappers = []interface{}{
		(*ElementDefinitionAllowedUnits_Value_CodeableConcept)(nil),
		(*ElementDefinitionAllowedUnits_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[387].OneofWrappers = []interface{}{
		(*ElementDefinitionBestpractice_Value_Boolean)(nil),
		(*ElementDefinitionBestpractice_Value_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[388].OneofWrappers = []interface{}{
		(*ElementDefinitionInheritedExtensibleValueSet_Value_Uri)(nil),
		(*ElementDefinitionInheritedExtensibleValueSet_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[389].OneofWrappers = []interface{}{
		(*ElementDefinitionMaxValueSet_Value_Uri)(nil),
		(*ElementDefinitionMaxValueSet_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[390].OneofWrappers = []interface{}{
		(*ElementDefinitionMinValueSet_Value_Uri)(nil),
		(*ElementDefinitionMinValueSet_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[391].OneofWrappers = []interface{}{
		(*Definition_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[392].OneofWrappers = []interface{}{
		(*ReasonReference_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[393].OneofWrappers = []interface{}{
		(*FamilyMemberHistoryAbatement_Value_Date)(nil),
		(*FamilyMemberHistoryAbatement_Value_Age)(nil),
		(*FamilyMemberHistoryAbatement_Value_Boolean)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[394].OneofWrappers = []interface{}{
		(*QuestionnaireMaxValue_Value_Date)(nil),
		(*QuestionnaireMaxValue_Value_DateTime)(nil),
		(*QuestionnaireMaxValue_Value_Time)(nil),
		(*QuestionnaireMaxValue_Value_Instant)(nil),
		(*QuestionnaireMaxValue_Value_Decimal)(nil),
		(*QuestionnaireMaxValue_Value_Integer)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[395].OneofWrappers = []interface{}{
		(*QuestionnaireMinValue_Value_Date)(nil),
		(*QuestionnaireMinValue_Value_DateTime)(nil),
		(*QuestionnaireMinValue_Value_Time)(nil),
		(*QuestionnaireMinValue_Value_Instant)(nil),
		(*QuestionnaireMinValue_Value_Decimal)(nil),
		(*QuestionnaireMinValue_Value_Integer)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[396].OneofWrappers = []interface{}{
		(*AllergyIntoleranceTest_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[397].OneofWrappers = []interface{}{
		(*ProcedureCausedBy_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[398].OneofWrappers = []interface{}{
		(*QuestionnaireResponseAuthor_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[399].OneofWrappers = []interface{}{
		(*SpecimenProcessingTime_Value_Period)(nil),
		(*SpecimenProcessingTime_Value_Duration)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[400].OneofWrappers = []interface{}{
		(*TaskCandidateList_Value_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes[401].OneofWrappers = []interface{}{
		(*Translation_Content_StringValue)(nil),
		(*Translation_Content_Markdown)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_stu3_extensions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   403,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_stu3_extensions_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_stu3_extensions_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_stu3_extensions_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_stu3_extensions_proto = out.File
	file_proto_google_fhir_proto_stu3_extensions_proto_rawDesc = nil
	file_proto_google_fhir_proto_stu3_extensions_proto_goTypes = nil
	file_proto_google_fhir_proto_stu3_extensions_proto_depIdxs = nil
}

//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: proto/google/fhir/proto/stu3/profiles.proto

package profiles_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/codes_go_proto"
	datatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/datatypes_go_proto"
	extensions_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/extensions_go_proto"
	metadatatypes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/metadatatypes_go_proto"
	resources_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/stu3/resources_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Body Mass Index (BMI) Profile.
// See http://hl7.org/fhir/StructureDefinition/bmi
type Bmi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Bmi_CodeableConceptForCode           `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Bmi_Effective                `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Bmi_Value                      `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Bmi_ReferenceRange         `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Bmi_Related                `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Bmi_Component              `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Bmi) Reset() {
	*x = Bmi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bmi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bmi) ProtoMessage() {}

func (x *Bmi) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bmi.ProtoReflect.Descriptor instead.
func (*Bmi) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{0}
}

func (x *Bmi) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bmi) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Bmi) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Bmi) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Bmi) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bmi) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Bmi) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bmi) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bmi) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Bmi) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Bmi) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Bmi) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Bmi) GetCode() *Bmi_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bmi) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Bmi) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Bmi) GetEffective() *Bmi_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Bmi) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Bmi) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Bmi) GetValue() *Bmi_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bmi) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bmi) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bmi) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Bmi) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Bmi) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Bmi) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Bmi) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Bmi) GetReferenceRange() []*Bmi_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Bmi) GetRelated() []*Bmi_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Bmi) GetComponent() []*Bmi_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Body Height Profile.
// See http://hl7.org/fhir/StructureDefinition/bodyheight
type Bodyheight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Bodyheight_CodeableConceptForCode    `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Bodyheight_Effective         `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Bodyheight_Value               `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Bodyheight_ReferenceRange  `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Bodyheight_Related         `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Bodyheight_Component       `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Bodyheight) Reset() {
	*x = Bodyheight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyheight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyheight) ProtoMessage() {}

func (x *Bodyheight) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyheight.ProtoReflect.Descriptor instead.
func (*Bodyheight) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{1}
}

func (x *Bodyheight) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyheight) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Bodyheight) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Bodyheight) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Bodyheight) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bodyheight) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Bodyheight) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyheight) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodyheight) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Bodyheight) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Bodyheight) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Bodyheight) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Bodyheight) GetCode() *Bodyheight_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bodyheight) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Bodyheight) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Bodyheight) GetEffective() *Bodyheight_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Bodyheight) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Bodyheight) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Bodyheight) GetValue() *Bodyheight_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bodyheight) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bodyheight) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bodyheight) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Bodyheight) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Bodyheight) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Bodyheight) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Bodyheight) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Bodyheight) GetReferenceRange() []*Bodyheight_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Bodyheight) GetRelated() []*Bodyheight_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Bodyheight) GetComponent() []*Bodyheight_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Body Length Profile.
// See http://hl7.org/fhir/StructureDefinition/bodylength
type Bodylength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Bodylength_CodeableConceptForCode    `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Bodylength_Effective         `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Bodylength_Value               `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Bodylength_ReferenceRange  `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Bodylength_Related         `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Bodylength_Component       `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Bodylength) Reset() {
	*x = Bodylength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodylength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodylength) ProtoMessage() {}

func (x *Bodylength) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodylength.ProtoReflect.Descriptor instead.
func (*Bodylength) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{2}
}

func (x *Bodylength) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodylength) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Bodylength) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Bodylength) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Bodylength) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bodylength) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Bodylength) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodylength) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodylength) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Bodylength) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Bodylength) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Bodylength) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Bodylength) GetCode() *Bodylength_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bodylength) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Bodylength) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Bodylength) GetEffective() *Bodylength_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Bodylength) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Bodylength) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Bodylength) GetValue() *Bodylength_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bodylength) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bodylength) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bodylength) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Bodylength) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Bodylength) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Bodylength) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Bodylength) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Bodylength) GetReferenceRange() []*Bodylength_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Bodylength) GetRelated() []*Bodylength_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Bodylength) GetComponent() []*Bodylength_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Body Temperature Profile.
// See http://hl7.org/fhir/StructureDefinition/bodytemp
type Bodytemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Bodytemp_CodeableConceptForCode      `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Bodytemp_Effective           `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Bodytemp_Value                 `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Bodytemp_ReferenceRange    `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Bodytemp_Related           `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Bodytemp_Component         `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Bodytemp) Reset() {
	*x = Bodytemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodytemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodytemp) ProtoMessage() {}

func (x *Bodytemp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodytemp.ProtoReflect.Descriptor instead.
func (*Bodytemp) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{3}
}

func (x *Bodytemp) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodytemp) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Bodytemp) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Bodytemp) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Bodytemp) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bodytemp) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Bodytemp) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodytemp) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodytemp) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Bodytemp) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Bodytemp) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Bodytemp) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Bodytemp) GetCode() *Bodytemp_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bodytemp) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Bodytemp) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Bodytemp) GetEffective() *Bodytemp_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Bodytemp) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Bodytemp) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Bodytemp) GetValue() *Bodytemp_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bodytemp) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bodytemp) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bodytemp) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Bodytemp) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Bodytemp) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Bodytemp) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Bodytemp) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Bodytemp) GetReferenceRange() []*Bodytemp_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Bodytemp) GetRelated() []*Bodytemp_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Bodytemp) GetComponent() []*Bodytemp_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Body Weight Profile.
// See http://hl7.org/fhir/StructureDefinition/bodyweight
type Bodyweight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Bodyweight_CodeableConceptForCode    `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Bodyweight_Effective         `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Bodyweight_Value               `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Bodyweight_ReferenceRange  `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Bodyweight_Related         `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Bodyweight_Component       `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Bodyweight) Reset() {
	*x = Bodyweight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyweight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyweight) ProtoMessage() {}

func (x *Bodyweight) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyweight.ProtoReflect.Descriptor instead.
func (*Bodyweight) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{4}
}

func (x *Bodyweight) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyweight) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Bodyweight) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Bodyweight) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Bodyweight) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bodyweight) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Bodyweight) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyweight) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodyweight) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Bodyweight) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Bodyweight) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Bodyweight) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Bodyweight) GetCode() *Bodyweight_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bodyweight) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Bodyweight) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Bodyweight) GetEffective() *Bodyweight_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Bodyweight) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Bodyweight) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Bodyweight) GetValue() *Bodyweight_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bodyweight) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bodyweight) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bodyweight) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Bodyweight) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Bodyweight) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Bodyweight) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Bodyweight) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Bodyweight) GetReferenceRange() []*Bodyweight_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Bodyweight) GetRelated() []*Bodyweight_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Bodyweight) GetComponent() []*Bodyweight_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Blood Pressure Profile.
// See http://hl7.org/fhir/StructureDefinition/bp
type Bp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Bp_CodeableConceptForCode            `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Bp_Effective                 `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Bp_ReferenceRange          `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Bp_Related                 `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Bp_Component               `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Bp) Reset() {
	*x = Bp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bp) ProtoMessage() {}

func (x *Bp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bp.ProtoReflect.Descriptor instead.
func (*Bp) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{5}
}

func (x *Bp) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bp) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Bp) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Bp) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Bp) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bp) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Bp) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bp) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bp) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Bp) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Bp) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Bp) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Bp) GetCode() *Bp_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bp) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Bp) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Bp) GetEffective() *Bp_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Bp) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Bp) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Bp) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bp) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bp) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Bp) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Bp) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Bp) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Bp) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Bp) GetReferenceRange() []*Bp_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Bp) GetRelated() []*Bp_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Bp) GetComponent() []*Bp_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Example Lipid Profile.
// Measurements and simple assertions.
// See http://hl7.org/fhir/StructureDefinition/cholesterol
type Cholesterol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Cholesterol
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Cholesterol_Effective        `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Cholesterol_Value              `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// + | ++ | +++ | - | -- | ---
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange *Cholesterol_ReferenceRange   `protobuf:"bytes,27,opt,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Component      []*Cholesterol_Component      `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Cholesterol) Reset() {
	*x = Cholesterol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cholesterol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cholesterol) ProtoMessage() {}

func (x *Cholesterol) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cholesterol.ProtoReflect.Descriptor instead.
func (*Cholesterol) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{6}
}

func (x *Cholesterol) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Cholesterol) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Cholesterol) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Cholesterol) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Cholesterol) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Cholesterol) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Cholesterol) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Cholesterol) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Cholesterol) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Cholesterol) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Cholesterol) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Cholesterol) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Cholesterol) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Cholesterol) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Cholesterol) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Cholesterol) GetEffective() *Cholesterol_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Cholesterol) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Cholesterol) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Cholesterol) GetValue() *Cholesterol_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Cholesterol) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Cholesterol) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Cholesterol) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Cholesterol) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Cholesterol) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Cholesterol) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Cholesterol) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Cholesterol) GetReferenceRange() *Cholesterol_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Cholesterol) GetComponent() []*Cholesterol_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Clinical Document Profile for
// Composition. A set of resources composed into a single coherent clinical
// statement with clinical attestation. See
// http://hl7.org/fhir/StructureDefinition/clinicaldocument
type Clinicaldocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Logical identifier of composition (version-independent)
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,9,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// preliminary | final | amended | entered-in-error
	Status *codes_go_proto.CompositionStatusCode `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Kind of composition (LOINC if possible)
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// Categorization of Composition
	ClassValue *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=class_value,json=class,proto3" json:"class_value,omitempty"`
	// Who and/or what the composition is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,13,opt,name=subject,proto3" json:"subject,omitempty"`
	// Context of the Composition
	Encounter *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=encounter,proto3" json:"encounter,omitempty"`
	// Composition editing time
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=date,proto3" json:"date,omitempty"`
	// Who and/or what authored the composition
	Author []*datatypes_go_proto.Reference `protobuf:"bytes,16,rep,name=author,proto3" json:"author,omitempty"`
	// Human Readable name/title
	Title *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=title,proto3" json:"title,omitempty"`
	// As defined by affinity domain
	Confidentiality *codes_go_proto.ConfidentialityClassificationCode `protobuf:"bytes,18,opt,name=confidentiality,proto3" json:"confidentiality,omitempty"`
	Attester        []*Clinicaldocument_Attester                      `protobuf:"bytes,19,rep,name=attester,proto3" json:"attester,omitempty"`
	// Organization which maintains the composition
	Custodian *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=custodian,proto3" json:"custodian,omitempty"`
	RelatesTo []*Clinicaldocument_RelatesTo `protobuf:"bytes,21,rep,name=relates_to,json=relatesTo,proto3" json:"relates_to,omitempty"`
	Event     []*Clinicaldocument_Event     `protobuf:"bytes,22,rep,name=event,proto3" json:"event,omitempty"`
	Section   []*Clinicaldocument_Section   `protobuf:"bytes,23,rep,name=section,proto3" json:"section,omitempty"`
}

func (x *Clinicaldocument) Reset() {
	*x = Clinicaldocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clinicaldocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clinicaldocument) ProtoMessage() {}

func (x *Clinicaldocument) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clinicaldocument.ProtoReflect.Descriptor instead.
func (*Clinicaldocument) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{7}
}

func (x *Clinicaldocument) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Clinicaldocument) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Clinicaldocument) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Clinicaldocument) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Clinicaldocument) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Clinicaldocument) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Clinicaldocument) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Clinicaldocument) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Clinicaldocument) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Clinicaldocument) GetStatus() *codes_go_proto.CompositionStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Clinicaldocument) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Clinicaldocument) GetClassValue() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ClassValue
	}
	return nil
}

func (x *Clinicaldocument) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Clinicaldocument) GetEncounter() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *Clinicaldocument) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Clinicaldocument) GetAuthor() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Clinicaldocument) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Clinicaldocument) GetConfidentiality() *codes_go_proto.ConfidentialityClassificationCode {
	if x != nil {
		return x.Confidentiality
	}
	return nil
}

func (x *Clinicaldocument) GetAttester() []*Clinicaldocument_Attester {
	if x != nil {
		return x.Attester
	}
	return nil
}

func (x *Clinicaldocument) GetCustodian() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Custodian
	}
	return nil
}

func (x *Clinicaldocument) GetRelatesTo() []*Clinicaldocument_RelatesTo {
	if x != nil {
		return x.RelatesTo
	}
	return nil
}

func (x *Clinicaldocument) GetEvent() []*Clinicaldocument_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Clinicaldocument) GetSection() []*Clinicaldocument_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

// Auto-generated from StructureDefinition for Device Metric Observation
// Profile. Measurements and simple assertions. See
// http://hl7.org/fhir/StructureDefinition/devicemetricobservation
type Devicemetricobservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Type of observation (code / type)
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject   *datatypes_go_proto.Reference      `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	Effective *Devicemetricobservation_Effective `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Devicemetricobservation_Value  `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference           `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange *Devicemetricobservation_ReferenceRange `protobuf:"bytes,27,opt,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        *Devicemetricobservation_Related        `protobuf:"bytes,28,opt,name=related,proto3" json:"related,omitempty"`
	Component      []*Devicemetricobservation_Component    `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Devicemetricobservation) Reset() {
	*x = Devicemetricobservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devicemetricobservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devicemetricobservation) ProtoMessage() {}

func (x *Devicemetricobservation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devicemetricobservation.ProtoReflect.Descriptor instead.
func (*Devicemetricobservation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{8}
}

func (x *Devicemetricobservation) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Devicemetricobservation) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Devicemetricobservation) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Devicemetricobservation) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Devicemetricobservation) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Devicemetricobservation) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Devicemetricobservation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Devicemetricobservation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Devicemetricobservation) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Devicemetricobservation) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Devicemetricobservation) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Devicemetricobservation) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Devicemetricobservation) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Devicemetricobservation) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Devicemetricobservation) GetEffective() *Devicemetricobservation_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Devicemetricobservation) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Devicemetricobservation) GetValue() *Devicemetricobservation_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Devicemetricobservation) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Devicemetricobservation) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Devicemetricobservation) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Devicemetricobservation) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Devicemetricobservation) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Devicemetricobservation) GetReferenceRange() *Devicemetricobservation_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Devicemetricobservation) GetRelated() *Devicemetricobservation_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Devicemetricobservation) GetComponent() []*Devicemetricobservation_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for DiagnosticReport-Genetics.
// A Diagnostic report - a combination of request information, atomic results,
// images, interpretation, as well as formatted reports. See
// http://hl7.org/fhir/StructureDefinition/diagnosticreport-genetics
type DiagnosticreportGenetics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What was requested
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | partial | preliminary | final +
	Status *codes_go_proto.DiagnosticReportStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	// Name/Code for this diagnostic report
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report - usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Context   *datatypes_go_proto.Reference       `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *DiagnosticreportGenetics_Effective `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was released
	Issued    *datatypes_go_proto.Instant           `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	Performer []*DiagnosticreportGenetics_Performer `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations - simple, or complex nested groups
	Result []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference   `protobuf:"bytes,21,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Image        []*DiagnosticreportGenetics_Image `protobuf:"bytes,22,rep,name=image,proto3" json:"image,omitempty"`
	// Clinical Interpretation of test results
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,25,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
	// AssessedCondition
	AssessedCondition []*datatypes_go_proto.Reference `protobuf:"bytes,26,rep,name=assessed_condition,json=AssessedCondition,proto3" json:"assessed_condition,omitempty"`
	// FamilyHistory
	FamilyMemberHistory []*datatypes_go_proto.Reference `protobuf:"bytes,27,rep,name=family_member_history,json=FamilyMemberHistory,proto3" json:"family_member_history,omitempty"`
	// Analysis
	Analysis []*extensions_go_proto.DiagnosticReportAnalysis `protobuf:"bytes,28,rep,name=analysis,json=Analysis,proto3" json:"analysis,omitempty"`
}

func (x *DiagnosticreportGenetics) Reset() {
	*x = DiagnosticreportGenetics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticreportGenetics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticreportGenetics) ProtoMessage() {}

func (x *DiagnosticreportGenetics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticreportGenetics.ProtoReflect.Descriptor instead.
func (*DiagnosticreportGenetics) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{9}
}

func (x *DiagnosticreportGenetics) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetStatus() *codes_go_proto.DiagnosticReportStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetEffective() *DiagnosticreportGenetics_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetPerformer() []*DiagnosticreportGenetics_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetResult() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetImage() []*DiagnosticreportGenetics_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetAssessedCondition() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.AssessedCondition
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetFamilyMemberHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.FamilyMemberHistory
	}
	return nil
}

func (x *DiagnosticreportGenetics) GetAnalysis() []*extensions_go_proto.DiagnosticReportAnalysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

// Auto-generated from StructureDefinition for DataElement constraint on
// ElementDefinition data type. Definition of an element in a resource or
// extension. See http://hl7.org/fhir/StructureDefinition/elementdefinition-de
type ElementdefinitionDe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Path of the element in the hierarchy of elements
	Path *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Name for this particular element (in a set of slices)
	SliceName *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=slice_name,json=sliceName,proto3" json:"slice_name,omitempty"`
	// Name for element to display with or prompt for element
	Label *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// Corresponding codes in terminologies
	Code []*datatypes_go_proto.Coding `protobuf:"bytes,7,rep,name=code,proto3" json:"code,omitempty"`
	// Full formal definition as narrative text
	Definition *datatypes_go_proto.Markdown `protobuf:"bytes,10,opt,name=definition,proto3" json:"definition,omitempty"`
	// Comments about the use of this element
	Comment *datatypes_go_proto.Markdown `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	// Why this resource has been created
	Requirements *datatypes_go_proto.Markdown `protobuf:"bytes,12,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Other names
	Alias []*datatypes_go_proto.String `protobuf:"bytes,13,rep,name=alias,proto3" json:"alias,omitempty"`
	// Minimum Cardinality
	Min *datatypes_go_proto.UnsignedInt `protobuf:"bytes,14,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum Cardinality (a number or *)
	Max          *datatypes_go_proto.String        `protobuf:"bytes,15,opt,name=max,proto3" json:"max,omitempty"`
	Base         *ElementdefinitionDe_Base         `protobuf:"bytes,16,opt,name=base,proto3" json:"base,omitempty"`
	Type         []*ElementdefinitionDe_TypeRef    `protobuf:"bytes,18,rep,name=type,proto3" json:"type,omitempty"`
	DefaultValue *ElementdefinitionDe_DefaultValue `protobuf:"bytes,19,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Implicit meaning when this element is missing
	MeaningWhenMissing *datatypes_go_proto.Markdown `protobuf:"bytes,20,opt,name=meaning_when_missing,json=meaningWhenMissing,proto3" json:"meaning_when_missing,omitempty"`
	// What the order of the elements means
	OrderMeaning *datatypes_go_proto.String     `protobuf:"bytes,21,opt,name=order_meaning,json=orderMeaning,proto3" json:"order_meaning,omitempty"`
	Example      []*ElementdefinitionDe_Example `protobuf:"bytes,24,rep,name=example,proto3" json:"example,omitempty"`
	MinValue     *ElementdefinitionDe_MinValue  `protobuf:"bytes,25,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue     *ElementdefinitionDe_MaxValue  `protobuf:"bytes,26,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// Max length for strings
	MaxLength *datatypes_go_proto.Integer `protobuf:"bytes,27,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	// Reference to invariant about presence
	Condition  []*datatypes_go_proto.Id          `protobuf:"bytes,28,rep,name=condition,proto3" json:"condition,omitempty"`
	Constraint []*ElementdefinitionDe_Constraint `protobuf:"bytes,29,rep,name=constraint,proto3" json:"constraint,omitempty"`
	// If the element must supported
	MustSupport *datatypes_go_proto.Boolean                   `protobuf:"bytes,30,opt,name=must_support,json=mustSupport,proto3" json:"must_support,omitempty"`
	Binding     *ElementdefinitionDe_ElementDefinitionBinding `protobuf:"bytes,33,opt,name=binding,proto3" json:"binding,omitempty"`
	Mapping     []*ElementdefinitionDe_Mapping                `protobuf:"bytes,34,rep,name=mapping,proto3" json:"mapping,omitempty"`
	// Extension
	Question []*datatypes_go_proto.String `protobuf:"bytes,35,rep,name=question,json=Question,proto3" json:"question,omitempty"`
	// Extension
	AllowedUnits *extensions_go_proto.ElementDefinitionAllowedUnits_Value `protobuf:"bytes,36,opt,name=allowed_units,json=AllowedUnits,proto3" json:"allowed_units,omitempty"`
}

func (x *ElementdefinitionDe) Reset() {
	*x = ElementdefinitionDe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe) ProtoMessage() {}

func (x *ElementdefinitionDe) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10}
}

func (x *ElementdefinitionDe) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementdefinitionDe) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementdefinitionDe) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ElementdefinitionDe) GetSliceName() *datatypes_go_proto.String {
	if x != nil {
		return x.SliceName
	}
	return nil
}

func (x *ElementdefinitionDe) GetLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ElementdefinitionDe) GetCode() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ElementdefinitionDe) GetDefinition() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *ElementdefinitionDe) GetComment() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ElementdefinitionDe) GetRequirements() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ElementdefinitionDe) GetAlias() []*datatypes_go_proto.String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *ElementdefinitionDe) GetMin() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ElementdefinitionDe) GetMax() *datatypes_go_proto.String {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *ElementdefinitionDe) GetBase() *ElementdefinitionDe_Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ElementdefinitionDe) GetType() []*ElementdefinitionDe_TypeRef {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ElementdefinitionDe) GetDefaultValue() *ElementdefinitionDe_DefaultValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ElementdefinitionDe) GetMeaningWhenMissing() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.MeaningWhenMissing
	}
	return nil
}

func (x *ElementdefinitionDe) GetOrderMeaning() *datatypes_go_proto.String {
	if x != nil {
		return x.OrderMeaning
	}
	return nil
}

func (x *ElementdefinitionDe) GetExample() []*ElementdefinitionDe_Example {
	if x != nil {
		return x.Example
	}
	return nil
}

func (x *ElementdefinitionDe) GetMinValue() *ElementdefinitionDe_MinValue {
	if x != nil {
		return x.MinValue
	}
	return nil
}

func (x *ElementdefinitionDe) GetMaxValue() *ElementdefinitionDe_MaxValue {
	if x != nil {
		return x.MaxValue
	}
	return nil
}

func (x *ElementdefinitionDe) GetMaxLength() *datatypes_go_proto.Integer {
	if x != nil {
		return x.MaxLength
	}
	return nil
}

func (x *ElementdefinitionDe) GetCondition() []*datatypes_go_proto.Id {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ElementdefinitionDe) GetConstraint() []*ElementdefinitionDe_Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *ElementdefinitionDe) GetMustSupport() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.MustSupport
	}
	return nil
}

func (x *ElementdefinitionDe) GetBinding() *ElementdefinitionDe_ElementDefinitionBinding {
	if x != nil {
		return x.Binding
	}
	return nil
}

func (x *ElementdefinitionDe) GetMapping() []*ElementdefinitionDe_Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *ElementdefinitionDe) GetQuestion() []*datatypes_go_proto.String {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *ElementdefinitionDe) GetAllowedUnits() *extensions_go_proto.ElementDefinitionAllowedUnits_Value {
	if x != nil {
		return x.AllowedUnits
	}
	return nil
}

// Auto-generated from StructureDefinition for Family member history for
// genetics analysis. Information about patient's relatives, relevant for
// patient. See
// http://hl7.org/fhir/StructureDefinition/familymemberhistory-genetic
type FamilymemberhistoryGenetic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// External Id(s) for this record
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Instantiates protocol or definition
	Definition []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=definition,proto3" json:"definition,omitempty"`
	// partial | completed | entered-in-error | health-unknown
	Status *codes_go_proto.FamilyHistoryStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// The taking of a family member's history did not occur
	NotDone *datatypes_go_proto.Boolean `protobuf:"bytes,12,opt,name=not_done,json=notDone,proto3" json:"not_done,omitempty"`
	// subject-unknown | withheld | unable-to-obtain | deferred
	NotDoneReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=not_done_reason,json=notDoneReason,proto3" json:"not_done_reason,omitempty"`
	// Patient history is about
	Patient *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=patient,proto3" json:"patient,omitempty"`
	// When history was captured/updated
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=date,proto3" json:"date,omitempty"`
	// The family member described
	Name *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	// Relationship to the subject
	Relationship *datatypes_go_proto.CodeableConcept `protobuf:"bytes,17,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// male | female | other | unknown
	Gender *codes_go_proto.AdministrativeGenderCode `protobuf:"bytes,18,opt,name=gender,proto3" json:"gender,omitempty"`
	Born   *FamilymemberhistoryGenetic_Born         `protobuf:"bytes,19,opt,name=born,proto3" json:"born,omitempty"`
	Age    *FamilymemberhistoryGenetic_AgeType      `protobuf:"bytes,20,opt,name=age,proto3" json:"age,omitempty"`
	// Age is estimated?
	EstimatedAge *datatypes_go_proto.Boolean          `protobuf:"bytes,21,opt,name=estimated_age,json=estimatedAge,proto3" json:"estimated_age,omitempty"`
	Deceased     *FamilymemberhistoryGenetic_Deceased `protobuf:"bytes,22,opt,name=deceased,proto3" json:"deceased,omitempty"`
	// Why was family member history performed?
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Why was family member history performed?
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,24,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// General note about related person
	Note      []*datatypes_go_proto.Annotation        `protobuf:"bytes,25,rep,name=note,proto3" json:"note,omitempty"`
	Condition []*FamilymemberhistoryGenetic_Condition `protobuf:"bytes,26,rep,name=condition,proto3" json:"condition,omitempty"`
	// Extension
	Parent []*extensions_go_proto.FamilyMemberHistoryParent `protobuf:"bytes,27,rep,name=parent,json=Parent,proto3" json:"parent,omitempty"`
	// Extension
	Sibling []*extensions_go_proto.FamilyMemberHistorySibling `protobuf:"bytes,28,rep,name=sibling,json=Sibling,proto3" json:"sibling,omitempty"`
	// Extension
	Observation []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=observation,json=Observation,proto3" json:"observation,omitempty"`
}

func (x *FamilymemberhistoryGenetic) Reset() {
	*x = FamilymemberhistoryGenetic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilymemberhistoryGenetic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilymemberhistoryGenetic) ProtoMessage() {}

func (x *FamilymemberhistoryGenetic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilymemberhistoryGenetic.ProtoReflect.Descriptor instead.
func (*FamilymemberhistoryGenetic) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{11}
}

func (x *FamilymemberhistoryGenetic) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetDefinition() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetStatus() *codes_go_proto.FamilyHistoryStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetNotDone() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.NotDone
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetNotDoneReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.NotDoneReason
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetPatient() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetRelationship() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetGender() *codes_go_proto.AdministrativeGenderCode {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetBorn() *FamilymemberhistoryGenetic_Born {
	if x != nil {
		return x.Born
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetAge() *FamilymemberhistoryGenetic_AgeType {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetEstimatedAge() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.EstimatedAge
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetDeceased() *FamilymemberhistoryGenetic_Deceased {
	if x != nil {
		return x.Deceased
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetCondition() []*FamilymemberhistoryGenetic_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetParent() []*extensions_go_proto.FamilyMemberHistoryParent {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetSibling() []*extensions_go_proto.FamilyMemberHistorySibling {
	if x != nil {
		return x.Sibling
	}
	return nil
}

func (x *FamilymemberhistoryGenetic) GetObservation() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Observation
	}
	return nil
}

// Auto-generated from StructureDefinition for Example Lipid Profile.
// HDL Cholesterol Result.
// See http://hl7.org/fhir/StructureDefinition/hdlcholesterol
type HdlCholesterol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// HDL Cholesterol
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *HdlCholesterol_Effective     `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *HdlCholesterol_Value           `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// + | ++ | +++ | - | -- | ---
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference  `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange *HdlCholesterol_ReferenceRange `protobuf:"bytes,27,opt,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Component      []*HdlCholesterol_Component    `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *HdlCholesterol) Reset() {
	*x = HdlCholesterol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdlCholesterol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdlCholesterol) ProtoMessage() {}

func (x *HdlCholesterol) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdlCholesterol.ProtoReflect.Descriptor instead.
func (*HdlCholesterol) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{12}
}

func (x *HdlCholesterol) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HdlCholesterol) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *HdlCholesterol) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *HdlCholesterol) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *HdlCholesterol) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *HdlCholesterol) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *HdlCholesterol) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *HdlCholesterol) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *HdlCholesterol) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *HdlCholesterol) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *HdlCholesterol) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *HdlCholesterol) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *HdlCholesterol) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *HdlCholesterol) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *HdlCholesterol) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *HdlCholesterol) GetEffective() *HdlCholesterol_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *HdlCholesterol) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *HdlCholesterol) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *HdlCholesterol) GetValue() *HdlCholesterol_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HdlCholesterol) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *HdlCholesterol) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *HdlCholesterol) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *HdlCholesterol) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *HdlCholesterol) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *HdlCholesterol) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *HdlCholesterol) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *HdlCholesterol) GetReferenceRange() *HdlCholesterol_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *HdlCholesterol) GetComponent() []*HdlCholesterol_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Head Circumference Profile.
// See http://hl7.org/fhir/StructureDefinition/headcircum
type Headcircum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Headcircum_CodeableConceptForCode    `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Headcircum_Effective         `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Headcircum_Value               `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Headcircum_ReferenceRange  `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Headcircum_Related         `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Headcircum_Component       `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Headcircum) Reset() {
	*x = Headcircum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headcircum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headcircum) ProtoMessage() {}

func (x *Headcircum) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headcircum.ProtoReflect.Descriptor instead.
func (*Headcircum) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{13}
}

func (x *Headcircum) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Headcircum) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Headcircum) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Headcircum) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Headcircum) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Headcircum) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Headcircum) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Headcircum) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Headcircum) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Headcircum) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Headcircum) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Headcircum) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Headcircum) GetCode() *Headcircum_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Headcircum) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Headcircum) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Headcircum) GetEffective() *Headcircum_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Headcircum) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Headcircum) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Headcircum) GetValue() *Headcircum_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Headcircum) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Headcircum) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Headcircum) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Headcircum) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Headcircum) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Headcircum) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Headcircum) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Headcircum) GetReferenceRange() []*Headcircum_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Headcircum) GetRelated() []*Headcircum_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Headcircum) GetComponent() []*Headcircum_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Heart Rate Profile.
// See http://hl7.org/fhir/StructureDefinition/heartrate
type Heartrate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Heartrate_CodeableConceptForCode     `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Heartrate_Effective          `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Heartrate_Value                `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Heartrate_ReferenceRange   `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Heartrate_Related          `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Heartrate_Component        `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Heartrate) Reset() {
	*x = Heartrate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartrate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartrate) ProtoMessage() {}

func (x *Heartrate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartrate.ProtoReflect.Descriptor instead.
func (*Heartrate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{14}
}

func (x *Heartrate) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Heartrate) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Heartrate) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Heartrate) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Heartrate) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Heartrate) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Heartrate) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Heartrate) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Heartrate) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Heartrate) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Heartrate) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Heartrate) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Heartrate) GetCode() *Heartrate_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Heartrate) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Heartrate) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Heartrate) GetEffective() *Heartrate_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Heartrate) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Heartrate) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Heartrate) GetValue() *Heartrate_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Heartrate) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Heartrate) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Heartrate) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Heartrate) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Heartrate) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Heartrate) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Heartrate) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Heartrate) GetReferenceRange() []*Heartrate_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Heartrate) GetRelated() []*Heartrate_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Heartrate) GetComponent() []*Heartrate_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Profile for HLA Genotyping
// Results. A Diagnostic report - a combination of request information, atomic
// results, images, interpretation, as well as formatted reports. See
// http://hl7.org/fhir/StructureDefinition/hlaresult
type Hlaresult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What was requested
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | partial | preliminary | final +
	Status *codes_go_proto.DiagnosticReportStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	// Name/Code for this diagnostic report
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report - usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Hlaresult_Effective          `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was released
	Issued    *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	Performer []*Hlaresult_Performer      `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations - simple, or complex nested groups
	Result []*datatypes_go_proto.Reference `protobuf:"bytes,20,rep,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Image        []*Hlaresult_Image              `protobuf:"bytes,22,rep,name=image,proto3" json:"image,omitempty"`
	// Clinical Interpretation of test results
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Codes for the conclusion
	CodedDiagnosis []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,rep,name=coded_diagnosis,json=codedDiagnosis,proto3" json:"coded_diagnosis,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,25,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
	// Allele Database
	AlleleDatabase *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=allele_database,json=alleleDatabase,proto3" json:"allele_database,omitempty"`
	// Glstring
	Glstring *extensions_go_proto.DiagnosticReportGlstring `protobuf:"bytes,27,opt,name=glstring,proto3" json:"glstring,omitempty"`
	// Haploid
	Haploid []*extensions_go_proto.DiagnosticReportHaploid `protobuf:"bytes,28,rep,name=haploid,proto3" json:"haploid,omitempty"`
	// The platform, methodology and software applied at the time of the
	// genotyping
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,29,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *Hlaresult) Reset() {
	*x = Hlaresult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hlaresult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hlaresult) ProtoMessage() {}

func (x *Hlaresult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hlaresult.ProtoReflect.Descriptor instead.
func (*Hlaresult) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{15}
}

func (x *Hlaresult) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Hlaresult) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Hlaresult) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Hlaresult) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Hlaresult) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Hlaresult) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Hlaresult) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Hlaresult) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Hlaresult) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Hlaresult) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Hlaresult) GetStatus() *codes_go_proto.DiagnosticReportStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Hlaresult) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Hlaresult) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Hlaresult) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Hlaresult) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Hlaresult) GetEffective() *Hlaresult_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Hlaresult) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Hlaresult) GetPerformer() []*Hlaresult_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Hlaresult) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Hlaresult) GetResult() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Hlaresult) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *Hlaresult) GetImage() []*Hlaresult_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Hlaresult) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *Hlaresult) GetCodedDiagnosis() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CodedDiagnosis
	}
	return nil
}

func (x *Hlaresult) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

func (x *Hlaresult) GetAlleleDatabase() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AlleleDatabase
	}
	return nil
}

func (x *Hlaresult) GetGlstring() *extensions_go_proto.DiagnosticReportGlstring {
	if x != nil {
		return x.Glstring
	}
	return nil
}

func (x *Hlaresult) GetHaploid() []*extensions_go_proto.DiagnosticReportHaploid {
	if x != nil {
		return x.Haploid
	}
	return nil
}

func (x *Hlaresult) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

// Auto-generated from StructureDefinition for Example Lipid Profile.
// LDL Cholesterol Result.
// See http://hl7.org/fhir/StructureDefinition/ldlcholesterol
type LdlCholesterol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// LDL Cholesterol -measured or calculated per code
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *LdlCholesterol_Effective     `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *LdlCholesterol_Value           `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// + | ++ | +++ | - | -- | ---
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference  `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange *LdlCholesterol_ReferenceRange `protobuf:"bytes,27,opt,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Component      []*LdlCholesterol_Component    `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *LdlCholesterol) Reset() {
	*x = LdlCholesterol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LdlCholesterol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdlCholesterol) ProtoMessage() {}

func (x *LdlCholesterol) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdlCholesterol.ProtoReflect.Descriptor instead.
func (*LdlCholesterol) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{16}
}

func (x *LdlCholesterol) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LdlCholesterol) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *LdlCholesterol) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *LdlCholesterol) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *LdlCholesterol) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *LdlCholesterol) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *LdlCholesterol) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *LdlCholesterol) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *LdlCholesterol) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *LdlCholesterol) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *LdlCholesterol) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LdlCholesterol) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *LdlCholesterol) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *LdlCholesterol) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *LdlCholesterol) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *LdlCholesterol) GetEffective() *LdlCholesterol_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *LdlCholesterol) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *LdlCholesterol) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *LdlCholesterol) GetValue() *LdlCholesterol_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LdlCholesterol) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *LdlCholesterol) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *LdlCholesterol) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *LdlCholesterol) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *LdlCholesterol) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *LdlCholesterol) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *LdlCholesterol) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *LdlCholesterol) GetReferenceRange() *LdlCholesterol_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *LdlCholesterol) GetComponent() []*LdlCholesterol_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Example Lipid Profile.
// Lipid Lab Report.
// See http://hl7.org/fhir/StructureDefinition/lipidprofile
type LipidProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business identifier for report
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// What was requested
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | partial | preliminary | final +
	Status *codes_go_proto.DiagnosticReportStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Service category
	Category *datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	// LOINC Code for Lipid Panel with LDL
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// The subject of the report - usually, but not always, the patient
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Health care event when test ordered
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *LipidProfile_Effective       `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// DateTime this version was released
	Issued    *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	Performer []*LipidProfile_Performer   `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	// Specimens this report is based on
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,19,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Observations - simple, or complex nested groups
	Result *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=result,proto3" json:"result,omitempty"`
	// Reference to full details of imaging associated with the diagnostic report
	ImagingStudy []*datatypes_go_proto.Reference `protobuf:"bytes,21,rep,name=imaging_study,json=imagingStudy,proto3" json:"imaging_study,omitempty"`
	Image        []*LipidProfile_Image           `protobuf:"bytes,22,rep,name=image,proto3" json:"image,omitempty"`
	// Clinical Interpretation of Lipid Panel
	Conclusion *datatypes_go_proto.String `protobuf:"bytes,23,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	// Entire report as issued
	PresentedForm []*datatypes_go_proto.Attachment `protobuf:"bytes,25,rep,name=presented_form,json=presentedForm,proto3" json:"presented_form,omitempty"`
}

func (x *LipidProfile) Reset() {
	*x = LipidProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LipidProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipidProfile) ProtoMessage() {}

func (x *LipidProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipidProfile.ProtoReflect.Descriptor instead.
func (*LipidProfile) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{17}
}

func (x *LipidProfile) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LipidProfile) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *LipidProfile) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *LipidProfile) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *LipidProfile) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *LipidProfile) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *LipidProfile) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *LipidProfile) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *LipidProfile) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *LipidProfile) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *LipidProfile) GetStatus() *codes_go_proto.DiagnosticReportStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *LipidProfile) GetCategory() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *LipidProfile) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *LipidProfile) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *LipidProfile) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *LipidProfile) GetEffective() *LipidProfile_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *LipidProfile) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *LipidProfile) GetPerformer() []*LipidProfile_Performer {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *LipidProfile) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *LipidProfile) GetResult() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *LipidProfile) GetImagingStudy() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ImagingStudy
	}
	return nil
}

func (x *LipidProfile) GetImage() []*LipidProfile_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *LipidProfile) GetConclusion() *datatypes_go_proto.String {
	if x != nil {
		return x.Conclusion
	}
	return nil
}

func (x *LipidProfile) GetPresentedForm() []*datatypes_go_proto.Attachment {
	if x != nil {
		return x.PresentedForm
	}
	return nil
}

// Auto-generated from StructureDefinition for MetadataResource, last updated
// 2017-04-19T07:44:43.294+10:00. Common Ancestor declaration for definitional
// resources. See http://hl7.org/fhir/StructureDefinition/MetadataResource
type MetadataResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Logical URI to reference this metadata resource (globally unique)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Business version of the metadata resource
	Version *datatypes_go_proto.String `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// Name for this metadata resource (computer friendly)
	Name *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Name for this metadata resource (human friendly)
	Title *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`
	// draft | active | retired | unknown
	Status *codes_go_proto.PublicationStatusCode `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// For testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,14,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Date this was last changed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,15,opt,name=date,proto3" json:"date,omitempty"`
	// Name of the publisher (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,16,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*metadatatypes_go_proto.ContactDetail `protobuf:"bytes,17,rep,name=contact,proto3" json:"contact,omitempty"`
	// Context the content is intended to support
	UseContext []*metadatatypes_go_proto.UsageContext `protobuf:"bytes,18,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Intended jurisdiction for metadata resource (if applicable)
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Natural language description of the metadata resource
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *MetadataResource) Reset() {
	*x = MetadataResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataResource) ProtoMessage() {}

func (x *MetadataResource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataResource.ProtoReflect.Descriptor instead.
func (*MetadataResource) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{18}
}

func (x *MetadataResource) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MetadataResource) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MetadataResource) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *MetadataResource) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *MetadataResource) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MetadataResource) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *MetadataResource) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MetadataResource) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MetadataResource) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *MetadataResource) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *MetadataResource) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MetadataResource) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *MetadataResource) GetStatus() *codes_go_proto.PublicationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MetadataResource) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *MetadataResource) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *MetadataResource) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *MetadataResource) GetContact() []*metadatatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *MetadataResource) GetUseContext() []*metadatatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *MetadataResource) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *MetadataResource) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

// Auto-generated from StructureDefinition for Observation-genetics.
// Measurements and simple assertions.
// See http://hl7.org/fhir/StructureDefinition/observation-genetics
type ObservationGenetics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Type of observation (code / type)
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference  `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *ObservationGenetics_Effective `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *ObservationGenetics_Value      `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference         `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*ObservationGenetics_ReferenceRange `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*ObservationGenetics_Related        `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*ObservationGenetics_Component      `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
	// DNA sequence variant
	DnaSequenceVariantName *datatypes_go_proto.CodeableConcept `protobuf:"bytes,30,opt,name=dna_sequence_variant_name,json=DNASequenceVariantName,proto3" json:"dna_sequence_variant_name,omitempty"`
	// DNA sequence variant ID
	DnaVariantId *datatypes_go_proto.CodeableConcept `protobuf:"bytes,31,opt,name=dna_variant_id,json=DNAVariantId,proto3" json:"dna_variant_id,omitempty"`
	// DNA sequence variant type
	DnaSequenceVariantType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,32,opt,name=dna_sequence_variant_type,json=DNASequenceVariantType,proto3" json:"dna_sequence_variant_type,omitempty"`
	// Amino acid change
	AminoAcidChangeName *datatypes_go_proto.CodeableConcept `protobuf:"bytes,33,opt,name=amino_acid_change_name,json=AminoAcidChangeName,proto3" json:"amino_acid_change_name,omitempty"`
	// Amino Acid Change Type
	AminoAcidChangeType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,34,opt,name=amino_acid_change_type,json=AminoAcidChangeType,proto3" json:"amino_acid_change_type,omitempty"`
	// HGNC gene symbol
	GeneSymbol *datatypes_go_proto.CodeableConcept `protobuf:"bytes,35,opt,name=gene_symbol,json=GeneSymbol,proto3" json:"gene_symbol,omitempty"`
	// DNA region name
	DnaRegionName *datatypes_go_proto.String `protobuf:"bytes,36,opt,name=dna_region_name,json=DNARegionName,proto3" json:"dna_region_name,omitempty"`
	// Name of allele
	AlleleName *datatypes_go_proto.CodeableConcept `protobuf:"bytes,37,opt,name=allele_name,json=AlleleName,proto3" json:"allele_name,omitempty"`
	// The level of occurrence of a single DNA sequence variant within a set of
	// chromosomes: Heteroplasmic / Homoplasmic / Homozygous / Heterozygous /
	// Hemizygous
	AllelicState *datatypes_go_proto.CodeableConcept `protobuf:"bytes,38,opt,name=allelic_state,json=AllelicState,proto3" json:"allelic_state,omitempty"`
	// Allele frequency
	AllelicFrequency *datatypes_go_proto.Decimal `protobuf:"bytes,39,opt,name=allelic_frequency,json=AllelicFrequency,proto3" json:"allelic_frequency,omitempty"`
	// Copy number variation
	CopyNumberEvent *datatypes_go_proto.CodeableConcept `protobuf:"bytes,40,opt,name=copy_number_event,json=CopyNumberEvent,proto3" json:"copy_number_event,omitempty"`
	// Genomic source class
	GenomicSourceClass *datatypes_go_proto.CodeableConcept `protobuf:"bytes,41,opt,name=genomic_source_class,json=GenomicSourceClass,proto3" json:"genomic_source_class,omitempty"`
	// Phase set identifier (UUID/OID)
	PhaseSet *datatypes_go_proto.Uri `protobuf:"bytes,42,opt,name=phase_set,json=PhaseSet,proto3" json:"phase_set,omitempty"`
	// Sequence
	Sequence []*datatypes_go_proto.Reference `protobuf:"bytes,43,rep,name=sequence,json=Sequence,proto3" json:"sequence,omitempty"`
	// Clinical interpretations for variant
	InterpretationSlice *datatypes_go_proto.Reference `protobuf:"bytes,44,opt,name=interpretation_slice,json=InterpretationSlice,proto3" json:"interpretation_slice,omitempty"`
}

func (x *ObservationGenetics) Reset() {
	*x = ObservationGenetics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationGenetics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGenetics) ProtoMessage() {}

func (x *ObservationGenetics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGenetics.ProtoReflect.Descriptor instead.
func (*ObservationGenetics) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{19}
}

func (x *ObservationGenetics) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationGenetics) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ObservationGenetics) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ObservationGenetics) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ObservationGenetics) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ObservationGenetics) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ObservationGenetics) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ObservationGenetics) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ObservationGenetics) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ObservationGenetics) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *ObservationGenetics) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ObservationGenetics) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ObservationGenetics) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ObservationGenetics) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ObservationGenetics) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ObservationGenetics) GetEffective() *ObservationGenetics_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *ObservationGenetics) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *ObservationGenetics) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *ObservationGenetics) GetValue() *ObservationGenetics_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ObservationGenetics) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *ObservationGenetics) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *ObservationGenetics) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ObservationGenetics) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *ObservationGenetics) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *ObservationGenetics) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *ObservationGenetics) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ObservationGenetics) GetReferenceRange() []*ObservationGenetics_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *ObservationGenetics) GetRelated() []*ObservationGenetics_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *ObservationGenetics) GetComponent() []*ObservationGenetics_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ObservationGenetics) GetDnaSequenceVariantName() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DnaSequenceVariantName
	}
	return nil
}

func (x *ObservationGenetics) GetDnaVariantId() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DnaVariantId
	}
	return nil
}

func (x *ObservationGenetics) GetDnaSequenceVariantType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DnaSequenceVariantType
	}
	return nil
}

func (x *ObservationGenetics) GetAminoAcidChangeName() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AminoAcidChangeName
	}
	return nil
}

func (x *ObservationGenetics) GetAminoAcidChangeType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AminoAcidChangeType
	}
	return nil
}

func (x *ObservationGenetics) GetGeneSymbol() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.GeneSymbol
	}
	return nil
}

func (x *ObservationGenetics) GetDnaRegionName() *datatypes_go_proto.String {
	if x != nil {
		return x.DnaRegionName
	}
	return nil
}

func (x *ObservationGenetics) GetAlleleName() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AlleleName
	}
	return nil
}

func (x *ObservationGenetics) GetAllelicState() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AllelicState
	}
	return nil
}

func (x *ObservationGenetics) GetAllelicFrequency() *datatypes_go_proto.Decimal {
	if x != nil {
		return x.AllelicFrequency
	}
	return nil
}

func (x *ObservationGenetics) GetCopyNumberEvent() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.CopyNumberEvent
	}
	return nil
}

func (x *ObservationGenetics) GetGenomicSourceClass() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.GenomicSourceClass
	}
	return nil
}

func (x *ObservationGenetics) GetPhaseSet() *datatypes_go_proto.Uri {
	if x != nil {
		return x.PhaseSet
	}
	return nil
}

func (x *ObservationGenetics) GetSequence() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *ObservationGenetics) GetInterpretationSlice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.InterpretationSlice
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Oxygen Saturation Profile.
// See http://hl7.org/fhir/StructureDefinition/oxygensat
type Oxygensat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Oxygensat_CodeableConceptForCode     `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Oxygensat_Effective          `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Oxygensat_Value                `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Oxygensat_ReferenceRange   `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Oxygensat_Related          `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Oxygensat_Component        `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Oxygensat) Reset() {
	*x = Oxygensat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oxygensat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oxygensat) ProtoMessage() {}

func (x *Oxygensat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oxygensat.ProtoReflect.Descriptor instead.
func (*Oxygensat) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{20}
}

func (x *Oxygensat) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Oxygensat) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Oxygensat) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Oxygensat) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Oxygensat) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Oxygensat) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Oxygensat) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Oxygensat) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Oxygensat) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Oxygensat) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Oxygensat) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Oxygensat) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Oxygensat) GetCode() *Oxygensat_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Oxygensat) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Oxygensat) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Oxygensat) GetEffective() *Oxygensat_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Oxygensat) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Oxygensat) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Oxygensat) GetValue() *Oxygensat_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Oxygensat) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Oxygensat) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Oxygensat) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Oxygensat) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Oxygensat) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Oxygensat) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Oxygensat) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Oxygensat) GetReferenceRange() []*Oxygensat_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Oxygensat) GetRelated() []*Oxygensat_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Oxygensat) GetComponent() []*Oxygensat_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for ProcedureRequest-Genetics.
// A request for a procedure or diagnostic to be performed.
// See http://hl7.org/fhir/StructureDefinition/procedurerequest-genetics
type ProcedurerequestGenetics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Extension
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifiers assigned to this order
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Protocol or definition
	Definition []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=definition,proto3" json:"definition,omitempty"`
	// What request fulfills
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,11,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// What request replaces
	Replaces []*datatypes_go_proto.Reference `protobuf:"bytes,12,rep,name=replaces,proto3" json:"replaces,omitempty"`
	// Composite Request ID
	Requisition *datatypes_go_proto.Identifier `protobuf:"bytes,13,opt,name=requisition,proto3" json:"requisition,omitempty"`
	// draft | active | suspended | completed | entered-in-error | cancelled
	Status *codes_go_proto.RequestStatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// proposal | plan | order +
	Intent *codes_go_proto.RequestIntentCode `protobuf:"bytes,15,opt,name=intent,proto3" json:"intent,omitempty"`
	// routine | urgent | asap | stat
	Priority *codes_go_proto.RequestPriorityCode `protobuf:"bytes,16,opt,name=priority,proto3" json:"priority,omitempty"`
	// True if procedure should not be performed
	DoNotPerform *datatypes_go_proto.Boolean `protobuf:"bytes,17,opt,name=do_not_perform,json=doNotPerform,proto3" json:"do_not_perform,omitempty"`
	// Classification of procedure
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,18,rep,name=category,proto3" json:"category,omitempty"`
	// What is being requested/ordered
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,19,opt,name=code,proto3" json:"code,omitempty"`
	// Individual the service is ordered for
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,20,opt,name=subject,proto3" json:"subject,omitempty"`
	// Encounter or Episode during which request was created
	Context    *datatypes_go_proto.Reference        `protobuf:"bytes,21,opt,name=context,proto3" json:"context,omitempty"`
	Occurrence *ProcedurerequestGenetics_Occurrence `protobuf:"bytes,22,opt,name=occurrence,proto3" json:"occurrence,omitempty"`
	AsNeeded   *ProcedurerequestGenetics_AsNeeded   `protobuf:"bytes,23,opt,name=as_needed,json=asNeeded,proto3" json:"as_needed,omitempty"`
	// Date request signed
	AuthoredOn *datatypes_go_proto.DateTime        `protobuf:"bytes,24,opt,name=authored_on,json=authoredOn,proto3" json:"authored_on,omitempty"`
	Requester  *ProcedurerequestGenetics_Requester `protobuf:"bytes,25,opt,name=requester,proto3" json:"requester,omitempty"`
	// Performer role
	PerformerType *datatypes_go_proto.CodeableConcept `protobuf:"bytes,26,opt,name=performer_type,json=performerType,proto3" json:"performer_type,omitempty"`
	// Requested perfomer
	Performer *datatypes_go_proto.Reference `protobuf:"bytes,27,opt,name=performer,proto3" json:"performer,omitempty"`
	// Explanation/Justification for test
	ReasonCode []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,28,rep,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	// Explanation/Justification for test
	ReasonReference []*datatypes_go_proto.Reference `protobuf:"bytes,29,rep,name=reason_reference,json=reasonReference,proto3" json:"reason_reference,omitempty"`
	// Additional clinical information
	SupportingInfo []*datatypes_go_proto.Reference `protobuf:"bytes,30,rep,name=supporting_info,json=supportingInfo,proto3" json:"supporting_info,omitempty"`
	// Procedure Samples
	Specimen []*datatypes_go_proto.Reference `protobuf:"bytes,31,rep,name=specimen,proto3" json:"specimen,omitempty"`
	// Location on Body
	BodySite []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,32,rep,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// Comments
	Note []*datatypes_go_proto.Annotation `protobuf:"bytes,33,rep,name=note,proto3" json:"note,omitempty"`
	// Request provenance
	RelevantHistory []*datatypes_go_proto.Reference `protobuf:"bytes,34,rep,name=relevant_history,json=relevantHistory,proto3" json:"relevant_history,omitempty"`
	// The items the orderer requested
	Item []*extensions_go_proto.DiagnosticReportItem `protobuf:"bytes,35,rep,name=item,json=Item,proto3" json:"item,omitempty"`
}

func (x *ProcedurerequestGenetics) Reset() {
	*x = ProcedurerequestGenetics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedurerequestGenetics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedurerequestGenetics) ProtoMessage() {}

func (x *ProcedurerequestGenetics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedurerequestGenetics.ProtoReflect.Descriptor instead.
func (*ProcedurerequestGenetics) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{21}
}

func (x *ProcedurerequestGenetics) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetDefinition() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetReplaces() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Replaces
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetRequisition() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Requisition
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetStatus() *codes_go_proto.RequestStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetIntent() *codes_go_proto.RequestIntentCode {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetPriority() *codes_go_proto.RequestPriorityCode {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetDoNotPerform() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.DoNotPerform
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetOccurrence() *ProcedurerequestGenetics_Occurrence {
	if x != nil {
		return x.Occurrence
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetAsNeeded() *ProcedurerequestGenetics_AsNeeded {
	if x != nil {
		return x.AsNeeded
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetAuthoredOn() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.AuthoredOn
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetRequester() *ProcedurerequestGenetics_Requester {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetPerformerType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.PerformerType
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetPerformer() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetReasonCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.ReasonCode
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetReasonReference() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.ReasonReference
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetSupportingInfo() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.SupportingInfo
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetSpecimen() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetBodySite() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetNote() []*datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetRelevantHistory() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.RelevantHistory
	}
	return nil
}

func (x *ProcedurerequestGenetics) GetItem() []*extensions_go_proto.DiagnosticReportItem {
	if x != nil {
		return x.Item
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Respiratory Rate Profile.
// See http://hl7.org/fhir/StructureDefinition/resprate
type Resprate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Resprate_CodeableConceptForCode      `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Resprate_Effective           `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Resprate_Value                 `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Resprate_ReferenceRange    `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Resprate_Related           `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Resprate_Component         `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Resprate) Reset() {
	*x = Resprate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resprate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resprate) ProtoMessage() {}

func (x *Resprate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resprate.ProtoReflect.Descriptor instead.
func (*Resprate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{22}
}

func (x *Resprate) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Resprate) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Resprate) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Resprate) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Resprate) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Resprate) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Resprate) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Resprate) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Resprate) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Resprate) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Resprate) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Resprate) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Resprate) GetCode() *Resprate_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Resprate) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Resprate) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Resprate) GetEffective() *Resprate_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Resprate) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Resprate) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Resprate) GetValue() *Resprate_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Resprate) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Resprate) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Resprate) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Resprate) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Resprate) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Resprate) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Resprate) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Resprate) GetReferenceRange() []*Resprate_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Resprate) GetRelated() []*Resprate_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Resprate) GetComponent() []*Resprate_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Shareable CodeSystem.
// A set of codes drawn from one or more code systems.
// See http://hl7.org/fhir/StructureDefinition/shareablecodesystem
type Shareablecodesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Logical URI to reference this code system (globally unique) (Coding.system)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Additional identifier for the code system
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,10,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Business version of the code system (Coding.version)
	Version *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	// Name for this code system (computer friendly)
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Name for this code system (human friendly)
	Title *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
	// draft | active | retired | unknown
	Status *codes_go_proto.PublicationStatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// For testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,15,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Date this was last changed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=date,proto3" json:"date,omitempty"`
	// Name of the publisher (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*metadatatypes_go_proto.ContactDetail `protobuf:"bytes,18,rep,name=contact,proto3" json:"contact,omitempty"`
	// Natural language description of the code system
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,19,opt,name=description,proto3" json:"description,omitempty"`
	// Context the content is intended to support
	UseContext []*metadatatypes_go_proto.UsageContext `protobuf:"bytes,20,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Intended jurisdiction for code system (if applicable)
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Why this code system is defined
	Purpose *datatypes_go_proto.Markdown `protobuf:"bytes,22,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,23,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// If code comparison is case sensitive
	CaseSensitive *datatypes_go_proto.Boolean `protobuf:"bytes,24,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	// Canonical URL for value set with entire code system
	ValueSet *datatypes_go_proto.Uri `protobuf:"bytes,25,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
	// grouped-by | is-a | part-of | classified-with
	HierarchyMeaning *codes_go_proto.CodeSystemHierarchyMeaningCode `protobuf:"bytes,26,opt,name=hierarchy_meaning,json=hierarchyMeaning,proto3" json:"hierarchy_meaning,omitempty"`
	// If code system defines a post-composition grammar
	Compositional *datatypes_go_proto.Boolean `protobuf:"bytes,27,opt,name=compositional,proto3" json:"compositional,omitempty"`
	// If definitions are not stable
	VersionNeeded *datatypes_go_proto.Boolean `protobuf:"bytes,28,opt,name=version_needed,json=versionNeeded,proto3" json:"version_needed,omitempty"`
	// not-present | example | fragment | complete
	Content *codes_go_proto.CodeSystemContentModeCode `protobuf:"bytes,29,opt,name=content,proto3" json:"content,omitempty"`
	// Total concepts in the code system
	Count    *datatypes_go_proto.UnsignedInt          `protobuf:"bytes,30,opt,name=count,proto3" json:"count,omitempty"`
	Filter   []*Shareablecodesystem_Filter            `protobuf:"bytes,31,rep,name=filter,proto3" json:"filter,omitempty"`
	Property []*Shareablecodesystem_Property          `protobuf:"bytes,32,rep,name=property,proto3" json:"property,omitempty"`
	Concept  []*Shareablecodesystem_ConceptDefinition `protobuf:"bytes,33,rep,name=concept,proto3" json:"concept,omitempty"`
}

func (x *Shareablecodesystem) Reset() {
	*x = Shareablecodesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablecodesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablecodesystem) ProtoMessage() {}

func (x *Shareablecodesystem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablecodesystem.ProtoReflect.Descriptor instead.
func (*Shareablecodesystem) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{23}
}

func (x *Shareablecodesystem) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablecodesystem) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Shareablecodesystem) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Shareablecodesystem) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Shareablecodesystem) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Shareablecodesystem) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Shareablecodesystem) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablecodesystem) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablecodesystem) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Shareablecodesystem) GetIdentifier() *datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Shareablecodesystem) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Shareablecodesystem) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Shareablecodesystem) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Shareablecodesystem) GetStatus() *codes_go_proto.PublicationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Shareablecodesystem) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *Shareablecodesystem) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Shareablecodesystem) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Shareablecodesystem) GetContact() []*metadatatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Shareablecodesystem) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Shareablecodesystem) GetUseContext() []*metadatatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *Shareablecodesystem) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *Shareablecodesystem) GetPurpose() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *Shareablecodesystem) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *Shareablecodesystem) GetCaseSensitive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.CaseSensitive
	}
	return nil
}

func (x *Shareablecodesystem) GetValueSet() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

func (x *Shareablecodesystem) GetHierarchyMeaning() *codes_go_proto.CodeSystemHierarchyMeaningCode {
	if x != nil {
		return x.HierarchyMeaning
	}
	return nil
}

func (x *Shareablecodesystem) GetCompositional() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Compositional
	}
	return nil
}

func (x *Shareablecodesystem) GetVersionNeeded() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.VersionNeeded
	}
	return nil
}

func (x *Shareablecodesystem) GetContent() *codes_go_proto.CodeSystemContentModeCode {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Shareablecodesystem) GetCount() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *Shareablecodesystem) GetFilter() []*Shareablecodesystem_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Shareablecodesystem) GetProperty() []*Shareablecodesystem_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *Shareablecodesystem) GetConcept() []*Shareablecodesystem_ConceptDefinition {
	if x != nil {
		return x.Concept
	}
	return nil
}

// Auto-generated from StructureDefinition for Shareable ValueSet.
// A set of codes drawn from one or more code systems.
// See http://hl7.org/fhir/StructureDefinition/shareablevalueset
type Shareablevalueset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Logical URI to reference this value set (globally unique)
	Url *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	// Additional identifier for the value set
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,10,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Business version of the value set
	Version *datatypes_go_proto.String `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	// Name for this value set (computer friendly)
	Name *datatypes_go_proto.String `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Name for this value set (human friendly)
	Title *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
	// draft | active | retired | unknown
	Status *codes_go_proto.PublicationStatusCode `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// For testing purposes, not real usage
	Experimental *datatypes_go_proto.Boolean `protobuf:"bytes,15,opt,name=experimental,proto3" json:"experimental,omitempty"`
	// Date this was last changed
	Date *datatypes_go_proto.DateTime `protobuf:"bytes,16,opt,name=date,proto3" json:"date,omitempty"`
	// Name of the publisher (organization or individual)
	Publisher *datatypes_go_proto.String `protobuf:"bytes,17,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// Contact details for the publisher
	Contact []*metadatatypes_go_proto.ContactDetail `protobuf:"bytes,18,rep,name=contact,proto3" json:"contact,omitempty"`
	// Natural language description of the value set
	Description *datatypes_go_proto.Markdown `protobuf:"bytes,19,opt,name=description,proto3" json:"description,omitempty"`
	// Context the content is intended to support
	UseContext []*metadatatypes_go_proto.UsageContext `protobuf:"bytes,20,rep,name=use_context,json=useContext,proto3" json:"use_context,omitempty"`
	// Intended jurisdiction for value set (if applicable)
	Jurisdiction []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,rep,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// Indicates whether or not any change to the content logical definition may
	// occur
	Immutable *datatypes_go_proto.Boolean `protobuf:"bytes,22,opt,name=immutable,proto3" json:"immutable,omitempty"`
	// Why this value set is defined
	Purpose *datatypes_go_proto.Markdown `protobuf:"bytes,23,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Use and/or publishing restrictions
	Copyright *datatypes_go_proto.Markdown `protobuf:"bytes,24,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Whether this is intended to be used with an extensible binding
	Extensible *datatypes_go_proto.Boolean  `protobuf:"bytes,25,opt,name=extensible,proto3" json:"extensible,omitempty"`
	Compose    *Shareablevalueset_Compose   `protobuf:"bytes,26,opt,name=compose,proto3" json:"compose,omitempty"`
	Expansion  *Shareablevalueset_Expansion `protobuf:"bytes,27,opt,name=expansion,proto3" json:"expansion,omitempty"`
}

func (x *Shareablevalueset) Reset() {
	*x = Shareablevalueset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset) ProtoMessage() {}

func (x *Shareablevalueset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset.ProtoReflect.Descriptor instead.
func (*Shareablevalueset) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24}
}

func (x *Shareablevalueset) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablevalueset) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Shareablevalueset) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Shareablevalueset) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Shareablevalueset) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Shareablevalueset) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Shareablevalueset) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablevalueset) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablevalueset) GetUrl() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Shareablevalueset) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Shareablevalueset) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Shareablevalueset) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Shareablevalueset) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Shareablevalueset) GetStatus() *codes_go_proto.PublicationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Shareablevalueset) GetExperimental() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Experimental
	}
	return nil
}

func (x *Shareablevalueset) GetDate() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Shareablevalueset) GetPublisher() *datatypes_go_proto.String {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Shareablevalueset) GetContact() []*metadatatypes_go_proto.ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Shareablevalueset) GetDescription() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Shareablevalueset) GetUseContext() []*metadatatypes_go_proto.UsageContext {
	if x != nil {
		return x.UseContext
	}
	return nil
}

func (x *Shareablevalueset) GetJurisdiction() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *Shareablevalueset) GetImmutable() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Immutable
	}
	return nil
}

func (x *Shareablevalueset) GetPurpose() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *Shareablevalueset) GetCopyright() *datatypes_go_proto.Markdown {
	if x != nil {
		return x.Copyright
	}
	return nil
}

func (x *Shareablevalueset) GetExtensible() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Extensible
	}
	return nil
}

func (x *Shareablevalueset) GetCompose() *Shareablevalueset_Compose {
	if x != nil {
		return x.Compose
	}
	return nil
}

func (x *Shareablevalueset) GetExpansion() *Shareablevalueset_Expansion {
	if x != nil {
		return x.Expansion
	}
	return nil
}

// Auto-generated from StructureDefinition for Example Lipid Profile.
// Triglyceride Result.
// See http://hl7.org/fhir/StructureDefinition/triglyceride
type Triglyceride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Triglyceride
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Triglyceride_Effective       `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Triglyceride_Value             `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// + | ++ | +++ | - | -- | ---
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange *Triglyceride_ReferenceRange  `protobuf:"bytes,27,opt,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Component      []*Triglyceride_Component     `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Triglyceride) Reset() {
	*x = Triglyceride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triglyceride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triglyceride) ProtoMessage() {}

func (x *Triglyceride) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triglyceride.ProtoReflect.Descriptor instead.
func (*Triglyceride) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{25}
}

func (x *Triglyceride) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Triglyceride) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Triglyceride) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Triglyceride) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Triglyceride) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Triglyceride) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Triglyceride) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Triglyceride) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Triglyceride) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Triglyceride) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Triglyceride) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Triglyceride) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Triglyceride) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Triglyceride) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Triglyceride) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Triglyceride) GetEffective() *Triglyceride_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Triglyceride) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Triglyceride) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Triglyceride) GetValue() *Triglyceride_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Triglyceride) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Triglyceride) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Triglyceride) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Triglyceride) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Triglyceride) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Triglyceride) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Triglyceride) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Triglyceride) GetReferenceRange() *Triglyceride_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Triglyceride) GetComponent() []*Triglyceride_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Vital Signs Profile.
// See http://hl7.org/fhir/StructureDefinition/vitalsigns
type Vitalsigns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	// Coded Responses from C-CDA Vital Sign Results
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Vitalsigns_Effective         `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	Value     *Vitalsigns_Value               `protobuf:"bytes,19,opt,name=value,proto3" json:"value,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Vitalsigns_ReferenceRange  `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Vitalsigns_Related         `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Vitalsigns_Component       `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Vitalsigns) Reset() {
	*x = Vitalsigns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalsigns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalsigns) ProtoMessage() {}

func (x *Vitalsigns) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalsigns.ProtoReflect.Descriptor instead.
func (*Vitalsigns) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{26}
}

func (x *Vitalsigns) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vitalsigns) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Vitalsigns) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Vitalsigns) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Vitalsigns) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Vitalsigns) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Vitalsigns) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Vitalsigns) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Vitalsigns) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Vitalsigns) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Vitalsigns) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Vitalsigns) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Vitalsigns) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Vitalsigns) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Vitalsigns) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Vitalsigns) GetEffective() *Vitalsigns_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Vitalsigns) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Vitalsigns) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Vitalsigns) GetValue() *Vitalsigns_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Vitalsigns) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Vitalsigns) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Vitalsigns) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Vitalsigns) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Vitalsigns) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Vitalsigns) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Vitalsigns) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Vitalsigns) GetReferenceRange() []*Vitalsigns_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Vitalsigns) GetRelated() []*Vitalsigns_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Vitalsigns) GetComponent() []*Vitalsigns_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Auto-generated from StructureDefinition for Vital Signs Profile.
// FHIR Vital Signs Panel Profile.
// See http://hl7.org/fhir/StructureDefinition/vitalspanel
type Vitalspanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical id of this artifact
	Id *datatypes_go_proto.Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata about the resource
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// A set of rules under which this content was created
	ImplicitRules *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=implicit_rules,json=implicitRules,proto3" json:"implicit_rules,omitempty"`
	// Language of the resource content
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Text summary of the resource, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Contained, inline Resources
	Contained []*resources_go_proto.ContainedResource `protobuf:"bytes,6,rep,name=contained,proto3" json:"contained,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,7,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,8,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Business Identifier for observation
	Identifier []*datatypes_go_proto.Identifier `protobuf:"bytes,9,rep,name=identifier,proto3" json:"identifier,omitempty"`
	// Fulfills plan, proposal or order
	BasedOn []*datatypes_go_proto.Reference `protobuf:"bytes,10,rep,name=based_on,json=basedOn,proto3" json:"based_on,omitempty"`
	// registered | preliminary | final | amended +
	Status *codes_go_proto.ObservationStatusCode `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Classification of  type of observation
	Category []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Code     *Vitalspanel_CodeableConceptForCode   `protobuf:"bytes,13,opt,name=code,proto3" json:"code,omitempty"`
	// Who and/or what this is about
	Subject *datatypes_go_proto.Reference `protobuf:"bytes,14,opt,name=subject,proto3" json:"subject,omitempty"`
	// Healthcare event during which this observation is made
	Context   *datatypes_go_proto.Reference `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	Effective *Vitalspanel_Effective        `protobuf:"bytes,16,opt,name=effective,proto3" json:"effective,omitempty"`
	// Date/Time this was made available
	Issued *datatypes_go_proto.Instant `protobuf:"bytes,17,opt,name=issued,proto3" json:"issued,omitempty"`
	// Who is responsible for the observation
	Performer []*datatypes_go_proto.Reference `protobuf:"bytes,18,rep,name=performer,proto3" json:"performer,omitempty"`
	// Why the result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,20,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Comments about result
	Comment *datatypes_go_proto.String `protobuf:"bytes,22,opt,name=comment,proto3" json:"comment,omitempty"`
	// Observed body part
	BodySite *datatypes_go_proto.CodeableConcept `protobuf:"bytes,23,opt,name=body_site,json=bodySite,proto3" json:"body_site,omitempty"`
	// How it was done
	Method *datatypes_go_proto.CodeableConcept `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"`
	// Specimen used for this observation
	Specimen *datatypes_go_proto.Reference `protobuf:"bytes,25,opt,name=specimen,proto3" json:"specimen,omitempty"`
	// (Measurement) Device
	Device         *datatypes_go_proto.Reference `protobuf:"bytes,26,opt,name=device,proto3" json:"device,omitempty"`
	ReferenceRange []*Vitalspanel_ReferenceRange `protobuf:"bytes,27,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
	Related        []*Vitalspanel_Related        `protobuf:"bytes,28,rep,name=related,proto3" json:"related,omitempty"`
	Component      []*Vitalspanel_Component      `protobuf:"bytes,29,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *Vitalspanel) Reset() {
	*x = Vitalspanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalspanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalspanel) ProtoMessage() {}

func (x *Vitalspanel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalspanel.ProtoReflect.Descriptor instead.
func (*Vitalspanel) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{27}
}

func (x *Vitalspanel) GetId() *datatypes_go_proto.Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vitalspanel) GetMeta() *datatypes_go_proto.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Vitalspanel) GetImplicitRules() *datatypes_go_proto.Uri {
	if x != nil {
		return x.ImplicitRules
	}
	return nil
}

func (x *Vitalspanel) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Vitalspanel) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Vitalspanel) GetContained() []*resources_go_proto.ContainedResource {
	if x != nil {
		return x.Contained
	}
	return nil
}

func (x *Vitalspanel) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Vitalspanel) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Vitalspanel) GetIdentifier() []*datatypes_go_proto.Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Vitalspanel) GetBasedOn() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.BasedOn
	}
	return nil
}

func (x *Vitalspanel) GetStatus() *codes_go_proto.ObservationStatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Vitalspanel) GetCategory() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Vitalspanel) GetCode() *Vitalspanel_CodeableConceptForCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Vitalspanel) GetSubject() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Vitalspanel) GetContext() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Vitalspanel) GetEffective() *Vitalspanel_Effective {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Vitalspanel) GetIssued() *datatypes_go_proto.Instant {
	if x != nil {
		return x.Issued
	}
	return nil
}

func (x *Vitalspanel) GetPerformer() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Performer
	}
	return nil
}

func (x *Vitalspanel) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Vitalspanel) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Vitalspanel) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Vitalspanel) GetBodySite() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.BodySite
	}
	return nil
}

func (x *Vitalspanel) GetMethod() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Vitalspanel) GetSpecimen() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Specimen
	}
	return nil
}

func (x *Vitalspanel) GetDevice() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Vitalspanel) GetReferenceRange() []*Vitalspanel_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

func (x *Vitalspanel) GetRelated() []*Vitalspanel_Related {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *Vitalspanel) GetComponent() []*Vitalspanel_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

// Body Mass Index (BMI)
type Bmi_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text    *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	BmiCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=bmi_code,json=BMICode,proto3" json:"bmi_code,omitempty"`
}

func (x *Bmi_CodeableConceptForCode) Reset() {
	*x = Bmi_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bmi_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bmi_CodeableConceptForCode) ProtoMessage() {}

func (x *Bmi_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bmi_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Bmi_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Bmi_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bmi_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bmi_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Bmi_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bmi_CodeableConceptForCode) GetBmiCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.BmiCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Bmi_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Bmi_Effective_DateTime
	//	*Bmi_Effective_Period
	Effective isBmi_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Bmi_Effective) Reset() {
	*x = Bmi_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bmi_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bmi_Effective) ProtoMessage() {}

func (x *Bmi_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bmi_Effective.ProtoReflect.Descriptor instead.
func (*Bmi_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Bmi_Effective) GetEffective() isBmi_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Bmi_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Bmi_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Bmi_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Bmi_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isBmi_Effective_Effective interface {
	isBmi_Effective_Effective()
}

type Bmi_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Bmi_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Bmi_Effective_DateTime) isBmi_Effective_Effective() {}

func (*Bmi_Effective_Period) isBmi_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Bmi_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bmi_Value_Quantity
	Value isBmi_Value_Value `protobuf_oneof:"value"`
}

func (x *Bmi_Value) Reset() {
	*x = Bmi_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bmi_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bmi_Value) ProtoMessage() {}

func (x *Bmi_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bmi_Value.ProtoReflect.Descriptor instead.
func (*Bmi_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Bmi_Value) GetValue() isBmi_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bmi_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bmi_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBmi_Value_Value interface {
	isBmi_Value_Value()
}

type Bmi_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bmi_Value_Quantity) isBmi_Value_Value() {}

// Provides guide for interpretation
type Bmi_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Bmi_ReferenceRange) Reset() {
	*x = Bmi_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bmi_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bmi_ReferenceRange) ProtoMessage() {}

func (x *Bmi_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bmi_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Bmi_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Bmi_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bmi_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bmi_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bmi_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Bmi_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Bmi_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bmi_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Bmi_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Bmi_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Bmi_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Bmi_Related) Reset() {
	*x = Bmi_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bmi_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bmi_Related) ProtoMessage() {}

func (x *Bmi_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bmi_Related.ProtoReflect.Descriptor instead.
func (*Bmi_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Bmi_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bmi_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bmi_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bmi_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bmi_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Bmi_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Bmi_Component_Value                `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Bmi_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Bmi_Component) Reset() {
	*x = Bmi_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bmi_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bmi_Component) ProtoMessage() {}

func (x *Bmi_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bmi_Component.ProtoReflect.Descriptor instead.
func (*Bmi_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Bmi_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bmi_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bmi_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bmi_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bmi_Component) GetValue() *Bmi_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bmi_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bmi_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bmi_Component) GetReferenceRange() []*Bmi_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Bmi_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bmi_Component_Value_Quantity
	Value isBmi_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Bmi_Component_Value) Reset() {
	*x = Bmi_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bmi_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bmi_Component_Value) ProtoMessage() {}

func (x *Bmi_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bmi_Component_Value.ProtoReflect.Descriptor instead.
func (*Bmi_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (m *Bmi_Component_Value) GetValue() isBmi_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bmi_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bmi_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBmi_Component_Value_Value interface {
	isBmi_Component_Value_Value()
}

type Bmi_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bmi_Component_Value_Quantity) isBmi_Component_Value_Value() {}

// Body Height
type Bodyheight_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text           *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	BodyHeightCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=body_height_code,json=BodyHeightCode,proto3" json:"body_height_code,omitempty"`
}

func (x *Bodyheight_CodeableConceptForCode) Reset() {
	*x = Bodyheight_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyheight_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyheight_CodeableConceptForCode) ProtoMessage() {}

func (x *Bodyheight_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyheight_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Bodyheight_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Bodyheight_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyheight_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyheight_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Bodyheight_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bodyheight_CodeableConceptForCode) GetBodyHeightCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.BodyHeightCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Bodyheight_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Bodyheight_Effective_DateTime
	//	*Bodyheight_Effective_Period
	Effective isBodyheight_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Bodyheight_Effective) Reset() {
	*x = Bodyheight_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyheight_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyheight_Effective) ProtoMessage() {}

func (x *Bodyheight_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyheight_Effective.ProtoReflect.Descriptor instead.
func (*Bodyheight_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{1, 1}
}

func (m *Bodyheight_Effective) GetEffective() isBodyheight_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Bodyheight_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Bodyheight_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Bodyheight_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Bodyheight_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isBodyheight_Effective_Effective interface {
	isBodyheight_Effective_Effective()
}

type Bodyheight_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Bodyheight_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Bodyheight_Effective_DateTime) isBodyheight_Effective_Effective() {}

func (*Bodyheight_Effective_Period) isBodyheight_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Bodyheight_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bodyheight_Value_Quantity
	Value isBodyheight_Value_Value `protobuf_oneof:"value"`
}

func (x *Bodyheight_Value) Reset() {
	*x = Bodyheight_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyheight_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyheight_Value) ProtoMessage() {}

func (x *Bodyheight_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyheight_Value.ProtoReflect.Descriptor instead.
func (*Bodyheight_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{1, 2}
}

func (m *Bodyheight_Value) GetValue() isBodyheight_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bodyheight_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bodyheight_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBodyheight_Value_Value interface {
	isBodyheight_Value_Value()
}

type Bodyheight_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bodyheight_Value_Quantity) isBodyheight_Value_Value() {}

// Provides guide for interpretation
type Bodyheight_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Bodyheight_ReferenceRange) Reset() {
	*x = Bodyheight_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyheight_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyheight_ReferenceRange) ProtoMessage() {}

func (x *Bodyheight_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyheight_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Bodyheight_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Bodyheight_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyheight_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyheight_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodyheight_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Bodyheight_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Bodyheight_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bodyheight_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Bodyheight_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Bodyheight_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Bodyheight_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Bodyheight_Related) Reset() {
	*x = Bodyheight_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyheight_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyheight_Related) ProtoMessage() {}

func (x *Bodyheight_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyheight_Related.ProtoReflect.Descriptor instead.
func (*Bodyheight_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Bodyheight_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyheight_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyheight_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodyheight_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bodyheight_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Bodyheight_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Bodyheight_Component_Value         `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Bodyheight_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Bodyheight_Component) Reset() {
	*x = Bodyheight_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyheight_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyheight_Component) ProtoMessage() {}

func (x *Bodyheight_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyheight_Component.ProtoReflect.Descriptor instead.
func (*Bodyheight_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Bodyheight_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyheight_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyheight_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodyheight_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bodyheight_Component) GetValue() *Bodyheight_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bodyheight_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bodyheight_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bodyheight_Component) GetReferenceRange() []*Bodyheight_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Bodyheight_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bodyheight_Component_Value_Quantity
	Value isBodyheight_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Bodyheight_Component_Value) Reset() {
	*x = Bodyheight_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyheight_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyheight_Component_Value) ProtoMessage() {}

func (x *Bodyheight_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyheight_Component_Value.ProtoReflect.Descriptor instead.
func (*Bodyheight_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{1, 5, 0}
}

func (m *Bodyheight_Component_Value) GetValue() isBodyheight_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bodyheight_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bodyheight_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBodyheight_Component_Value_Value interface {
	isBodyheight_Component_Value_Value()
}

type Bodyheight_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bodyheight_Component_Value_Quantity) isBodyheight_Component_Value_Value() {}

// Body Length
type Bodylength_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text           *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	BodyLengthCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=body_length_code,json=BodyLengthCode,proto3" json:"body_length_code,omitempty"`
}

func (x *Bodylength_CodeableConceptForCode) Reset() {
	*x = Bodylength_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodylength_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodylength_CodeableConceptForCode) ProtoMessage() {}

func (x *Bodylength_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodylength_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Bodylength_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Bodylength_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodylength_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodylength_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Bodylength_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bodylength_CodeableConceptForCode) GetBodyLengthCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.BodyLengthCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Bodylength_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Bodylength_Effective_DateTime
	//	*Bodylength_Effective_Period
	Effective isBodylength_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Bodylength_Effective) Reset() {
	*x = Bodylength_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodylength_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodylength_Effective) ProtoMessage() {}

func (x *Bodylength_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodylength_Effective.ProtoReflect.Descriptor instead.
func (*Bodylength_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{2, 1}
}

func (m *Bodylength_Effective) GetEffective() isBodylength_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Bodylength_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Bodylength_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Bodylength_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Bodylength_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isBodylength_Effective_Effective interface {
	isBodylength_Effective_Effective()
}

type Bodylength_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Bodylength_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Bodylength_Effective_DateTime) isBodylength_Effective_Effective() {}

func (*Bodylength_Effective_Period) isBodylength_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Bodylength_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bodylength_Value_Quantity
	Value isBodylength_Value_Value `protobuf_oneof:"value"`
}

func (x *Bodylength_Value) Reset() {
	*x = Bodylength_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodylength_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodylength_Value) ProtoMessage() {}

func (x *Bodylength_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodylength_Value.ProtoReflect.Descriptor instead.
func (*Bodylength_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{2, 2}
}

func (m *Bodylength_Value) GetValue() isBodylength_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bodylength_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bodylength_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBodylength_Value_Value interface {
	isBodylength_Value_Value()
}

type Bodylength_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bodylength_Value_Quantity) isBodylength_Value_Value() {}

// Provides guide for interpretation
type Bodylength_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Bodylength_ReferenceRange) Reset() {
	*x = Bodylength_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodylength_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodylength_ReferenceRange) ProtoMessage() {}

func (x *Bodylength_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodylength_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Bodylength_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Bodylength_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodylength_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodylength_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodylength_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Bodylength_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Bodylength_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bodylength_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Bodylength_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Bodylength_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Bodylength_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Bodylength_Related) Reset() {
	*x = Bodylength_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodylength_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodylength_Related) ProtoMessage() {}

func (x *Bodylength_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodylength_Related.ProtoReflect.Descriptor instead.
func (*Bodylength_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Bodylength_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodylength_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodylength_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodylength_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bodylength_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Bodylength_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Bodylength_Component_Value         `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Bodylength_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Bodylength_Component) Reset() {
	*x = Bodylength_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodylength_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodylength_Component) ProtoMessage() {}

func (x *Bodylength_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodylength_Component.ProtoReflect.Descriptor instead.
func (*Bodylength_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{2, 5}
}

func (x *Bodylength_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodylength_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodylength_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodylength_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bodylength_Component) GetValue() *Bodylength_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bodylength_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bodylength_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bodylength_Component) GetReferenceRange() []*Bodylength_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Bodylength_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bodylength_Component_Value_Quantity
	Value isBodylength_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Bodylength_Component_Value) Reset() {
	*x = Bodylength_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodylength_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodylength_Component_Value) ProtoMessage() {}

func (x *Bodylength_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodylength_Component_Value.ProtoReflect.Descriptor instead.
func (*Bodylength_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{2, 5, 0}
}

func (m *Bodylength_Component_Value) GetValue() isBodylength_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bodylength_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bodylength_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBodylength_Component_Value_Value interface {
	isBodylength_Component_Value_Value()
}

type Bodylength_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bodylength_Component_Value_Quantity) isBodylength_Component_Value_Value() {}

// Body Temperature
type Bodytemp_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text         *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	BodyTempCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=body_temp_code,json=BodyTempCode,proto3" json:"body_temp_code,omitempty"`
}

func (x *Bodytemp_CodeableConceptForCode) Reset() {
	*x = Bodytemp_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodytemp_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodytemp_CodeableConceptForCode) ProtoMessage() {}

func (x *Bodytemp_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodytemp_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Bodytemp_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Bodytemp_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodytemp_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodytemp_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Bodytemp_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bodytemp_CodeableConceptForCode) GetBodyTempCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.BodyTempCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Bodytemp_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Bodytemp_Effective_DateTime
	//	*Bodytemp_Effective_Period
	Effective isBodytemp_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Bodytemp_Effective) Reset() {
	*x = Bodytemp_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodytemp_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodytemp_Effective) ProtoMessage() {}

func (x *Bodytemp_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodytemp_Effective.ProtoReflect.Descriptor instead.
func (*Bodytemp_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{3, 1}
}

func (m *Bodytemp_Effective) GetEffective() isBodytemp_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Bodytemp_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Bodytemp_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Bodytemp_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Bodytemp_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isBodytemp_Effective_Effective interface {
	isBodytemp_Effective_Effective()
}

type Bodytemp_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Bodytemp_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Bodytemp_Effective_DateTime) isBodytemp_Effective_Effective() {}

func (*Bodytemp_Effective_Period) isBodytemp_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Bodytemp_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bodytemp_Value_Quantity
	Value isBodytemp_Value_Value `protobuf_oneof:"value"`
}

func (x *Bodytemp_Value) Reset() {
	*x = Bodytemp_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodytemp_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodytemp_Value) ProtoMessage() {}

func (x *Bodytemp_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodytemp_Value.ProtoReflect.Descriptor instead.
func (*Bodytemp_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{3, 2}
}

func (m *Bodytemp_Value) GetValue() isBodytemp_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bodytemp_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bodytemp_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBodytemp_Value_Value interface {
	isBodytemp_Value_Value()
}

type Bodytemp_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bodytemp_Value_Quantity) isBodytemp_Value_Value() {}

// Provides guide for interpretation
type Bodytemp_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Bodytemp_ReferenceRange) Reset() {
	*x = Bodytemp_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodytemp_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodytemp_ReferenceRange) ProtoMessage() {}

func (x *Bodytemp_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodytemp_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Bodytemp_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Bodytemp_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodytemp_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodytemp_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodytemp_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Bodytemp_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Bodytemp_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bodytemp_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Bodytemp_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Bodytemp_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Bodytemp_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Bodytemp_Related) Reset() {
	*x = Bodytemp_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodytemp_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodytemp_Related) ProtoMessage() {}

func (x *Bodytemp_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodytemp_Related.ProtoReflect.Descriptor instead.
func (*Bodytemp_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Bodytemp_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodytemp_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodytemp_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodytemp_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bodytemp_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Bodytemp_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Bodytemp_Component_Value           `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Bodytemp_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Bodytemp_Component) Reset() {
	*x = Bodytemp_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodytemp_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodytemp_Component) ProtoMessage() {}

func (x *Bodytemp_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodytemp_Component.ProtoReflect.Descriptor instead.
func (*Bodytemp_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Bodytemp_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodytemp_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodytemp_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodytemp_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bodytemp_Component) GetValue() *Bodytemp_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bodytemp_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bodytemp_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bodytemp_Component) GetReferenceRange() []*Bodytemp_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Bodytemp_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bodytemp_Component_Value_Quantity
	Value isBodytemp_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Bodytemp_Component_Value) Reset() {
	*x = Bodytemp_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodytemp_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodytemp_Component_Value) ProtoMessage() {}

func (x *Bodytemp_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodytemp_Component_Value.ProtoReflect.Descriptor instead.
func (*Bodytemp_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{3, 5, 0}
}

func (m *Bodytemp_Component_Value) GetValue() isBodytemp_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bodytemp_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bodytemp_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBodytemp_Component_Value_Value interface {
	isBodytemp_Component_Value_Value()
}

type Bodytemp_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bodytemp_Component_Value_Quantity) isBodytemp_Component_Value_Value() {}

// Body Weight
type Bodyweight_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text           *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	BodyWeightCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=body_weight_code,json=BodyWeightCode,proto3" json:"body_weight_code,omitempty"`
}

func (x *Bodyweight_CodeableConceptForCode) Reset() {
	*x = Bodyweight_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyweight_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyweight_CodeableConceptForCode) ProtoMessage() {}

func (x *Bodyweight_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyweight_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Bodyweight_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Bodyweight_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyweight_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyweight_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Bodyweight_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bodyweight_CodeableConceptForCode) GetBodyWeightCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.BodyWeightCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Bodyweight_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Bodyweight_Effective_DateTime
	//	*Bodyweight_Effective_Period
	Effective isBodyweight_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Bodyweight_Effective) Reset() {
	*x = Bodyweight_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyweight_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyweight_Effective) ProtoMessage() {}

func (x *Bodyweight_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyweight_Effective.ProtoReflect.Descriptor instead.
func (*Bodyweight_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{4, 1}
}

func (m *Bodyweight_Effective) GetEffective() isBodyweight_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Bodyweight_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Bodyweight_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Bodyweight_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Bodyweight_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isBodyweight_Effective_Effective interface {
	isBodyweight_Effective_Effective()
}

type Bodyweight_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Bodyweight_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Bodyweight_Effective_DateTime) isBodyweight_Effective_Effective() {}

func (*Bodyweight_Effective_Period) isBodyweight_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Bodyweight_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bodyweight_Value_Quantity
	Value isBodyweight_Value_Value `protobuf_oneof:"value"`
}

func (x *Bodyweight_Value) Reset() {
	*x = Bodyweight_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyweight_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyweight_Value) ProtoMessage() {}

func (x *Bodyweight_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyweight_Value.ProtoReflect.Descriptor instead.
func (*Bodyweight_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{4, 2}
}

func (m *Bodyweight_Value) GetValue() isBodyweight_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bodyweight_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bodyweight_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBodyweight_Value_Value interface {
	isBodyweight_Value_Value()
}

type Bodyweight_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bodyweight_Value_Quantity) isBodyweight_Value_Value() {}

// Provides guide for interpretation
type Bodyweight_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Bodyweight_ReferenceRange) Reset() {
	*x = Bodyweight_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyweight_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyweight_ReferenceRange) ProtoMessage() {}

func (x *Bodyweight_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyweight_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Bodyweight_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Bodyweight_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyweight_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyweight_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodyweight_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Bodyweight_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Bodyweight_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bodyweight_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Bodyweight_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Bodyweight_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Bodyweight_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Bodyweight_Related) Reset() {
	*x = Bodyweight_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyweight_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyweight_Related) ProtoMessage() {}

func (x *Bodyweight_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyweight_Related.ProtoReflect.Descriptor instead.
func (*Bodyweight_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Bodyweight_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyweight_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyweight_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodyweight_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bodyweight_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Bodyweight_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Bodyweight_Component_Value         `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Bodyweight_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Bodyweight_Component) Reset() {
	*x = Bodyweight_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyweight_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyweight_Component) ProtoMessage() {}

func (x *Bodyweight_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyweight_Component.ProtoReflect.Descriptor instead.
func (*Bodyweight_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{4, 5}
}

func (x *Bodyweight_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bodyweight_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bodyweight_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bodyweight_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Bodyweight_Component) GetValue() *Bodyweight_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Bodyweight_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Bodyweight_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Bodyweight_Component) GetReferenceRange() []*Bodyweight_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Bodyweight_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Bodyweight_Component_Value_Quantity
	Value isBodyweight_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Bodyweight_Component_Value) Reset() {
	*x = Bodyweight_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bodyweight_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bodyweight_Component_Value) ProtoMessage() {}

func (x *Bodyweight_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bodyweight_Component_Value.ProtoReflect.Descriptor instead.
func (*Bodyweight_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{4, 5, 0}
}

func (m *Bodyweight_Component_Value) GetValue() isBodyweight_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bodyweight_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Bodyweight_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isBodyweight_Component_Value_Value interface {
	isBodyweight_Component_Value_Value()
}

type Bodyweight_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Bodyweight_Component_Value_Quantity) isBodyweight_Component_Value_Value() {}

// Blood Pressure
type Bp_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text   *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	BpCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=bp_code,json=BPCode,proto3" json:"bp_code,omitempty"`
}

func (x *Bp_CodeableConceptForCode) Reset() {
	*x = Bp_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bp_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bp_CodeableConceptForCode) ProtoMessage() {}

func (x *Bp_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bp_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Bp_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Bp_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bp_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bp_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Bp_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Bp_CodeableConceptForCode) GetBpCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.BpCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Bp_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Bp_Effective_DateTime
	//	*Bp_Effective_Period
	Effective isBp_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Bp_Effective) Reset() {
	*x = Bp_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bp_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bp_Effective) ProtoMessage() {}

func (x *Bp_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bp_Effective.ProtoReflect.Descriptor instead.
func (*Bp_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{5, 1}
}

func (m *Bp_Effective) GetEffective() isBp_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Bp_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Bp_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Bp_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Bp_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isBp_Effective_Effective interface {
	isBp_Effective_Effective()
}

type Bp_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Bp_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Bp_Effective_DateTime) isBp_Effective_Effective() {}

func (*Bp_Effective_Period) isBp_Effective_Effective() {}

// Provides guide for interpretation
type Bp_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Bp_ReferenceRange) Reset() {
	*x = Bp_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bp_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bp_ReferenceRange) ProtoMessage() {}

func (x *Bp_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bp_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Bp_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Bp_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bp_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bp_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bp_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Bp_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Bp_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bp_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Bp_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Bp_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Bp_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Bp_Related) Reset() {
	*x = Bp_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bp_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bp_Related) ProtoMessage() {}

func (x *Bp_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bp_Related.ProtoReflect.Descriptor instead.
func (*Bp_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{5, 3}
}

func (x *Bp_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Bp_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Bp_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Bp_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Bp_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Bp_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bp_Component) Reset() {
	*x = Bp_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bp_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bp_Component) ProtoMessage() {}

func (x *Bp_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bp_Component.ProtoReflect.Descriptor instead.
func (*Bp_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{5, 4}
}

// Clinically relevant time/time-period for observation
type Cholesterol_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Cholesterol_Effective_DateTime
	//	*Cholesterol_Effective_Period
	Effective isCholesterol_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Cholesterol_Effective) Reset() {
	*x = Cholesterol_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cholesterol_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cholesterol_Effective) ProtoMessage() {}

func (x *Cholesterol_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cholesterol_Effective.ProtoReflect.Descriptor instead.
func (*Cholesterol_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{6, 0}
}

func (m *Cholesterol_Effective) GetEffective() isCholesterol_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Cholesterol_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Cholesterol_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Cholesterol_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Cholesterol_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isCholesterol_Effective_Effective interface {
	isCholesterol_Effective_Effective()
}

type Cholesterol_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Cholesterol_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Cholesterol_Effective_DateTime) isCholesterol_Effective_Effective() {}

func (*Cholesterol_Effective_Period) isCholesterol_Effective_Effective() {}

// Cholesterol value
type Cholesterol_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Cholesterol_Value_Quantity
	Value isCholesterol_Value_Value `protobuf_oneof:"value"`
}

func (x *Cholesterol_Value) Reset() {
	*x = Cholesterol_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cholesterol_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cholesterol_Value) ProtoMessage() {}

func (x *Cholesterol_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cholesterol_Value.ProtoReflect.Descriptor instead.
func (*Cholesterol_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{6, 1}
}

func (m *Cholesterol_Value) GetValue() isCholesterol_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Cholesterol_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Cholesterol_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isCholesterol_Value_Value interface {
	isCholesterol_Value_Value()
}

type Cholesterol_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Cholesterol_Value_Quantity) isCholesterol_Value_Value() {}

// Provides guide for interpretation
type Cholesterol_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A fixed quantity (no comparator)
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Cholesterol_ReferenceRange) Reset() {
	*x = Cholesterol_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cholesterol_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cholesterol_ReferenceRange) ProtoMessage() {}

func (x *Cholesterol_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cholesterol_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Cholesterol_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{6, 2}
}

func (x *Cholesterol_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Cholesterol_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Cholesterol_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Cholesterol_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Cholesterol_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Component results
type Cholesterol_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Cholesterol_Component_Value        `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Cholesterol_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Cholesterol_Component) Reset() {
	*x = Cholesterol_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cholesterol_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cholesterol_Component) ProtoMessage() {}

func (x *Cholesterol_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cholesterol_Component.ProtoReflect.Descriptor instead.
func (*Cholesterol_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{6, 3}
}

func (x *Cholesterol_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Cholesterol_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Cholesterol_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Cholesterol_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Cholesterol_Component) GetValue() *Cholesterol_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Cholesterol_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Cholesterol_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Cholesterol_Component) GetReferenceRange() []*Cholesterol_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type Cholesterol_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Cholesterol_Component_Value_Quantity
	//	*Cholesterol_Component_Value_CodeableConcept
	//	*Cholesterol_Component_Value_StringValue
	//	*Cholesterol_Component_Value_Range
	//	*Cholesterol_Component_Value_Ratio
	//	*Cholesterol_Component_Value_SampledData
	//	*Cholesterol_Component_Value_Attachment
	//	*Cholesterol_Component_Value_Time
	//	*Cholesterol_Component_Value_DateTime
	//	*Cholesterol_Component_Value_Period
	Value isCholesterol_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Cholesterol_Component_Value) Reset() {
	*x = Cholesterol_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cholesterol_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cholesterol_Component_Value) ProtoMessage() {}

func (x *Cholesterol_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cholesterol_Component_Value.ProtoReflect.Descriptor instead.
func (*Cholesterol_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{6, 3, 0}
}

func (m *Cholesterol_Component_Value) GetValue() isCholesterol_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Cholesterol_Component_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*Cholesterol_Component_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isCholesterol_Component_Value_Value interface {
	isCholesterol_Component_Value_Value()
}

type Cholesterol_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type Cholesterol_Component_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Cholesterol_Component_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Cholesterol_Component_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type Cholesterol_Component_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type Cholesterol_Component_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Cholesterol_Component_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type Cholesterol_Component_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type Cholesterol_Component_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Cholesterol_Component_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*Cholesterol_Component_Value_Quantity) isCholesterol_Component_Value_Value() {}

func (*Cholesterol_Component_Value_CodeableConcept) isCholesterol_Component_Value_Value() {}

func (*Cholesterol_Component_Value_StringValue) isCholesterol_Component_Value_Value() {}

func (*Cholesterol_Component_Value_Range) isCholesterol_Component_Value_Value() {}

func (*Cholesterol_Component_Value_Ratio) isCholesterol_Component_Value_Value() {}

func (*Cholesterol_Component_Value_SampledData) isCholesterol_Component_Value_Value() {}

func (*Cholesterol_Component_Value_Attachment) isCholesterol_Component_Value_Value() {}

func (*Cholesterol_Component_Value_Time) isCholesterol_Component_Value_Value() {}

func (*Cholesterol_Component_Value_DateTime) isCholesterol_Component_Value_Value() {}

func (*Cholesterol_Component_Value_Period) isCholesterol_Component_Value_Value() {}

// Attests to accuracy of composition
type Clinicaldocument_Attester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// personal | professional | legal | official
	Mode []*codes_go_proto.CompositionAttestationModeCode `protobuf:"bytes,4,rep,name=mode,proto3" json:"mode,omitempty"`
	// When the composition was attested
	Time *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	// Who attested the composition
	Party *datatypes_go_proto.Reference `protobuf:"bytes,6,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *Clinicaldocument_Attester) Reset() {
	*x = Clinicaldocument_Attester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clinicaldocument_Attester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clinicaldocument_Attester) ProtoMessage() {}

func (x *Clinicaldocument_Attester) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clinicaldocument_Attester.ProtoReflect.Descriptor instead.
func (*Clinicaldocument_Attester) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Clinicaldocument_Attester) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Clinicaldocument_Attester) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Clinicaldocument_Attester) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Clinicaldocument_Attester) GetMode() []*codes_go_proto.CompositionAttestationModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Clinicaldocument_Attester) GetTime() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Clinicaldocument_Attester) GetParty() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Party
	}
	return nil
}

// Relationships to other compositions/documents
type Clinicaldocument_RelatesTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// replaces | transforms | signs | appends
	Code   *codes_go_proto.DocumentRelationshipTypeCode `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Target *Clinicaldocument_RelatesTo_Target           `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Clinicaldocument_RelatesTo) Reset() {
	*x = Clinicaldocument_RelatesTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clinicaldocument_RelatesTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clinicaldocument_RelatesTo) ProtoMessage() {}

func (x *Clinicaldocument_RelatesTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clinicaldocument_RelatesTo.ProtoReflect.Descriptor instead.
func (*Clinicaldocument_RelatesTo) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Clinicaldocument_RelatesTo) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Clinicaldocument_RelatesTo) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Clinicaldocument_RelatesTo) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Clinicaldocument_RelatesTo) GetCode() *codes_go_proto.DocumentRelationshipTypeCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Clinicaldocument_RelatesTo) GetTarget() *Clinicaldocument_RelatesTo_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

// The clinical service(s) being documented
type Clinicaldocument_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code(s) that apply to the event being documented
	Code []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,rep,name=code,proto3" json:"code,omitempty"`
	// The period covered by the documentation
	Period *datatypes_go_proto.Period `protobuf:"bytes,5,opt,name=period,proto3" json:"period,omitempty"`
	// The event(s) being documented
	Detail []*datatypes_go_proto.Reference `protobuf:"bytes,6,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *Clinicaldocument_Event) Reset() {
	*x = Clinicaldocument_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clinicaldocument_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clinicaldocument_Event) ProtoMessage() {}

func (x *Clinicaldocument_Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clinicaldocument_Event.ProtoReflect.Descriptor instead.
func (*Clinicaldocument_Event) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Clinicaldocument_Event) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Clinicaldocument_Event) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Clinicaldocument_Event) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Clinicaldocument_Event) GetCode() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Clinicaldocument_Event) GetPeriod() *datatypes_go_proto.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Clinicaldocument_Event) GetDetail() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Composition is broken into sections
type Clinicaldocument_Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Label for section (e.g. for ToC)
	Title *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Classification of section (recommended)
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Text summary of the section, for human interpretation
	Text *metadatatypes_go_proto.Narrative `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	// working | snapshot | changes
	Mode *codes_go_proto.ListModeCode `protobuf:"bytes,7,opt,name=mode,proto3" json:"mode,omitempty"`
	// Order of section entries
	OrderedBy *datatypes_go_proto.CodeableConcept `protobuf:"bytes,8,opt,name=ordered_by,json=orderedBy,proto3" json:"ordered_by,omitempty"`
	// A reference to data that supports this section
	Entry []*datatypes_go_proto.Reference `protobuf:"bytes,9,rep,name=entry,proto3" json:"entry,omitempty"`
	// Why the section is empty
	EmptyReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,10,opt,name=empty_reason,json=emptyReason,proto3" json:"empty_reason,omitempty"`
	// Nested Section
	Section []*Clinicaldocument_Section `protobuf:"bytes,11,rep,name=section,proto3" json:"section,omitempty"`
}

func (x *Clinicaldocument_Section) Reset() {
	*x = Clinicaldocument_Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clinicaldocument_Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clinicaldocument_Section) ProtoMessage() {}

func (x *Clinicaldocument_Section) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clinicaldocument_Section.ProtoReflect.Descriptor instead.
func (*Clinicaldocument_Section) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{7, 3}
}

func (x *Clinicaldocument_Section) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Clinicaldocument_Section) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Clinicaldocument_Section) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Clinicaldocument_Section) GetTitle() *datatypes_go_proto.String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Clinicaldocument_Section) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Clinicaldocument_Section) GetText() *metadatatypes_go_proto.Narrative {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Clinicaldocument_Section) GetMode() *codes_go_proto.ListModeCode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Clinicaldocument_Section) GetOrderedBy() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.OrderedBy
	}
	return nil
}

func (x *Clinicaldocument_Section) GetEntry() []*datatypes_go_proto.Reference {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *Clinicaldocument_Section) GetEmptyReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.EmptyReason
	}
	return nil
}

func (x *Clinicaldocument_Section) GetSection() []*Clinicaldocument_Section {
	if x != nil {
		return x.Section
	}
	return nil
}

// Target of the relationship
type Clinicaldocument_RelatesTo_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*Clinicaldocument_RelatesTo_Target_Identifier
	//	*Clinicaldocument_RelatesTo_Target_Reference
	Target isClinicaldocument_RelatesTo_Target_Target `protobuf_oneof:"target"`
}

func (x *Clinicaldocument_RelatesTo_Target) Reset() {
	*x = Clinicaldocument_RelatesTo_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clinicaldocument_RelatesTo_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clinicaldocument_RelatesTo_Target) ProtoMessage() {}

func (x *Clinicaldocument_RelatesTo_Target) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clinicaldocument_RelatesTo_Target.ProtoReflect.Descriptor instead.
func (*Clinicaldocument_RelatesTo_Target) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{7, 1, 0}
}

func (m *Clinicaldocument_RelatesTo_Target) GetTarget() isClinicaldocument_RelatesTo_Target_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Clinicaldocument_RelatesTo_Target) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetTarget().(*Clinicaldocument_RelatesTo_Target_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *Clinicaldocument_RelatesTo_Target) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetTarget().(*Clinicaldocument_RelatesTo_Target_Reference); ok {
		return x.Reference
	}
	return nil
}

type isClinicaldocument_RelatesTo_Target_Target interface {
	isClinicaldocument_RelatesTo_Target_Target()
}

type Clinicaldocument_RelatesTo_Target_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type Clinicaldocument_RelatesTo_Target_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*Clinicaldocument_RelatesTo_Target_Identifier) isClinicaldocument_RelatesTo_Target_Target() {}

func (*Clinicaldocument_RelatesTo_Target_Reference) isClinicaldocument_RelatesTo_Target_Target() {}

// Clinically relevant time/time-period for observation
type Devicemetricobservation_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Devicemetricobservation_Effective_DateTime
	Effective isDevicemetricobservation_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Devicemetricobservation_Effective) Reset() {
	*x = Devicemetricobservation_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devicemetricobservation_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devicemetricobservation_Effective) ProtoMessage() {}

func (x *Devicemetricobservation_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devicemetricobservation_Effective.ProtoReflect.Descriptor instead.
func (*Devicemetricobservation_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{8, 0}
}

func (m *Devicemetricobservation_Effective) GetEffective() isDevicemetricobservation_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Devicemetricobservation_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Devicemetricobservation_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isDevicemetricobservation_Effective_Effective interface {
	isDevicemetricobservation_Effective_Effective()
}

type Devicemetricobservation_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*Devicemetricobservation_Effective_DateTime) isDevicemetricobservation_Effective_Effective() {}

// Actual result
type Devicemetricobservation_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Devicemetricobservation_Value_Quantity
	//	*Devicemetricobservation_Value_CodeableConcept
	//	*Devicemetricobservation_Value_StringValue
	//	*Devicemetricobservation_Value_Range
	//	*Devicemetricobservation_Value_Ratio
	//	*Devicemetricobservation_Value_SampledData
	//	*Devicemetricobservation_Value_Attachment
	//	*Devicemetricobservation_Value_Time
	//	*Devicemetricobservation_Value_DateTime
	//	*Devicemetricobservation_Value_Period
	Value isDevicemetricobservation_Value_Value `protobuf_oneof:"value"`
}

func (x *Devicemetricobservation_Value) Reset() {
	*x = Devicemetricobservation_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devicemetricobservation_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devicemetricobservation_Value) ProtoMessage() {}

func (x *Devicemetricobservation_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devicemetricobservation_Value.ProtoReflect.Descriptor instead.
func (*Devicemetricobservation_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{8, 1}
}

func (m *Devicemetricobservation_Value) GetValue() isDevicemetricobservation_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Devicemetricobservation_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*Devicemetricobservation_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isDevicemetricobservation_Value_Value interface {
	isDevicemetricobservation_Value_Value()
}

type Devicemetricobservation_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type Devicemetricobservation_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Devicemetricobservation_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Devicemetricobservation_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

type Devicemetricobservation_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,6,opt,name=ratio,proto3,oneof"`
}

type Devicemetricobservation_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,7,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Devicemetricobservation_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,8,opt,name=attachment,proto3,oneof"`
}

type Devicemetricobservation_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type Devicemetricobservation_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Devicemetricobservation_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*Devicemetricobservation_Value_Quantity) isDevicemetricobservation_Value_Value() {}

func (*Devicemetricobservation_Value_CodeableConcept) isDevicemetricobservation_Value_Value() {}

func (*Devicemetricobservation_Value_StringValue) isDevicemetricobservation_Value_Value() {}

func (*Devicemetricobservation_Value_Range) isDevicemetricobservation_Value_Value() {}

func (*Devicemetricobservation_Value_Ratio) isDevicemetricobservation_Value_Value() {}

func (*Devicemetricobservation_Value_SampledData) isDevicemetricobservation_Value_Value() {}

func (*Devicemetricobservation_Value_Attachment) isDevicemetricobservation_Value_Value() {}

func (*Devicemetricobservation_Value_Time) isDevicemetricobservation_Value_Value() {}

func (*Devicemetricobservation_Value_DateTime) isDevicemetricobservation_Value_Value() {}

func (*Devicemetricobservation_Value_Period) isDevicemetricobservation_Value_Value() {}

// Provides guide for interpretation
type Devicemetricobservation_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Devicemetricobservation_ReferenceRange) Reset() {
	*x = Devicemetricobservation_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devicemetricobservation_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devicemetricobservation_ReferenceRange) ProtoMessage() {}

func (x *Devicemetricobservation_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devicemetricobservation_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Devicemetricobservation_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{8, 2}
}

func (x *Devicemetricobservation_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Devicemetricobservation_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Devicemetricobservation_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Devicemetricobservation_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Devicemetricobservation_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Devicemetricobservation_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Devicemetricobservation_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Devicemetricobservation_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Devicemetricobservation_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Resource related to this observation
type Devicemetricobservation_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Devicemetricobservation_Related) Reset() {
	*x = Devicemetricobservation_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devicemetricobservation_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devicemetricobservation_Related) ProtoMessage() {}

func (x *Devicemetricobservation_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devicemetricobservation_Related.ProtoReflect.Descriptor instead.
func (*Devicemetricobservation_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{8, 3}
}

func (x *Devicemetricobservation_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Devicemetricobservation_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Devicemetricobservation_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Devicemetricobservation_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Devicemetricobservation_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Component results
type Devicemetricobservation_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept      `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Devicemetricobservation_Component_Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Devicemetricobservation_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Devicemetricobservation_Component) Reset() {
	*x = Devicemetricobservation_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devicemetricobservation_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devicemetricobservation_Component) ProtoMessage() {}

func (x *Devicemetricobservation_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devicemetricobservation_Component.ProtoReflect.Descriptor instead.
func (*Devicemetricobservation_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{8, 4}
}

func (x *Devicemetricobservation_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Devicemetricobservation_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Devicemetricobservation_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Devicemetricobservation_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Devicemetricobservation_Component) GetValue() *Devicemetricobservation_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Devicemetricobservation_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Devicemetricobservation_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Devicemetricobservation_Component) GetReferenceRange() []*Devicemetricobservation_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type Devicemetricobservation_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Devicemetricobservation_Component_Value_Quantity
	//	*Devicemetricobservation_Component_Value_CodeableConcept
	//	*Devicemetricobservation_Component_Value_StringValue
	//	*Devicemetricobservation_Component_Value_Range
	//	*Devicemetricobservation_Component_Value_Ratio
	//	*Devicemetricobservation_Component_Value_SampledData
	//	*Devicemetricobservation_Component_Value_Attachment
	//	*Devicemetricobservation_Component_Value_Time
	//	*Devicemetricobservation_Component_Value_DateTime
	//	*Devicemetricobservation_Component_Value_Period
	Value isDevicemetricobservation_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Devicemetricobservation_Component_Value) Reset() {
	*x = Devicemetricobservation_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devicemetricobservation_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devicemetricobservation_Component_Value) ProtoMessage() {}

func (x *Devicemetricobservation_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devicemetricobservation_Component_Value.ProtoReflect.Descriptor instead.
func (*Devicemetricobservation_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{8, 4, 0}
}

func (m *Devicemetricobservation_Component_Value) GetValue() isDevicemetricobservation_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Devicemetricobservation_Component_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*Devicemetricobservation_Component_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isDevicemetricobservation_Component_Value_Value interface {
	isDevicemetricobservation_Component_Value_Value()
}

type Devicemetricobservation_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type Devicemetricobservation_Component_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Devicemetricobservation_Component_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Devicemetricobservation_Component_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type Devicemetricobservation_Component_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type Devicemetricobservation_Component_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Devicemetricobservation_Component_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type Devicemetricobservation_Component_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type Devicemetricobservation_Component_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Devicemetricobservation_Component_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*Devicemetricobservation_Component_Value_Quantity) isDevicemetricobservation_Component_Value_Value() {
}

func (*Devicemetricobservation_Component_Value_CodeableConcept) isDevicemetricobservation_Component_Value_Value() {
}

func (*Devicemetricobservation_Component_Value_StringValue) isDevicemetricobservation_Component_Value_Value() {
}

func (*Devicemetricobservation_Component_Value_Range) isDevicemetricobservation_Component_Value_Value() {
}

func (*Devicemetricobservation_Component_Value_Ratio) isDevicemetricobservation_Component_Value_Value() {
}

func (*Devicemetricobservation_Component_Value_SampledData) isDevicemetricobservation_Component_Value_Value() {
}

func (*Devicemetricobservation_Component_Value_Attachment) isDevicemetricobservation_Component_Value_Value() {
}

func (*Devicemetricobservation_Component_Value_Time) isDevicemetricobservation_Component_Value_Value() {
}

func (*Devicemetricobservation_Component_Value_DateTime) isDevicemetricobservation_Component_Value_Value() {
}

func (*Devicemetricobservation_Component_Value_Period) isDevicemetricobservation_Component_Value_Value() {
}

// Clinically relevant time/time-period for report
type DiagnosticreportGenetics_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*DiagnosticreportGenetics_Effective_DateTime
	//	*DiagnosticreportGenetics_Effective_Period
	Effective isDiagnosticreportGenetics_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *DiagnosticreportGenetics_Effective) Reset() {
	*x = DiagnosticreportGenetics_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticreportGenetics_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticreportGenetics_Effective) ProtoMessage() {}

func (x *DiagnosticreportGenetics_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticreportGenetics_Effective.ProtoReflect.Descriptor instead.
func (*DiagnosticreportGenetics_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{9, 0}
}

func (m *DiagnosticreportGenetics_Effective) GetEffective() isDiagnosticreportGenetics_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *DiagnosticreportGenetics_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*DiagnosticreportGenetics_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *DiagnosticreportGenetics_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*DiagnosticreportGenetics_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isDiagnosticreportGenetics_Effective_Effective interface {
	isDiagnosticreportGenetics_Effective_Effective()
}

type DiagnosticreportGenetics_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type DiagnosticreportGenetics_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*DiagnosticreportGenetics_Effective_DateTime) isDiagnosticreportGenetics_Effective_Effective() {
}

func (*DiagnosticreportGenetics_Effective_Period) isDiagnosticreportGenetics_Effective_Effective() {}

// Participants in producing the report
type DiagnosticreportGenetics_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of performer
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Practitioner or Organization  participant
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *DiagnosticreportGenetics_Performer) Reset() {
	*x = DiagnosticreportGenetics_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticreportGenetics_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticreportGenetics_Performer) ProtoMessage() {}

func (x *DiagnosticreportGenetics_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticreportGenetics_Performer.ProtoReflect.Descriptor instead.
func (*DiagnosticreportGenetics_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{9, 1}
}

func (x *DiagnosticreportGenetics_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticreportGenetics_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticreportGenetics_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DiagnosticreportGenetics_Performer) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *DiagnosticreportGenetics_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Key images associated with this report
type DiagnosticreportGenetics_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *DiagnosticreportGenetics_Image) Reset() {
	*x = DiagnosticreportGenetics_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticreportGenetics_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticreportGenetics_Image) ProtoMessage() {}

func (x *DiagnosticreportGenetics_Image) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticreportGenetics_Image.ProtoReflect.Descriptor instead.
func (*DiagnosticreportGenetics_Image) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{9, 2}
}

func (x *DiagnosticreportGenetics_Image) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DiagnosticreportGenetics_Image) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DiagnosticreportGenetics_Image) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *DiagnosticreportGenetics_Image) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *DiagnosticreportGenetics_Image) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

// Base definition information for tools
type ElementdefinitionDe_Base struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Path that identifies the base element
	Path *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Min cardinality of the base element
	Min *datatypes_go_proto.UnsignedInt `protobuf:"bytes,4,opt,name=min,proto3" json:"min,omitempty"`
	// Max cardinality of the base element
	Max *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ElementdefinitionDe_Base) Reset() {
	*x = ElementdefinitionDe_Base{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_Base) ProtoMessage() {}

func (x *ElementdefinitionDe_Base) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_Base.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_Base) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ElementdefinitionDe_Base) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementdefinitionDe_Base) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementdefinitionDe_Base) GetPath() *datatypes_go_proto.String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ElementdefinitionDe_Base) GetMin() *datatypes_go_proto.UnsignedInt {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ElementdefinitionDe_Base) GetMax() *datatypes_go_proto.String {
	if x != nil {
		return x.Max
	}
	return nil
}

// Data type and Profile for this element
type ElementdefinitionDe_TypeRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Data type or Resource (reference to definition)
	Code *datatypes_go_proto.Uri `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Profile (StructureDefinition) to apply to reference target (or IG)
	TargetProfile *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=target_profile,json=targetProfile,proto3" json:"target_profile,omitempty"`
	// either | independent | specific
	Versioning *codes_go_proto.ReferenceVersionRulesCode `protobuf:"bytes,7,opt,name=versioning,proto3" json:"versioning,omitempty"`
}

func (x *ElementdefinitionDe_TypeRef) Reset() {
	*x = ElementdefinitionDe_TypeRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_TypeRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_TypeRef) ProtoMessage() {}

func (x *ElementdefinitionDe_TypeRef) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_TypeRef.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_TypeRef) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 1}
}

func (x *ElementdefinitionDe_TypeRef) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementdefinitionDe_TypeRef) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementdefinitionDe_TypeRef) GetCode() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ElementdefinitionDe_TypeRef) GetTargetProfile() *datatypes_go_proto.Uri {
	if x != nil {
		return x.TargetProfile
	}
	return nil
}

func (x *ElementdefinitionDe_TypeRef) GetVersioning() *codes_go_proto.ReferenceVersionRulesCode {
	if x != nil {
		return x.Versioning
	}
	return nil
}

// Specified value if missing from instance
type ElementdefinitionDe_DefaultValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DefaultValue:
	//	*ElementdefinitionDe_DefaultValue_Base64Binary
	//	*ElementdefinitionDe_DefaultValue_Boolean
	//	*ElementdefinitionDe_DefaultValue_Code
	//	*ElementdefinitionDe_DefaultValue_Date
	//	*ElementdefinitionDe_DefaultValue_DateTime
	//	*ElementdefinitionDe_DefaultValue_Decimal
	//	*ElementdefinitionDe_DefaultValue_Id
	//	*ElementdefinitionDe_DefaultValue_Instant
	//	*ElementdefinitionDe_DefaultValue_Integer
	//	*ElementdefinitionDe_DefaultValue_Markdown
	//	*ElementdefinitionDe_DefaultValue_Oid
	//	*ElementdefinitionDe_DefaultValue_PositiveInt
	//	*ElementdefinitionDe_DefaultValue_StringValue
	//	*ElementdefinitionDe_DefaultValue_Time
	//	*ElementdefinitionDe_DefaultValue_UnsignedInt
	//	*ElementdefinitionDe_DefaultValue_Uri
	//	*ElementdefinitionDe_DefaultValue_Address
	//	*ElementdefinitionDe_DefaultValue_Age
	//	*ElementdefinitionDe_DefaultValue_Annotation
	//	*ElementdefinitionDe_DefaultValue_Attachment
	//	*ElementdefinitionDe_DefaultValue_CodeableConcept
	//	*ElementdefinitionDe_DefaultValue_Coding
	//	*ElementdefinitionDe_DefaultValue_ContactPoint
	//	*ElementdefinitionDe_DefaultValue_Count
	//	*ElementdefinitionDe_DefaultValue_Distance
	//	*ElementdefinitionDe_DefaultValue_Duration
	//	*ElementdefinitionDe_DefaultValue_HumanName
	//	*ElementdefinitionDe_DefaultValue_Identifier
	//	*ElementdefinitionDe_DefaultValue_Money
	//	*ElementdefinitionDe_DefaultValue_Period
	//	*ElementdefinitionDe_DefaultValue_Quantity
	//	*ElementdefinitionDe_DefaultValue_Range
	//	*ElementdefinitionDe_DefaultValue_Ratio
	//	*ElementdefinitionDe_DefaultValue_Reference
	//	*ElementdefinitionDe_DefaultValue_SampledData
	//	*ElementdefinitionDe_DefaultValue_Signature
	//	*ElementdefinitionDe_DefaultValue_Timing
	//	*ElementdefinitionDe_DefaultValue_Meta
	DefaultValue isElementdefinitionDe_DefaultValue_DefaultValue `protobuf_oneof:"default_value"`
}

func (x *ElementdefinitionDe_DefaultValue) Reset() {
	*x = ElementdefinitionDe_DefaultValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_DefaultValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_DefaultValue) ProtoMessage() {}

func (x *ElementdefinitionDe_DefaultValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_DefaultValue.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_DefaultValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 2}
}

func (m *ElementdefinitionDe_DefaultValue) GetDefaultValue() isElementdefinitionDe_DefaultValue_DefaultValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetCount() *datatypes_go_proto.Count {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetDistance() *datatypes_go_proto.Distance {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementdefinitionDe_DefaultValue) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetDefaultValue().(*ElementdefinitionDe_DefaultValue_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementdefinitionDe_DefaultValue_DefaultValue interface {
	isElementdefinitionDe_DefaultValue_DefaultValue()
}

type ElementdefinitionDe_DefaultValue_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Count struct {
	Count *datatypes_go_proto.Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Distance struct {
	Distance *datatypes_go_proto.Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementdefinitionDe_DefaultValue_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementdefinitionDe_DefaultValue_Base64Binary) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Boolean) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Code) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Date) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_DateTime) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Decimal) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Id) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Instant) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Integer) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Markdown) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Oid) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_PositiveInt) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_StringValue) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Time) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_UnsignedInt) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Uri) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Address) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Age) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Annotation) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Attachment) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_CodeableConcept) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Coding) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_ContactPoint) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Count) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Distance) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Duration) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_HumanName) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Identifier) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Money) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Period) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Quantity) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Range) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Ratio) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Reference) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_SampledData) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Signature) isElementdefinitionDe_DefaultValue_DefaultValue() {
}

func (*ElementdefinitionDe_DefaultValue_Timing) isElementdefinitionDe_DefaultValue_DefaultValue() {}

func (*ElementdefinitionDe_DefaultValue_Meta) isElementdefinitionDe_DefaultValue_DefaultValue() {}

// Example value (as defined for type)
type ElementdefinitionDe_Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Describes the purpose of this example
	Label *datatypes_go_proto.String         `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Value *ElementdefinitionDe_Example_Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElementdefinitionDe_Example) Reset() {
	*x = ElementdefinitionDe_Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_Example) ProtoMessage() {}

func (x *ElementdefinitionDe_Example) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_Example.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_Example) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 3}
}

func (x *ElementdefinitionDe_Example) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementdefinitionDe_Example) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementdefinitionDe_Example) GetLabel() *datatypes_go_proto.String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ElementdefinitionDe_Example) GetValue() *ElementdefinitionDe_Example_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Minimum Allowed Value (for some types)
type ElementdefinitionDe_MinValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MinValue:
	//	*ElementdefinitionDe_MinValue_Date
	//	*ElementdefinitionDe_MinValue_DateTime
	//	*ElementdefinitionDe_MinValue_Instant
	//	*ElementdefinitionDe_MinValue_Time
	//	*ElementdefinitionDe_MinValue_Decimal
	//	*ElementdefinitionDe_MinValue_Integer
	//	*ElementdefinitionDe_MinValue_PositiveInt
	//	*ElementdefinitionDe_MinValue_UnsignedInt
	//	*ElementdefinitionDe_MinValue_Quantity
	MinValue isElementdefinitionDe_MinValue_MinValue `protobuf_oneof:"min_value"`
}

func (x *ElementdefinitionDe_MinValue) Reset() {
	*x = ElementdefinitionDe_MinValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_MinValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_MinValue) ProtoMessage() {}

func (x *ElementdefinitionDe_MinValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_MinValue.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_MinValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 4}
}

func (m *ElementdefinitionDe_MinValue) GetMinValue() isElementdefinitionDe_MinValue_MinValue {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (x *ElementdefinitionDe_MinValue) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetMinValue().(*ElementdefinitionDe_MinValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementdefinitionDe_MinValue) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetMinValue().(*ElementdefinitionDe_MinValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementdefinitionDe_MinValue) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetMinValue().(*ElementdefinitionDe_MinValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementdefinitionDe_MinValue) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetMinValue().(*ElementdefinitionDe_MinValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementdefinitionDe_MinValue) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetMinValue().(*ElementdefinitionDe_MinValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementdefinitionDe_MinValue) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetMinValue().(*ElementdefinitionDe_MinValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementdefinitionDe_MinValue) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetMinValue().(*ElementdefinitionDe_MinValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementdefinitionDe_MinValue) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetMinValue().(*ElementdefinitionDe_MinValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementdefinitionDe_MinValue) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetMinValue().(*ElementdefinitionDe_MinValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isElementdefinitionDe_MinValue_MinValue interface {
	isElementdefinitionDe_MinValue_MinValue()
}

type ElementdefinitionDe_MinValue_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type ElementdefinitionDe_MinValue_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementdefinitionDe_MinValue_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,3,opt,name=instant,proto3,oneof"`
}

type ElementdefinitionDe_MinValue_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,4,opt,name=time,proto3,oneof"`
}

type ElementdefinitionDe_MinValue_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type ElementdefinitionDe_MinValue_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type ElementdefinitionDe_MinValue_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,7,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementdefinitionDe_MinValue_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,8,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementdefinitionDe_MinValue_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,9,opt,name=quantity,proto3,oneof"`
}

func (*ElementdefinitionDe_MinValue_Date) isElementdefinitionDe_MinValue_MinValue() {}

func (*ElementdefinitionDe_MinValue_DateTime) isElementdefinitionDe_MinValue_MinValue() {}

func (*ElementdefinitionDe_MinValue_Instant) isElementdefinitionDe_MinValue_MinValue() {}

func (*ElementdefinitionDe_MinValue_Time) isElementdefinitionDe_MinValue_MinValue() {}

func (*ElementdefinitionDe_MinValue_Decimal) isElementdefinitionDe_MinValue_MinValue() {}

func (*ElementdefinitionDe_MinValue_Integer) isElementdefinitionDe_MinValue_MinValue() {}

func (*ElementdefinitionDe_MinValue_PositiveInt) isElementdefinitionDe_MinValue_MinValue() {}

func (*ElementdefinitionDe_MinValue_UnsignedInt) isElementdefinitionDe_MinValue_MinValue() {}

func (*ElementdefinitionDe_MinValue_Quantity) isElementdefinitionDe_MinValue_MinValue() {}

// Maximum Allowed Value (for some types)
type ElementdefinitionDe_MaxValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MaxValue:
	//	*ElementdefinitionDe_MaxValue_Date
	//	*ElementdefinitionDe_MaxValue_DateTime
	//	*ElementdefinitionDe_MaxValue_Instant
	//	*ElementdefinitionDe_MaxValue_Time
	//	*ElementdefinitionDe_MaxValue_Decimal
	//	*ElementdefinitionDe_MaxValue_Integer
	//	*ElementdefinitionDe_MaxValue_PositiveInt
	//	*ElementdefinitionDe_MaxValue_UnsignedInt
	//	*ElementdefinitionDe_MaxValue_Quantity
	MaxValue isElementdefinitionDe_MaxValue_MaxValue `protobuf_oneof:"max_value"`
}

func (x *ElementdefinitionDe_MaxValue) Reset() {
	*x = ElementdefinitionDe_MaxValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_MaxValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_MaxValue) ProtoMessage() {}

func (x *ElementdefinitionDe_MaxValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_MaxValue.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_MaxValue) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 5}
}

func (m *ElementdefinitionDe_MaxValue) GetMaxValue() isElementdefinitionDe_MaxValue_MaxValue {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

func (x *ElementdefinitionDe_MaxValue) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetMaxValue().(*ElementdefinitionDe_MaxValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementdefinitionDe_MaxValue) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetMaxValue().(*ElementdefinitionDe_MaxValue_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementdefinitionDe_MaxValue) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetMaxValue().(*ElementdefinitionDe_MaxValue_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementdefinitionDe_MaxValue) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetMaxValue().(*ElementdefinitionDe_MaxValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementdefinitionDe_MaxValue) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetMaxValue().(*ElementdefinitionDe_MaxValue_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementdefinitionDe_MaxValue) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetMaxValue().(*ElementdefinitionDe_MaxValue_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementdefinitionDe_MaxValue) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetMaxValue().(*ElementdefinitionDe_MaxValue_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementdefinitionDe_MaxValue) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetMaxValue().(*ElementdefinitionDe_MaxValue_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementdefinitionDe_MaxValue) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetMaxValue().(*ElementdefinitionDe_MaxValue_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isElementdefinitionDe_MaxValue_MaxValue interface {
	isElementdefinitionDe_MaxValue_MaxValue()
}

type ElementdefinitionDe_MaxValue_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type ElementdefinitionDe_MaxValue_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementdefinitionDe_MaxValue_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,3,opt,name=instant,proto3,oneof"`
}

type ElementdefinitionDe_MaxValue_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,4,opt,name=time,proto3,oneof"`
}

type ElementdefinitionDe_MaxValue_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type ElementdefinitionDe_MaxValue_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type ElementdefinitionDe_MaxValue_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,7,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementdefinitionDe_MaxValue_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,8,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementdefinitionDe_MaxValue_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,9,opt,name=quantity,proto3,oneof"`
}

func (*ElementdefinitionDe_MaxValue_Date) isElementdefinitionDe_MaxValue_MaxValue() {}

func (*ElementdefinitionDe_MaxValue_DateTime) isElementdefinitionDe_MaxValue_MaxValue() {}

func (*ElementdefinitionDe_MaxValue_Instant) isElementdefinitionDe_MaxValue_MaxValue() {}

func (*ElementdefinitionDe_MaxValue_Time) isElementdefinitionDe_MaxValue_MaxValue() {}

func (*ElementdefinitionDe_MaxValue_Decimal) isElementdefinitionDe_MaxValue_MaxValue() {}

func (*ElementdefinitionDe_MaxValue_Integer) isElementdefinitionDe_MaxValue_MaxValue() {}

func (*ElementdefinitionDe_MaxValue_PositiveInt) isElementdefinitionDe_MaxValue_MaxValue() {}

func (*ElementdefinitionDe_MaxValue_UnsignedInt) isElementdefinitionDe_MaxValue_MaxValue() {}

func (*ElementdefinitionDe_MaxValue_Quantity) isElementdefinitionDe_MaxValue_MaxValue() {}

// Condition that must evaluate to true
type ElementdefinitionDe_Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Target of 'condition' reference above
	Key *datatypes_go_proto.Id `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Why this constraint is necessary or appropriate
	Requirements *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// error | warning
	Severity *codes_go_proto.ConstraintSeverityCode `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`
	// Human description of constraint
	Human *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=human,proto3" json:"human,omitempty"`
	// FHIRPath expression of constraint
	Expression *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=expression,proto3" json:"expression,omitempty"`
	// XPath expression of constraint
	Xpath *datatypes_go_proto.String `protobuf:"bytes,8,opt,name=xpath,proto3" json:"xpath,omitempty"`
	// Reference to original source of constraint
	Source *datatypes_go_proto.Uri `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ElementdefinitionDe_Constraint) Reset() {
	*x = ElementdefinitionDe_Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_Constraint) ProtoMessage() {}

func (x *ElementdefinitionDe_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_Constraint.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_Constraint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 6}
}

func (x *ElementdefinitionDe_Constraint) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementdefinitionDe_Constraint) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementdefinitionDe_Constraint) GetKey() *datatypes_go_proto.Id {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ElementdefinitionDe_Constraint) GetRequirements() *datatypes_go_proto.String {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ElementdefinitionDe_Constraint) GetSeverity() *codes_go_proto.ConstraintSeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *ElementdefinitionDe_Constraint) GetHuman() *datatypes_go_proto.String {
	if x != nil {
		return x.Human
	}
	return nil
}

func (x *ElementdefinitionDe_Constraint) GetExpression() *datatypes_go_proto.String {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ElementdefinitionDe_Constraint) GetXpath() *datatypes_go_proto.String {
	if x != nil {
		return x.Xpath
	}
	return nil
}

func (x *ElementdefinitionDe_Constraint) GetSource() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Source
	}
	return nil
}

// ValueSet details if this is coded
type ElementdefinitionDe_ElementDefinitionBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// required | extensible | preferred | example
	Strength *codes_go_proto.BindingStrengthCode `protobuf:"bytes,3,opt,name=strength,proto3" json:"strength,omitempty"`
	// Human explanation of the value set
	Description *datatypes_go_proto.String                             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ValueSet    *ElementdefinitionDe_ElementDefinitionBinding_ValueSet `protobuf:"bytes,5,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *ElementdefinitionDe_ElementDefinitionBinding) Reset() {
	*x = ElementdefinitionDe_ElementDefinitionBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_ElementDefinitionBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_ElementDefinitionBinding) ProtoMessage() {}

func (x *ElementdefinitionDe_ElementDefinitionBinding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_ElementDefinitionBinding.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_ElementDefinitionBinding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 7}
}

func (x *ElementdefinitionDe_ElementDefinitionBinding) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementdefinitionDe_ElementDefinitionBinding) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementdefinitionDe_ElementDefinitionBinding) GetStrength() *codes_go_proto.BindingStrengthCode {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *ElementdefinitionDe_ElementDefinitionBinding) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ElementdefinitionDe_ElementDefinitionBinding) GetValueSet() *ElementdefinitionDe_ElementDefinitionBinding_ValueSet {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

// Map element to another set of definitions
type ElementdefinitionDe_Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Reference to mapping declaration
	Identity *datatypes_go_proto.Id `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Computable language of mapping
	Language *datatypes_go_proto.MimeTypeCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Details of the mapping
	Map *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=map,proto3" json:"map,omitempty"`
	// Comments about the mapping or its use
	Comment *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ElementdefinitionDe_Mapping) Reset() {
	*x = ElementdefinitionDe_Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_Mapping) ProtoMessage() {}

func (x *ElementdefinitionDe_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_Mapping.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_Mapping) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 8}
}

func (x *ElementdefinitionDe_Mapping) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementdefinitionDe_Mapping) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementdefinitionDe_Mapping) GetIdentity() *datatypes_go_proto.Id {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ElementdefinitionDe_Mapping) GetLanguage() *datatypes_go_proto.MimeTypeCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ElementdefinitionDe_Mapping) GetMap() *datatypes_go_proto.String {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *ElementdefinitionDe_Mapping) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Value of Example (one of allowed types)
type ElementdefinitionDe_Example_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ElementdefinitionDe_Example_Value_Base64Binary
	//	*ElementdefinitionDe_Example_Value_Boolean
	//	*ElementdefinitionDe_Example_Value_Code
	//	*ElementdefinitionDe_Example_Value_Date
	//	*ElementdefinitionDe_Example_Value_DateTime
	//	*ElementdefinitionDe_Example_Value_Decimal
	//	*ElementdefinitionDe_Example_Value_Id
	//	*ElementdefinitionDe_Example_Value_Instant
	//	*ElementdefinitionDe_Example_Value_Integer
	//	*ElementdefinitionDe_Example_Value_Markdown
	//	*ElementdefinitionDe_Example_Value_Oid
	//	*ElementdefinitionDe_Example_Value_PositiveInt
	//	*ElementdefinitionDe_Example_Value_StringValue
	//	*ElementdefinitionDe_Example_Value_Time
	//	*ElementdefinitionDe_Example_Value_UnsignedInt
	//	*ElementdefinitionDe_Example_Value_Uri
	//	*ElementdefinitionDe_Example_Value_Address
	//	*ElementdefinitionDe_Example_Value_Age
	//	*ElementdefinitionDe_Example_Value_Annotation
	//	*ElementdefinitionDe_Example_Value_Attachment
	//	*ElementdefinitionDe_Example_Value_CodeableConcept
	//	*ElementdefinitionDe_Example_Value_Coding
	//	*ElementdefinitionDe_Example_Value_ContactPoint
	//	*ElementdefinitionDe_Example_Value_Count
	//	*ElementdefinitionDe_Example_Value_Distance
	//	*ElementdefinitionDe_Example_Value_Duration
	//	*ElementdefinitionDe_Example_Value_HumanName
	//	*ElementdefinitionDe_Example_Value_Identifier
	//	*ElementdefinitionDe_Example_Value_Money
	//	*ElementdefinitionDe_Example_Value_Period
	//	*ElementdefinitionDe_Example_Value_Quantity
	//	*ElementdefinitionDe_Example_Value_Range
	//	*ElementdefinitionDe_Example_Value_Ratio
	//	*ElementdefinitionDe_Example_Value_Reference
	//	*ElementdefinitionDe_Example_Value_SampledData
	//	*ElementdefinitionDe_Example_Value_Signature
	//	*ElementdefinitionDe_Example_Value_Timing
	//	*ElementdefinitionDe_Example_Value_Meta
	Value isElementdefinitionDe_Example_Value_Value `protobuf_oneof:"value"`
}

func (x *ElementdefinitionDe_Example_Value) Reset() {
	*x = ElementdefinitionDe_Example_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_Example_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_Example_Value) ProtoMessage() {}

func (x *ElementdefinitionDe_Example_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_Example_Value.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_Example_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 3, 0}
}

func (m *ElementdefinitionDe_Example_Value) GetValue() isElementdefinitionDe_Example_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetBase64Binary() *datatypes_go_proto.Base64Binary {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetId() *datatypes_go_proto.Id {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetInstant() *datatypes_go_proto.Instant {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetMarkdown() *datatypes_go_proto.Markdown {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetOid() *datatypes_go_proto.Oid {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetPositiveInt() *datatypes_go_proto.PositiveInt {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetUnsignedInt() *datatypes_go_proto.UnsignedInt {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetAddress() *datatypes_go_proto.Address {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetAnnotation() *datatypes_go_proto.Annotation {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetContactPoint() *datatypes_go_proto.ContactPoint {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetCount() *datatypes_go_proto.Count {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetDistance() *datatypes_go_proto.Distance {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetDuration() *datatypes_go_proto.Duration {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetHumanName() *datatypes_go_proto.HumanName {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetIdentifier() *datatypes_go_proto.Identifier {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetMoney() *datatypes_go_proto.Money {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetSignature() *datatypes_go_proto.Signature {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementdefinitionDe_Example_Value) GetMeta() *datatypes_go_proto.Meta {
	if x, ok := x.GetValue().(*ElementdefinitionDe_Example_Value_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementdefinitionDe_Example_Value_Value interface {
	isElementdefinitionDe_Example_Value_Value()
}

type ElementdefinitionDe_Example_Value_Base64Binary struct {
	Base64Binary *datatypes_go_proto.Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,3,opt,name=code,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,6,opt,name=decimal,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Id struct {
	Id *datatypes_go_proto.Id `protobuf:"bytes,7,opt,name=id,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Instant struct {
	Instant *datatypes_go_proto.Instant `protobuf:"bytes,8,opt,name=instant,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,9,opt,name=integer,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Markdown struct {
	Markdown *datatypes_go_proto.Markdown `protobuf:"bytes,10,opt,name=markdown,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Oid struct {
	Oid *datatypes_go_proto.Oid `protobuf:"bytes,11,opt,name=oid,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_PositiveInt struct {
	PositiveInt *datatypes_go_proto.PositiveInt `protobuf:"bytes,12,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,13,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_UnsignedInt struct {
	UnsignedInt *datatypes_go_proto.UnsignedInt `protobuf:"bytes,15,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,16,opt,name=uri,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Address struct {
	Address *datatypes_go_proto.Address `protobuf:"bytes,17,opt,name=address,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,18,opt,name=age,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Annotation struct {
	Annotation *datatypes_go_proto.Annotation `protobuf:"bytes,19,opt,name=annotation,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,20,opt,name=attachment,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,21,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,22,opt,name=coding,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_ContactPoint struct {
	ContactPoint *datatypes_go_proto.ContactPoint `protobuf:"bytes,23,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Count struct {
	Count *datatypes_go_proto.Count `protobuf:"bytes,24,opt,name=count,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Distance struct {
	Distance *datatypes_go_proto.Distance `protobuf:"bytes,25,opt,name=distance,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Duration struct {
	Duration *datatypes_go_proto.Duration `protobuf:"bytes,26,opt,name=duration,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_HumanName struct {
	HumanName *datatypes_go_proto.HumanName `protobuf:"bytes,27,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Identifier struct {
	Identifier *datatypes_go_proto.Identifier `protobuf:"bytes,28,opt,name=identifier,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Money struct {
	Money *datatypes_go_proto.Money `protobuf:"bytes,29,opt,name=money,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,30,opt,name=period,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,31,opt,name=quantity,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,32,opt,name=range,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,33,opt,name=ratio,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,34,opt,name=reference,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,35,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Signature struct {
	Signature *datatypes_go_proto.Signature `protobuf:"bytes,36,opt,name=signature,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,37,opt,name=timing,proto3,oneof"`
}

type ElementdefinitionDe_Example_Value_Meta struct {
	Meta *datatypes_go_proto.Meta `protobuf:"bytes,38,opt,name=meta,proto3,oneof"`
}

func (*ElementdefinitionDe_Example_Value_Base64Binary) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Boolean) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Code) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Date) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_DateTime) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Decimal) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Id) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Instant) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Integer) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Markdown) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Oid) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_PositiveInt) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_StringValue) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Time) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_UnsignedInt) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Uri) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Address) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Age) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Annotation) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Attachment) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_CodeableConcept) isElementdefinitionDe_Example_Value_Value() {
}

func (*ElementdefinitionDe_Example_Value_Coding) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_ContactPoint) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Count) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Distance) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Duration) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_HumanName) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Identifier) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Money) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Period) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Quantity) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Range) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Ratio) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Reference) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_SampledData) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Signature) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Timing) isElementdefinitionDe_Example_Value_Value() {}

func (*ElementdefinitionDe_Example_Value_Meta) isElementdefinitionDe_Example_Value_Value() {}

// Source of value set
type ElementdefinitionDe_ElementDefinitionBinding_ValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueSet:
	//	*ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Uri
	//	*ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Reference
	ValueSet isElementdefinitionDe_ElementDefinitionBinding_ValueSet_ValueSet `protobuf_oneof:"value_set"`
}

func (x *ElementdefinitionDe_ElementDefinitionBinding_ValueSet) Reset() {
	*x = ElementdefinitionDe_ElementDefinitionBinding_ValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementdefinitionDe_ElementDefinitionBinding_ValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementdefinitionDe_ElementDefinitionBinding_ValueSet) ProtoMessage() {}

func (x *ElementdefinitionDe_ElementDefinitionBinding_ValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementdefinitionDe_ElementDefinitionBinding_ValueSet.ProtoReflect.Descriptor instead.
func (*ElementdefinitionDe_ElementDefinitionBinding_ValueSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{10, 7, 0}
}

func (m *ElementdefinitionDe_ElementDefinitionBinding_ValueSet) GetValueSet() isElementdefinitionDe_ElementDefinitionBinding_ValueSet_ValueSet {
	if m != nil {
		return m.ValueSet
	}
	return nil
}

func (x *ElementdefinitionDe_ElementDefinitionBinding_ValueSet) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValueSet().(*ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementdefinitionDe_ElementDefinitionBinding_ValueSet) GetReference() *datatypes_go_proto.Reference {
	if x, ok := x.GetValueSet().(*ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Reference); ok {
		return x.Reference
	}
	return nil
}

type isElementdefinitionDe_ElementDefinitionBinding_ValueSet_ValueSet interface {
	isElementdefinitionDe_ElementDefinitionBinding_ValueSet_ValueSet()
}

type ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Reference struct {
	Reference *datatypes_go_proto.Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Uri) isElementdefinitionDe_ElementDefinitionBinding_ValueSet_ValueSet() {
}

func (*ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Reference) isElementdefinitionDe_ElementDefinitionBinding_ValueSet_ValueSet() {
}

// (approximate) date of birth
type FamilymemberhistoryGenetic_Born struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Born:
	//	*FamilymemberhistoryGenetic_Born_Period
	//	*FamilymemberhistoryGenetic_Born_Date
	//	*FamilymemberhistoryGenetic_Born_StringValue
	Born isFamilymemberhistoryGenetic_Born_Born `protobuf_oneof:"born"`
}

func (x *FamilymemberhistoryGenetic_Born) Reset() {
	*x = FamilymemberhistoryGenetic_Born{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilymemberhistoryGenetic_Born) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilymemberhistoryGenetic_Born) ProtoMessage() {}

func (x *FamilymemberhistoryGenetic_Born) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilymemberhistoryGenetic_Born.ProtoReflect.Descriptor instead.
func (*FamilymemberhistoryGenetic_Born) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{11, 0}
}

func (m *FamilymemberhistoryGenetic_Born) GetBorn() isFamilymemberhistoryGenetic_Born_Born {
	if m != nil {
		return m.Born
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Born) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetBorn().(*FamilymemberhistoryGenetic_Born_Period); ok {
		return x.Period
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Born) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetBorn().(*FamilymemberhistoryGenetic_Born_Date); ok {
		return x.Date
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Born) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetBorn().(*FamilymemberhistoryGenetic_Born_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilymemberhistoryGenetic_Born_Born interface {
	isFamilymemberhistoryGenetic_Born_Born()
}

type FamilymemberhistoryGenetic_Born_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,1,opt,name=period,proto3,oneof"`
}

type FamilymemberhistoryGenetic_Born_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,2,opt,name=date,proto3,oneof"`
}

type FamilymemberhistoryGenetic_Born_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilymemberhistoryGenetic_Born_Period) isFamilymemberhistoryGenetic_Born_Born() {}

func (*FamilymemberhistoryGenetic_Born_Date) isFamilymemberhistoryGenetic_Born_Born() {}

func (*FamilymemberhistoryGenetic_Born_StringValue) isFamilymemberhistoryGenetic_Born_Born() {}

// (approximate) age
type FamilymemberhistoryGenetic_AgeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Age:
	//	*FamilymemberhistoryGenetic_AgeType_AgeValue
	//	*FamilymemberhistoryGenetic_AgeType_Range
	//	*FamilymemberhistoryGenetic_AgeType_StringValue
	Age isFamilymemberhistoryGenetic_AgeType_Age `protobuf_oneof:"age"`
}

func (x *FamilymemberhistoryGenetic_AgeType) Reset() {
	*x = FamilymemberhistoryGenetic_AgeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilymemberhistoryGenetic_AgeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilymemberhistoryGenetic_AgeType) ProtoMessage() {}

func (x *FamilymemberhistoryGenetic_AgeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilymemberhistoryGenetic_AgeType.ProtoReflect.Descriptor instead.
func (*FamilymemberhistoryGenetic_AgeType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{11, 1}
}

func (m *FamilymemberhistoryGenetic_AgeType) GetAge() isFamilymemberhistoryGenetic_AgeType_Age {
	if m != nil {
		return m.Age
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_AgeType) GetAgeValue() *datatypes_go_proto.Age {
	if x, ok := x.GetAge().(*FamilymemberhistoryGenetic_AgeType_AgeValue); ok {
		return x.AgeValue
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_AgeType) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetAge().(*FamilymemberhistoryGenetic_AgeType_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_AgeType) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetAge().(*FamilymemberhistoryGenetic_AgeType_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilymemberhistoryGenetic_AgeType_Age interface {
	isFamilymemberhistoryGenetic_AgeType_Age()
}

type FamilymemberhistoryGenetic_AgeType_AgeValue struct {
	AgeValue *datatypes_go_proto.Age `protobuf:"bytes,1,opt,name=age_value,json=age,proto3,oneof"`
}

type FamilymemberhistoryGenetic_AgeType_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type FamilymemberhistoryGenetic_AgeType_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilymemberhistoryGenetic_AgeType_AgeValue) isFamilymemberhistoryGenetic_AgeType_Age() {}

func (*FamilymemberhistoryGenetic_AgeType_Range) isFamilymemberhistoryGenetic_AgeType_Age() {}

func (*FamilymemberhistoryGenetic_AgeType_StringValue) isFamilymemberhistoryGenetic_AgeType_Age() {}

// Dead? How old/when?
type FamilymemberhistoryGenetic_Deceased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Deceased:
	//	*FamilymemberhistoryGenetic_Deceased_Boolean
	//	*FamilymemberhistoryGenetic_Deceased_Age
	//	*FamilymemberhistoryGenetic_Deceased_Range
	//	*FamilymemberhistoryGenetic_Deceased_Date
	//	*FamilymemberhistoryGenetic_Deceased_StringValue
	Deceased isFamilymemberhistoryGenetic_Deceased_Deceased `protobuf_oneof:"deceased"`
}

func (x *FamilymemberhistoryGenetic_Deceased) Reset() {
	*x = FamilymemberhistoryGenetic_Deceased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilymemberhistoryGenetic_Deceased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilymemberhistoryGenetic_Deceased) ProtoMessage() {}

func (x *FamilymemberhistoryGenetic_Deceased) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilymemberhistoryGenetic_Deceased.ProtoReflect.Descriptor instead.
func (*FamilymemberhistoryGenetic_Deceased) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{11, 2}
}

func (m *FamilymemberhistoryGenetic_Deceased) GetDeceased() isFamilymemberhistoryGenetic_Deceased_Deceased {
	if m != nil {
		return m.Deceased
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Deceased) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetDeceased().(*FamilymemberhistoryGenetic_Deceased_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Deceased) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetDeceased().(*FamilymemberhistoryGenetic_Deceased_Age); ok {
		return x.Age
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Deceased) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetDeceased().(*FamilymemberhistoryGenetic_Deceased_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Deceased) GetDate() *datatypes_go_proto.Date {
	if x, ok := x.GetDeceased().(*FamilymemberhistoryGenetic_Deceased_Date); ok {
		return x.Date
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Deceased) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetDeceased().(*FamilymemberhistoryGenetic_Deceased_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilymemberhistoryGenetic_Deceased_Deceased interface {
	isFamilymemberhistoryGenetic_Deceased_Deceased()
}

type FamilymemberhistoryGenetic_Deceased_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type FamilymemberhistoryGenetic_Deceased_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,2,opt,name=age,proto3,oneof"`
}

type FamilymemberhistoryGenetic_Deceased_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

type FamilymemberhistoryGenetic_Deceased_Date struct {
	Date *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=date,proto3,oneof"`
}

type FamilymemberhistoryGenetic_Deceased_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilymemberhistoryGenetic_Deceased_Boolean) isFamilymemberhistoryGenetic_Deceased_Deceased() {
}

func (*FamilymemberhistoryGenetic_Deceased_Age) isFamilymemberhistoryGenetic_Deceased_Deceased() {}

func (*FamilymemberhistoryGenetic_Deceased_Range) isFamilymemberhistoryGenetic_Deceased_Deceased() {}

func (*FamilymemberhistoryGenetic_Deceased_Date) isFamilymemberhistoryGenetic_Deceased_Deceased() {}

func (*FamilymemberhistoryGenetic_Deceased_StringValue) isFamilymemberhistoryGenetic_Deceased_Deceased() {
}

// Condition that the related person had
type FamilymemberhistoryGenetic_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Condition suffered by relation
	Code *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// deceased | permanent disability | etc.
	Outcome *datatypes_go_proto.CodeableConcept         `protobuf:"bytes,5,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Onset   *FamilymemberhistoryGenetic_Condition_Onset `protobuf:"bytes,6,opt,name=onset,proto3" json:"onset,omitempty"`
	// Extra information about condition
	Note *datatypes_go_proto.Annotation `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *FamilymemberhistoryGenetic_Condition) Reset() {
	*x = FamilymemberhistoryGenetic_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilymemberhistoryGenetic_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilymemberhistoryGenetic_Condition) ProtoMessage() {}

func (x *FamilymemberhistoryGenetic_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilymemberhistoryGenetic_Condition.ProtoReflect.Descriptor instead.
func (*FamilymemberhistoryGenetic_Condition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{11, 3}
}

func (x *FamilymemberhistoryGenetic_Condition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition) GetOutcome() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition) GetOnset() *FamilymemberhistoryGenetic_Condition_Onset {
	if x != nil {
		return x.Onset
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition) GetNote() *datatypes_go_proto.Annotation {
	if x != nil {
		return x.Note
	}
	return nil
}

// When condition first manifested
type FamilymemberhistoryGenetic_Condition_Onset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Onset:
	//	*FamilymemberhistoryGenetic_Condition_Onset_Age
	//	*FamilymemberhistoryGenetic_Condition_Onset_Range
	//	*FamilymemberhistoryGenetic_Condition_Onset_Period
	//	*FamilymemberhistoryGenetic_Condition_Onset_StringValue
	Onset isFamilymemberhistoryGenetic_Condition_Onset_Onset `protobuf_oneof:"onset"`
}

func (x *FamilymemberhistoryGenetic_Condition_Onset) Reset() {
	*x = FamilymemberhistoryGenetic_Condition_Onset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilymemberhistoryGenetic_Condition_Onset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilymemberhistoryGenetic_Condition_Onset) ProtoMessage() {}

func (x *FamilymemberhistoryGenetic_Condition_Onset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilymemberhistoryGenetic_Condition_Onset.ProtoReflect.Descriptor instead.
func (*FamilymemberhistoryGenetic_Condition_Onset) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{11, 3, 0}
}

func (m *FamilymemberhistoryGenetic_Condition_Onset) GetOnset() isFamilymemberhistoryGenetic_Condition_Onset_Onset {
	if m != nil {
		return m.Onset
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition_Onset) GetAge() *datatypes_go_proto.Age {
	if x, ok := x.GetOnset().(*FamilymemberhistoryGenetic_Condition_Onset_Age); ok {
		return x.Age
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition_Onset) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetOnset().(*FamilymemberhistoryGenetic_Condition_Onset_Range); ok {
		return x.Range
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition_Onset) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetOnset().(*FamilymemberhistoryGenetic_Condition_Onset_Period); ok {
		return x.Period
	}
	return nil
}

func (x *FamilymemberhistoryGenetic_Condition_Onset) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetOnset().(*FamilymemberhistoryGenetic_Condition_Onset_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isFamilymemberhistoryGenetic_Condition_Onset_Onset interface {
	isFamilymemberhistoryGenetic_Condition_Onset_Onset()
}

type FamilymemberhistoryGenetic_Condition_Onset_Age struct {
	Age *datatypes_go_proto.Age `protobuf:"bytes,1,opt,name=age,proto3,oneof"`
}

type FamilymemberhistoryGenetic_Condition_Onset_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type FamilymemberhistoryGenetic_Condition_Onset_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

type FamilymemberhistoryGenetic_Condition_Onset_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=string_value,json=string,proto3,oneof"`
}

func (*FamilymemberhistoryGenetic_Condition_Onset_Age) isFamilymemberhistoryGenetic_Condition_Onset_Onset() {
}

func (*FamilymemberhistoryGenetic_Condition_Onset_Range) isFamilymemberhistoryGenetic_Condition_Onset_Onset() {
}

func (*FamilymemberhistoryGenetic_Condition_Onset_Period) isFamilymemberhistoryGenetic_Condition_Onset_Onset() {
}

func (*FamilymemberhistoryGenetic_Condition_Onset_StringValue) isFamilymemberhistoryGenetic_Condition_Onset_Onset() {
}

// Clinically relevant time/time-period for observation
type HdlCholesterol_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*HdlCholesterol_Effective_DateTime
	//	*HdlCholesterol_Effective_Period
	Effective isHdlCholesterol_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *HdlCholesterol_Effective) Reset() {
	*x = HdlCholesterol_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdlCholesterol_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdlCholesterol_Effective) ProtoMessage() {}

func (x *HdlCholesterol_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdlCholesterol_Effective.ProtoReflect.Descriptor instead.
func (*HdlCholesterol_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{12, 0}
}

func (m *HdlCholesterol_Effective) GetEffective() isHdlCholesterol_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *HdlCholesterol_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*HdlCholesterol_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *HdlCholesterol_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*HdlCholesterol_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isHdlCholesterol_Effective_Effective interface {
	isHdlCholesterol_Effective_Effective()
}

type HdlCholesterol_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type HdlCholesterol_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*HdlCholesterol_Effective_DateTime) isHdlCholesterol_Effective_Effective() {}

func (*HdlCholesterol_Effective_Period) isHdlCholesterol_Effective_Effective() {}

// HDL Cholesterol value
type HdlCholesterol_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*HdlCholesterol_Value_Quantity
	Value isHdlCholesterol_Value_Value `protobuf_oneof:"value"`
}

func (x *HdlCholesterol_Value) Reset() {
	*x = HdlCholesterol_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdlCholesterol_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdlCholesterol_Value) ProtoMessage() {}

func (x *HdlCholesterol_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdlCholesterol_Value.ProtoReflect.Descriptor instead.
func (*HdlCholesterol_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{12, 1}
}

func (m *HdlCholesterol_Value) GetValue() isHdlCholesterol_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *HdlCholesterol_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*HdlCholesterol_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isHdlCholesterol_Value_Value interface {
	isHdlCholesterol_Value_Value()
}

type HdlCholesterol_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*HdlCholesterol_Value_Quantity) isHdlCholesterol_Value_Value() {}

// Provides guide for interpretation
type HdlCholesterol_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A fixed quantity (no comparator)
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *HdlCholesterol_ReferenceRange) Reset() {
	*x = HdlCholesterol_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdlCholesterol_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdlCholesterol_ReferenceRange) ProtoMessage() {}

func (x *HdlCholesterol_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdlCholesterol_ReferenceRange.ProtoReflect.Descriptor instead.
func (*HdlCholesterol_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{12, 2}
}

func (x *HdlCholesterol_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HdlCholesterol_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *HdlCholesterol_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *HdlCholesterol_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *HdlCholesterol_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Component results
type HdlCholesterol_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *HdlCholesterol_Component_Value     `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*HdlCholesterol_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *HdlCholesterol_Component) Reset() {
	*x = HdlCholesterol_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdlCholesterol_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdlCholesterol_Component) ProtoMessage() {}

func (x *HdlCholesterol_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdlCholesterol_Component.ProtoReflect.Descriptor instead.
func (*HdlCholesterol_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{12, 3}
}

func (x *HdlCholesterol_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HdlCholesterol_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *HdlCholesterol_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *HdlCholesterol_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *HdlCholesterol_Component) GetValue() *HdlCholesterol_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HdlCholesterol_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *HdlCholesterol_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *HdlCholesterol_Component) GetReferenceRange() []*HdlCholesterol_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type HdlCholesterol_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*HdlCholesterol_Component_Value_Quantity
	//	*HdlCholesterol_Component_Value_CodeableConcept
	//	*HdlCholesterol_Component_Value_StringValue
	//	*HdlCholesterol_Component_Value_Range
	//	*HdlCholesterol_Component_Value_Ratio
	//	*HdlCholesterol_Component_Value_SampledData
	//	*HdlCholesterol_Component_Value_Attachment
	//	*HdlCholesterol_Component_Value_Time
	//	*HdlCholesterol_Component_Value_DateTime
	//	*HdlCholesterol_Component_Value_Period
	Value isHdlCholesterol_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *HdlCholesterol_Component_Value) Reset() {
	*x = HdlCholesterol_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HdlCholesterol_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HdlCholesterol_Component_Value) ProtoMessage() {}

func (x *HdlCholesterol_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HdlCholesterol_Component_Value.ProtoReflect.Descriptor instead.
func (*HdlCholesterol_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{12, 3, 0}
}

func (m *HdlCholesterol_Component_Value) GetValue() isHdlCholesterol_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *HdlCholesterol_Component_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*HdlCholesterol_Component_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isHdlCholesterol_Component_Value_Value interface {
	isHdlCholesterol_Component_Value_Value()
}

type HdlCholesterol_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type HdlCholesterol_Component_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type HdlCholesterol_Component_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type HdlCholesterol_Component_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type HdlCholesterol_Component_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type HdlCholesterol_Component_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type HdlCholesterol_Component_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type HdlCholesterol_Component_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type HdlCholesterol_Component_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type HdlCholesterol_Component_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*HdlCholesterol_Component_Value_Quantity) isHdlCholesterol_Component_Value_Value() {}

func (*HdlCholesterol_Component_Value_CodeableConcept) isHdlCholesterol_Component_Value_Value() {}

func (*HdlCholesterol_Component_Value_StringValue) isHdlCholesterol_Component_Value_Value() {}

func (*HdlCholesterol_Component_Value_Range) isHdlCholesterol_Component_Value_Value() {}

func (*HdlCholesterol_Component_Value_Ratio) isHdlCholesterol_Component_Value_Value() {}

func (*HdlCholesterol_Component_Value_SampledData) isHdlCholesterol_Component_Value_Value() {}

func (*HdlCholesterol_Component_Value_Attachment) isHdlCholesterol_Component_Value_Value() {}

func (*HdlCholesterol_Component_Value_Time) isHdlCholesterol_Component_Value_Value() {}

func (*HdlCholesterol_Component_Value_DateTime) isHdlCholesterol_Component_Value_Value() {}

func (*HdlCholesterol_Component_Value_Period) isHdlCholesterol_Component_Value_Value() {}

// Head Circumference
type Headcircum_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text           *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	HeadCircumCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=head_circum_code,json=HeadCircumCode,proto3" json:"head_circum_code,omitempty"`
}

func (x *Headcircum_CodeableConceptForCode) Reset() {
	*x = Headcircum_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headcircum_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headcircum_CodeableConceptForCode) ProtoMessage() {}

func (x *Headcircum_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headcircum_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Headcircum_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Headcircum_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Headcircum_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Headcircum_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Headcircum_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Headcircum_CodeableConceptForCode) GetHeadCircumCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.HeadCircumCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Headcircum_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Headcircum_Effective_DateTime
	//	*Headcircum_Effective_Period
	Effective isHeadcircum_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Headcircum_Effective) Reset() {
	*x = Headcircum_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headcircum_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headcircum_Effective) ProtoMessage() {}

func (x *Headcircum_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headcircum_Effective.ProtoReflect.Descriptor instead.
func (*Headcircum_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{13, 1}
}

func (m *Headcircum_Effective) GetEffective() isHeadcircum_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Headcircum_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Headcircum_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Headcircum_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Headcircum_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isHeadcircum_Effective_Effective interface {
	isHeadcircum_Effective_Effective()
}

type Headcircum_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Headcircum_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Headcircum_Effective_DateTime) isHeadcircum_Effective_Effective() {}

func (*Headcircum_Effective_Period) isHeadcircum_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Headcircum_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Headcircum_Value_Quantity
	Value isHeadcircum_Value_Value `protobuf_oneof:"value"`
}

func (x *Headcircum_Value) Reset() {
	*x = Headcircum_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headcircum_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headcircum_Value) ProtoMessage() {}

func (x *Headcircum_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headcircum_Value.ProtoReflect.Descriptor instead.
func (*Headcircum_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{13, 2}
}

func (m *Headcircum_Value) GetValue() isHeadcircum_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Headcircum_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Headcircum_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isHeadcircum_Value_Value interface {
	isHeadcircum_Value_Value()
}

type Headcircum_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Headcircum_Value_Quantity) isHeadcircum_Value_Value() {}

// Provides guide for interpretation
type Headcircum_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Headcircum_ReferenceRange) Reset() {
	*x = Headcircum_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headcircum_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headcircum_ReferenceRange) ProtoMessage() {}

func (x *Headcircum_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headcircum_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Headcircum_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{13, 3}
}

func (x *Headcircum_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Headcircum_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Headcircum_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Headcircum_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Headcircum_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Headcircum_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Headcircum_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Headcircum_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Headcircum_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Headcircum_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Headcircum_Related) Reset() {
	*x = Headcircum_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headcircum_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headcircum_Related) ProtoMessage() {}

func (x *Headcircum_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headcircum_Related.ProtoReflect.Descriptor instead.
func (*Headcircum_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{13, 4}
}

func (x *Headcircum_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Headcircum_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Headcircum_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Headcircum_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Headcircum_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Headcircum_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Headcircum_Component_Value         `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Headcircum_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Headcircum_Component) Reset() {
	*x = Headcircum_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headcircum_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headcircum_Component) ProtoMessage() {}

func (x *Headcircum_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headcircum_Component.ProtoReflect.Descriptor instead.
func (*Headcircum_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{13, 5}
}

func (x *Headcircum_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Headcircum_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Headcircum_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Headcircum_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Headcircum_Component) GetValue() *Headcircum_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Headcircum_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Headcircum_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Headcircum_Component) GetReferenceRange() []*Headcircum_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Headcircum_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Headcircum_Component_Value_Quantity
	Value isHeadcircum_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Headcircum_Component_Value) Reset() {
	*x = Headcircum_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Headcircum_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Headcircum_Component_Value) ProtoMessage() {}

func (x *Headcircum_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Headcircum_Component_Value.ProtoReflect.Descriptor instead.
func (*Headcircum_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{13, 5, 0}
}

func (m *Headcircum_Component_Value) GetValue() isHeadcircum_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Headcircum_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Headcircum_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isHeadcircum_Component_Value_Value interface {
	isHeadcircum_Component_Value_Value()
}

type Headcircum_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Headcircum_Component_Value_Quantity) isHeadcircum_Component_Value_Value() {}

// Heart Rate
type Heartrate_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text          *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	HeartRateCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=heart_rate_code,json=HeartRateCode,proto3" json:"heart_rate_code,omitempty"`
}

func (x *Heartrate_CodeableConceptForCode) Reset() {
	*x = Heartrate_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartrate_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartrate_CodeableConceptForCode) ProtoMessage() {}

func (x *Heartrate_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartrate_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Heartrate_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Heartrate_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Heartrate_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Heartrate_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Heartrate_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Heartrate_CodeableConceptForCode) GetHeartRateCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.HeartRateCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Heartrate_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Heartrate_Effective_DateTime
	//	*Heartrate_Effective_Period
	Effective isHeartrate_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Heartrate_Effective) Reset() {
	*x = Heartrate_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartrate_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartrate_Effective) ProtoMessage() {}

func (x *Heartrate_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartrate_Effective.ProtoReflect.Descriptor instead.
func (*Heartrate_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{14, 1}
}

func (m *Heartrate_Effective) GetEffective() isHeartrate_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Heartrate_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Heartrate_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Heartrate_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Heartrate_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isHeartrate_Effective_Effective interface {
	isHeartrate_Effective_Effective()
}

type Heartrate_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Heartrate_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Heartrate_Effective_DateTime) isHeartrate_Effective_Effective() {}

func (*Heartrate_Effective_Period) isHeartrate_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Heartrate_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Heartrate_Value_Quantity
	Value isHeartrate_Value_Value `protobuf_oneof:"value"`
}

func (x *Heartrate_Value) Reset() {
	*x = Heartrate_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartrate_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartrate_Value) ProtoMessage() {}

func (x *Heartrate_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartrate_Value.ProtoReflect.Descriptor instead.
func (*Heartrate_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{14, 2}
}

func (m *Heartrate_Value) GetValue() isHeartrate_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Heartrate_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Heartrate_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isHeartrate_Value_Value interface {
	isHeartrate_Value_Value()
}

type Heartrate_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Heartrate_Value_Quantity) isHeartrate_Value_Value() {}

// Provides guide for interpretation
type Heartrate_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Heartrate_ReferenceRange) Reset() {
	*x = Heartrate_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartrate_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartrate_ReferenceRange) ProtoMessage() {}

func (x *Heartrate_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartrate_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Heartrate_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{14, 3}
}

func (x *Heartrate_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Heartrate_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Heartrate_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Heartrate_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Heartrate_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Heartrate_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Heartrate_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Heartrate_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Heartrate_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Heartrate_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Heartrate_Related) Reset() {
	*x = Heartrate_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartrate_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartrate_Related) ProtoMessage() {}

func (x *Heartrate_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartrate_Related.ProtoReflect.Descriptor instead.
func (*Heartrate_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{14, 4}
}

func (x *Heartrate_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Heartrate_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Heartrate_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Heartrate_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Heartrate_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Heartrate_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Heartrate_Component_Value          `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Heartrate_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Heartrate_Component) Reset() {
	*x = Heartrate_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartrate_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartrate_Component) ProtoMessage() {}

func (x *Heartrate_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartrate_Component.ProtoReflect.Descriptor instead.
func (*Heartrate_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{14, 5}
}

func (x *Heartrate_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Heartrate_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Heartrate_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Heartrate_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Heartrate_Component) GetValue() *Heartrate_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Heartrate_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Heartrate_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Heartrate_Component) GetReferenceRange() []*Heartrate_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Heartrate_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Heartrate_Component_Value_Quantity
	Value isHeartrate_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Heartrate_Component_Value) Reset() {
	*x = Heartrate_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartrate_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartrate_Component_Value) ProtoMessage() {}

func (x *Heartrate_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartrate_Component_Value.ProtoReflect.Descriptor instead.
func (*Heartrate_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{14, 5, 0}
}

func (m *Heartrate_Component_Value) GetValue() isHeartrate_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Heartrate_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Heartrate_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isHeartrate_Component_Value_Value interface {
	isHeartrate_Component_Value_Value()
}

type Heartrate_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Heartrate_Component_Value_Quantity) isHeartrate_Component_Value_Value() {}

// Clinically relevant time/time-period for report
type Hlaresult_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Hlaresult_Effective_DateTime
	//	*Hlaresult_Effective_Period
	Effective isHlaresult_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Hlaresult_Effective) Reset() {
	*x = Hlaresult_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hlaresult_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hlaresult_Effective) ProtoMessage() {}

func (x *Hlaresult_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hlaresult_Effective.ProtoReflect.Descriptor instead.
func (*Hlaresult_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{15, 0}
}

func (m *Hlaresult_Effective) GetEffective() isHlaresult_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Hlaresult_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Hlaresult_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Hlaresult_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Hlaresult_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isHlaresult_Effective_Effective interface {
	isHlaresult_Effective_Effective()
}

type Hlaresult_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Hlaresult_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Hlaresult_Effective_DateTime) isHlaresult_Effective_Effective() {}

func (*Hlaresult_Effective_Period) isHlaresult_Effective_Effective() {}

// Participants in producing the report
type Hlaresult_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of performer
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Practitioner or Organization  participant
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *Hlaresult_Performer) Reset() {
	*x = Hlaresult_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hlaresult_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hlaresult_Performer) ProtoMessage() {}

func (x *Hlaresult_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hlaresult_Performer.ProtoReflect.Descriptor instead.
func (*Hlaresult_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Hlaresult_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Hlaresult_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Hlaresult_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Hlaresult_Performer) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Hlaresult_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Key images associated with this report
type Hlaresult_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *Hlaresult_Image) Reset() {
	*x = Hlaresult_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hlaresult_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hlaresult_Image) ProtoMessage() {}

func (x *Hlaresult_Image) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hlaresult_Image.ProtoReflect.Descriptor instead.
func (*Hlaresult_Image) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{15, 2}
}

func (x *Hlaresult_Image) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Hlaresult_Image) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Hlaresult_Image) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Hlaresult_Image) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Hlaresult_Image) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

// Clinically relevant time/time-period for observation
type LdlCholesterol_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*LdlCholesterol_Effective_DateTime
	//	*LdlCholesterol_Effective_Period
	Effective isLdlCholesterol_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *LdlCholesterol_Effective) Reset() {
	*x = LdlCholesterol_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LdlCholesterol_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdlCholesterol_Effective) ProtoMessage() {}

func (x *LdlCholesterol_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdlCholesterol_Effective.ProtoReflect.Descriptor instead.
func (*LdlCholesterol_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{16, 0}
}

func (m *LdlCholesterol_Effective) GetEffective() isLdlCholesterol_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *LdlCholesterol_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*LdlCholesterol_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *LdlCholesterol_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*LdlCholesterol_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isLdlCholesterol_Effective_Effective interface {
	isLdlCholesterol_Effective_Effective()
}

type LdlCholesterol_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type LdlCholesterol_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*LdlCholesterol_Effective_DateTime) isLdlCholesterol_Effective_Effective() {}

func (*LdlCholesterol_Effective_Period) isLdlCholesterol_Effective_Effective() {}

// LDL Cholesterol value
type LdlCholesterol_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*LdlCholesterol_Value_Quantity
	Value isLdlCholesterol_Value_Value `protobuf_oneof:"value"`
}

func (x *LdlCholesterol_Value) Reset() {
	*x = LdlCholesterol_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LdlCholesterol_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdlCholesterol_Value) ProtoMessage() {}

func (x *LdlCholesterol_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdlCholesterol_Value.ProtoReflect.Descriptor instead.
func (*LdlCholesterol_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{16, 1}
}

func (m *LdlCholesterol_Value) GetValue() isLdlCholesterol_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LdlCholesterol_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*LdlCholesterol_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isLdlCholesterol_Value_Value interface {
	isLdlCholesterol_Value_Value()
}

type LdlCholesterol_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*LdlCholesterol_Value_Quantity) isLdlCholesterol_Value_Value() {}

// Provides guide for interpretation
type LdlCholesterol_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A fixed quantity (no comparator)
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *LdlCholesterol_ReferenceRange) Reset() {
	*x = LdlCholesterol_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LdlCholesterol_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdlCholesterol_ReferenceRange) ProtoMessage() {}

func (x *LdlCholesterol_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdlCholesterol_ReferenceRange.ProtoReflect.Descriptor instead.
func (*LdlCholesterol_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{16, 2}
}

func (x *LdlCholesterol_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LdlCholesterol_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *LdlCholesterol_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *LdlCholesterol_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *LdlCholesterol_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Component results
type LdlCholesterol_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *LdlCholesterol_Component_Value     `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*LdlCholesterol_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *LdlCholesterol_Component) Reset() {
	*x = LdlCholesterol_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LdlCholesterol_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdlCholesterol_Component) ProtoMessage() {}

func (x *LdlCholesterol_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdlCholesterol_Component.ProtoReflect.Descriptor instead.
func (*LdlCholesterol_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{16, 3}
}

func (x *LdlCholesterol_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LdlCholesterol_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *LdlCholesterol_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *LdlCholesterol_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *LdlCholesterol_Component) GetValue() *LdlCholesterol_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LdlCholesterol_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *LdlCholesterol_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *LdlCholesterol_Component) GetReferenceRange() []*LdlCholesterol_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type LdlCholesterol_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*LdlCholesterol_Component_Value_Quantity
	//	*LdlCholesterol_Component_Value_CodeableConcept
	//	*LdlCholesterol_Component_Value_StringValue
	//	*LdlCholesterol_Component_Value_Range
	//	*LdlCholesterol_Component_Value_Ratio
	//	*LdlCholesterol_Component_Value_SampledData
	//	*LdlCholesterol_Component_Value_Attachment
	//	*LdlCholesterol_Component_Value_Time
	//	*LdlCholesterol_Component_Value_DateTime
	//	*LdlCholesterol_Component_Value_Period
	Value isLdlCholesterol_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *LdlCholesterol_Component_Value) Reset() {
	*x = LdlCholesterol_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LdlCholesterol_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdlCholesterol_Component_Value) ProtoMessage() {}

func (x *LdlCholesterol_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdlCholesterol_Component_Value.ProtoReflect.Descriptor instead.
func (*LdlCholesterol_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{16, 3, 0}
}

func (m *LdlCholesterol_Component_Value) GetValue() isLdlCholesterol_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *LdlCholesterol_Component_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*LdlCholesterol_Component_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isLdlCholesterol_Component_Value_Value interface {
	isLdlCholesterol_Component_Value_Value()
}

type LdlCholesterol_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type LdlCholesterol_Component_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type LdlCholesterol_Component_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type LdlCholesterol_Component_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type LdlCholesterol_Component_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type LdlCholesterol_Component_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type LdlCholesterol_Component_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type LdlCholesterol_Component_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type LdlCholesterol_Component_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type LdlCholesterol_Component_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*LdlCholesterol_Component_Value_Quantity) isLdlCholesterol_Component_Value_Value() {}

func (*LdlCholesterol_Component_Value_CodeableConcept) isLdlCholesterol_Component_Value_Value() {}

func (*LdlCholesterol_Component_Value_StringValue) isLdlCholesterol_Component_Value_Value() {}

func (*LdlCholesterol_Component_Value_Range) isLdlCholesterol_Component_Value_Value() {}

func (*LdlCholesterol_Component_Value_Ratio) isLdlCholesterol_Component_Value_Value() {}

func (*LdlCholesterol_Component_Value_SampledData) isLdlCholesterol_Component_Value_Value() {}

func (*LdlCholesterol_Component_Value_Attachment) isLdlCholesterol_Component_Value_Value() {}

func (*LdlCholesterol_Component_Value_Time) isLdlCholesterol_Component_Value_Value() {}

func (*LdlCholesterol_Component_Value_DateTime) isLdlCholesterol_Component_Value_Value() {}

func (*LdlCholesterol_Component_Value_Period) isLdlCholesterol_Component_Value_Value() {}

// Clinically relevant time/time-period for report
type LipidProfile_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*LipidProfile_Effective_DateTime
	//	*LipidProfile_Effective_Period
	Effective isLipidProfile_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *LipidProfile_Effective) Reset() {
	*x = LipidProfile_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LipidProfile_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipidProfile_Effective) ProtoMessage() {}

func (x *LipidProfile_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipidProfile_Effective.ProtoReflect.Descriptor instead.
func (*LipidProfile_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{17, 0}
}

func (m *LipidProfile_Effective) GetEffective() isLipidProfile_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *LipidProfile_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*LipidProfile_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *LipidProfile_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*LipidProfile_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isLipidProfile_Effective_Effective interface {
	isLipidProfile_Effective_Effective()
}

type LipidProfile_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type LipidProfile_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*LipidProfile_Effective_DateTime) isLipidProfile_Effective_Effective() {}

func (*LipidProfile_Effective_Period) isLipidProfile_Effective_Effective() {}

// Participants in producing the report
type LipidProfile_Performer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of performer
	Role *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	// Practitioner or Organization  participant
	Actor *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *LipidProfile_Performer) Reset() {
	*x = LipidProfile_Performer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LipidProfile_Performer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipidProfile_Performer) ProtoMessage() {}

func (x *LipidProfile_Performer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipidProfile_Performer.ProtoReflect.Descriptor instead.
func (*LipidProfile_Performer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{17, 1}
}

func (x *LipidProfile_Performer) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LipidProfile_Performer) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *LipidProfile_Performer) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *LipidProfile_Performer) GetRole() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *LipidProfile_Performer) GetActor() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Actor
	}
	return nil
}

// Key images associated with this report
type LipidProfile_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Comment about the image (e.g. explanation)
	Comment *datatypes_go_proto.String `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Reference to the image source
	Link *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *LipidProfile_Image) Reset() {
	*x = LipidProfile_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LipidProfile_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LipidProfile_Image) ProtoMessage() {}

func (x *LipidProfile_Image) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LipidProfile_Image.ProtoReflect.Descriptor instead.
func (*LipidProfile_Image) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{17, 2}
}

func (x *LipidProfile_Image) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LipidProfile_Image) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *LipidProfile_Image) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *LipidProfile_Image) GetComment() *datatypes_go_proto.String {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *LipidProfile_Image) GetLink() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Link
	}
	return nil
}

// Clinically relevant time/time-period for observation
type ObservationGenetics_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*ObservationGenetics_Effective_DateTime
	//	*ObservationGenetics_Effective_Period
	Effective isObservationGenetics_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *ObservationGenetics_Effective) Reset() {
	*x = ObservationGenetics_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationGenetics_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGenetics_Effective) ProtoMessage() {}

func (x *ObservationGenetics_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGenetics_Effective.ProtoReflect.Descriptor instead.
func (*ObservationGenetics_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{19, 0}
}

func (m *ObservationGenetics_Effective) GetEffective() isObservationGenetics_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *ObservationGenetics_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*ObservationGenetics_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ObservationGenetics_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*ObservationGenetics_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isObservationGenetics_Effective_Effective interface {
	isObservationGenetics_Effective_Effective()
}

type ObservationGenetics_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ObservationGenetics_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*ObservationGenetics_Effective_DateTime) isObservationGenetics_Effective_Effective() {}

func (*ObservationGenetics_Effective_Period) isObservationGenetics_Effective_Effective() {}

// Actual result
type ObservationGenetics_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ObservationGenetics_Value_Quantity
	//	*ObservationGenetics_Value_CodeableConcept
	//	*ObservationGenetics_Value_StringValue
	//	*ObservationGenetics_Value_Boolean
	//	*ObservationGenetics_Value_Range
	//	*ObservationGenetics_Value_Ratio
	//	*ObservationGenetics_Value_SampledData
	//	*ObservationGenetics_Value_Attachment
	//	*ObservationGenetics_Value_Time
	//	*ObservationGenetics_Value_DateTime
	//	*ObservationGenetics_Value_Period
	Value isObservationGenetics_Value_Value `protobuf_oneof:"value"`
}

func (x *ObservationGenetics_Value) Reset() {
	*x = ObservationGenetics_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationGenetics_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGenetics_Value) ProtoMessage() {}

func (x *ObservationGenetics_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGenetics_Value.ProtoReflect.Descriptor instead.
func (*ObservationGenetics_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{19, 1}
}

func (m *ObservationGenetics_Value) GetValue() isObservationGenetics_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ObservationGenetics_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ObservationGenetics_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ObservationGenetics_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ObservationGenetics_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ObservationGenetics_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ObservationGenetics_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ObservationGenetics_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ObservationGenetics_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ObservationGenetics_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ObservationGenetics_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ObservationGenetics_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*ObservationGenetics_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isObservationGenetics_Value_Value interface {
	isObservationGenetics_Value_Value()
}

type ObservationGenetics_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type ObservationGenetics_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ObservationGenetics_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type ObservationGenetics_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type ObservationGenetics_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

type ObservationGenetics_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,6,opt,name=ratio,proto3,oneof"`
}

type ObservationGenetics_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,7,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ObservationGenetics_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,8,opt,name=attachment,proto3,oneof"`
}

type ObservationGenetics_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,9,opt,name=time,proto3,oneof"`
}

type ObservationGenetics_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,10,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ObservationGenetics_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,11,opt,name=period,proto3,oneof"`
}

func (*ObservationGenetics_Value_Quantity) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_CodeableConcept) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_StringValue) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_Boolean) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_Range) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_Ratio) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_SampledData) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_Attachment) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_Time) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_DateTime) isObservationGenetics_Value_Value() {}

func (*ObservationGenetics_Value_Period) isObservationGenetics_Value_Value() {}

// Provides guide for interpretation
type ObservationGenetics_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ObservationGenetics_ReferenceRange) Reset() {
	*x = ObservationGenetics_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationGenetics_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGenetics_ReferenceRange) ProtoMessage() {}

func (x *ObservationGenetics_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGenetics_ReferenceRange.ProtoReflect.Descriptor instead.
func (*ObservationGenetics_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{19, 2}
}

func (x *ObservationGenetics_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationGenetics_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ObservationGenetics_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ObservationGenetics_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *ObservationGenetics_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *ObservationGenetics_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ObservationGenetics_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *ObservationGenetics_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *ObservationGenetics_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Resource related to this observation
type ObservationGenetics_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *ObservationGenetics_Related) Reset() {
	*x = ObservationGenetics_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationGenetics_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGenetics_Related) ProtoMessage() {}

func (x *ObservationGenetics_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGenetics_Related.ProtoReflect.Descriptor instead.
func (*ObservationGenetics_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{19, 3}
}

func (x *ObservationGenetics_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationGenetics_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ObservationGenetics_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ObservationGenetics_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ObservationGenetics_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Component results
type ObservationGenetics_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept  `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *ObservationGenetics_Component_Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*ObservationGenetics_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *ObservationGenetics_Component) Reset() {
	*x = ObservationGenetics_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationGenetics_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGenetics_Component) ProtoMessage() {}

func (x *ObservationGenetics_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGenetics_Component.ProtoReflect.Descriptor instead.
func (*ObservationGenetics_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{19, 4}
}

func (x *ObservationGenetics_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObservationGenetics_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ObservationGenetics_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ObservationGenetics_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ObservationGenetics_Component) GetValue() *ObservationGenetics_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ObservationGenetics_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *ObservationGenetics_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *ObservationGenetics_Component) GetReferenceRange() []*ObservationGenetics_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type ObservationGenetics_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ObservationGenetics_Component_Value_Quantity
	//	*ObservationGenetics_Component_Value_CodeableConcept
	//	*ObservationGenetics_Component_Value_StringValue
	//	*ObservationGenetics_Component_Value_Range
	//	*ObservationGenetics_Component_Value_Ratio
	//	*ObservationGenetics_Component_Value_SampledData
	//	*ObservationGenetics_Component_Value_Attachment
	//	*ObservationGenetics_Component_Value_Time
	//	*ObservationGenetics_Component_Value_DateTime
	//	*ObservationGenetics_Component_Value_Period
	Value isObservationGenetics_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *ObservationGenetics_Component_Value) Reset() {
	*x = ObservationGenetics_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationGenetics_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationGenetics_Component_Value) ProtoMessage() {}

func (x *ObservationGenetics_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationGenetics_Component_Value.ProtoReflect.Descriptor instead.
func (*ObservationGenetics_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{19, 4, 0}
}

func (m *ObservationGenetics_Component_Value) GetValue() isObservationGenetics_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ObservationGenetics_Component_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*ObservationGenetics_Component_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isObservationGenetics_Component_Value_Value interface {
	isObservationGenetics_Component_Value_Value()
}

type ObservationGenetics_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type ObservationGenetics_Component_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ObservationGenetics_Component_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type ObservationGenetics_Component_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type ObservationGenetics_Component_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type ObservationGenetics_Component_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ObservationGenetics_Component_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type ObservationGenetics_Component_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type ObservationGenetics_Component_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ObservationGenetics_Component_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*ObservationGenetics_Component_Value_Quantity) isObservationGenetics_Component_Value_Value() {}

func (*ObservationGenetics_Component_Value_CodeableConcept) isObservationGenetics_Component_Value_Value() {
}

func (*ObservationGenetics_Component_Value_StringValue) isObservationGenetics_Component_Value_Value() {
}

func (*ObservationGenetics_Component_Value_Range) isObservationGenetics_Component_Value_Value() {}

func (*ObservationGenetics_Component_Value_Ratio) isObservationGenetics_Component_Value_Value() {}

func (*ObservationGenetics_Component_Value_SampledData) isObservationGenetics_Component_Value_Value() {
}

func (*ObservationGenetics_Component_Value_Attachment) isObservationGenetics_Component_Value_Value() {
}

func (*ObservationGenetics_Component_Value_Time) isObservationGenetics_Component_Value_Value() {}

func (*ObservationGenetics_Component_Value_DateTime) isObservationGenetics_Component_Value_Value() {}

func (*ObservationGenetics_Component_Value_Period) isObservationGenetics_Component_Value_Value() {}

// Oxygen Saturation
type Oxygensat_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text          *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	OxygenSatCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=oxygen_sat_code,json=OxygenSatCode,proto3" json:"oxygen_sat_code,omitempty"`
}

func (x *Oxygensat_CodeableConceptForCode) Reset() {
	*x = Oxygensat_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oxygensat_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oxygensat_CodeableConceptForCode) ProtoMessage() {}

func (x *Oxygensat_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oxygensat_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Oxygensat_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{20, 0}
}

func (x *Oxygensat_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Oxygensat_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Oxygensat_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Oxygensat_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Oxygensat_CodeableConceptForCode) GetOxygenSatCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.OxygenSatCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Oxygensat_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Oxygensat_Effective_DateTime
	//	*Oxygensat_Effective_Period
	Effective isOxygensat_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Oxygensat_Effective) Reset() {
	*x = Oxygensat_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oxygensat_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oxygensat_Effective) ProtoMessage() {}

func (x *Oxygensat_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oxygensat_Effective.ProtoReflect.Descriptor instead.
func (*Oxygensat_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{20, 1}
}

func (m *Oxygensat_Effective) GetEffective() isOxygensat_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Oxygensat_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Oxygensat_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Oxygensat_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Oxygensat_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isOxygensat_Effective_Effective interface {
	isOxygensat_Effective_Effective()
}

type Oxygensat_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Oxygensat_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Oxygensat_Effective_DateTime) isOxygensat_Effective_Effective() {}

func (*Oxygensat_Effective_Period) isOxygensat_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Oxygensat_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Oxygensat_Value_Quantity
	Value isOxygensat_Value_Value `protobuf_oneof:"value"`
}

func (x *Oxygensat_Value) Reset() {
	*x = Oxygensat_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oxygensat_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oxygensat_Value) ProtoMessage() {}

func (x *Oxygensat_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oxygensat_Value.ProtoReflect.Descriptor instead.
func (*Oxygensat_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{20, 2}
}

func (m *Oxygensat_Value) GetValue() isOxygensat_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Oxygensat_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Oxygensat_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isOxygensat_Value_Value interface {
	isOxygensat_Value_Value()
}

type Oxygensat_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Oxygensat_Value_Quantity) isOxygensat_Value_Value() {}

// Provides guide for interpretation
type Oxygensat_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Oxygensat_ReferenceRange) Reset() {
	*x = Oxygensat_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oxygensat_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oxygensat_ReferenceRange) ProtoMessage() {}

func (x *Oxygensat_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oxygensat_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Oxygensat_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{20, 3}
}

func (x *Oxygensat_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Oxygensat_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Oxygensat_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Oxygensat_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Oxygensat_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Oxygensat_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Oxygensat_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Oxygensat_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Oxygensat_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Oxygensat_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Oxygensat_Related) Reset() {
	*x = Oxygensat_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oxygensat_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oxygensat_Related) ProtoMessage() {}

func (x *Oxygensat_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oxygensat_Related.ProtoReflect.Descriptor instead.
func (*Oxygensat_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{20, 4}
}

func (x *Oxygensat_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Oxygensat_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Oxygensat_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Oxygensat_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Oxygensat_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Oxygensat_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Oxygensat_Component_Value          `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Oxygensat_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Oxygensat_Component) Reset() {
	*x = Oxygensat_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oxygensat_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oxygensat_Component) ProtoMessage() {}

func (x *Oxygensat_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oxygensat_Component.ProtoReflect.Descriptor instead.
func (*Oxygensat_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{20, 5}
}

func (x *Oxygensat_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Oxygensat_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Oxygensat_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Oxygensat_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Oxygensat_Component) GetValue() *Oxygensat_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Oxygensat_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Oxygensat_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Oxygensat_Component) GetReferenceRange() []*Oxygensat_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Oxygensat_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Oxygensat_Component_Value_Quantity
	Value isOxygensat_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Oxygensat_Component_Value) Reset() {
	*x = Oxygensat_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oxygensat_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oxygensat_Component_Value) ProtoMessage() {}

func (x *Oxygensat_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oxygensat_Component_Value.ProtoReflect.Descriptor instead.
func (*Oxygensat_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{20, 5, 0}
}

func (m *Oxygensat_Component_Value) GetValue() isOxygensat_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Oxygensat_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Oxygensat_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isOxygensat_Component_Value_Value interface {
	isOxygensat_Component_Value_Value()
}

type Oxygensat_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Oxygensat_Component_Value_Quantity) isOxygensat_Component_Value_Value() {}

// When procedure should occur
type ProcedurerequestGenetics_Occurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Occurrence:
	//	*ProcedurerequestGenetics_Occurrence_DateTime
	//	*ProcedurerequestGenetics_Occurrence_Period
	//	*ProcedurerequestGenetics_Occurrence_Timing
	Occurrence isProcedurerequestGenetics_Occurrence_Occurrence `protobuf_oneof:"occurrence"`
}

func (x *ProcedurerequestGenetics_Occurrence) Reset() {
	*x = ProcedurerequestGenetics_Occurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedurerequestGenetics_Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedurerequestGenetics_Occurrence) ProtoMessage() {}

func (x *ProcedurerequestGenetics_Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedurerequestGenetics_Occurrence.ProtoReflect.Descriptor instead.
func (*ProcedurerequestGenetics_Occurrence) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{21, 0}
}

func (m *ProcedurerequestGenetics_Occurrence) GetOccurrence() isProcedurerequestGenetics_Occurrence_Occurrence {
	if m != nil {
		return m.Occurrence
	}
	return nil
}

func (x *ProcedurerequestGenetics_Occurrence) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetOccurrence().(*ProcedurerequestGenetics_Occurrence_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ProcedurerequestGenetics_Occurrence) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetOccurrence().(*ProcedurerequestGenetics_Occurrence_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ProcedurerequestGenetics_Occurrence) GetTiming() *datatypes_go_proto.Timing {
	if x, ok := x.GetOccurrence().(*ProcedurerequestGenetics_Occurrence_Timing); ok {
		return x.Timing
	}
	return nil
}

type isProcedurerequestGenetics_Occurrence_Occurrence interface {
	isProcedurerequestGenetics_Occurrence_Occurrence()
}

type ProcedurerequestGenetics_Occurrence_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ProcedurerequestGenetics_Occurrence_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type ProcedurerequestGenetics_Occurrence_Timing struct {
	Timing *datatypes_go_proto.Timing `protobuf:"bytes,3,opt,name=timing,proto3,oneof"`
}

func (*ProcedurerequestGenetics_Occurrence_DateTime) isProcedurerequestGenetics_Occurrence_Occurrence() {
}

func (*ProcedurerequestGenetics_Occurrence_Period) isProcedurerequestGenetics_Occurrence_Occurrence() {
}

func (*ProcedurerequestGenetics_Occurrence_Timing) isProcedurerequestGenetics_Occurrence_Occurrence() {
}

// Preconditions for procedure or diagnostic
type ProcedurerequestGenetics_AsNeeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AsNeeded:
	//	*ProcedurerequestGenetics_AsNeeded_Boolean
	//	*ProcedurerequestGenetics_AsNeeded_CodeableConcept
	AsNeeded isProcedurerequestGenetics_AsNeeded_AsNeeded `protobuf_oneof:"as_needed"`
}

func (x *ProcedurerequestGenetics_AsNeeded) Reset() {
	*x = ProcedurerequestGenetics_AsNeeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedurerequestGenetics_AsNeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedurerequestGenetics_AsNeeded) ProtoMessage() {}

func (x *ProcedurerequestGenetics_AsNeeded) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedurerequestGenetics_AsNeeded.ProtoReflect.Descriptor instead.
func (*ProcedurerequestGenetics_AsNeeded) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{21, 1}
}

func (m *ProcedurerequestGenetics_AsNeeded) GetAsNeeded() isProcedurerequestGenetics_AsNeeded_AsNeeded {
	if m != nil {
		return m.AsNeeded
	}
	return nil
}

func (x *ProcedurerequestGenetics_AsNeeded) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetAsNeeded().(*ProcedurerequestGenetics_AsNeeded_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ProcedurerequestGenetics_AsNeeded) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetAsNeeded().(*ProcedurerequestGenetics_AsNeeded_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

type isProcedurerequestGenetics_AsNeeded_AsNeeded interface {
	isProcedurerequestGenetics_AsNeeded_AsNeeded()
}

type ProcedurerequestGenetics_AsNeeded_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,1,opt,name=boolean,proto3,oneof"`
}

type ProcedurerequestGenetics_AsNeeded_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

func (*ProcedurerequestGenetics_AsNeeded_Boolean) isProcedurerequestGenetics_AsNeeded_AsNeeded() {}

func (*ProcedurerequestGenetics_AsNeeded_CodeableConcept) isProcedurerequestGenetics_AsNeeded_AsNeeded() {
}

// Who/what is requesting procedure or diagnostic
type ProcedurerequestGenetics_Requester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Individual making the request
	Agent *datatypes_go_proto.Reference `protobuf:"bytes,4,opt,name=agent,proto3" json:"agent,omitempty"`
	// Organization agent is acting for
	OnBehalfOf *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
}

func (x *ProcedurerequestGenetics_Requester) Reset() {
	*x = ProcedurerequestGenetics_Requester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcedurerequestGenetics_Requester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedurerequestGenetics_Requester) ProtoMessage() {}

func (x *ProcedurerequestGenetics_Requester) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedurerequestGenetics_Requester.ProtoReflect.Descriptor instead.
func (*ProcedurerequestGenetics_Requester) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{21, 2}
}

func (x *ProcedurerequestGenetics_Requester) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProcedurerequestGenetics_Requester) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProcedurerequestGenetics_Requester) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProcedurerequestGenetics_Requester) GetAgent() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *ProcedurerequestGenetics_Requester) GetOnBehalfOf() *datatypes_go_proto.Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

// Respiratory Rate
type Resprate_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text         *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	RespRateCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=resp_rate_code,json=RespRateCode,proto3" json:"resp_rate_code,omitempty"`
}

func (x *Resprate_CodeableConceptForCode) Reset() {
	*x = Resprate_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resprate_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resprate_CodeableConceptForCode) ProtoMessage() {}

func (x *Resprate_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resprate_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Resprate_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{22, 0}
}

func (x *Resprate_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Resprate_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Resprate_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Resprate_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Resprate_CodeableConceptForCode) GetRespRateCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.RespRateCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Resprate_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Resprate_Effective_DateTime
	//	*Resprate_Effective_Period
	Effective isResprate_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Resprate_Effective) Reset() {
	*x = Resprate_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resprate_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resprate_Effective) ProtoMessage() {}

func (x *Resprate_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resprate_Effective.ProtoReflect.Descriptor instead.
func (*Resprate_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{22, 1}
}

func (m *Resprate_Effective) GetEffective() isResprate_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Resprate_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Resprate_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Resprate_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Resprate_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isResprate_Effective_Effective interface {
	isResprate_Effective_Effective()
}

type Resprate_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Resprate_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Resprate_Effective_DateTime) isResprate_Effective_Effective() {}

func (*Resprate_Effective_Period) isResprate_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Resprate_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Resprate_Value_Quantity
	Value isResprate_Value_Value `protobuf_oneof:"value"`
}

func (x *Resprate_Value) Reset() {
	*x = Resprate_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resprate_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resprate_Value) ProtoMessage() {}

func (x *Resprate_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resprate_Value.ProtoReflect.Descriptor instead.
func (*Resprate_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{22, 2}
}

func (m *Resprate_Value) GetValue() isResprate_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Resprate_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Resprate_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isResprate_Value_Value interface {
	isResprate_Value_Value()
}

type Resprate_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Resprate_Value_Quantity) isResprate_Value_Value() {}

// Provides guide for interpretation
type Resprate_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Resprate_ReferenceRange) Reset() {
	*x = Resprate_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resprate_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resprate_ReferenceRange) ProtoMessage() {}

func (x *Resprate_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resprate_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Resprate_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{22, 3}
}

func (x *Resprate_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Resprate_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Resprate_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Resprate_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Resprate_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Resprate_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Resprate_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Resprate_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Resprate_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Resprate_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Resprate_Related) Reset() {
	*x = Resprate_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resprate_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resprate_Related) ProtoMessage() {}

func (x *Resprate_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resprate_Related.ProtoReflect.Descriptor instead.
func (*Resprate_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{22, 4}
}

func (x *Resprate_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Resprate_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Resprate_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Resprate_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Resprate_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Resprate_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Resprate_Component_Value           `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Resprate_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Resprate_Component) Reset() {
	*x = Resprate_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resprate_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resprate_Component) ProtoMessage() {}

func (x *Resprate_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resprate_Component.ProtoReflect.Descriptor instead.
func (*Resprate_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{22, 5}
}

func (x *Resprate_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Resprate_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Resprate_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Resprate_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Resprate_Component) GetValue() *Resprate_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Resprate_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Resprate_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Resprate_Component) GetReferenceRange() []*Resprate_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Resprate_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Resprate_Component_Value_Quantity
	Value isResprate_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Resprate_Component_Value) Reset() {
	*x = Resprate_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resprate_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resprate_Component_Value) ProtoMessage() {}

func (x *Resprate_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resprate_Component_Value.ProtoReflect.Descriptor instead.
func (*Resprate_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{22, 5, 0}
}

func (m *Resprate_Component_Value) GetValue() isResprate_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Resprate_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Resprate_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isResprate_Component_Value_Value interface {
	isResprate_Component_Value_Value()
}

type Resprate_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Resprate_Component_Value_Quantity) isResprate_Component_Value_Value() {}

// Filter that can be used in a value set
type Shareablecodesystem_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code that identifies the filter
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// How or why the filter is used
	Description *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Operators that can be used with filter
	Operator []*codes_go_proto.FilterOperatorCode `protobuf:"bytes,6,rep,name=operator,proto3" json:"operator,omitempty"`
	// What to use for the value
	Value *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Shareablecodesystem_Filter) Reset() {
	*x = Shareablecodesystem_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablecodesystem_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablecodesystem_Filter) ProtoMessage() {}

func (x *Shareablecodesystem_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablecodesystem_Filter.ProtoReflect.Descriptor instead.
func (*Shareablecodesystem_Filter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{23, 0}
}

func (x *Shareablecodesystem_Filter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablecodesystem_Filter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablecodesystem_Filter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablecodesystem_Filter) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Shareablecodesystem_Filter) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Shareablecodesystem_Filter) GetOperator() []*codes_go_proto.FilterOperatorCode {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *Shareablecodesystem_Filter) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// Additional information supplied about each concept
type Shareablecodesystem_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Identifies the property on the concepts, and when referred to in
	// operations
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Formal identifier for the property
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	// Why the property is defined, and/or what it conveys
	Description *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// code | Coding | string | integer | boolean | dateTime
	Type *codes_go_proto.PropertyTypeCode `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Shareablecodesystem_Property) Reset() {
	*x = Shareablecodesystem_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablecodesystem_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablecodesystem_Property) ProtoMessage() {}

func (x *Shareablecodesystem_Property) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablecodesystem_Property.ProtoReflect.Descriptor instead.
func (*Shareablecodesystem_Property) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{23, 1}
}

func (x *Shareablecodesystem_Property) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablecodesystem_Property) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablecodesystem_Property) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablecodesystem_Property) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Shareablecodesystem_Property) GetUri() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *Shareablecodesystem_Property) GetDescription() *datatypes_go_proto.String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Shareablecodesystem_Property) GetType() *codes_go_proto.PropertyTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

// Concepts in the code system
type Shareablecodesystem_ConceptDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code that identifies concept
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Text to display to the user
	Display *datatypes_go_proto.String `protobuf:"bytes,5,opt,name=display,proto3" json:"display,omitempty"`
	// Formal definition
	Definition  *datatypes_go_proto.String                               `protobuf:"bytes,6,opt,name=definition,proto3" json:"definition,omitempty"`
	Designation []*Shareablecodesystem_ConceptDefinition_Designation     `protobuf:"bytes,7,rep,name=designation,proto3" json:"designation,omitempty"`
	Property    []*Shareablecodesystem_ConceptDefinition_ConceptProperty `protobuf:"bytes,8,rep,name=property,proto3" json:"property,omitempty"`
	// Child Concepts (is-a/contains/categorizes)
	Concept []*Shareablecodesystem_ConceptDefinition `protobuf:"bytes,9,rep,name=concept,proto3" json:"concept,omitempty"`
}

func (x *Shareablecodesystem_ConceptDefinition) Reset() {
	*x = Shareablecodesystem_ConceptDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablecodesystem_ConceptDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablecodesystem_ConceptDefinition) ProtoMessage() {}

func (x *Shareablecodesystem_ConceptDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablecodesystem_ConceptDefinition.ProtoReflect.Descriptor instead.
func (*Shareablecodesystem_ConceptDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{23, 2}
}

func (x *Shareablecodesystem_ConceptDefinition) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition) GetDefinition() *datatypes_go_proto.String {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition) GetDesignation() []*Shareablecodesystem_ConceptDefinition_Designation {
	if x != nil {
		return x.Designation
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition) GetProperty() []*Shareablecodesystem_ConceptDefinition_ConceptProperty {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition) GetConcept() []*Shareablecodesystem_ConceptDefinition {
	if x != nil {
		return x.Concept
	}
	return nil
}

// Additional representations for the concept
type Shareablecodesystem_ConceptDefinition_Designation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Human language of the designation
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Details how this designation would be used
	Use *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// The text value for this designation
	Value *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Shareablecodesystem_ConceptDefinition_Designation) Reset() {
	*x = Shareablecodesystem_ConceptDefinition_Designation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablecodesystem_ConceptDefinition_Designation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablecodesystem_ConceptDefinition_Designation) ProtoMessage() {}

func (x *Shareablecodesystem_ConceptDefinition_Designation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablecodesystem_ConceptDefinition_Designation.ProtoReflect.Descriptor instead.
func (*Shareablecodesystem_ConceptDefinition_Designation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{23, 2, 0}
}

func (x *Shareablecodesystem_ConceptDefinition_Designation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_Designation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_Designation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_Designation) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_Designation) GetUse() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_Designation) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// Property value for the concept
type Shareablecodesystem_ConceptDefinition_ConceptProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Reference to CodeSystem.property.code
	Code  *datatypes_go_proto.Code                                     `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty) Reset() {
	*x = Shareablecodesystem_ConceptDefinition_ConceptProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablecodesystem_ConceptDefinition_ConceptProperty) ProtoMessage() {}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablecodesystem_ConceptDefinition_ConceptProperty.ProtoReflect.Descriptor instead.
func (*Shareablecodesystem_ConceptDefinition_ConceptProperty) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{23, 2, 1}
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty) GetValue() *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Value of the property for this concept
type Shareablecodesystem_ConceptDefinition_ConceptProperty_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Code
	//	*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Coding
	//	*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_StringValue
	//	*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Integer
	//	*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Boolean
	//	*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_DateTime
	Value isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value `protobuf_oneof:"value"`
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) Reset() {
	*x = Shareablecodesystem_ConceptDefinition_ConceptProperty_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) ProtoMessage() {}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablecodesystem_ConceptDefinition_ConceptProperty_Value.ProtoReflect.Descriptor instead.
func (*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{23, 2, 1, 0}
}

func (m *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) GetValue() isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetValue().(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Code); ok {
		return x.Code
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) GetCoding() *datatypes_go_proto.Coding {
	if x, ok := x.GetValue().(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetValue().(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Shareablecodesystem_ConceptDefinition_ConceptProperty_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value interface {
	isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value()
}

type Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,1,opt,name=code,proto3,oneof"`
}

type Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Coding struct {
	Coding *datatypes_go_proto.Coding `protobuf:"bytes,2,opt,name=coding,proto3,oneof"`
}

type Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,4,opt,name=integer,proto3,oneof"`
}

type Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=boolean,proto3,oneof"`
}

type Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Code) isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value() {
}

func (*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Coding) isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value() {
}

func (*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_StringValue) isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value() {
}

func (*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Integer) isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value() {
}

func (*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Boolean) isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value() {
}

func (*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_DateTime) isShareablecodesystem_ConceptDefinition_ConceptProperty_Value_Value() {
}

// Definition of the content of the value set (CLD)
type Shareablevalueset_Compose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Fixed date for version-less references (transitive)
	LockedDate *datatypes_go_proto.Date `protobuf:"bytes,4,opt,name=locked_date,json=lockedDate,proto3" json:"locked_date,omitempty"`
	// Whether inactive codes are in the value set
	Inactive *datatypes_go_proto.Boolean             `protobuf:"bytes,5,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Include  []*Shareablevalueset_Compose_ConceptSet `protobuf:"bytes,6,rep,name=include,proto3" json:"include,omitempty"`
	// Explicitly exclude codes from a code system or other value sets
	Exclude []*Shareablevalueset_Compose_ConceptSet `protobuf:"bytes,7,rep,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *Shareablevalueset_Compose) Reset() {
	*x = Shareablevalueset_Compose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset_Compose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset_Compose) ProtoMessage() {}

func (x *Shareablevalueset_Compose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset_Compose.ProtoReflect.Descriptor instead.
func (*Shareablevalueset_Compose) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24, 0}
}

func (x *Shareablevalueset_Compose) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablevalueset_Compose) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablevalueset_Compose) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablevalueset_Compose) GetLockedDate() *datatypes_go_proto.Date {
	if x != nil {
		return x.LockedDate
	}
	return nil
}

func (x *Shareablevalueset_Compose) GetInactive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Inactive
	}
	return nil
}

func (x *Shareablevalueset_Compose) GetInclude() []*Shareablevalueset_Compose_ConceptSet {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *Shareablevalueset_Compose) GetExclude() []*Shareablevalueset_Compose_ConceptSet {
	if x != nil {
		return x.Exclude
	}
	return nil
}

// Used when the value set is "expanded"
type Shareablevalueset_Expansion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Uniquely identifies this expansion
	Identifier *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Time ValueSet expansion happened
	Timestamp *datatypes_go_proto.DateTime `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Total number of codes in the expansion
	Total *datatypes_go_proto.Integer `protobuf:"bytes,6,opt,name=total,proto3" json:"total,omitempty"`
	// Offset at which this resource starts
	Offset    *datatypes_go_proto.Integer              `protobuf:"bytes,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Parameter []*Shareablevalueset_Expansion_Parameter `protobuf:"bytes,8,rep,name=parameter,proto3" json:"parameter,omitempty"`
	Contains  []*Shareablevalueset_Expansion_Contains  `protobuf:"bytes,9,rep,name=contains,proto3" json:"contains,omitempty"`
}

func (x *Shareablevalueset_Expansion) Reset() {
	*x = Shareablevalueset_Expansion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset_Expansion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset_Expansion) ProtoMessage() {}

func (x *Shareablevalueset_Expansion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset_Expansion.ProtoReflect.Descriptor instead.
func (*Shareablevalueset_Expansion) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24, 1}
}

func (x *Shareablevalueset_Expansion) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablevalueset_Expansion) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablevalueset_Expansion) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablevalueset_Expansion) GetIdentifier() *datatypes_go_proto.Uri {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Shareablevalueset_Expansion) GetTimestamp() *datatypes_go_proto.DateTime {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Shareablevalueset_Expansion) GetTotal() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Shareablevalueset_Expansion) GetOffset() *datatypes_go_proto.Integer {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *Shareablevalueset_Expansion) GetParameter() []*Shareablevalueset_Expansion_Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *Shareablevalueset_Expansion) GetContains() []*Shareablevalueset_Expansion_Contains {
	if x != nil {
		return x.Contains
	}
	return nil
}

// Include one or more codes from a code system or other value set(s)
type Shareablevalueset_Compose_ConceptSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The system the codes come from
	System *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=system,proto3" json:"system,omitempty"`
	// Specific version of the code system referred to
	Version *datatypes_go_proto.String                               `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Concept []*Shareablevalueset_Compose_ConceptSet_ConceptReference `protobuf:"bytes,6,rep,name=concept,proto3" json:"concept,omitempty"`
	Filter  []*Shareablevalueset_Compose_ConceptSet_Filter           `protobuf:"bytes,7,rep,name=filter,proto3" json:"filter,omitempty"`
	// Select only contents included in this value set
	ValueSet []*datatypes_go_proto.Uri `protobuf:"bytes,8,rep,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *Shareablevalueset_Compose_ConceptSet) Reset() {
	*x = Shareablevalueset_Compose_ConceptSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset_Compose_ConceptSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset_Compose_ConceptSet) ProtoMessage() {}

func (x *Shareablevalueset_Compose_ConceptSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset_Compose_ConceptSet.ProtoReflect.Descriptor instead.
func (*Shareablevalueset_Compose_ConceptSet) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24, 0, 0}
}

func (x *Shareablevalueset_Compose_ConceptSet) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet) GetSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet) GetConcept() []*Shareablevalueset_Compose_ConceptSet_ConceptReference {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet) GetFilter() []*Shareablevalueset_Compose_ConceptSet_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet) GetValueSet() []*datatypes_go_proto.Uri {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

// A concept defined in the system
type Shareablevalueset_Compose_ConceptSet_ConceptReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Code or expression from system
	Code *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Text to display for this code for this value set in this valueset
	Display     *datatypes_go_proto.String                                           `protobuf:"bytes,5,opt,name=display,proto3" json:"display,omitempty"`
	Designation []*Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation `protobuf:"bytes,6,rep,name=designation,proto3" json:"designation,omitempty"`
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference) Reset() {
	*x = Shareablevalueset_Compose_ConceptSet_ConceptReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset_Compose_ConceptSet_ConceptReference) ProtoMessage() {}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset_Compose_ConceptSet_ConceptReference.ProtoReflect.Descriptor instead.
func (*Shareablevalueset_Compose_ConceptSet_ConceptReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24, 0, 0, 0}
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference) GetDesignation() []*Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation {
	if x != nil {
		return x.Designation
	}
	return nil
}

// Select codes/concepts by their properties (including relationships)
type Shareablevalueset_Compose_ConceptSet_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// A property defined by the code system
	Property *datatypes_go_proto.Code `protobuf:"bytes,4,opt,name=property,proto3" json:"property,omitempty"`
	// = | is-a | descendent-of | is-not-a | regex | in | not-in |
	// generalizes | exists
	Op *codes_go_proto.FilterOperatorCode `protobuf:"bytes,5,opt,name=op,proto3" json:"op,omitempty"`
	// Code from the system, or regex criteria, or boolean value for exists
	Value *datatypes_go_proto.Code `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Shareablevalueset_Compose_ConceptSet_Filter) Reset() {
	*x = Shareablevalueset_Compose_ConceptSet_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset_Compose_ConceptSet_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset_Compose_ConceptSet_Filter) ProtoMessage() {}

func (x *Shareablevalueset_Compose_ConceptSet_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset_Compose_ConceptSet_Filter.ProtoReflect.Descriptor instead.
func (*Shareablevalueset_Compose_ConceptSet_Filter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24, 0, 0, 1}
}

func (x *Shareablevalueset_Compose_ConceptSet_Filter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_Filter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_Filter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_Filter) GetProperty() *datatypes_go_proto.Code {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_Filter) GetOp() *codes_go_proto.FilterOperatorCode {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_Filter) GetValue() *datatypes_go_proto.Code {
	if x != nil {
		return x.Value
	}
	return nil
}

// Additional representations for this concept
type Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Human language of the designation
	Language *datatypes_go_proto.LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Details how this designation would be used
	Use *datatypes_go_proto.Coding `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// The text value for this designation
	Value *datatypes_go_proto.String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) Reset() {
	*x = Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) ProtoMessage() {}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation.ProtoReflect.Descriptor instead.
func (*Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24, 0, 0, 0, 0}
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) GetLanguage() *datatypes_go_proto.LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) GetUse() *datatypes_go_proto.Coding {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation) GetValue() *datatypes_go_proto.String {
	if x != nil {
		return x.Value
	}
	return nil
}

// Parameter that controlled the expansion process
type Shareablevalueset_Expansion_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Name as assigned by the server
	Name  *datatypes_go_proto.String                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Value *Shareablevalueset_Expansion_Parameter_Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Shareablevalueset_Expansion_Parameter) Reset() {
	*x = Shareablevalueset_Expansion_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset_Expansion_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset_Expansion_Parameter) ProtoMessage() {}

func (x *Shareablevalueset_Expansion_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset_Expansion_Parameter.ProtoReflect.Descriptor instead.
func (*Shareablevalueset_Expansion_Parameter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24, 1, 0}
}

func (x *Shareablevalueset_Expansion_Parameter) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter) GetName() *datatypes_go_proto.String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter) GetValue() *Shareablevalueset_Expansion_Parameter_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Codes in the value set
type Shareablevalueset_Expansion_Contains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// System value for the code
	System *datatypes_go_proto.Uri `protobuf:"bytes,4,opt,name=system,proto3" json:"system,omitempty"`
	// If user cannot select this entry
	Abstract *datatypes_go_proto.Boolean `protobuf:"bytes,5,opt,name=abstract,proto3" json:"abstract,omitempty"`
	// If concept is inactive in the code system
	Inactive *datatypes_go_proto.Boolean `protobuf:"bytes,6,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// Version in which this code/display is defined
	Version *datatypes_go_proto.String `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	// Code - if blank, this is not a selectable code
	Code *datatypes_go_proto.Code `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	// User display for the concept
	Display *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=display,proto3" json:"display,omitempty"`
	// Additional representations for this item
	Designation []*Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation `protobuf:"bytes,10,rep,name=designation,proto3" json:"designation,omitempty"`
	// Codes contained under this entry
	Contains []*Shareablevalueset_Expansion_Contains `protobuf:"bytes,11,rep,name=contains,proto3" json:"contains,omitempty"`
}

func (x *Shareablevalueset_Expansion_Contains) Reset() {
	*x = Shareablevalueset_Expansion_Contains{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset_Expansion_Contains) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset_Expansion_Contains) ProtoMessage() {}

func (x *Shareablevalueset_Expansion_Contains) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset_Expansion_Contains.ProtoReflect.Descriptor instead.
func (*Shareablevalueset_Expansion_Contains) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24, 1, 1}
}

func (x *Shareablevalueset_Expansion_Contains) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetSystem() *datatypes_go_proto.Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetAbstract() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Abstract
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetInactive() *datatypes_go_proto.Boolean {
	if x != nil {
		return x.Inactive
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetVersion() *datatypes_go_proto.String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetCode() *datatypes_go_proto.Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetDisplay() *datatypes_go_proto.String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetDesignation() []*Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation {
	if x != nil {
		return x.Designation
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Contains) GetContains() []*Shareablevalueset_Expansion_Contains {
	if x != nil {
		return x.Contains
	}
	return nil
}

// Value of the named parameter
type Shareablevalueset_Expansion_Parameter_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Shareablevalueset_Expansion_Parameter_Value_StringValue
	//	*Shareablevalueset_Expansion_Parameter_Value_Boolean
	//	*Shareablevalueset_Expansion_Parameter_Value_Integer
	//	*Shareablevalueset_Expansion_Parameter_Value_Decimal
	//	*Shareablevalueset_Expansion_Parameter_Value_Uri
	//	*Shareablevalueset_Expansion_Parameter_Value_Code
	Value isShareablevalueset_Expansion_Parameter_Value_Value `protobuf_oneof:"value"`
}

func (x *Shareablevalueset_Expansion_Parameter_Value) Reset() {
	*x = Shareablevalueset_Expansion_Parameter_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shareablevalueset_Expansion_Parameter_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shareablevalueset_Expansion_Parameter_Value) ProtoMessage() {}

func (x *Shareablevalueset_Expansion_Parameter_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shareablevalueset_Expansion_Parameter_Value.ProtoReflect.Descriptor instead.
func (*Shareablevalueset_Expansion_Parameter_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{24, 1, 0, 0}
}

func (m *Shareablevalueset_Expansion_Parameter_Value) GetValue() isShareablevalueset_Expansion_Parameter_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*Shareablevalueset_Expansion_Parameter_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter_Value) GetBoolean() *datatypes_go_proto.Boolean {
	if x, ok := x.GetValue().(*Shareablevalueset_Expansion_Parameter_Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter_Value) GetInteger() *datatypes_go_proto.Integer {
	if x, ok := x.GetValue().(*Shareablevalueset_Expansion_Parameter_Value_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter_Value) GetDecimal() *datatypes_go_proto.Decimal {
	if x, ok := x.GetValue().(*Shareablevalueset_Expansion_Parameter_Value_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter_Value) GetUri() *datatypes_go_proto.Uri {
	if x, ok := x.GetValue().(*Shareablevalueset_Expansion_Parameter_Value_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Shareablevalueset_Expansion_Parameter_Value) GetCode() *datatypes_go_proto.Code {
	if x, ok := x.GetValue().(*Shareablevalueset_Expansion_Parameter_Value_Code); ok {
		return x.Code
	}
	return nil
}

type isShareablevalueset_Expansion_Parameter_Value_Value interface {
	isShareablevalueset_Expansion_Parameter_Value_Value()
}

type Shareablevalueset_Expansion_Parameter_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=string_value,json=string,proto3,oneof"`
}

type Shareablevalueset_Expansion_Parameter_Value_Boolean struct {
	Boolean *datatypes_go_proto.Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type Shareablevalueset_Expansion_Parameter_Value_Integer struct {
	Integer *datatypes_go_proto.Integer `protobuf:"bytes,3,opt,name=integer,proto3,oneof"`
}

type Shareablevalueset_Expansion_Parameter_Value_Decimal struct {
	Decimal *datatypes_go_proto.Decimal `protobuf:"bytes,4,opt,name=decimal,proto3,oneof"`
}

type Shareablevalueset_Expansion_Parameter_Value_Uri struct {
	Uri *datatypes_go_proto.Uri `protobuf:"bytes,5,opt,name=uri,proto3,oneof"`
}

type Shareablevalueset_Expansion_Parameter_Value_Code struct {
	Code *datatypes_go_proto.Code `protobuf:"bytes,6,opt,name=code,proto3,oneof"`
}

func (*Shareablevalueset_Expansion_Parameter_Value_StringValue) isShareablevalueset_Expansion_Parameter_Value_Value() {
}

func (*Shareablevalueset_Expansion_Parameter_Value_Boolean) isShareablevalueset_Expansion_Parameter_Value_Value() {
}

func (*Shareablevalueset_Expansion_Parameter_Value_Integer) isShareablevalueset_Expansion_Parameter_Value_Value() {
}

func (*Shareablevalueset_Expansion_Parameter_Value_Decimal) isShareablevalueset_Expansion_Parameter_Value_Value() {
}

func (*Shareablevalueset_Expansion_Parameter_Value_Uri) isShareablevalueset_Expansion_Parameter_Value_Value() {
}

func (*Shareablevalueset_Expansion_Parameter_Value_Code) isShareablevalueset_Expansion_Parameter_Value_Value() {
}

// Clinically relevant time/time-period for observation
type Triglyceride_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Triglyceride_Effective_DateTime
	//	*Triglyceride_Effective_Period
	Effective isTriglyceride_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Triglyceride_Effective) Reset() {
	*x = Triglyceride_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triglyceride_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triglyceride_Effective) ProtoMessage() {}

func (x *Triglyceride_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triglyceride_Effective.ProtoReflect.Descriptor instead.
func (*Triglyceride_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{25, 0}
}

func (m *Triglyceride_Effective) GetEffective() isTriglyceride_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Triglyceride_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Triglyceride_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Triglyceride_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Triglyceride_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isTriglyceride_Effective_Effective interface {
	isTriglyceride_Effective_Effective()
}

type Triglyceride_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Triglyceride_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Triglyceride_Effective_DateTime) isTriglyceride_Effective_Effective() {}

func (*Triglyceride_Effective_Period) isTriglyceride_Effective_Effective() {}

// Triglyceride value
type Triglyceride_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Triglyceride_Value_Quantity
	Value isTriglyceride_Value_Value `protobuf_oneof:"value"`
}

func (x *Triglyceride_Value) Reset() {
	*x = Triglyceride_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triglyceride_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triglyceride_Value) ProtoMessage() {}

func (x *Triglyceride_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triglyceride_Value.ProtoReflect.Descriptor instead.
func (*Triglyceride_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{25, 1}
}

func (m *Triglyceride_Value) GetValue() isTriglyceride_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Triglyceride_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Triglyceride_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isTriglyceride_Value_Value interface {
	isTriglyceride_Value_Value()
}

type Triglyceride_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Triglyceride_Value_Quantity) isTriglyceride_Value_Value() {}

// Provides guide for interpretation
type Triglyceride_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Triglyceride_ReferenceRange) Reset() {
	*x = Triglyceride_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triglyceride_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triglyceride_ReferenceRange) ProtoMessage() {}

func (x *Triglyceride_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triglyceride_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Triglyceride_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{25, 2}
}

func (x *Triglyceride_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Triglyceride_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Triglyceride_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Triglyceride_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Triglyceride_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Component results
type Triglyceride_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Triglyceride_Component_Value       `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Triglyceride_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Triglyceride_Component) Reset() {
	*x = Triglyceride_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triglyceride_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triglyceride_Component) ProtoMessage() {}

func (x *Triglyceride_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triglyceride_Component.ProtoReflect.Descriptor instead.
func (*Triglyceride_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{25, 3}
}

func (x *Triglyceride_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Triglyceride_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Triglyceride_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Triglyceride_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Triglyceride_Component) GetValue() *Triglyceride_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Triglyceride_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Triglyceride_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Triglyceride_Component) GetReferenceRange() []*Triglyceride_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Actual component result
type Triglyceride_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Triglyceride_Component_Value_Quantity
	//	*Triglyceride_Component_Value_CodeableConcept
	//	*Triglyceride_Component_Value_StringValue
	//	*Triglyceride_Component_Value_Range
	//	*Triglyceride_Component_Value_Ratio
	//	*Triglyceride_Component_Value_SampledData
	//	*Triglyceride_Component_Value_Attachment
	//	*Triglyceride_Component_Value_Time
	//	*Triglyceride_Component_Value_DateTime
	//	*Triglyceride_Component_Value_Period
	Value isTriglyceride_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Triglyceride_Component_Value) Reset() {
	*x = Triglyceride_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triglyceride_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triglyceride_Component_Value) ProtoMessage() {}

func (x *Triglyceride_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triglyceride_Component_Value.ProtoReflect.Descriptor instead.
func (*Triglyceride_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{25, 3, 0}
}

func (m *Triglyceride_Component_Value) GetValue() isTriglyceride_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetCodeableConcept() *datatypes_go_proto.CodeableConcept {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetStringValue() *datatypes_go_proto.String {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetRange() *datatypes_go_proto.Range {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetRatio() *datatypes_go_proto.Ratio {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetSampledData() *datatypes_go_proto.SampledData {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetAttachment() *datatypes_go_proto.Attachment {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetTime() *datatypes_go_proto.Time {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Triglyceride_Component_Value) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetValue().(*Triglyceride_Component_Value_Period); ok {
		return x.Period
	}
	return nil
}

type isTriglyceride_Component_Value_Value interface {
	isTriglyceride_Component_Value_Value()
}

type Triglyceride_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

type Triglyceride_Component_Value_CodeableConcept struct {
	CodeableConcept *datatypes_go_proto.CodeableConcept `protobuf:"bytes,2,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Triglyceride_Component_Value_StringValue struct {
	StringValue *datatypes_go_proto.String `protobuf:"bytes,3,opt,name=string_value,json=string,proto3,oneof"`
}

type Triglyceride_Component_Value_Range struct {
	Range *datatypes_go_proto.Range `protobuf:"bytes,4,opt,name=range,proto3,oneof"`
}

type Triglyceride_Component_Value_Ratio struct {
	Ratio *datatypes_go_proto.Ratio `protobuf:"bytes,5,opt,name=ratio,proto3,oneof"`
}

type Triglyceride_Component_Value_SampledData struct {
	SampledData *datatypes_go_proto.SampledData `protobuf:"bytes,6,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Triglyceride_Component_Value_Attachment struct {
	Attachment *datatypes_go_proto.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3,oneof"`
}

type Triglyceride_Component_Value_Time struct {
	Time *datatypes_go_proto.Time `protobuf:"bytes,8,opt,name=time,proto3,oneof"`
}

type Triglyceride_Component_Value_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,9,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Triglyceride_Component_Value_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,10,opt,name=period,proto3,oneof"`
}

func (*Triglyceride_Component_Value_Quantity) isTriglyceride_Component_Value_Value() {}

func (*Triglyceride_Component_Value_CodeableConcept) isTriglyceride_Component_Value_Value() {}

func (*Triglyceride_Component_Value_StringValue) isTriglyceride_Component_Value_Value() {}

func (*Triglyceride_Component_Value_Range) isTriglyceride_Component_Value_Value() {}

func (*Triglyceride_Component_Value_Ratio) isTriglyceride_Component_Value_Value() {}

func (*Triglyceride_Component_Value_SampledData) isTriglyceride_Component_Value_Value() {}

func (*Triglyceride_Component_Value_Attachment) isTriglyceride_Component_Value_Value() {}

func (*Triglyceride_Component_Value_Time) isTriglyceride_Component_Value_Value() {}

func (*Triglyceride_Component_Value_DateTime) isTriglyceride_Component_Value_Value() {}

func (*Triglyceride_Component_Value_Period) isTriglyceride_Component_Value_Value() {}

// Often just a dateTime for Vital Signs
type Vitalsigns_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Vitalsigns_Effective_DateTime
	//	*Vitalsigns_Effective_Period
	Effective isVitalsigns_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Vitalsigns_Effective) Reset() {
	*x = Vitalsigns_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalsigns_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalsigns_Effective) ProtoMessage() {}

func (x *Vitalsigns_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalsigns_Effective.ProtoReflect.Descriptor instead.
func (*Vitalsigns_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{26, 0}
}

func (m *Vitalsigns_Effective) GetEffective() isVitalsigns_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Vitalsigns_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Vitalsigns_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Vitalsigns_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Vitalsigns_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isVitalsigns_Effective_Effective interface {
	isVitalsigns_Effective_Effective()
}

type Vitalsigns_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Vitalsigns_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Vitalsigns_Effective_DateTime) isVitalsigns_Effective_Effective() {}

func (*Vitalsigns_Effective_Period) isVitalsigns_Effective_Effective() {}

// Vital Sign Value recorded with UCUM
type Vitalsigns_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Vitalsigns_Value_Quantity
	Value isVitalsigns_Value_Value `protobuf_oneof:"value"`
}

func (x *Vitalsigns_Value) Reset() {
	*x = Vitalsigns_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalsigns_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalsigns_Value) ProtoMessage() {}

func (x *Vitalsigns_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalsigns_Value.ProtoReflect.Descriptor instead.
func (*Vitalsigns_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{26, 1}
}

func (m *Vitalsigns_Value) GetValue() isVitalsigns_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Vitalsigns_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Vitalsigns_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isVitalsigns_Value_Value interface {
	isVitalsigns_Value_Value()
}

type Vitalsigns_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Vitalsigns_Value_Quantity) isVitalsigns_Value_Value() {}

// Provides guide for interpretation
type Vitalsigns_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Vitalsigns_ReferenceRange) Reset() {
	*x = Vitalsigns_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalsigns_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalsigns_ReferenceRange) ProtoMessage() {}

func (x *Vitalsigns_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalsigns_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Vitalsigns_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{26, 2}
}

func (x *Vitalsigns_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vitalsigns_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Vitalsigns_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Vitalsigns_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Vitalsigns_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Vitalsigns_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Vitalsigns_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Vitalsigns_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Vitalsigns_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Vitalsigns_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Vitalsigns_Related) Reset() {
	*x = Vitalsigns_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalsigns_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalsigns_Related) ProtoMessage() {}

func (x *Vitalsigns_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalsigns_Related.ProtoReflect.Descriptor instead.
func (*Vitalsigns_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{26, 3}
}

func (x *Vitalsigns_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vitalsigns_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Vitalsigns_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Vitalsigns_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Vitalsigns_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Vitalsigns_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Vitalsigns_Component_Value         `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Vitalsigns_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Vitalsigns_Component) Reset() {
	*x = Vitalsigns_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalsigns_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalsigns_Component) ProtoMessage() {}

func (x *Vitalsigns_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalsigns_Component.ProtoReflect.Descriptor instead.
func (*Vitalsigns_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{26, 4}
}

func (x *Vitalsigns_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vitalsigns_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Vitalsigns_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Vitalsigns_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Vitalsigns_Component) GetValue() *Vitalsigns_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Vitalsigns_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Vitalsigns_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Vitalsigns_Component) GetReferenceRange() []*Vitalsigns_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Vitalsigns_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Vitalsigns_Component_Value_Quantity
	Value isVitalsigns_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Vitalsigns_Component_Value) Reset() {
	*x = Vitalsigns_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalsigns_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalsigns_Component_Value) ProtoMessage() {}

func (x *Vitalsigns_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalsigns_Component_Value.ProtoReflect.Descriptor instead.
func (*Vitalsigns_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{26, 4, 0}
}

func (m *Vitalsigns_Component_Value) GetValue() isVitalsigns_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Vitalsigns_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Vitalsigns_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isVitalsigns_Component_Value_Value interface {
	isVitalsigns_Component_Value_Value()
}

type Vitalsigns_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Vitalsigns_Component_Value_Quantity) isVitalsigns_Component_Value_Value() {}

// Vital Signs Panel
type Vitalspanel_CodeableConceptForCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*datatypes_go_proto.Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text           *datatypes_go_proto.String                `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	BodyWeightCode []*datatypes_go_proto.CodingWithFixedCode `protobuf:"bytes,5,rep,name=body_weight_code,json=BodyWeightCode,proto3" json:"body_weight_code,omitempty"`
}

func (x *Vitalspanel_CodeableConceptForCode) Reset() {
	*x = Vitalspanel_CodeableConceptForCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalspanel_CodeableConceptForCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalspanel_CodeableConceptForCode) ProtoMessage() {}

func (x *Vitalspanel_CodeableConceptForCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalspanel_CodeableConceptForCode.ProtoReflect.Descriptor instead.
func (*Vitalspanel_CodeableConceptForCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{27, 0}
}

func (x *Vitalspanel_CodeableConceptForCode) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vitalspanel_CodeableConceptForCode) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Vitalspanel_CodeableConceptForCode) GetCoding() []*datatypes_go_proto.Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *Vitalspanel_CodeableConceptForCode) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Vitalspanel_CodeableConceptForCode) GetBodyWeightCode() []*datatypes_go_proto.CodingWithFixedCode {
	if x != nil {
		return x.BodyWeightCode
	}
	return nil
}

// Often just a dateTime for Vital Signs
type Vitalspanel_Effective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Effective:
	//	*Vitalspanel_Effective_DateTime
	//	*Vitalspanel_Effective_Period
	Effective isVitalspanel_Effective_Effective `protobuf_oneof:"effective"`
}

func (x *Vitalspanel_Effective) Reset() {
	*x = Vitalspanel_Effective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalspanel_Effective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalspanel_Effective) ProtoMessage() {}

func (x *Vitalspanel_Effective) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalspanel_Effective.ProtoReflect.Descriptor instead.
func (*Vitalspanel_Effective) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{27, 1}
}

func (m *Vitalspanel_Effective) GetEffective() isVitalspanel_Effective_Effective {
	if m != nil {
		return m.Effective
	}
	return nil
}

func (x *Vitalspanel_Effective) GetDateTime() *datatypes_go_proto.DateTime {
	if x, ok := x.GetEffective().(*Vitalspanel_Effective_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Vitalspanel_Effective) GetPeriod() *datatypes_go_proto.Period {
	if x, ok := x.GetEffective().(*Vitalspanel_Effective_Period); ok {
		return x.Period
	}
	return nil
}

type isVitalspanel_Effective_Effective interface {
	isVitalspanel_Effective_Effective()
}

type Vitalspanel_Effective_DateTime struct {
	DateTime *datatypes_go_proto.DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Vitalspanel_Effective_Period struct {
	Period *datatypes_go_proto.Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Vitalspanel_Effective_DateTime) isVitalspanel_Effective_Effective() {}

func (*Vitalspanel_Effective_Period) isVitalspanel_Effective_Effective() {}

// Provides guide for interpretation
type Vitalspanel_ReferenceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Low Range, if relevant
	Low *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// High Range, if relevant
	High *datatypes_go_proto.SimpleQuantity `protobuf:"bytes,5,opt,name=high,proto3" json:"high,omitempty"`
	// Reference range qualifier
	Type *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Reference range population
	AppliesTo []*datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	// Applicable age range, if relevant
	Age *datatypes_go_proto.Range `protobuf:"bytes,8,opt,name=age,proto3" json:"age,omitempty"`
	// Text based reference range in an observation
	Text *datatypes_go_proto.String `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Vitalspanel_ReferenceRange) Reset() {
	*x = Vitalspanel_ReferenceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalspanel_ReferenceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalspanel_ReferenceRange) ProtoMessage() {}

func (x *Vitalspanel_ReferenceRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalspanel_ReferenceRange.ProtoReflect.Descriptor instead.
func (*Vitalspanel_ReferenceRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{27, 2}
}

func (x *Vitalspanel_ReferenceRange) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vitalspanel_ReferenceRange) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Vitalspanel_ReferenceRange) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Vitalspanel_ReferenceRange) GetLow() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Vitalspanel_ReferenceRange) GetHigh() *datatypes_go_proto.SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Vitalspanel_ReferenceRange) GetType() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Vitalspanel_ReferenceRange) GetAppliesTo() []*datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

func (x *Vitalspanel_ReferenceRange) GetAge() *datatypes_go_proto.Range {
	if x != nil {
		return x.Age
	}
	return nil
}

func (x *Vitalspanel_ReferenceRange) GetText() *datatypes_go_proto.String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Used when reporting vital signs panel components
type Vitalspanel_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// has-member | derived-from | sequel-to | replaces | qualified-by |
	// interfered-by
	Type *codes_go_proto.ObservationRelationshipTypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Resource that is related to this one
	Target *datatypes_go_proto.Reference `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Vitalspanel_Related) Reset() {
	*x = Vitalspanel_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalspanel_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalspanel_Related) ProtoMessage() {}

func (x *Vitalspanel_Related) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalspanel_Related.ProtoReflect.Descriptor instead.
func (*Vitalspanel_Related) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{27, 3}
}

func (x *Vitalspanel_Related) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vitalspanel_Related) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Vitalspanel_Related) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Vitalspanel_Related) GetType() *codes_go_proto.ObservationRelationshipTypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Vitalspanel_Related) GetTarget() *datatypes_go_proto.Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

// Used when reporting systolic and diastolic blood pressure.
type Vitalspanel_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *datatypes_go_proto.String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*datatypes_go_proto.Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored
	ModifierExtension []*datatypes_go_proto.Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Type of component observation (code / type)
	Code  *datatypes_go_proto.CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Value *Vitalspanel_Component_Value        `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Why the component result is missing
	DataAbsentReason *datatypes_go_proto.CodeableConcept `protobuf:"bytes,6,opt,name=data_absent_reason,json=dataAbsentReason,proto3" json:"data_absent_reason,omitempty"`
	// High, low, normal, etc.
	Interpretation *datatypes_go_proto.CodeableConcept `protobuf:"bytes,7,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Provides guide for interpretation of component result
	ReferenceRange []*Vitalspanel_ReferenceRange `protobuf:"bytes,8,rep,name=reference_range,json=referenceRange,proto3" json:"reference_range,omitempty"`
}

func (x *Vitalspanel_Component) Reset() {
	*x = Vitalspanel_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalspanel_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalspanel_Component) ProtoMessage() {}

func (x *Vitalspanel_Component) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalspanel_Component.ProtoReflect.Descriptor instead.
func (*Vitalspanel_Component) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{27, 4}
}

func (x *Vitalspanel_Component) GetId() *datatypes_go_proto.String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vitalspanel_Component) GetExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Vitalspanel_Component) GetModifierExtension() []*datatypes_go_proto.Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Vitalspanel_Component) GetCode() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Vitalspanel_Component) GetValue() *Vitalspanel_Component_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Vitalspanel_Component) GetDataAbsentReason() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.DataAbsentReason
	}
	return nil
}

func (x *Vitalspanel_Component) GetInterpretation() *datatypes_go_proto.CodeableConcept {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *Vitalspanel_Component) GetReferenceRange() []*Vitalspanel_ReferenceRange {
	if x != nil {
		return x.ReferenceRange
	}
	return nil
}

// Vital Sign Value recorded with UCUM
type Vitalspanel_Component_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Vitalspanel_Component_Value_Quantity
	Value isVitalspanel_Component_Value_Value `protobuf_oneof:"value"`
}

func (x *Vitalspanel_Component_Value) Reset() {
	*x = Vitalspanel_Component_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitalspanel_Component_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitalspanel_Component_Value) ProtoMessage() {}

func (x *Vitalspanel_Component_Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitalspanel_Component_Value.ProtoReflect.Descriptor instead.
func (*Vitalspanel_Component_Value) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP(), []int{27, 4, 0}
}

func (m *Vitalspanel_Component_Value) GetValue() isVitalspanel_Component_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Vitalspanel_Component_Value) GetQuantity() *datatypes_go_proto.Quantity {
	if x, ok := x.GetValue().(*Vitalspanel_Component_Value_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isVitalspanel_Component_Value_Value interface {
	isVitalspanel_Component_Value_Value()
}

type Vitalspanel_Component_Value_Quantity struct {
	Quantity *datatypes_go_proto.Quantity `protobuf:"bytes,1,opt,name=quantity,proto3,oneof"`
}

func (*Vitalspanel_Component_Value_Quantity) isVitalspanel_Component_Value_Value() {}

var File_proto_google_fhir_proto_stu3_profiles_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_stu3_profiles_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x27, 0x0a, 0x03, 0x42, 0x6d, 0x69, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x72,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d,
	0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x76, 0x69, 0x74, 0x61,
	0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6d, 0x69, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x7d, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6d, 0x69, 0x2e,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73,
	0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20, 0x3e,
	0x3d, 0x20, 0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6d, 0x69, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6d, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6d, 0x69, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x76, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6d, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x42, 0x31, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xa1,
	0x03, 0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6b, 0x0a, 0x08, 0x62, 0x6d, 0x69, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x23, 0xfa, 0xe7, 0x94, 0xa8, 0x06, 0x10, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f, 0x72, 0x67, 0xa2, 0xbc, 0x97,
	0xa9, 0x06, 0x07, 0x33, 0x39, 0x31, 0x35, 0x36, 0x2d, 0x35, 0x52, 0x07, 0x42, 0x4d, 0x49, 0x43,
	0x6f, 0x64, 0x65, 0x3a, 0x3d, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x1a, 0xf5, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xad, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6d, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6d, 0x69, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x58,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0xa8, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76,
	0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x62, 0x6d, 0x69, 0x22, 0xee, 0x27, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x72, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x76,
	0x69, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x55, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x61, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29,
	0x20, 0x3e, 0x3d, 0x20, 0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7d, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x31,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xaf, 0x03, 0x0a,
	0x16, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x79, 0x0a, 0x10, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x22, 0xfa, 0xe7, 0x94,
	0xa8, 0x06, 0x10, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e,
	0x6f, 0x72, 0x67, 0xa2, 0xbc, 0x97, 0xa9, 0x06, 0x06, 0x38, 0x33, 0x30, 0x32, 0x2d, 0x32, 0x52,
	0x0e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a,
	0x3d, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9b,
	0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03,
	0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x46, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5, 0x02, 0x0a,
	0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x1a, 0xbb, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0xaf, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69,
	0x67, 0x6e, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0xee, 0x27, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6,
	0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x72, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27,
	0x76, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x55, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72,
	0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x61, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28,
	0x29, 0x20, 0x3e, 0x3d, 0x20, 0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7d,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x31, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xaf, 0x03,
	0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x79, 0x0a, 0x10, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x22, 0xfa, 0xe7,
	0x94, 0xa8, 0x06, 0x10, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x6f, 0x72, 0x67, 0xa2, 0xbc, 0x97, 0xa9, 0x06, 0x06, 0x38, 0x33, 0x30, 0x36, 0x2d, 0x33,
	0x52, 0x0e, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x3a, 0x3d, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a,
	0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x46, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5, 0x02,
	0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xbb, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0xaf, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xd6, 0x27, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x74, 0x65,
	0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x72, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x76,
	0x69, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x53, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x2e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20,
	0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x42, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x74, 0x65,
	0x6d, 0x70, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x7b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x31, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x1a, 0xab, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x75, 0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x22, 0xfa,
	0xe7, 0x94, 0xa8, 0x06, 0x10, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e,
	0x63, 0x2e, 0x6f, 0x72, 0x67, 0xa2, 0xbc, 0x97, 0xa9, 0x06, 0x06, 0x38, 0x33, 0x31, 0x30, 0x2d,
	0x35, 0x52, 0x0c, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x3a,
	0x3d, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9b,
	0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03,
	0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x46, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5, 0x02, 0x0a,
	0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x1a, 0xb7, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x74, 0x65, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0xad,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x74, 0x65, 0x6d, 0x70, 0x22, 0xef,
	0x27, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x97,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f,
	0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x72, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x2d,
	0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x20, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x38,
	0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x31, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xb0, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x7a, 0x0a, 0x10, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x23, 0xfa, 0xe7, 0x94, 0xa8, 0x06, 0x10, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f, 0x72, 0x67, 0xa2, 0xbc,
	0x97, 0xa9, 0x06, 0x07, 0x32, 0x39, 0x34, 0x36, 0x33, 0x2d, 0x37, 0x52, 0x0e, 0x42, 0x6f, 0x64,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x3d, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x3b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x1a, 0xbb, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0xaf,
	0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xec, 0x20, 0x0a, 0x02, 0x42, 0x70, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x72, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x66, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x3d, 0x27, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27,
	0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x70, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x7c, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x70, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29,
	0x2e, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d,
	0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x70, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x70,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x75, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x70,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x31, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x9f, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x69, 0x0a, 0x07, 0x62, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x23,
	0xfa, 0xe7, 0x94, 0xa8, 0x06, 0x10, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69,
	0x6e, 0x63, 0x2e, 0x6f, 0x72, 0x67, 0xa2, 0xbc, 0x97, 0xa9, 0x06, 0x07, 0x38, 0x35, 0x33, 0x35,
	0x34, 0x2d, 0x39, 0x52, 0x06, 0x42, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x3d, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5,
	0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x3a, 0xa7, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73,
	0x69, 0x67, 0x6e, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x70, 0x4a, 0x04, 0x08,
	0x13, 0x10, 0x14, 0x4a, 0x04, 0x08, 0x1e, 0x10, 0x1f, 0x4a, 0x04, 0x08, 0x1f, 0x10, 0x20, 0x22,
	0xb4, 0x22, 0x0a, 0x0b, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6f, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f,
	0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b,
	0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x6f, 0x6c, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x97, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x3a,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xa0, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x43, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08,
	0x10, 0x09, 0x1a, 0x81, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68,
	0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x78, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c,
	0x4a, 0x04, 0x08, 0x1c, 0x10, 0x1d, 0x22, 0xb8, 0x20, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x87, 0x01, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x4a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0f, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a,
	0x08, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x09,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61,
	0x6e, 0x12, 0x51, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x54, 0x6f, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xaf, 0x01, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x63,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x33, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc3, 0x03, 0x0a,
	0x08, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x31, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x1a, 0xb4, 0x04, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x1a, 0xb6, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x8a, 0x03, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xd9, 0x05, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x7d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xaf, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x97,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f,
	0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x5c, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1f,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x53, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x18, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x1a, 0x61, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x54,
	0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x3b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xed, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x99, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x55,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x84, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3f, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x0f, 0x10,
	0x10, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08,
	0x19, 0x10, 0x1a, 0x22, 0x96, 0x1c, 0x0a, 0x18, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xc3, 0x01, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x84, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f,
	0x6e, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x6f, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x58, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x4c, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x0d, 0x69,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x27, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x49,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x0c,
	0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x4c, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0xd5, 0x01, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x82, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x52, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x11, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xdc, 0x01,
	0x0a, 0x15, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x84, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x54, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xc7, 0x01, 0x0a,
	0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x42, 0x79, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x1a, 0xf0, 0x02, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x63, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x2a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xce, 0x02, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x11, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x8b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x22, 0x91, 0x56, 0x0a,
	0x13, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x66, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x24, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x3d, 0x20, 0x27, 0x2a, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x74, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x29, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x44, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x42, 0x31, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x6f, 0x64, 0x65,
	0x20, 0x3d, 0x20, 0x27, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x27, 0x29, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x12, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65,
	0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x2e, 0x4d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x51, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x2e,
	0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x6d, 0x75, 0x73,
	0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xa4, 0x02, 0x0a, 0x07, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0xc3, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x29, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x8d, 0x01, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2e, 0x69, 0x73, 0x28, 0x75, 0x72, 0x69, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x61, 0x73, 0x28, 0x75,
	0x72, 0x69, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2e, 0x61, 0x73, 0x28, 0x75, 0x72, 0x69, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x27, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x61, 0x73, 0x28, 0x75,
	0x72, 0x69, 0x29, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27,
	0x75, 0x72, 0x6e, 0x3a, 0x27, 0x29, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x4d, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x84,
	0x01, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x48, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xae, 0x01, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4c, 0xaa, 0xfc, 0x8f, 0x93,
	0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x1a, 0xac, 0x02, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0xd6, 0x02, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x51, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x1a, 0xde,
	0x12, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x4b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69,
	0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xe3, 0x14, 0x0a, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xcf, 0x12, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x3b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x32, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd3, 0x04, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c,
	0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd3, 0x04, 0x0a, 0x08,
	0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0xbc, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x3c, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x46, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x78, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x78, 0x70, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0xb0, 0x04, 0x0a, 0x18, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6a, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x1a, 0xa3, 0x01,
	0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x51, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x1a, 0xf0, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x87, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x65,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09,
	0x10, 0x0a, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x4a, 0x04,
	0x08, 0x17, 0x10, 0x18, 0x4a, 0x04, 0x08, 0x1f, 0x10, 0x20, 0x4a, 0x04, 0x08, 0x20, 0x10, 0x21,
	0x22, 0xe2, 0x20, 0x0a, 0x1a, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x27, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x64,
	0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x53, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x48, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x4b, 0x0a, 0x04, 0x62, 0x6f, 0x72, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x2e, 0x42, 0x6f, 0x72, 0x6e, 0x52, 0x04, 0x62, 0x6f, 0x72, 0x6e, 0x12, 0x4c, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x2e, 0x41, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x0c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x67, 0x65,
	0x12, 0x57, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x52,
	0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x53, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79,
	0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x5a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc8, 0x01, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x7d, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x7e, 0xaa, 0xfc,
	0x8f, 0x93, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x73, 0x69, 0x62, 0x6c, 0x69,
	0x6e, 0x67, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x07, 0x53, 0x69,
	0x62, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0xc8, 0x01, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x82,
	0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x52, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x52, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xc4, 0x01, 0x0a, 0x04, 0x42, 0x6f, 0x72, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x62, 0x6f, 0x72, 0x6e, 0x1a, 0xc6, 0x01, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x1a, 0xb7, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x61, 0x73, 0x65, 0x64, 0x1a, 0xe5, 0x05, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x41, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x05, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0xfa, 0x01, 0x0a, 0x05, 0x4f, 0x6e, 0x73, 0x65, 0x74, 0x12,
	0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x6e, 0x73,
	0x65, 0x74, 0x3a, 0x90, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x43, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x67, 0x65,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x22, 0xca, 0x22, 0x0a, 0x0e, 0x48, 0x64, 0x6c, 0x43, 0x68, 0x6f,
	0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6f, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x6f, 0x6c, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x9a, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f,
	0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x3a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f,
	0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69,
	0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x9b, 0x01, 0x0a,
	0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9e, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x03, 0x6c, 0x6f,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x43, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1f, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a,
	0x04, 0x08, 0x08, 0x10, 0x09, 0x1a, 0x87, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x63,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x64,
	0x6c, 0x63, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x4a, 0x04, 0x08, 0x1c,
	0x10, 0x1d, 0x22, 0xee, 0x27, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x72, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x76, 0x69,
	0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x55,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d,
	0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61,
	0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20,
	0x3e, 0x3d, 0x20, 0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08,
	0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x6d, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7d, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x31, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xaf, 0x03, 0x0a, 0x16,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x79, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x22, 0xfa, 0xe7, 0x94, 0xa8,
	0x06, 0x10, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f,
	0x72, 0x67, 0xa2, 0xbc, 0x97, 0xa9, 0x06, 0x06, 0x38, 0x32, 0x38, 0x37, 0x2d, 0x35, 0x52, 0x0e,
	0x48, 0x65, 0x61, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x3d,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9b, 0x01,
	0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5, 0x02, 0x0a, 0x07,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x1a, 0xbb, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0xaf, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67,
	0x6e, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x6d, 0x22, 0xe2, 0x27, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x72, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x76, 0x69,
	0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x54,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x20,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d,
	0x20, 0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x31, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xad, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x77, 0x0a,
	0x0f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x22, 0xfa, 0xe7, 0x94, 0xa8, 0x06, 0x10, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f, 0x72, 0x67, 0xa2, 0xbc, 0x97, 0xa9, 0x06,
	0x06, 0x38, 0x38, 0x36, 0x37, 0x2d, 0x34, 0x52, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x3d, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x37, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06,
	0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04,
	0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0xf5, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xb9, 0x05, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x58, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0xae, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69,
	0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0xac, 0x1d, 0x0a, 0x09, 0x48, 0x6c, 0x61,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0xc3, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x84, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6f, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x27, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64,
	0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6c, 0x61,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x12, 0xd0, 0x01, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x7e, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65,
	0x2d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x67, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x77, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x47,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65, 0x6e, 0x6f,
	0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d, 0x67,
	0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x08, 0x67, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xc1, 0x01, 0x0a, 0x07,
	0x68, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x42, 0x76,
	0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x46, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c,
	0x61, 0x2d, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x2d, 0x68, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x07, 0x68, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x12,
	0xb6, 0x01, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x75, 0xaa, 0xfc, 0x8f, 0x93, 0x06,
	0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c, 0x61, 0x2d, 0x67, 0x65, 0x6e,
	0x6f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2d,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf0, 0x02, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xce, 0x02, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x11, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x68, 0x6c,
	0x61, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcc, 0x22, 0x0a, 0x0e, 0x4c, 0x64, 0x6c, 0x43,
	0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6f, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x3a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e,
	0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4e,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x64, 0x6c, 0x43, 0x68,
	0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x9b,
	0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa0, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x43, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1f,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x1a, 0x87, 0x0a, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x64, 0x6c, 0x43, 0x68, 0x6f, 0x6c, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6c, 0x64, 0x6c, 0x63, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x6c,
	0x4a, 0x04, 0x08, 0x1c, 0x10, 0x1d, 0x22, 0xef, 0x16, 0x0a, 0x0c, 0x4c, 0x69, 0x70, 0x69, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0xc3, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x84, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6f, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x70, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x70, 0x69,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x11, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x0d, 0x69, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x27, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x49, 0x6d, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x49, 0x6d,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x70, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xf0, 0x02, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xce, 0x02, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x48, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x11, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69,
	0x70, 0x69, 0x64, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19,
	0x4a, 0x04, 0x08, 0x1a, 0x10, 0x1b, 0x4a, 0x04, 0x08, 0x1b, 0x10, 0x1c, 0x4a, 0x04, 0x08, 0x1c,
	0x10, 0x1d, 0x4a, 0x04, 0x08, 0x1d, 0x10, 0x1e, 0x22, 0xc3, 0x0a, 0x0a, 0x10, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x45, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x04,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x87,
	0x45, 0x0a, 0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x6f, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e,
	0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xe7, 0x01, 0x0a, 0x19, 0x64, 0x6e, 0x61, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x82, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x52, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x4e, 0x41, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xf2,
	0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x16, 0x44, 0x4e, 0x41, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0xc7, 0x01, 0x0a, 0x0e, 0x64, 0x6e, 0x61, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x42, 0x78, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x4e, 0x41, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0c, 0x44,
	0x4e, 0x41, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0xe7, 0x01, 0x0a, 0x19,
	0x64, 0x6e, 0x61, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x82, 0x01, 0xaa, 0xfc, 0x8f, 0x93, 0x06,
	0x52, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x44, 0x4e, 0x41,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x16, 0x44,
	0x4e, 0x41, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0xdd, 0x01, 0x0a, 0x16, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x5f,
	0x61, 0x63, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x7f, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x41, 0x6d, 0x69, 0x6e, 0x6f, 0x41, 0x63, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x52, 0x13, 0x41, 0x6d, 0x69, 0x6e, 0x6f, 0x41, 0x63, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xdd, 0x01, 0x0a, 0x16, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x5f,
	0x61, 0x63, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42,
	0x7f, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x41, 0x6d, 0x69, 0x6e, 0x6f, 0x41, 0x63, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x52, 0x13, 0x41, 0x6d, 0x69, 0x6e, 0x6f, 0x41, 0x63, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x70, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x40, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x47, 0x65, 0x6e, 0x65, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0xc1, 0x01, 0x0a, 0x0f, 0x64, 0x6e, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0xaa, 0xfc,
	0x8f, 0x93, 0x06, 0x49, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73,
	0x44, 0x4e, 0x41, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0d, 0x44, 0x4e, 0x41, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x76, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x46, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0a, 0x41,
	0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x78, 0xaa, 0xfc, 0x8f, 0x93,
	0x06, 0x48, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x63, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42,
	0x7c, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x10, 0x41,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x63, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0xd0, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x7b, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4b, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x70, 0x79, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x0f, 0x43, 0x6f, 0x70, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0xd9, 0x01, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x7e, 0xaa, 0xfc, 0x8f, 0x93,
	0x06, 0x4e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x47, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x12, 0x47, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0xae,
	0x01, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42,
	0x74, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74,
	0x69, 0x63, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0xf2, 0xbe, 0xc0, 0xa4, 0x07,
	0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x12,
	0xb3, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x74, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x44, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x7a, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x4a, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x52, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xd8, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x3b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x96, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x7b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x40, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x1a, 0x91, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x63, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x9b, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x81, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x22, 0xe3, 0x27, 0x0a, 0x09, 0x4f, 0x78, 0x79,
	0x67, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x72, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x66, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x3d, 0x27, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x78, 0x79, 0x67, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43,
	0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x83, 0x01, 0x0a,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x61, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x78, 0x79, 0x67,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x31, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xae, 0x03, 0x0a, 0x16, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x78, 0x0a, 0x0f, 0x6f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x23, 0xfa, 0xe7, 0x94, 0xa8, 0x06, 0x10,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f, 0x72, 0x67,
	0xa2, 0xbc, 0x97, 0xa9, 0x06, 0x07, 0x35, 0x39, 0x34, 0x30, 0x38, 0x2d, 0x35, 0x52, 0x0d, 0x4f,
	0x78, 0x79, 0x67, 0x65, 0x6e, 0x53, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x3d, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03,
	0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5, 0x02, 0x0a, 0x07, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x1a, 0xb9, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x78, 0x79, 0x67, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0xae, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x78, 0x79, 0x67, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x22, 0xb3,
	0x1e, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2c, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x64, 0x6f, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x75, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x38,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x56, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x52, 0x08, 0x61,
	0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x58, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x67, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6e, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x20, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65,
	0x6e, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x5e, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x10, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0xb7, 0x01, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x23, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42,
	0x75, 0xaa, 0xfc, 0x8f, 0x93, 0x06, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d,
	0x67, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x24, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x21, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0xd7, 0x01, 0x0a,
	0x0a, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xb2, 0x01, 0x0a, 0x08, 0x41, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x1a, 0x98, 0x03, 0x0a, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x36,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a,
	0x0c, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x42, 0x65,
	0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x3a, 0x8b, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a,
	0xb5, 0x8e, 0x93, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x67, 0x65, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x73, 0x22, 0xd6, 0x27, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x72, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x76, 0x69,
	0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x53,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x20, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x38,
	0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e,
	0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x7b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x42, 0x31, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a,
	0xab, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x75, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x22, 0xfa, 0xe7,
	0x94, 0xa8, 0x06, 0x10, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63,
	0x2e, 0x6f, 0x72, 0x67, 0xa2, 0xbc, 0x97, 0xa9, 0x06, 0x06, 0x39, 0x32, 0x37, 0x39, 0x2d, 0x31,
	0x52, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x3d,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9b, 0x01,
	0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5, 0x02, 0x0a, 0x07,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x1a, 0xb7, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x72, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0xad, 0x01,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x72, 0x61, 0x74, 0x65, 0x22, 0xe2, 0x28,
	0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x4e, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69,
	0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x11, 0x68, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x68,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x53,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0xd5, 0x03,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xbe, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x2d, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x40,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc8, 0x0e, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x69, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x1a, 0x82, 0x03, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x85, 0x06, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x71, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x81, 0x03,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x7f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x22, 0x98, 0x34, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x6a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0xb5, 0x13, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0xf3,
	0x01, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x42, 0x9a,
	0x01, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x3d, 0x28, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x21,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x24, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x07, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x53, 0x65, 0x74, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a, 0x9c, 0x0e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x5b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x53, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x1a, 0xcb, 0x06,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x7b, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x82, 0x03, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x75,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8d, 0x03, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x02, 0x6f, 0x70, 0x12,
	0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd2, 0x11, 0x0a, 0x09,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x37, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0xcc, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x72, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x21, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20,
	0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x1f, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0xdc, 0x05, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf4, 0x02,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x2f,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf9, 0x05, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x61, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x7b, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x3a, 0x7b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x22, 0xff, 0x21,
	0x0a, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x6c, 0x79, 0x63, 0x65, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x6f, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x32, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66,
	0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x6c, 0x79,
	0x63, 0x65, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x6c, 0x79, 0x63, 0x65, 0x72, 0x69, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x6c, 0x79, 0x63, 0x65, 0x72, 0x69, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x3a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f,
	0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69,
	0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x6c, 0x79, 0x63,
	0x65, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xe3, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x1a, 0x83, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x6c, 0x79, 0x63, 0x65, 0x72,
	0x69, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x6c, 0x79, 0x63, 0x65, 0x72, 0x69, 0x64,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x1a, 0x9b, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x48,
	0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x79,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x69,
	0x67, 0x6c, 0x79, 0x63, 0x65, 0x72, 0x69, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x1c, 0x10, 0x1d, 0x22,
	0xf1, 0x23, 0x0a, 0x0a, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x12, 0x2a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x72,
	0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0e,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x72, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3d, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x76, 0x69, 0x74, 0x61, 0x6c,
	0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x73, 0x20, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28,
	0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x38, 0x52,
	0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90,
	0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0,
	0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28,
	0x29, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61,
	0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x31, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb3,
	0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12,
	0x2f, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xbb, 0x05, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c,
	0x73, 0x69, 0x67, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x1a, 0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x77, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69,
	0x67, 0x6e, 0x73, 0x22, 0xec, 0x26, 0x0a, 0x0b, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0xd6,
	0x01, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x97, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x43, 0x61, 0x72,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x1a, 0x49, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x42, 0x72, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x66,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x27, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27,
	0x76, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x27, 0x29, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x56, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x22,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61,
	0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x09,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x38,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2c, 0x28, 0x24, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x61, 0x73, 0x20, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x29, 0x2e,
	0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x38, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a,
	0x09, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x44, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x62, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4d, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74,
	0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x1e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc,
	0xc2, 0x06, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c,
	0x73, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x34, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x2e, 0x6c, 0x6f, 0x77,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67,
	0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52, 0x0e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x31, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0xb0, 0x03, 0x0a, 0x16, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x7a, 0x0a, 0x10, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x23, 0xfa, 0xe7, 0x94, 0xa8, 0x06,
	0x10, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x69, 0x6e, 0x63, 0x2e, 0x6f, 0x72,
	0x67, 0xa2, 0xbc, 0x97, 0xa9, 0x06, 0x07, 0x38, 0x35, 0x33, 0x35, 0x33, 0x2d, 0x31, 0x52, 0x0e,
	0x42, 0x6f, 0x64, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x3d,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9b, 0x01,
	0x0a, 0x09, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xb3, 0x04, 0x0a, 0x0e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x2f, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x1a, 0xf5, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73,
	0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x17, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xbd, 0x05, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0x58, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0xb0, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x03, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x33,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4a, 0x04, 0x08, 0x13,
	0x10, 0x14, 0x42, 0x6e, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x73, 0x74, 0x75, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x75, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x98, 0xc6, 0xb0, 0xb5,
	0x07, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_stu3_profiles_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_stu3_profiles_proto_rawDescData = file_proto_google_fhir_proto_stu3_profiles_proto_rawDesc
)

func file_proto_google_fhir_proto_stu3_profiles_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_stu3_profiles_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_stu3_profiles_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_stu3_profiles_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_stu3_profiles_proto_rawDescData
}

var file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes = make([]protoimpl.MessageInfo, 188)
var file_proto_google_fhir_proto_stu3_profiles_proto_goTypes = []interface{}{
	(*Bmi)(nil),                                                               // 0: google.fhir.stu3.proto.Bmi
	(*Bodyheight)(nil),                                                        // 1: google.fhir.stu3.proto.Bodyheight
	(*Bodylength)(nil),                                                        // 2: google.fhir.stu3.proto.Bodylength
	(*Bodytemp)(nil),                                                          // 3: google.fhir.stu3.proto.Bodytemp
	(*Bodyweight)(nil),                                                        // 4: google.fhir.stu3.proto.Bodyweight
	(*Bp)(nil),                                                                // 5: google.fhir.stu3.proto.Bp
	(*Cholesterol)(nil),                                                       // 6: google.fhir.stu3.proto.Cholesterol
	(*Clinicaldocument)(nil),                                                  // 7: google.fhir.stu3.proto.Clinicaldocument
	(*Devicemetricobservation)(nil),                                           // 8: google.fhir.stu3.proto.Devicemetricobservation
	(*DiagnosticreportGenetics)(nil),                                          // 9: google.fhir.stu3.proto.DiagnosticreportGenetics
	(*ElementdefinitionDe)(nil),                                               // 10: google.fhir.stu3.proto.ElementdefinitionDe
	(*FamilymemberhistoryGenetic)(nil),                                        // 11: google.fhir.stu3.proto.FamilymemberhistoryGenetic
	(*HdlCholesterol)(nil),                                                    // 12: google.fhir.stu3.proto.HdlCholesterol
	(*Headcircum)(nil),                                                        // 13: google.fhir.stu3.proto.Headcircum
	(*Heartrate)(nil),                                                         // 14: google.fhir.stu3.proto.Heartrate
	(*Hlaresult)(nil),                                                         // 15: google.fhir.stu3.proto.Hlaresult
	(*LdlCholesterol)(nil),                                                    // 16: google.fhir.stu3.proto.LdlCholesterol
	(*LipidProfile)(nil),                                                      // 17: google.fhir.stu3.proto.LipidProfile
	(*MetadataResource)(nil),                                                  // 18: google.fhir.stu3.proto.MetadataResource
	(*ObservationGenetics)(nil),                                               // 19: google.fhir.stu3.proto.ObservationGenetics
	(*Oxygensat)(nil),                                                         // 20: google.fhir.stu3.proto.Oxygensat
	(*ProcedurerequestGenetics)(nil),                                          // 21: google.fhir.stu3.proto.ProcedurerequestGenetics
	(*Resprate)(nil),                                                          // 22: google.fhir.stu3.proto.Resprate
	(*Shareablecodesystem)(nil),                                               // 23: google.fhir.stu3.proto.Shareablecodesystem
	(*Shareablevalueset)(nil),                                                 // 24: google.fhir.stu3.proto.Shareablevalueset
	(*Triglyceride)(nil),                                                      // 25: google.fhir.stu3.proto.Triglyceride
	(*Vitalsigns)(nil),                                                        // 26: google.fhir.stu3.proto.Vitalsigns
	(*Vitalspanel)(nil),                                                       // 27: google.fhir.stu3.proto.Vitalspanel
	(*Bmi_CodeableConceptForCode)(nil),                                        // 28: google.fhir.stu3.proto.Bmi.CodeableConceptForCode
	(*Bmi_Effective)(nil),                                                     // 29: google.fhir.stu3.proto.Bmi.Effective
	(*Bmi_Value)(nil),                                                         // 30: google.fhir.stu3.proto.Bmi.Value
	(*Bmi_ReferenceRange)(nil),                                                // 31: google.fhir.stu3.proto.Bmi.ReferenceRange
	(*Bmi_Related)(nil),                                                       // 32: google.fhir.stu3.proto.Bmi.Related
	(*Bmi_Component)(nil),                                                     // 33: google.fhir.stu3.proto.Bmi.Component
	(*Bmi_Component_Value)(nil),                                               // 34: google.fhir.stu3.proto.Bmi.Component.Value
	(*Bodyheight_CodeableConceptForCode)(nil),                                 // 35: google.fhir.stu3.proto.Bodyheight.CodeableConceptForCode
	(*Bodyheight_Effective)(nil),                                              // 36: google.fhir.stu3.proto.Bodyheight.Effective
	(*Bodyheight_Value)(nil),                                                  // 37: google.fhir.stu3.proto.Bodyheight.Value
	(*Bodyheight_ReferenceRange)(nil),                                         // 38: google.fhir.stu3.proto.Bodyheight.ReferenceRange
	(*Bodyheight_Related)(nil),                                                // 39: google.fhir.stu3.proto.Bodyheight.Related
	(*Bodyheight_Component)(nil),                                              // 40: google.fhir.stu3.proto.Bodyheight.Component
	(*Bodyheight_Component_Value)(nil),                                        // 41: google.fhir.stu3.proto.Bodyheight.Component.Value
	(*Bodylength_CodeableConceptForCode)(nil),                                 // 42: google.fhir.stu3.proto.Bodylength.CodeableConceptForCode
	(*Bodylength_Effective)(nil),                                              // 43: google.fhir.stu3.proto.Bodylength.Effective
	(*Bodylength_Value)(nil),                                                  // 44: google.fhir.stu3.proto.Bodylength.Value
	(*Bodylength_ReferenceRange)(nil),                                         // 45: google.fhir.stu3.proto.Bodylength.ReferenceRange
	(*Bodylength_Related)(nil),                                                // 46: google.fhir.stu3.proto.Bodylength.Related
	(*Bodylength_Component)(nil),                                              // 47: google.fhir.stu3.proto.Bodylength.Component
	(*Bodylength_Component_Value)(nil),                                        // 48: google.fhir.stu3.proto.Bodylength.Component.Value
	(*Bodytemp_CodeableConceptForCode)(nil),                                   // 49: google.fhir.stu3.proto.Bodytemp.CodeableConceptForCode
	(*Bodytemp_Effective)(nil),                                                // 50: google.fhir.stu3.proto.Bodytemp.Effective
	(*Bodytemp_Value)(nil),                                                    // 51: google.fhir.stu3.proto.Bodytemp.Value
	(*Bodytemp_ReferenceRange)(nil),                                           // 52: google.fhir.stu3.proto.Bodytemp.ReferenceRange
	(*Bodytemp_Related)(nil),                                                  // 53: google.fhir.stu3.proto.Bodytemp.Related
	(*Bodytemp_Component)(nil),                                                // 54: google.fhir.stu3.proto.Bodytemp.Component
	(*Bodytemp_Component_Value)(nil),                                          // 55: google.fhir.stu3.proto.Bodytemp.Component.Value
	(*Bodyweight_CodeableConceptForCode)(nil),                                 // 56: google.fhir.stu3.proto.Bodyweight.CodeableConceptForCode
	(*Bodyweight_Effective)(nil),                                              // 57: google.fhir.stu3.proto.Bodyweight.Effective
	(*Bodyweight_Value)(nil),                                                  // 58: google.fhir.stu3.proto.Bodyweight.Value
	(*Bodyweight_ReferenceRange)(nil),                                         // 59: google.fhir.stu3.proto.Bodyweight.ReferenceRange
	(*Bodyweight_Related)(nil),                                                // 60: google.fhir.stu3.proto.Bodyweight.Related
	(*Bodyweight_Component)(nil),                                              // 61: google.fhir.stu3.proto.Bodyweight.Component
	(*Bodyweight_Component_Value)(nil),                                        // 62: google.fhir.stu3.proto.Bodyweight.Component.Value
	(*Bp_CodeableConceptForCode)(nil),                                         // 63: google.fhir.stu3.proto.Bp.CodeableConceptForCode
	(*Bp_Effective)(nil),                                                      // 64: google.fhir.stu3.proto.Bp.Effective
	(*Bp_ReferenceRange)(nil),                                                 // 65: google.fhir.stu3.proto.Bp.ReferenceRange
	(*Bp_Related)(nil),                                                        // 66: google.fhir.stu3.proto.Bp.Related
	(*Bp_Component)(nil),                                                      // 67: google.fhir.stu3.proto.Bp.Component
	(*Cholesterol_Effective)(nil),                                             // 68: google.fhir.stu3.proto.Cholesterol.Effective
	(*Cholesterol_Value)(nil),                                                 // 69: google.fhir.stu3.proto.Cholesterol.Value
	(*Cholesterol_ReferenceRange)(nil),                                        // 70: google.fhir.stu3.proto.Cholesterol.ReferenceRange
	(*Cholesterol_Component)(nil),                                             // 71: google.fhir.stu3.proto.Cholesterol.Component
	(*Cholesterol_Component_Value)(nil),                                       // 72: google.fhir.stu3.proto.Cholesterol.Component.Value
	(*Clinicaldocument_Attester)(nil),                                         // 73: google.fhir.stu3.proto.Clinicaldocument.Attester
	(*Clinicaldocument_RelatesTo)(nil),                                        // 74: google.fhir.stu3.proto.Clinicaldocument.RelatesTo
	(*Clinicaldocument_Event)(nil),                                            // 75: google.fhir.stu3.proto.Clinicaldocument.Event
	(*Clinicaldocument_Section)(nil),                                          // 76: google.fhir.stu3.proto.Clinicaldocument.Section
	(*Clinicaldocument_RelatesTo_Target)(nil),                                 // 77: google.fhir.stu3.proto.Clinicaldocument.RelatesTo.Target
	(*Devicemetricobservation_Effective)(nil),                                 // 78: google.fhir.stu3.proto.Devicemetricobservation.Effective
	(*Devicemetricobservation_Value)(nil),                                     // 79: google.fhir.stu3.proto.Devicemetricobservation.Value
	(*Devicemetricobservation_ReferenceRange)(nil),                            // 80: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange
	(*Devicemetricobservation_Related)(nil),                                   // 81: google.fhir.stu3.proto.Devicemetricobservation.Related
	(*Devicemetricobservation_Component)(nil),                                 // 82: google.fhir.stu3.proto.Devicemetricobservation.Component
	(*Devicemetricobservation_Component_Value)(nil),                           // 83: google.fhir.stu3.proto.Devicemetricobservation.Component.Value
	(*DiagnosticreportGenetics_Effective)(nil),                                // 84: google.fhir.stu3.proto.DiagnosticreportGenetics.Effective
	(*DiagnosticreportGenetics_Performer)(nil),                                // 85: google.fhir.stu3.proto.DiagnosticreportGenetics.Performer
	(*DiagnosticreportGenetics_Image)(nil),                                    // 86: google.fhir.stu3.proto.DiagnosticreportGenetics.Image
	(*ElementdefinitionDe_Base)(nil),                                          // 87: google.fhir.stu3.proto.ElementdefinitionDe.Base
	(*ElementdefinitionDe_TypeRef)(nil),                                       // 88: google.fhir.stu3.proto.ElementdefinitionDe.TypeRef
	(*ElementdefinitionDe_DefaultValue)(nil),                                  // 89: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue
	(*ElementdefinitionDe_Example)(nil),                                       // 90: google.fhir.stu3.proto.ElementdefinitionDe.Example
	(*ElementdefinitionDe_MinValue)(nil),                                      // 91: google.fhir.stu3.proto.ElementdefinitionDe.MinValue
	(*ElementdefinitionDe_MaxValue)(nil),                                      // 92: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue
	(*ElementdefinitionDe_Constraint)(nil),                                    // 93: google.fhir.stu3.proto.ElementdefinitionDe.Constraint
	(*ElementdefinitionDe_ElementDefinitionBinding)(nil),                      // 94: google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding
	(*ElementdefinitionDe_Mapping)(nil),                                       // 95: google.fhir.stu3.proto.ElementdefinitionDe.Mapping
	(*ElementdefinitionDe_Example_Value)(nil),                                 // 96: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value
	(*ElementdefinitionDe_ElementDefinitionBinding_ValueSet)(nil),             // 97: google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding.ValueSet
	(*FamilymemberhistoryGenetic_Born)(nil),                                   // 98: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Born
	(*FamilymemberhistoryGenetic_AgeType)(nil),                                // 99: google.fhir.stu3.proto.FamilymemberhistoryGenetic.AgeType
	(*FamilymemberhistoryGenetic_Deceased)(nil),                               // 100: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Deceased
	(*FamilymemberhistoryGenetic_Condition)(nil),                              // 101: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition
	(*FamilymemberhistoryGenetic_Condition_Onset)(nil),                        // 102: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.Onset
	(*HdlCholesterol_Effective)(nil),                                          // 103: google.fhir.stu3.proto.HdlCholesterol.Effective
	(*HdlCholesterol_Value)(nil),                                              // 104: google.fhir.stu3.proto.HdlCholesterol.Value
	(*HdlCholesterol_ReferenceRange)(nil),                                     // 105: google.fhir.stu3.proto.HdlCholesterol.ReferenceRange
	(*HdlCholesterol_Component)(nil),                                          // 106: google.fhir.stu3.proto.HdlCholesterol.Component
	(*HdlCholesterol_Component_Value)(nil),                                    // 107: google.fhir.stu3.proto.HdlCholesterol.Component.Value
	(*Headcircum_CodeableConceptForCode)(nil),                                 // 108: google.fhir.stu3.proto.Headcircum.CodeableConceptForCode
	(*Headcircum_Effective)(nil),                                              // 109: google.fhir.stu3.proto.Headcircum.Effective
	(*Headcircum_Value)(nil),                                                  // 110: google.fhir.stu3.proto.Headcircum.Value
	(*Headcircum_ReferenceRange)(nil),                                         // 111: google.fhir.stu3.proto.Headcircum.ReferenceRange
	(*Headcircum_Related)(nil),                                                // 112: google.fhir.stu3.proto.Headcircum.Related
	(*Headcircum_Component)(nil),                                              // 113: google.fhir.stu3.proto.Headcircum.Component
	(*Headcircum_Component_Value)(nil),                                        // 114: google.fhir.stu3.proto.Headcircum.Component.Value
	(*Heartrate_CodeableConceptForCode)(nil),                                  // 115: google.fhir.stu3.proto.Heartrate.CodeableConceptForCode
	(*Heartrate_Effective)(nil),                                               // 116: google.fhir.stu3.proto.Heartrate.Effective
	(*Heartrate_Value)(nil),                                                   // 117: google.fhir.stu3.proto.Heartrate.Value
	(*Heartrate_ReferenceRange)(nil),                                          // 118: google.fhir.stu3.proto.Heartrate.ReferenceRange
	(*Heartrate_Related)(nil),                                                 // 119: google.fhir.stu3.proto.Heartrate.Related
	(*Heartrate_Component)(nil),                                               // 120: google.fhir.stu3.proto.Heartrate.Component
	(*Heartrate_Component_Value)(nil),                                         // 121: google.fhir.stu3.proto.Heartrate.Component.Value
	(*Hlaresult_Effective)(nil),                                               // 122: google.fhir.stu3.proto.Hlaresult.Effective
	(*Hlaresult_Performer)(nil),                                               // 123: google.fhir.stu3.proto.Hlaresult.Performer
	(*Hlaresult_Image)(nil),                                                   // 124: google.fhir.stu3.proto.Hlaresult.Image
	(*LdlCholesterol_Effective)(nil),                                          // 125: google.fhir.stu3.proto.LdlCholesterol.Effective
	(*LdlCholesterol_Value)(nil),                                              // 126: google.fhir.stu3.proto.LdlCholesterol.Value
	(*LdlCholesterol_ReferenceRange)(nil),                                     // 127: google.fhir.stu3.proto.LdlCholesterol.ReferenceRange
	(*LdlCholesterol_Component)(nil),                                          // 128: google.fhir.stu3.proto.LdlCholesterol.Component
	(*LdlCholesterol_Component_Value)(nil),                                    // 129: google.fhir.stu3.proto.LdlCholesterol.Component.Value
	(*LipidProfile_Effective)(nil),                                            // 130: google.fhir.stu3.proto.LipidProfile.Effective
	(*LipidProfile_Performer)(nil),                                            // 131: google.fhir.stu3.proto.LipidProfile.Performer
	(*LipidProfile_Image)(nil),                                                // 132: google.fhir.stu3.proto.LipidProfile.Image
	(*ObservationGenetics_Effective)(nil),                                     // 133: google.fhir.stu3.proto.ObservationGenetics.Effective
	(*ObservationGenetics_Value)(nil),                                         // 134: google.fhir.stu3.proto.ObservationGenetics.Value
	(*ObservationGenetics_ReferenceRange)(nil),                                // 135: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange
	(*ObservationGenetics_Related)(nil),                                       // 136: google.fhir.stu3.proto.ObservationGenetics.Related
	(*ObservationGenetics_Component)(nil),                                     // 137: google.fhir.stu3.proto.ObservationGenetics.Component
	(*ObservationGenetics_Component_Value)(nil),                               // 138: google.fhir.stu3.proto.ObservationGenetics.Component.Value
	(*Oxygensat_CodeableConceptForCode)(nil),                                  // 139: google.fhir.stu3.proto.Oxygensat.CodeableConceptForCode
	(*Oxygensat_Effective)(nil),                                               // 140: google.fhir.stu3.proto.Oxygensat.Effective
	(*Oxygensat_Value)(nil),                                                   // 141: google.fhir.stu3.proto.Oxygensat.Value
	(*Oxygensat_ReferenceRange)(nil),                                          // 142: google.fhir.stu3.proto.Oxygensat.ReferenceRange
	(*Oxygensat_Related)(nil),                                                 // 143: google.fhir.stu3.proto.Oxygensat.Related
	(*Oxygensat_Component)(nil),                                               // 144: google.fhir.stu3.proto.Oxygensat.Component
	(*Oxygensat_Component_Value)(nil),                                         // 145: google.fhir.stu3.proto.Oxygensat.Component.Value
	(*ProcedurerequestGenetics_Occurrence)(nil),                               // 146: google.fhir.stu3.proto.ProcedurerequestGenetics.Occurrence
	(*ProcedurerequestGenetics_AsNeeded)(nil),                                 // 147: google.fhir.stu3.proto.ProcedurerequestGenetics.AsNeeded
	(*ProcedurerequestGenetics_Requester)(nil),                                // 148: google.fhir.stu3.proto.ProcedurerequestGenetics.Requester
	(*Resprate_CodeableConceptForCode)(nil),                                   // 149: google.fhir.stu3.proto.Resprate.CodeableConceptForCode
	(*Resprate_Effective)(nil),                                                // 150: google.fhir.stu3.proto.Resprate.Effective
	(*Resprate_Value)(nil),                                                    // 151: google.fhir.stu3.proto.Resprate.Value
	(*Resprate_ReferenceRange)(nil),                                           // 152: google.fhir.stu3.proto.Resprate.ReferenceRange
	(*Resprate_Related)(nil),                                                  // 153: google.fhir.stu3.proto.Resprate.Related
	(*Resprate_Component)(nil),                                                // 154: google.fhir.stu3.proto.Resprate.Component
	(*Resprate_Component_Value)(nil),                                          // 155: google.fhir.stu3.proto.Resprate.Component.Value
	(*Shareablecodesystem_Filter)(nil),                                        // 156: google.fhir.stu3.proto.Shareablecodesystem.Filter
	(*Shareablecodesystem_Property)(nil),                                      // 157: google.fhir.stu3.proto.Shareablecodesystem.Property
	(*Shareablecodesystem_ConceptDefinition)(nil),                             // 158: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition
	(*Shareablecodesystem_ConceptDefinition_Designation)(nil),                 // 159: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.Designation
	(*Shareablecodesystem_ConceptDefinition_ConceptProperty)(nil),             // 160: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty
	(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value)(nil),       // 161: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.Value
	(*Shareablevalueset_Compose)(nil),                                         // 162: google.fhir.stu3.proto.Shareablevalueset.Compose
	(*Shareablevalueset_Expansion)(nil),                                       // 163: google.fhir.stu3.proto.Shareablevalueset.Expansion
	(*Shareablevalueset_Compose_ConceptSet)(nil),                              // 164: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet
	(*Shareablevalueset_Compose_ConceptSet_ConceptReference)(nil),             // 165: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference
	(*Shareablevalueset_Compose_ConceptSet_Filter)(nil),                       // 166: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.Filter
	(*Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation)(nil), // 167: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.Designation
	(*Shareablevalueset_Expansion_Parameter)(nil),                             // 168: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter
	(*Shareablevalueset_Expansion_Contains)(nil),                              // 169: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains
	(*Shareablevalueset_Expansion_Parameter_Value)(nil),                       // 170: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.Value
	(*Triglyceride_Effective)(nil),                                            // 171: google.fhir.stu3.proto.Triglyceride.Effective
	(*Triglyceride_Value)(nil),                                                // 172: google.fhir.stu3.proto.Triglyceride.Value
	(*Triglyceride_ReferenceRange)(nil),                                       // 173: google.fhir.stu3.proto.Triglyceride.ReferenceRange
	(*Triglyceride_Component)(nil),                                            // 174: google.fhir.stu3.proto.Triglyceride.Component
	(*Triglyceride_Component_Value)(nil),                                      // 175: google.fhir.stu3.proto.Triglyceride.Component.Value
	(*Vitalsigns_Effective)(nil),                                              // 176: google.fhir.stu3.proto.Vitalsigns.Effective
	(*Vitalsigns_Value)(nil),                                                  // 177: google.fhir.stu3.proto.Vitalsigns.Value
	(*Vitalsigns_ReferenceRange)(nil),                                         // 178: google.fhir.stu3.proto.Vitalsigns.ReferenceRange
	(*Vitalsigns_Related)(nil),                                                // 179: google.fhir.stu3.proto.Vitalsigns.Related
	(*Vitalsigns_Component)(nil),                                              // 180: google.fhir.stu3.proto.Vitalsigns.Component
	(*Vitalsigns_Component_Value)(nil),                                        // 181: google.fhir.stu3.proto.Vitalsigns.Component.Value
	(*Vitalspanel_CodeableConceptForCode)(nil),                                // 182: google.fhir.stu3.proto.Vitalspanel.CodeableConceptForCode
	(*Vitalspanel_Effective)(nil),                                             // 183: google.fhir.stu3.proto.Vitalspanel.Effective
	(*Vitalspanel_ReferenceRange)(nil),                                        // 184: google.fhir.stu3.proto.Vitalspanel.ReferenceRange
	(*Vitalspanel_Related)(nil),                                               // 185: google.fhir.stu3.proto.Vitalspanel.Related
	(*Vitalspanel_Component)(nil),                                             // 186: google.fhir.stu3.proto.Vitalspanel.Component
	(*Vitalspanel_Component_Value)(nil),                                       // 187: google.fhir.stu3.proto.Vitalspanel.Component.Value
	(*datatypes_go_proto.Id)(nil),                                             // 188: google.fhir.stu3.proto.Id
	(*datatypes_go_proto.Meta)(nil),                                           // 189: google.fhir.stu3.proto.Meta
	(*datatypes_go_proto.Uri)(nil),                                            // 190: google.fhir.stu3.proto.Uri
	(*datatypes_go_proto.LanguageCode)(nil),                                   // 191: google.fhir.stu3.proto.LanguageCode
	(*metadatatypes_go_proto.Narrative)(nil),                                  // 192: google.fhir.stu3.proto.Narrative
	(*resources_go_proto.ContainedResource)(nil),                              // 193: google.fhir.stu3.proto.ContainedResource
	(*datatypes_go_proto.Extension)(nil),                                      // 194: google.fhir.stu3.proto.Extension
	(*datatypes_go_proto.Identifier)(nil),                                     // 195: google.fhir.stu3.proto.Identifier
	(*datatypes_go_proto.Reference)(nil),                                      // 196: google.fhir.stu3.proto.Reference
	(*codes_go_proto.ObservationStatusCode)(nil),                              // 197: google.fhir.stu3.proto.ObservationStatusCode
	(*datatypes_go_proto.CodeableConcept)(nil),                                // 198: google.fhir.stu3.proto.CodeableConcept
	(*datatypes_go_proto.Instant)(nil),                                        // 199: google.fhir.stu3.proto.Instant
	(*datatypes_go_proto.String)(nil),                                         // 200: google.fhir.stu3.proto.String
	(*codes_go_proto.CompositionStatusCode)(nil),                              // 201: google.fhir.stu3.proto.CompositionStatusCode
	(*datatypes_go_proto.DateTime)(nil),                                       // 202: google.fhir.stu3.proto.DateTime
	(*codes_go_proto.ConfidentialityClassificationCode)(nil),                  // 203: google.fhir.stu3.proto.ConfidentialityClassificationCode
	(*codes_go_proto.DiagnosticReportStatusCode)(nil),                         // 204: google.fhir.stu3.proto.DiagnosticReportStatusCode
	(*datatypes_go_proto.Attachment)(nil),                                     // 205: google.fhir.stu3.proto.Attachment
	(*extensions_go_proto.DiagnosticReportAnalysis)(nil),                      // 206: google.fhir.stu3.proto.DiagnosticReportAnalysis
	(*datatypes_go_proto.Coding)(nil),                                         // 207: google.fhir.stu3.proto.Coding
	(*datatypes_go_proto.Markdown)(nil),                                       // 208: google.fhir.stu3.proto.Markdown
	(*datatypes_go_proto.UnsignedInt)(nil),                                    // 209: google.fhir.stu3.proto.UnsignedInt
	(*datatypes_go_proto.Integer)(nil),                                        // 210: google.fhir.stu3.proto.Integer
	(*datatypes_go_proto.Boolean)(nil),                                        // 211: google.fhir.stu3.proto.Boolean
	(*extensions_go_proto.ElementDefinitionAllowedUnits_Value)(nil),           // 212: google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value
	(*codes_go_proto.FamilyHistoryStatusCode)(nil),                            // 213: google.fhir.stu3.proto.FamilyHistoryStatusCode
	(*codes_go_proto.AdministrativeGenderCode)(nil),                           // 214: google.fhir.stu3.proto.AdministrativeGenderCode
	(*datatypes_go_proto.Annotation)(nil),                                     // 215: google.fhir.stu3.proto.Annotation
	(*extensions_go_proto.FamilyMemberHistoryParent)(nil),                     // 216: google.fhir.stu3.proto.FamilyMemberHistoryParent
	(*extensions_go_proto.FamilyMemberHistorySibling)(nil),                    // 217: google.fhir.stu3.proto.FamilyMemberHistorySibling
	(*extensions_go_proto.DiagnosticReportGlstring)(nil),                      // 218: google.fhir.stu3.proto.DiagnosticReportGlstring
	(*extensions_go_proto.DiagnosticReportHaploid)(nil),                       // 219: google.fhir.stu3.proto.DiagnosticReportHaploid
	(*codes_go_proto.PublicationStatusCode)(nil),                              // 220: google.fhir.stu3.proto.PublicationStatusCode
	(*metadatatypes_go_proto.ContactDetail)(nil),                              // 221: google.fhir.stu3.proto.ContactDetail
	(*metadatatypes_go_proto.UsageContext)(nil),                               // 222: google.fhir.stu3.proto.UsageContext
	(*datatypes_go_proto.Decimal)(nil),                                        // 223: google.fhir.stu3.proto.Decimal
	(*codes_go_proto.RequestStatusCode)(nil),                                  // 224: google.fhir.stu3.proto.RequestStatusCode
	(*codes_go_proto.RequestIntentCode)(nil),                                  // 225: google.fhir.stu3.proto.RequestIntentCode
	(*codes_go_proto.RequestPriorityCode)(nil),                                // 226: google.fhir.stu3.proto.RequestPriorityCode
	(*extensions_go_proto.DiagnosticReportItem)(nil),                          // 227: google.fhir.stu3.proto.DiagnosticReportItem
	(*codes_go_proto.CodeSystemHierarchyMeaningCode)(nil),                     // 228: google.fhir.stu3.proto.CodeSystemHierarchyMeaningCode
	(*codes_go_proto.CodeSystemContentModeCode)(nil),                          // 229: google.fhir.stu3.proto.CodeSystemContentModeCode
	(*datatypes_go_proto.CodingWithFixedCode)(nil),                            // 230: google.fhir.stu3.proto.CodingWithFixedCode
	(*datatypes_go_proto.Period)(nil),                                         // 231: google.fhir.stu3.proto.Period
	(*datatypes_go_proto.Quantity)(nil),                                       // 232: google.fhir.stu3.proto.Quantity
	(*datatypes_go_proto.SimpleQuantity)(nil),                                 // 233: google.fhir.stu3.proto.SimpleQuantity
	(*datatypes_go_proto.Range)(nil),                                          // 234: google.fhir.stu3.proto.Range
	(*codes_go_proto.ObservationRelationshipTypeCode)(nil),                    // 235: google.fhir.stu3.proto.ObservationRelationshipTypeCode
	(*datatypes_go_proto.Ratio)(nil),                                          // 236: google.fhir.stu3.proto.Ratio
	(*datatypes_go_proto.SampledData)(nil),                                    // 237: google.fhir.stu3.proto.SampledData
	(*datatypes_go_proto.Time)(nil),                                           // 238: google.fhir.stu3.proto.Time
	(*codes_go_proto.CompositionAttestationModeCode)(nil),                     // 239: google.fhir.stu3.proto.CompositionAttestationModeCode
	(*codes_go_proto.DocumentRelationshipTypeCode)(nil),                       // 240: google.fhir.stu3.proto.DocumentRelationshipTypeCode
	(*codes_go_proto.ListModeCode)(nil),                                       // 241: google.fhir.stu3.proto.ListModeCode
	(*codes_go_proto.ReferenceVersionRulesCode)(nil),                          // 242: google.fhir.stu3.proto.ReferenceVersionRulesCode
	(*datatypes_go_proto.Base64Binary)(nil),                                   // 243: google.fhir.stu3.proto.Base64Binary
	(*datatypes_go_proto.Code)(nil),                                           // 244: google.fhir.stu3.proto.Code
	(*datatypes_go_proto.Date)(nil),                                           // 245: google.fhir.stu3.proto.Date
	(*datatypes_go_proto.Oid)(nil),                                            // 246: google.fhir.stu3.proto.Oid
	(*datatypes_go_proto.PositiveInt)(nil),                                    // 247: google.fhir.stu3.proto.PositiveInt
	(*datatypes_go_proto.Address)(nil),                                        // 248: google.fhir.stu3.proto.Address
	(*datatypes_go_proto.Age)(nil),                                            // 249: google.fhir.stu3.proto.Age
	(*datatypes_go_proto.ContactPoint)(nil),                                   // 250: google.fhir.stu3.proto.ContactPoint
	(*datatypes_go_proto.Count)(nil),                                          // 251: google.fhir.stu3.proto.Count
	(*datatypes_go_proto.Distance)(nil),                                       // 252: google.fhir.stu3.proto.Distance
	(*datatypes_go_proto.Duration)(nil),                                       // 253: google.fhir.stu3.proto.Duration
	(*datatypes_go_proto.HumanName)(nil),                                      // 254: google.fhir.stu3.proto.HumanName
	(*datatypes_go_proto.Money)(nil),                                          // 255: google.fhir.stu3.proto.Money
	(*datatypes_go_proto.Signature)(nil),                                      // 256: google.fhir.stu3.proto.Signature
	(*datatypes_go_proto.Timing)(nil),                                         // 257: google.fhir.stu3.proto.Timing
	(*codes_go_proto.ConstraintSeverityCode)(nil),                             // 258: google.fhir.stu3.proto.ConstraintSeverityCode
	(*codes_go_proto.BindingStrengthCode)(nil),                                // 259: google.fhir.stu3.proto.BindingStrengthCode
	(*datatypes_go_proto.MimeTypeCode)(nil),                                   // 260: google.fhir.stu3.proto.MimeTypeCode
	(*codes_go_proto.FilterOperatorCode)(nil),                                 // 261: google.fhir.stu3.proto.FilterOperatorCode
	(*codes_go_proto.PropertyTypeCode)(nil),                                   // 262: google.fhir.stu3.proto.PropertyTypeCode
}
var file_proto_google_fhir_proto_stu3_profiles_proto_depIdxs = []int32{
	188,  // 0: google.fhir.stu3.proto.Bmi.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 1: google.fhir.stu3.proto.Bmi.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 2: google.fhir.stu3.proto.Bmi.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 3: google.fhir.stu3.proto.Bmi.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 4: google.fhir.stu3.proto.Bmi.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 5: google.fhir.stu3.proto.Bmi.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 6: google.fhir.stu3.proto.Bmi.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 7: google.fhir.stu3.proto.Bmi.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 8: google.fhir.stu3.proto.Bmi.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 9: google.fhir.stu3.proto.Bmi.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 10: google.fhir.stu3.proto.Bmi.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 11: google.fhir.stu3.proto.Bmi.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	28,   // 12: google.fhir.stu3.proto.Bmi.code:type_name -> google.fhir.stu3.proto.Bmi.CodeableConceptForCode
	196,  // 13: google.fhir.stu3.proto.Bmi.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 14: google.fhir.stu3.proto.Bmi.context:type_name -> google.fhir.stu3.proto.Reference
	29,   // 15: google.fhir.stu3.proto.Bmi.effective:type_name -> google.fhir.stu3.proto.Bmi.Effective
	199,  // 16: google.fhir.stu3.proto.Bmi.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 17: google.fhir.stu3.proto.Bmi.performer:type_name -> google.fhir.stu3.proto.Reference
	30,   // 18: google.fhir.stu3.proto.Bmi.value:type_name -> google.fhir.stu3.proto.Bmi.Value
	198,  // 19: google.fhir.stu3.proto.Bmi.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 20: google.fhir.stu3.proto.Bmi.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 21: google.fhir.stu3.proto.Bmi.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 22: google.fhir.stu3.proto.Bmi.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 23: google.fhir.stu3.proto.Bmi.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 24: google.fhir.stu3.proto.Bmi.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 25: google.fhir.stu3.proto.Bmi.device:type_name -> google.fhir.stu3.proto.Reference
	31,   // 26: google.fhir.stu3.proto.Bmi.reference_range:type_name -> google.fhir.stu3.proto.Bmi.ReferenceRange
	32,   // 27: google.fhir.stu3.proto.Bmi.related:type_name -> google.fhir.stu3.proto.Bmi.Related
	33,   // 28: google.fhir.stu3.proto.Bmi.component:type_name -> google.fhir.stu3.proto.Bmi.Component
	188,  // 29: google.fhir.stu3.proto.Bodyheight.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 30: google.fhir.stu3.proto.Bodyheight.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 31: google.fhir.stu3.proto.Bodyheight.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 32: google.fhir.stu3.proto.Bodyheight.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 33: google.fhir.stu3.proto.Bodyheight.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 34: google.fhir.stu3.proto.Bodyheight.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 35: google.fhir.stu3.proto.Bodyheight.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 36: google.fhir.stu3.proto.Bodyheight.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 37: google.fhir.stu3.proto.Bodyheight.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 38: google.fhir.stu3.proto.Bodyheight.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 39: google.fhir.stu3.proto.Bodyheight.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 40: google.fhir.stu3.proto.Bodyheight.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	35,   // 41: google.fhir.stu3.proto.Bodyheight.code:type_name -> google.fhir.stu3.proto.Bodyheight.CodeableConceptForCode
	196,  // 42: google.fhir.stu3.proto.Bodyheight.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 43: google.fhir.stu3.proto.Bodyheight.context:type_name -> google.fhir.stu3.proto.Reference
	36,   // 44: google.fhir.stu3.proto.Bodyheight.effective:type_name -> google.fhir.stu3.proto.Bodyheight.Effective
	199,  // 45: google.fhir.stu3.proto.Bodyheight.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 46: google.fhir.stu3.proto.Bodyheight.performer:type_name -> google.fhir.stu3.proto.Reference
	37,   // 47: google.fhir.stu3.proto.Bodyheight.value:type_name -> google.fhir.stu3.proto.Bodyheight.Value
	198,  // 48: google.fhir.stu3.proto.Bodyheight.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 49: google.fhir.stu3.proto.Bodyheight.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 50: google.fhir.stu3.proto.Bodyheight.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 51: google.fhir.stu3.proto.Bodyheight.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 52: google.fhir.stu3.proto.Bodyheight.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 53: google.fhir.stu3.proto.Bodyheight.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 54: google.fhir.stu3.proto.Bodyheight.device:type_name -> google.fhir.stu3.proto.Reference
	38,   // 55: google.fhir.stu3.proto.Bodyheight.reference_range:type_name -> google.fhir.stu3.proto.Bodyheight.ReferenceRange
	39,   // 56: google.fhir.stu3.proto.Bodyheight.related:type_name -> google.fhir.stu3.proto.Bodyheight.Related
	40,   // 57: google.fhir.stu3.proto.Bodyheight.component:type_name -> google.fhir.stu3.proto.Bodyheight.Component
	188,  // 58: google.fhir.stu3.proto.Bodylength.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 59: google.fhir.stu3.proto.Bodylength.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 60: google.fhir.stu3.proto.Bodylength.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 61: google.fhir.stu3.proto.Bodylength.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 62: google.fhir.stu3.proto.Bodylength.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 63: google.fhir.stu3.proto.Bodylength.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 64: google.fhir.stu3.proto.Bodylength.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 65: google.fhir.stu3.proto.Bodylength.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 66: google.fhir.stu3.proto.Bodylength.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 67: google.fhir.stu3.proto.Bodylength.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 68: google.fhir.stu3.proto.Bodylength.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 69: google.fhir.stu3.proto.Bodylength.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	42,   // 70: google.fhir.stu3.proto.Bodylength.code:type_name -> google.fhir.stu3.proto.Bodylength.CodeableConceptForCode
	196,  // 71: google.fhir.stu3.proto.Bodylength.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 72: google.fhir.stu3.proto.Bodylength.context:type_name -> google.fhir.stu3.proto.Reference
	43,   // 73: google.fhir.stu3.proto.Bodylength.effective:type_name -> google.fhir.stu3.proto.Bodylength.Effective
	199,  // 74: google.fhir.stu3.proto.Bodylength.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 75: google.fhir.stu3.proto.Bodylength.performer:type_name -> google.fhir.stu3.proto.Reference
	44,   // 76: google.fhir.stu3.proto.Bodylength.value:type_name -> google.fhir.stu3.proto.Bodylength.Value
	198,  // 77: google.fhir.stu3.proto.Bodylength.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 78: google.fhir.stu3.proto.Bodylength.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 79: google.fhir.stu3.proto.Bodylength.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 80: google.fhir.stu3.proto.Bodylength.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 81: google.fhir.stu3.proto.Bodylength.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 82: google.fhir.stu3.proto.Bodylength.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 83: google.fhir.stu3.proto.Bodylength.device:type_name -> google.fhir.stu3.proto.Reference
	45,   // 84: google.fhir.stu3.proto.Bodylength.reference_range:type_name -> google.fhir.stu3.proto.Bodylength.ReferenceRange
	46,   // 85: google.fhir.stu3.proto.Bodylength.related:type_name -> google.fhir.stu3.proto.Bodylength.Related
	47,   // 86: google.fhir.stu3.proto.Bodylength.component:type_name -> google.fhir.stu3.proto.Bodylength.Component
	188,  // 87: google.fhir.stu3.proto.Bodytemp.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 88: google.fhir.stu3.proto.Bodytemp.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 89: google.fhir.stu3.proto.Bodytemp.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 90: google.fhir.stu3.proto.Bodytemp.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 91: google.fhir.stu3.proto.Bodytemp.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 92: google.fhir.stu3.proto.Bodytemp.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 93: google.fhir.stu3.proto.Bodytemp.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 94: google.fhir.stu3.proto.Bodytemp.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 95: google.fhir.stu3.proto.Bodytemp.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 96: google.fhir.stu3.proto.Bodytemp.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 97: google.fhir.stu3.proto.Bodytemp.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 98: google.fhir.stu3.proto.Bodytemp.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	49,   // 99: google.fhir.stu3.proto.Bodytemp.code:type_name -> google.fhir.stu3.proto.Bodytemp.CodeableConceptForCode
	196,  // 100: google.fhir.stu3.proto.Bodytemp.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 101: google.fhir.stu3.proto.Bodytemp.context:type_name -> google.fhir.stu3.proto.Reference
	50,   // 102: google.fhir.stu3.proto.Bodytemp.effective:type_name -> google.fhir.stu3.proto.Bodytemp.Effective
	199,  // 103: google.fhir.stu3.proto.Bodytemp.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 104: google.fhir.stu3.proto.Bodytemp.performer:type_name -> google.fhir.stu3.proto.Reference
	51,   // 105: google.fhir.stu3.proto.Bodytemp.value:type_name -> google.fhir.stu3.proto.Bodytemp.Value
	198,  // 106: google.fhir.stu3.proto.Bodytemp.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 107: google.fhir.stu3.proto.Bodytemp.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 108: google.fhir.stu3.proto.Bodytemp.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 109: google.fhir.stu3.proto.Bodytemp.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 110: google.fhir.stu3.proto.Bodytemp.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 111: google.fhir.stu3.proto.Bodytemp.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 112: google.fhir.stu3.proto.Bodytemp.device:type_name -> google.fhir.stu3.proto.Reference
	52,   // 113: google.fhir.stu3.proto.Bodytemp.reference_range:type_name -> google.fhir.stu3.proto.Bodytemp.ReferenceRange
	53,   // 114: google.fhir.stu3.proto.Bodytemp.related:type_name -> google.fhir.stu3.proto.Bodytemp.Related
	54,   // 115: google.fhir.stu3.proto.Bodytemp.component:type_name -> google.fhir.stu3.proto.Bodytemp.Component
	188,  // 116: google.fhir.stu3.proto.Bodyweight.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 117: google.fhir.stu3.proto.Bodyweight.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 118: google.fhir.stu3.proto.Bodyweight.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 119: google.fhir.stu3.proto.Bodyweight.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 120: google.fhir.stu3.proto.Bodyweight.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 121: google.fhir.stu3.proto.Bodyweight.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 122: google.fhir.stu3.proto.Bodyweight.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 123: google.fhir.stu3.proto.Bodyweight.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 124: google.fhir.stu3.proto.Bodyweight.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 125: google.fhir.stu3.proto.Bodyweight.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 126: google.fhir.stu3.proto.Bodyweight.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 127: google.fhir.stu3.proto.Bodyweight.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	56,   // 128: google.fhir.stu3.proto.Bodyweight.code:type_name -> google.fhir.stu3.proto.Bodyweight.CodeableConceptForCode
	196,  // 129: google.fhir.stu3.proto.Bodyweight.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 130: google.fhir.stu3.proto.Bodyweight.context:type_name -> google.fhir.stu3.proto.Reference
	57,   // 131: google.fhir.stu3.proto.Bodyweight.effective:type_name -> google.fhir.stu3.proto.Bodyweight.Effective
	199,  // 132: google.fhir.stu3.proto.Bodyweight.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 133: google.fhir.stu3.proto.Bodyweight.performer:type_name -> google.fhir.stu3.proto.Reference
	58,   // 134: google.fhir.stu3.proto.Bodyweight.value:type_name -> google.fhir.stu3.proto.Bodyweight.Value
	198,  // 135: google.fhir.stu3.proto.Bodyweight.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 136: google.fhir.stu3.proto.Bodyweight.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 137: google.fhir.stu3.proto.Bodyweight.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 138: google.fhir.stu3.proto.Bodyweight.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 139: google.fhir.stu3.proto.Bodyweight.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 140: google.fhir.stu3.proto.Bodyweight.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 141: google.fhir.stu3.proto.Bodyweight.device:type_name -> google.fhir.stu3.proto.Reference
	59,   // 142: google.fhir.stu3.proto.Bodyweight.reference_range:type_name -> google.fhir.stu3.proto.Bodyweight.ReferenceRange
	60,   // 143: google.fhir.stu3.proto.Bodyweight.related:type_name -> google.fhir.stu3.proto.Bodyweight.Related
	61,   // 144: google.fhir.stu3.proto.Bodyweight.component:type_name -> google.fhir.stu3.proto.Bodyweight.Component
	188,  // 145: google.fhir.stu3.proto.Bp.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 146: google.fhir.stu3.proto.Bp.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 147: google.fhir.stu3.proto.Bp.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 148: google.fhir.stu3.proto.Bp.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 149: google.fhir.stu3.proto.Bp.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 150: google.fhir.stu3.proto.Bp.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 151: google.fhir.stu3.proto.Bp.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 152: google.fhir.stu3.proto.Bp.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 153: google.fhir.stu3.proto.Bp.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 154: google.fhir.stu3.proto.Bp.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 155: google.fhir.stu3.proto.Bp.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 156: google.fhir.stu3.proto.Bp.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	63,   // 157: google.fhir.stu3.proto.Bp.code:type_name -> google.fhir.stu3.proto.Bp.CodeableConceptForCode
	196,  // 158: google.fhir.stu3.proto.Bp.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 159: google.fhir.stu3.proto.Bp.context:type_name -> google.fhir.stu3.proto.Reference
	64,   // 160: google.fhir.stu3.proto.Bp.effective:type_name -> google.fhir.stu3.proto.Bp.Effective
	199,  // 161: google.fhir.stu3.proto.Bp.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 162: google.fhir.stu3.proto.Bp.performer:type_name -> google.fhir.stu3.proto.Reference
	198,  // 163: google.fhir.stu3.proto.Bp.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 164: google.fhir.stu3.proto.Bp.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 165: google.fhir.stu3.proto.Bp.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 166: google.fhir.stu3.proto.Bp.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 167: google.fhir.stu3.proto.Bp.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 168: google.fhir.stu3.proto.Bp.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 169: google.fhir.stu3.proto.Bp.device:type_name -> google.fhir.stu3.proto.Reference
	65,   // 170: google.fhir.stu3.proto.Bp.reference_range:type_name -> google.fhir.stu3.proto.Bp.ReferenceRange
	66,   // 171: google.fhir.stu3.proto.Bp.related:type_name -> google.fhir.stu3.proto.Bp.Related
	67,   // 172: google.fhir.stu3.proto.Bp.component:type_name -> google.fhir.stu3.proto.Bp.Component
	188,  // 173: google.fhir.stu3.proto.Cholesterol.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 174: google.fhir.stu3.proto.Cholesterol.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 175: google.fhir.stu3.proto.Cholesterol.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 176: google.fhir.stu3.proto.Cholesterol.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 177: google.fhir.stu3.proto.Cholesterol.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 178: google.fhir.stu3.proto.Cholesterol.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 179: google.fhir.stu3.proto.Cholesterol.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 180: google.fhir.stu3.proto.Cholesterol.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 181: google.fhir.stu3.proto.Cholesterol.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 182: google.fhir.stu3.proto.Cholesterol.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 183: google.fhir.stu3.proto.Cholesterol.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 184: google.fhir.stu3.proto.Cholesterol.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 185: google.fhir.stu3.proto.Cholesterol.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 186: google.fhir.stu3.proto.Cholesterol.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 187: google.fhir.stu3.proto.Cholesterol.context:type_name -> google.fhir.stu3.proto.Reference
	68,   // 188: google.fhir.stu3.proto.Cholesterol.effective:type_name -> google.fhir.stu3.proto.Cholesterol.Effective
	199,  // 189: google.fhir.stu3.proto.Cholesterol.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 190: google.fhir.stu3.proto.Cholesterol.performer:type_name -> google.fhir.stu3.proto.Reference
	69,   // 191: google.fhir.stu3.proto.Cholesterol.value:type_name -> google.fhir.stu3.proto.Cholesterol.Value
	198,  // 192: google.fhir.stu3.proto.Cholesterol.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 193: google.fhir.stu3.proto.Cholesterol.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 194: google.fhir.stu3.proto.Cholesterol.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 195: google.fhir.stu3.proto.Cholesterol.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 196: google.fhir.stu3.proto.Cholesterol.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 197: google.fhir.stu3.proto.Cholesterol.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 198: google.fhir.stu3.proto.Cholesterol.device:type_name -> google.fhir.stu3.proto.Reference
	70,   // 199: google.fhir.stu3.proto.Cholesterol.reference_range:type_name -> google.fhir.stu3.proto.Cholesterol.ReferenceRange
	71,   // 200: google.fhir.stu3.proto.Cholesterol.component:type_name -> google.fhir.stu3.proto.Cholesterol.Component
	188,  // 201: google.fhir.stu3.proto.Clinicaldocument.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 202: google.fhir.stu3.proto.Clinicaldocument.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 203: google.fhir.stu3.proto.Clinicaldocument.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 204: google.fhir.stu3.proto.Clinicaldocument.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 205: google.fhir.stu3.proto.Clinicaldocument.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 206: google.fhir.stu3.proto.Clinicaldocument.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 207: google.fhir.stu3.proto.Clinicaldocument.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 208: google.fhir.stu3.proto.Clinicaldocument.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 209: google.fhir.stu3.proto.Clinicaldocument.identifier:type_name -> google.fhir.stu3.proto.Identifier
	201,  // 210: google.fhir.stu3.proto.Clinicaldocument.status:type_name -> google.fhir.stu3.proto.CompositionStatusCode
	198,  // 211: google.fhir.stu3.proto.Clinicaldocument.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 212: google.fhir.stu3.proto.Clinicaldocument.class_value:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 213: google.fhir.stu3.proto.Clinicaldocument.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 214: google.fhir.stu3.proto.Clinicaldocument.encounter:type_name -> google.fhir.stu3.proto.Reference
	202,  // 215: google.fhir.stu3.proto.Clinicaldocument.date:type_name -> google.fhir.stu3.proto.DateTime
	196,  // 216: google.fhir.stu3.proto.Clinicaldocument.author:type_name -> google.fhir.stu3.proto.Reference
	200,  // 217: google.fhir.stu3.proto.Clinicaldocument.title:type_name -> google.fhir.stu3.proto.String
	203,  // 218: google.fhir.stu3.proto.Clinicaldocument.confidentiality:type_name -> google.fhir.stu3.proto.ConfidentialityClassificationCode
	73,   // 219: google.fhir.stu3.proto.Clinicaldocument.attester:type_name -> google.fhir.stu3.proto.Clinicaldocument.Attester
	196,  // 220: google.fhir.stu3.proto.Clinicaldocument.custodian:type_name -> google.fhir.stu3.proto.Reference
	74,   // 221: google.fhir.stu3.proto.Clinicaldocument.relates_to:type_name -> google.fhir.stu3.proto.Clinicaldocument.RelatesTo
	75,   // 222: google.fhir.stu3.proto.Clinicaldocument.event:type_name -> google.fhir.stu3.proto.Clinicaldocument.Event
	76,   // 223: google.fhir.stu3.proto.Clinicaldocument.section:type_name -> google.fhir.stu3.proto.Clinicaldocument.Section
	188,  // 224: google.fhir.stu3.proto.Devicemetricobservation.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 225: google.fhir.stu3.proto.Devicemetricobservation.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 226: google.fhir.stu3.proto.Devicemetricobservation.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 227: google.fhir.stu3.proto.Devicemetricobservation.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 228: google.fhir.stu3.proto.Devicemetricobservation.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 229: google.fhir.stu3.proto.Devicemetricobservation.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 230: google.fhir.stu3.proto.Devicemetricobservation.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 231: google.fhir.stu3.proto.Devicemetricobservation.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 232: google.fhir.stu3.proto.Devicemetricobservation.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 233: google.fhir.stu3.proto.Devicemetricobservation.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 234: google.fhir.stu3.proto.Devicemetricobservation.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 235: google.fhir.stu3.proto.Devicemetricobservation.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 236: google.fhir.stu3.proto.Devicemetricobservation.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 237: google.fhir.stu3.proto.Devicemetricobservation.subject:type_name -> google.fhir.stu3.proto.Reference
	78,   // 238: google.fhir.stu3.proto.Devicemetricobservation.effective:type_name -> google.fhir.stu3.proto.Devicemetricobservation.Effective
	196,  // 239: google.fhir.stu3.proto.Devicemetricobservation.performer:type_name -> google.fhir.stu3.proto.Reference
	79,   // 240: google.fhir.stu3.proto.Devicemetricobservation.value:type_name -> google.fhir.stu3.proto.Devicemetricobservation.Value
	198,  // 241: google.fhir.stu3.proto.Devicemetricobservation.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 242: google.fhir.stu3.proto.Devicemetricobservation.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 243: google.fhir.stu3.proto.Devicemetricobservation.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 244: google.fhir.stu3.proto.Devicemetricobservation.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 245: google.fhir.stu3.proto.Devicemetricobservation.device:type_name -> google.fhir.stu3.proto.Reference
	80,   // 246: google.fhir.stu3.proto.Devicemetricobservation.reference_range:type_name -> google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange
	81,   // 247: google.fhir.stu3.proto.Devicemetricobservation.related:type_name -> google.fhir.stu3.proto.Devicemetricobservation.Related
	82,   // 248: google.fhir.stu3.proto.Devicemetricobservation.component:type_name -> google.fhir.stu3.proto.Devicemetricobservation.Component
	188,  // 249: google.fhir.stu3.proto.DiagnosticreportGenetics.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 250: google.fhir.stu3.proto.DiagnosticreportGenetics.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 251: google.fhir.stu3.proto.DiagnosticreportGenetics.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 252: google.fhir.stu3.proto.DiagnosticreportGenetics.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 253: google.fhir.stu3.proto.DiagnosticreportGenetics.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 254: google.fhir.stu3.proto.DiagnosticreportGenetics.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 255: google.fhir.stu3.proto.DiagnosticreportGenetics.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 256: google.fhir.stu3.proto.DiagnosticreportGenetics.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 257: google.fhir.stu3.proto.DiagnosticreportGenetics.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 258: google.fhir.stu3.proto.DiagnosticreportGenetics.based_on:type_name -> google.fhir.stu3.proto.Reference
	204,  // 259: google.fhir.stu3.proto.DiagnosticreportGenetics.status:type_name -> google.fhir.stu3.proto.DiagnosticReportStatusCode
	198,  // 260: google.fhir.stu3.proto.DiagnosticreportGenetics.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 261: google.fhir.stu3.proto.DiagnosticreportGenetics.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 262: google.fhir.stu3.proto.DiagnosticreportGenetics.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 263: google.fhir.stu3.proto.DiagnosticreportGenetics.context:type_name -> google.fhir.stu3.proto.Reference
	84,   // 264: google.fhir.stu3.proto.DiagnosticreportGenetics.effective:type_name -> google.fhir.stu3.proto.DiagnosticreportGenetics.Effective
	199,  // 265: google.fhir.stu3.proto.DiagnosticreportGenetics.issued:type_name -> google.fhir.stu3.proto.Instant
	85,   // 266: google.fhir.stu3.proto.DiagnosticreportGenetics.performer:type_name -> google.fhir.stu3.proto.DiagnosticreportGenetics.Performer
	196,  // 267: google.fhir.stu3.proto.DiagnosticreportGenetics.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 268: google.fhir.stu3.proto.DiagnosticreportGenetics.result:type_name -> google.fhir.stu3.proto.Reference
	196,  // 269: google.fhir.stu3.proto.DiagnosticreportGenetics.imaging_study:type_name -> google.fhir.stu3.proto.Reference
	86,   // 270: google.fhir.stu3.proto.DiagnosticreportGenetics.image:type_name -> google.fhir.stu3.proto.DiagnosticreportGenetics.Image
	200,  // 271: google.fhir.stu3.proto.DiagnosticreportGenetics.conclusion:type_name -> google.fhir.stu3.proto.String
	205,  // 272: google.fhir.stu3.proto.DiagnosticreportGenetics.presented_form:type_name -> google.fhir.stu3.proto.Attachment
	196,  // 273: google.fhir.stu3.proto.DiagnosticreportGenetics.assessed_condition:type_name -> google.fhir.stu3.proto.Reference
	196,  // 274: google.fhir.stu3.proto.DiagnosticreportGenetics.family_member_history:type_name -> google.fhir.stu3.proto.Reference
	206,  // 275: google.fhir.stu3.proto.DiagnosticreportGenetics.analysis:type_name -> google.fhir.stu3.proto.DiagnosticReportAnalysis
	200,  // 276: google.fhir.stu3.proto.ElementdefinitionDe.id:type_name -> google.fhir.stu3.proto.String
	194,  // 277: google.fhir.stu3.proto.ElementdefinitionDe.extension:type_name -> google.fhir.stu3.proto.Extension
	200,  // 278: google.fhir.stu3.proto.ElementdefinitionDe.path:type_name -> google.fhir.stu3.proto.String
	200,  // 279: google.fhir.stu3.proto.ElementdefinitionDe.slice_name:type_name -> google.fhir.stu3.proto.String
	200,  // 280: google.fhir.stu3.proto.ElementdefinitionDe.label:type_name -> google.fhir.stu3.proto.String
	207,  // 281: google.fhir.stu3.proto.ElementdefinitionDe.code:type_name -> google.fhir.stu3.proto.Coding
	208,  // 282: google.fhir.stu3.proto.ElementdefinitionDe.definition:type_name -> google.fhir.stu3.proto.Markdown
	208,  // 283: google.fhir.stu3.proto.ElementdefinitionDe.comment:type_name -> google.fhir.stu3.proto.Markdown
	208,  // 284: google.fhir.stu3.proto.ElementdefinitionDe.requirements:type_name -> google.fhir.stu3.proto.Markdown
	200,  // 285: google.fhir.stu3.proto.ElementdefinitionDe.alias:type_name -> google.fhir.stu3.proto.String
	209,  // 286: google.fhir.stu3.proto.ElementdefinitionDe.min:type_name -> google.fhir.stu3.proto.UnsignedInt
	200,  // 287: google.fhir.stu3.proto.ElementdefinitionDe.max:type_name -> google.fhir.stu3.proto.String
	87,   // 288: google.fhir.stu3.proto.ElementdefinitionDe.base:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.Base
	88,   // 289: google.fhir.stu3.proto.ElementdefinitionDe.type:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.TypeRef
	89,   // 290: google.fhir.stu3.proto.ElementdefinitionDe.default_value:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue
	208,  // 291: google.fhir.stu3.proto.ElementdefinitionDe.meaning_when_missing:type_name -> google.fhir.stu3.proto.Markdown
	200,  // 292: google.fhir.stu3.proto.ElementdefinitionDe.order_meaning:type_name -> google.fhir.stu3.proto.String
	90,   // 293: google.fhir.stu3.proto.ElementdefinitionDe.example:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.Example
	91,   // 294: google.fhir.stu3.proto.ElementdefinitionDe.min_value:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.MinValue
	92,   // 295: google.fhir.stu3.proto.ElementdefinitionDe.max_value:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.MaxValue
	210,  // 296: google.fhir.stu3.proto.ElementdefinitionDe.max_length:type_name -> google.fhir.stu3.proto.Integer
	188,  // 297: google.fhir.stu3.proto.ElementdefinitionDe.condition:type_name -> google.fhir.stu3.proto.Id
	93,   // 298: google.fhir.stu3.proto.ElementdefinitionDe.constraint:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.Constraint
	211,  // 299: google.fhir.stu3.proto.ElementdefinitionDe.must_support:type_name -> google.fhir.stu3.proto.Boolean
	94,   // 300: google.fhir.stu3.proto.ElementdefinitionDe.binding:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding
	95,   // 301: google.fhir.stu3.proto.ElementdefinitionDe.mapping:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.Mapping
	200,  // 302: google.fhir.stu3.proto.ElementdefinitionDe.question:type_name -> google.fhir.stu3.proto.String
	212,  // 303: google.fhir.stu3.proto.ElementdefinitionDe.allowed_units:type_name -> google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value
	188,  // 304: google.fhir.stu3.proto.FamilymemberhistoryGenetic.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 305: google.fhir.stu3.proto.FamilymemberhistoryGenetic.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 306: google.fhir.stu3.proto.FamilymemberhistoryGenetic.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 307: google.fhir.stu3.proto.FamilymemberhistoryGenetic.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 308: google.fhir.stu3.proto.FamilymemberhistoryGenetic.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 309: google.fhir.stu3.proto.FamilymemberhistoryGenetic.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 310: google.fhir.stu3.proto.FamilymemberhistoryGenetic.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 311: google.fhir.stu3.proto.FamilymemberhistoryGenetic.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 312: google.fhir.stu3.proto.FamilymemberhistoryGenetic.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 313: google.fhir.stu3.proto.FamilymemberhistoryGenetic.definition:type_name -> google.fhir.stu3.proto.Reference
	213,  // 314: google.fhir.stu3.proto.FamilymemberhistoryGenetic.status:type_name -> google.fhir.stu3.proto.FamilyHistoryStatusCode
	211,  // 315: google.fhir.stu3.proto.FamilymemberhistoryGenetic.not_done:type_name -> google.fhir.stu3.proto.Boolean
	198,  // 316: google.fhir.stu3.proto.FamilymemberhistoryGenetic.not_done_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 317: google.fhir.stu3.proto.FamilymemberhistoryGenetic.patient:type_name -> google.fhir.stu3.proto.Reference
	202,  // 318: google.fhir.stu3.proto.FamilymemberhistoryGenetic.date:type_name -> google.fhir.stu3.proto.DateTime
	200,  // 319: google.fhir.stu3.proto.FamilymemberhistoryGenetic.name:type_name -> google.fhir.stu3.proto.String
	198,  // 320: google.fhir.stu3.proto.FamilymemberhistoryGenetic.relationship:type_name -> google.fhir.stu3.proto.CodeableConcept
	214,  // 321: google.fhir.stu3.proto.FamilymemberhistoryGenetic.gender:type_name -> google.fhir.stu3.proto.AdministrativeGenderCode
	98,   // 322: google.fhir.stu3.proto.FamilymemberhistoryGenetic.born:type_name -> google.fhir.stu3.proto.FamilymemberhistoryGenetic.Born
	99,   // 323: google.fhir.stu3.proto.FamilymemberhistoryGenetic.age:type_name -> google.fhir.stu3.proto.FamilymemberhistoryGenetic.AgeType
	211,  // 324: google.fhir.stu3.proto.FamilymemberhistoryGenetic.estimated_age:type_name -> google.fhir.stu3.proto.Boolean
	100,  // 325: google.fhir.stu3.proto.FamilymemberhistoryGenetic.deceased:type_name -> google.fhir.stu3.proto.FamilymemberhistoryGenetic.Deceased
	198,  // 326: google.fhir.stu3.proto.FamilymemberhistoryGenetic.reason_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 327: google.fhir.stu3.proto.FamilymemberhistoryGenetic.reason_reference:type_name -> google.fhir.stu3.proto.Reference
	215,  // 328: google.fhir.stu3.proto.FamilymemberhistoryGenetic.note:type_name -> google.fhir.stu3.proto.Annotation
	101,  // 329: google.fhir.stu3.proto.FamilymemberhistoryGenetic.condition:type_name -> google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition
	216,  // 330: google.fhir.stu3.proto.FamilymemberhistoryGenetic.parent:type_name -> google.fhir.stu3.proto.FamilyMemberHistoryParent
	217,  // 331: google.fhir.stu3.proto.FamilymemberhistoryGenetic.sibling:type_name -> google.fhir.stu3.proto.FamilyMemberHistorySibling
	196,  // 332: google.fhir.stu3.proto.FamilymemberhistoryGenetic.observation:type_name -> google.fhir.stu3.proto.Reference
	188,  // 333: google.fhir.stu3.proto.HdlCholesterol.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 334: google.fhir.stu3.proto.HdlCholesterol.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 335: google.fhir.stu3.proto.HdlCholesterol.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 336: google.fhir.stu3.proto.HdlCholesterol.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 337: google.fhir.stu3.proto.HdlCholesterol.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 338: google.fhir.stu3.proto.HdlCholesterol.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 339: google.fhir.stu3.proto.HdlCholesterol.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 340: google.fhir.stu3.proto.HdlCholesterol.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 341: google.fhir.stu3.proto.HdlCholesterol.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 342: google.fhir.stu3.proto.HdlCholesterol.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 343: google.fhir.stu3.proto.HdlCholesterol.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 344: google.fhir.stu3.proto.HdlCholesterol.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 345: google.fhir.stu3.proto.HdlCholesterol.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 346: google.fhir.stu3.proto.HdlCholesterol.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 347: google.fhir.stu3.proto.HdlCholesterol.context:type_name -> google.fhir.stu3.proto.Reference
	103,  // 348: google.fhir.stu3.proto.HdlCholesterol.effective:type_name -> google.fhir.stu3.proto.HdlCholesterol.Effective
	199,  // 349: google.fhir.stu3.proto.HdlCholesterol.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 350: google.fhir.stu3.proto.HdlCholesterol.performer:type_name -> google.fhir.stu3.proto.Reference
	104,  // 351: google.fhir.stu3.proto.HdlCholesterol.value:type_name -> google.fhir.stu3.proto.HdlCholesterol.Value
	198,  // 352: google.fhir.stu3.proto.HdlCholesterol.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 353: google.fhir.stu3.proto.HdlCholesterol.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 354: google.fhir.stu3.proto.HdlCholesterol.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 355: google.fhir.stu3.proto.HdlCholesterol.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 356: google.fhir.stu3.proto.HdlCholesterol.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 357: google.fhir.stu3.proto.HdlCholesterol.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 358: google.fhir.stu3.proto.HdlCholesterol.device:type_name -> google.fhir.stu3.proto.Reference
	105,  // 359: google.fhir.stu3.proto.HdlCholesterol.reference_range:type_name -> google.fhir.stu3.proto.HdlCholesterol.ReferenceRange
	106,  // 360: google.fhir.stu3.proto.HdlCholesterol.component:type_name -> google.fhir.stu3.proto.HdlCholesterol.Component
	188,  // 361: google.fhir.stu3.proto.Headcircum.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 362: google.fhir.stu3.proto.Headcircum.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 363: google.fhir.stu3.proto.Headcircum.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 364: google.fhir.stu3.proto.Headcircum.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 365: google.fhir.stu3.proto.Headcircum.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 366: google.fhir.stu3.proto.Headcircum.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 367: google.fhir.stu3.proto.Headcircum.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 368: google.fhir.stu3.proto.Headcircum.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 369: google.fhir.stu3.proto.Headcircum.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 370: google.fhir.stu3.proto.Headcircum.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 371: google.fhir.stu3.proto.Headcircum.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 372: google.fhir.stu3.proto.Headcircum.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	108,  // 373: google.fhir.stu3.proto.Headcircum.code:type_name -> google.fhir.stu3.proto.Headcircum.CodeableConceptForCode
	196,  // 374: google.fhir.stu3.proto.Headcircum.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 375: google.fhir.stu3.proto.Headcircum.context:type_name -> google.fhir.stu3.proto.Reference
	109,  // 376: google.fhir.stu3.proto.Headcircum.effective:type_name -> google.fhir.stu3.proto.Headcircum.Effective
	199,  // 377: google.fhir.stu3.proto.Headcircum.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 378: google.fhir.stu3.proto.Headcircum.performer:type_name -> google.fhir.stu3.proto.Reference
	110,  // 379: google.fhir.stu3.proto.Headcircum.value:type_name -> google.fhir.stu3.proto.Headcircum.Value
	198,  // 380: google.fhir.stu3.proto.Headcircum.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 381: google.fhir.stu3.proto.Headcircum.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 382: google.fhir.stu3.proto.Headcircum.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 383: google.fhir.stu3.proto.Headcircum.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 384: google.fhir.stu3.proto.Headcircum.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 385: google.fhir.stu3.proto.Headcircum.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 386: google.fhir.stu3.proto.Headcircum.device:type_name -> google.fhir.stu3.proto.Reference
	111,  // 387: google.fhir.stu3.proto.Headcircum.reference_range:type_name -> google.fhir.stu3.proto.Headcircum.ReferenceRange
	112,  // 388: google.fhir.stu3.proto.Headcircum.related:type_name -> google.fhir.stu3.proto.Headcircum.Related
	113,  // 389: google.fhir.stu3.proto.Headcircum.component:type_name -> google.fhir.stu3.proto.Headcircum.Component
	188,  // 390: google.fhir.stu3.proto.Heartrate.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 391: google.fhir.stu3.proto.Heartrate.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 392: google.fhir.stu3.proto.Heartrate.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 393: google.fhir.stu3.proto.Heartrate.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 394: google.fhir.stu3.proto.Heartrate.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 395: google.fhir.stu3.proto.Heartrate.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 396: google.fhir.stu3.proto.Heartrate.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 397: google.fhir.stu3.proto.Heartrate.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 398: google.fhir.stu3.proto.Heartrate.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 399: google.fhir.stu3.proto.Heartrate.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 400: google.fhir.stu3.proto.Heartrate.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 401: google.fhir.stu3.proto.Heartrate.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	115,  // 402: google.fhir.stu3.proto.Heartrate.code:type_name -> google.fhir.stu3.proto.Heartrate.CodeableConceptForCode
	196,  // 403: google.fhir.stu3.proto.Heartrate.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 404: google.fhir.stu3.proto.Heartrate.context:type_name -> google.fhir.stu3.proto.Reference
	116,  // 405: google.fhir.stu3.proto.Heartrate.effective:type_name -> google.fhir.stu3.proto.Heartrate.Effective
	199,  // 406: google.fhir.stu3.proto.Heartrate.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 407: google.fhir.stu3.proto.Heartrate.performer:type_name -> google.fhir.stu3.proto.Reference
	117,  // 408: google.fhir.stu3.proto.Heartrate.value:type_name -> google.fhir.stu3.proto.Heartrate.Value
	198,  // 409: google.fhir.stu3.proto.Heartrate.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 410: google.fhir.stu3.proto.Heartrate.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 411: google.fhir.stu3.proto.Heartrate.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 412: google.fhir.stu3.proto.Heartrate.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 413: google.fhir.stu3.proto.Heartrate.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 414: google.fhir.stu3.proto.Heartrate.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 415: google.fhir.stu3.proto.Heartrate.device:type_name -> google.fhir.stu3.proto.Reference
	118,  // 416: google.fhir.stu3.proto.Heartrate.reference_range:type_name -> google.fhir.stu3.proto.Heartrate.ReferenceRange
	119,  // 417: google.fhir.stu3.proto.Heartrate.related:type_name -> google.fhir.stu3.proto.Heartrate.Related
	120,  // 418: google.fhir.stu3.proto.Heartrate.component:type_name -> google.fhir.stu3.proto.Heartrate.Component
	188,  // 419: google.fhir.stu3.proto.Hlaresult.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 420: google.fhir.stu3.proto.Hlaresult.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 421: google.fhir.stu3.proto.Hlaresult.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 422: google.fhir.stu3.proto.Hlaresult.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 423: google.fhir.stu3.proto.Hlaresult.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 424: google.fhir.stu3.proto.Hlaresult.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 425: google.fhir.stu3.proto.Hlaresult.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 426: google.fhir.stu3.proto.Hlaresult.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 427: google.fhir.stu3.proto.Hlaresult.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 428: google.fhir.stu3.proto.Hlaresult.based_on:type_name -> google.fhir.stu3.proto.Reference
	204,  // 429: google.fhir.stu3.proto.Hlaresult.status:type_name -> google.fhir.stu3.proto.DiagnosticReportStatusCode
	198,  // 430: google.fhir.stu3.proto.Hlaresult.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 431: google.fhir.stu3.proto.Hlaresult.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 432: google.fhir.stu3.proto.Hlaresult.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 433: google.fhir.stu3.proto.Hlaresult.context:type_name -> google.fhir.stu3.proto.Reference
	122,  // 434: google.fhir.stu3.proto.Hlaresult.effective:type_name -> google.fhir.stu3.proto.Hlaresult.Effective
	199,  // 435: google.fhir.stu3.proto.Hlaresult.issued:type_name -> google.fhir.stu3.proto.Instant
	123,  // 436: google.fhir.stu3.proto.Hlaresult.performer:type_name -> google.fhir.stu3.proto.Hlaresult.Performer
	196,  // 437: google.fhir.stu3.proto.Hlaresult.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 438: google.fhir.stu3.proto.Hlaresult.result:type_name -> google.fhir.stu3.proto.Reference
	196,  // 439: google.fhir.stu3.proto.Hlaresult.imaging_study:type_name -> google.fhir.stu3.proto.Reference
	124,  // 440: google.fhir.stu3.proto.Hlaresult.image:type_name -> google.fhir.stu3.proto.Hlaresult.Image
	200,  // 441: google.fhir.stu3.proto.Hlaresult.conclusion:type_name -> google.fhir.stu3.proto.String
	198,  // 442: google.fhir.stu3.proto.Hlaresult.coded_diagnosis:type_name -> google.fhir.stu3.proto.CodeableConcept
	205,  // 443: google.fhir.stu3.proto.Hlaresult.presented_form:type_name -> google.fhir.stu3.proto.Attachment
	198,  // 444: google.fhir.stu3.proto.Hlaresult.allele_database:type_name -> google.fhir.stu3.proto.CodeableConcept
	218,  // 445: google.fhir.stu3.proto.Hlaresult.glstring:type_name -> google.fhir.stu3.proto.DiagnosticReportGlstring
	219,  // 446: google.fhir.stu3.proto.Hlaresult.haploid:type_name -> google.fhir.stu3.proto.DiagnosticReportHaploid
	198,  // 447: google.fhir.stu3.proto.Hlaresult.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	188,  // 448: google.fhir.stu3.proto.LdlCholesterol.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 449: google.fhir.stu3.proto.LdlCholesterol.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 450: google.fhir.stu3.proto.LdlCholesterol.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 451: google.fhir.stu3.proto.LdlCholesterol.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 452: google.fhir.stu3.proto.LdlCholesterol.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 453: google.fhir.stu3.proto.LdlCholesterol.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 454: google.fhir.stu3.proto.LdlCholesterol.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 455: google.fhir.stu3.proto.LdlCholesterol.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 456: google.fhir.stu3.proto.LdlCholesterol.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 457: google.fhir.stu3.proto.LdlCholesterol.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 458: google.fhir.stu3.proto.LdlCholesterol.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 459: google.fhir.stu3.proto.LdlCholesterol.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 460: google.fhir.stu3.proto.LdlCholesterol.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 461: google.fhir.stu3.proto.LdlCholesterol.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 462: google.fhir.stu3.proto.LdlCholesterol.context:type_name -> google.fhir.stu3.proto.Reference
	125,  // 463: google.fhir.stu3.proto.LdlCholesterol.effective:type_name -> google.fhir.stu3.proto.LdlCholesterol.Effective
	199,  // 464: google.fhir.stu3.proto.LdlCholesterol.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 465: google.fhir.stu3.proto.LdlCholesterol.performer:type_name -> google.fhir.stu3.proto.Reference
	126,  // 466: google.fhir.stu3.proto.LdlCholesterol.value:type_name -> google.fhir.stu3.proto.LdlCholesterol.Value
	198,  // 467: google.fhir.stu3.proto.LdlCholesterol.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 468: google.fhir.stu3.proto.LdlCholesterol.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 469: google.fhir.stu3.proto.LdlCholesterol.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 470: google.fhir.stu3.proto.LdlCholesterol.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 471: google.fhir.stu3.proto.LdlCholesterol.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 472: google.fhir.stu3.proto.LdlCholesterol.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 473: google.fhir.stu3.proto.LdlCholesterol.device:type_name -> google.fhir.stu3.proto.Reference
	127,  // 474: google.fhir.stu3.proto.LdlCholesterol.reference_range:type_name -> google.fhir.stu3.proto.LdlCholesterol.ReferenceRange
	128,  // 475: google.fhir.stu3.proto.LdlCholesterol.component:type_name -> google.fhir.stu3.proto.LdlCholesterol.Component
	188,  // 476: google.fhir.stu3.proto.LipidProfile.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 477: google.fhir.stu3.proto.LipidProfile.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 478: google.fhir.stu3.proto.LipidProfile.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 479: google.fhir.stu3.proto.LipidProfile.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 480: google.fhir.stu3.proto.LipidProfile.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 481: google.fhir.stu3.proto.LipidProfile.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 482: google.fhir.stu3.proto.LipidProfile.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 483: google.fhir.stu3.proto.LipidProfile.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 484: google.fhir.stu3.proto.LipidProfile.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 485: google.fhir.stu3.proto.LipidProfile.based_on:type_name -> google.fhir.stu3.proto.Reference
	204,  // 486: google.fhir.stu3.proto.LipidProfile.status:type_name -> google.fhir.stu3.proto.DiagnosticReportStatusCode
	198,  // 487: google.fhir.stu3.proto.LipidProfile.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 488: google.fhir.stu3.proto.LipidProfile.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 489: google.fhir.stu3.proto.LipidProfile.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 490: google.fhir.stu3.proto.LipidProfile.context:type_name -> google.fhir.stu3.proto.Reference
	130,  // 491: google.fhir.stu3.proto.LipidProfile.effective:type_name -> google.fhir.stu3.proto.LipidProfile.Effective
	199,  // 492: google.fhir.stu3.proto.LipidProfile.issued:type_name -> google.fhir.stu3.proto.Instant
	131,  // 493: google.fhir.stu3.proto.LipidProfile.performer:type_name -> google.fhir.stu3.proto.LipidProfile.Performer
	196,  // 494: google.fhir.stu3.proto.LipidProfile.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 495: google.fhir.stu3.proto.LipidProfile.result:type_name -> google.fhir.stu3.proto.Reference
	196,  // 496: google.fhir.stu3.proto.LipidProfile.imaging_study:type_name -> google.fhir.stu3.proto.Reference
	132,  // 497: google.fhir.stu3.proto.LipidProfile.image:type_name -> google.fhir.stu3.proto.LipidProfile.Image
	200,  // 498: google.fhir.stu3.proto.LipidProfile.conclusion:type_name -> google.fhir.stu3.proto.String
	205,  // 499: google.fhir.stu3.proto.LipidProfile.presented_form:type_name -> google.fhir.stu3.proto.Attachment
	188,  // 500: google.fhir.stu3.proto.MetadataResource.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 501: google.fhir.stu3.proto.MetadataResource.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 502: google.fhir.stu3.proto.MetadataResource.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 503: google.fhir.stu3.proto.MetadataResource.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 504: google.fhir.stu3.proto.MetadataResource.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 505: google.fhir.stu3.proto.MetadataResource.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 506: google.fhir.stu3.proto.MetadataResource.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 507: google.fhir.stu3.proto.MetadataResource.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	190,  // 508: google.fhir.stu3.proto.MetadataResource.url:type_name -> google.fhir.stu3.proto.Uri
	200,  // 509: google.fhir.stu3.proto.MetadataResource.version:type_name -> google.fhir.stu3.proto.String
	200,  // 510: google.fhir.stu3.proto.MetadataResource.name:type_name -> google.fhir.stu3.proto.String
	200,  // 511: google.fhir.stu3.proto.MetadataResource.title:type_name -> google.fhir.stu3.proto.String
	220,  // 512: google.fhir.stu3.proto.MetadataResource.status:type_name -> google.fhir.stu3.proto.PublicationStatusCode
	211,  // 513: google.fhir.stu3.proto.MetadataResource.experimental:type_name -> google.fhir.stu3.proto.Boolean
	202,  // 514: google.fhir.stu3.proto.MetadataResource.date:type_name -> google.fhir.stu3.proto.DateTime
	200,  // 515: google.fhir.stu3.proto.MetadataResource.publisher:type_name -> google.fhir.stu3.proto.String
	221,  // 516: google.fhir.stu3.proto.MetadataResource.contact:type_name -> google.fhir.stu3.proto.ContactDetail
	222,  // 517: google.fhir.stu3.proto.MetadataResource.use_context:type_name -> google.fhir.stu3.proto.UsageContext
	198,  // 518: google.fhir.stu3.proto.MetadataResource.jurisdiction:type_name -> google.fhir.stu3.proto.CodeableConcept
	208,  // 519: google.fhir.stu3.proto.MetadataResource.description:type_name -> google.fhir.stu3.proto.Markdown
	188,  // 520: google.fhir.stu3.proto.ObservationGenetics.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 521: google.fhir.stu3.proto.ObservationGenetics.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 522: google.fhir.stu3.proto.ObservationGenetics.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 523: google.fhir.stu3.proto.ObservationGenetics.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 524: google.fhir.stu3.proto.ObservationGenetics.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 525: google.fhir.stu3.proto.ObservationGenetics.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 526: google.fhir.stu3.proto.ObservationGenetics.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 527: google.fhir.stu3.proto.ObservationGenetics.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 528: google.fhir.stu3.proto.ObservationGenetics.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 529: google.fhir.stu3.proto.ObservationGenetics.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 530: google.fhir.stu3.proto.ObservationGenetics.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 531: google.fhir.stu3.proto.ObservationGenetics.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 532: google.fhir.stu3.proto.ObservationGenetics.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 533: google.fhir.stu3.proto.ObservationGenetics.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 534: google.fhir.stu3.proto.ObservationGenetics.context:type_name -> google.fhir.stu3.proto.Reference
	133,  // 535: google.fhir.stu3.proto.ObservationGenetics.effective:type_name -> google.fhir.stu3.proto.ObservationGenetics.Effective
	199,  // 536: google.fhir.stu3.proto.ObservationGenetics.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 537: google.fhir.stu3.proto.ObservationGenetics.performer:type_name -> google.fhir.stu3.proto.Reference
	134,  // 538: google.fhir.stu3.proto.ObservationGenetics.value:type_name -> google.fhir.stu3.proto.ObservationGenetics.Value
	198,  // 539: google.fhir.stu3.proto.ObservationGenetics.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 540: google.fhir.stu3.proto.ObservationGenetics.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 541: google.fhir.stu3.proto.ObservationGenetics.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 542: google.fhir.stu3.proto.ObservationGenetics.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 543: google.fhir.stu3.proto.ObservationGenetics.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 544: google.fhir.stu3.proto.ObservationGenetics.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 545: google.fhir.stu3.proto.ObservationGenetics.device:type_name -> google.fhir.stu3.proto.Reference
	135,  // 546: google.fhir.stu3.proto.ObservationGenetics.reference_range:type_name -> google.fhir.stu3.proto.ObservationGenetics.ReferenceRange
	136,  // 547: google.fhir.stu3.proto.ObservationGenetics.related:type_name -> google.fhir.stu3.proto.ObservationGenetics.Related
	137,  // 548: google.fhir.stu3.proto.ObservationGenetics.component:type_name -> google.fhir.stu3.proto.ObservationGenetics.Component
	198,  // 549: google.fhir.stu3.proto.ObservationGenetics.dna_sequence_variant_name:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 550: google.fhir.stu3.proto.ObservationGenetics.dna_variant_id:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 551: google.fhir.stu3.proto.ObservationGenetics.dna_sequence_variant_type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 552: google.fhir.stu3.proto.ObservationGenetics.amino_acid_change_name:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 553: google.fhir.stu3.proto.ObservationGenetics.amino_acid_change_type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 554: google.fhir.stu3.proto.ObservationGenetics.gene_symbol:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 555: google.fhir.stu3.proto.ObservationGenetics.dna_region_name:type_name -> google.fhir.stu3.proto.String
	198,  // 556: google.fhir.stu3.proto.ObservationGenetics.allele_name:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 557: google.fhir.stu3.proto.ObservationGenetics.allelic_state:type_name -> google.fhir.stu3.proto.CodeableConcept
	223,  // 558: google.fhir.stu3.proto.ObservationGenetics.allelic_frequency:type_name -> google.fhir.stu3.proto.Decimal
	198,  // 559: google.fhir.stu3.proto.ObservationGenetics.copy_number_event:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 560: google.fhir.stu3.proto.ObservationGenetics.genomic_source_class:type_name -> google.fhir.stu3.proto.CodeableConcept
	190,  // 561: google.fhir.stu3.proto.ObservationGenetics.phase_set:type_name -> google.fhir.stu3.proto.Uri
	196,  // 562: google.fhir.stu3.proto.ObservationGenetics.sequence:type_name -> google.fhir.stu3.proto.Reference
	196,  // 563: google.fhir.stu3.proto.ObservationGenetics.interpretation_slice:type_name -> google.fhir.stu3.proto.Reference
	188,  // 564: google.fhir.stu3.proto.Oxygensat.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 565: google.fhir.stu3.proto.Oxygensat.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 566: google.fhir.stu3.proto.Oxygensat.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 567: google.fhir.stu3.proto.Oxygensat.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 568: google.fhir.stu3.proto.Oxygensat.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 569: google.fhir.stu3.proto.Oxygensat.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 570: google.fhir.stu3.proto.Oxygensat.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 571: google.fhir.stu3.proto.Oxygensat.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 572: google.fhir.stu3.proto.Oxygensat.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 573: google.fhir.stu3.proto.Oxygensat.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 574: google.fhir.stu3.proto.Oxygensat.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 575: google.fhir.stu3.proto.Oxygensat.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	139,  // 576: google.fhir.stu3.proto.Oxygensat.code:type_name -> google.fhir.stu3.proto.Oxygensat.CodeableConceptForCode
	196,  // 577: google.fhir.stu3.proto.Oxygensat.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 578: google.fhir.stu3.proto.Oxygensat.context:type_name -> google.fhir.stu3.proto.Reference
	140,  // 579: google.fhir.stu3.proto.Oxygensat.effective:type_name -> google.fhir.stu3.proto.Oxygensat.Effective
	199,  // 580: google.fhir.stu3.proto.Oxygensat.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 581: google.fhir.stu3.proto.Oxygensat.performer:type_name -> google.fhir.stu3.proto.Reference
	141,  // 582: google.fhir.stu3.proto.Oxygensat.value:type_name -> google.fhir.stu3.proto.Oxygensat.Value
	198,  // 583: google.fhir.stu3.proto.Oxygensat.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 584: google.fhir.stu3.proto.Oxygensat.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 585: google.fhir.stu3.proto.Oxygensat.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 586: google.fhir.stu3.proto.Oxygensat.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 587: google.fhir.stu3.proto.Oxygensat.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 588: google.fhir.stu3.proto.Oxygensat.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 589: google.fhir.stu3.proto.Oxygensat.device:type_name -> google.fhir.stu3.proto.Reference
	142,  // 590: google.fhir.stu3.proto.Oxygensat.reference_range:type_name -> google.fhir.stu3.proto.Oxygensat.ReferenceRange
	143,  // 591: google.fhir.stu3.proto.Oxygensat.related:type_name -> google.fhir.stu3.proto.Oxygensat.Related
	144,  // 592: google.fhir.stu3.proto.Oxygensat.component:type_name -> google.fhir.stu3.proto.Oxygensat.Component
	188,  // 593: google.fhir.stu3.proto.ProcedurerequestGenetics.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 594: google.fhir.stu3.proto.ProcedurerequestGenetics.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 595: google.fhir.stu3.proto.ProcedurerequestGenetics.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 596: google.fhir.stu3.proto.ProcedurerequestGenetics.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 597: google.fhir.stu3.proto.ProcedurerequestGenetics.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 598: google.fhir.stu3.proto.ProcedurerequestGenetics.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 599: google.fhir.stu3.proto.ProcedurerequestGenetics.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 600: google.fhir.stu3.proto.ProcedurerequestGenetics.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 601: google.fhir.stu3.proto.ProcedurerequestGenetics.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 602: google.fhir.stu3.proto.ProcedurerequestGenetics.definition:type_name -> google.fhir.stu3.proto.Reference
	196,  // 603: google.fhir.stu3.proto.ProcedurerequestGenetics.based_on:type_name -> google.fhir.stu3.proto.Reference
	196,  // 604: google.fhir.stu3.proto.ProcedurerequestGenetics.replaces:type_name -> google.fhir.stu3.proto.Reference
	195,  // 605: google.fhir.stu3.proto.ProcedurerequestGenetics.requisition:type_name -> google.fhir.stu3.proto.Identifier
	224,  // 606: google.fhir.stu3.proto.ProcedurerequestGenetics.status:type_name -> google.fhir.stu3.proto.RequestStatusCode
	225,  // 607: google.fhir.stu3.proto.ProcedurerequestGenetics.intent:type_name -> google.fhir.stu3.proto.RequestIntentCode
	226,  // 608: google.fhir.stu3.proto.ProcedurerequestGenetics.priority:type_name -> google.fhir.stu3.proto.RequestPriorityCode
	211,  // 609: google.fhir.stu3.proto.ProcedurerequestGenetics.do_not_perform:type_name -> google.fhir.stu3.proto.Boolean
	198,  // 610: google.fhir.stu3.proto.ProcedurerequestGenetics.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 611: google.fhir.stu3.proto.ProcedurerequestGenetics.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 612: google.fhir.stu3.proto.ProcedurerequestGenetics.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 613: google.fhir.stu3.proto.ProcedurerequestGenetics.context:type_name -> google.fhir.stu3.proto.Reference
	146,  // 614: google.fhir.stu3.proto.ProcedurerequestGenetics.occurrence:type_name -> google.fhir.stu3.proto.ProcedurerequestGenetics.Occurrence
	147,  // 615: google.fhir.stu3.proto.ProcedurerequestGenetics.as_needed:type_name -> google.fhir.stu3.proto.ProcedurerequestGenetics.AsNeeded
	202,  // 616: google.fhir.stu3.proto.ProcedurerequestGenetics.authored_on:type_name -> google.fhir.stu3.proto.DateTime
	148,  // 617: google.fhir.stu3.proto.ProcedurerequestGenetics.requester:type_name -> google.fhir.stu3.proto.ProcedurerequestGenetics.Requester
	198,  // 618: google.fhir.stu3.proto.ProcedurerequestGenetics.performer_type:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 619: google.fhir.stu3.proto.ProcedurerequestGenetics.performer:type_name -> google.fhir.stu3.proto.Reference
	198,  // 620: google.fhir.stu3.proto.ProcedurerequestGenetics.reason_code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 621: google.fhir.stu3.proto.ProcedurerequestGenetics.reason_reference:type_name -> google.fhir.stu3.proto.Reference
	196,  // 622: google.fhir.stu3.proto.ProcedurerequestGenetics.supporting_info:type_name -> google.fhir.stu3.proto.Reference
	196,  // 623: google.fhir.stu3.proto.ProcedurerequestGenetics.specimen:type_name -> google.fhir.stu3.proto.Reference
	198,  // 624: google.fhir.stu3.proto.ProcedurerequestGenetics.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	215,  // 625: google.fhir.stu3.proto.ProcedurerequestGenetics.note:type_name -> google.fhir.stu3.proto.Annotation
	196,  // 626: google.fhir.stu3.proto.ProcedurerequestGenetics.relevant_history:type_name -> google.fhir.stu3.proto.Reference
	227,  // 627: google.fhir.stu3.proto.ProcedurerequestGenetics.item:type_name -> google.fhir.stu3.proto.DiagnosticReportItem
	188,  // 628: google.fhir.stu3.proto.Resprate.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 629: google.fhir.stu3.proto.Resprate.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 630: google.fhir.stu3.proto.Resprate.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 631: google.fhir.stu3.proto.Resprate.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 632: google.fhir.stu3.proto.Resprate.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 633: google.fhir.stu3.proto.Resprate.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 634: google.fhir.stu3.proto.Resprate.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 635: google.fhir.stu3.proto.Resprate.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 636: google.fhir.stu3.proto.Resprate.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 637: google.fhir.stu3.proto.Resprate.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 638: google.fhir.stu3.proto.Resprate.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 639: google.fhir.stu3.proto.Resprate.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	149,  // 640: google.fhir.stu3.proto.Resprate.code:type_name -> google.fhir.stu3.proto.Resprate.CodeableConceptForCode
	196,  // 641: google.fhir.stu3.proto.Resprate.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 642: google.fhir.stu3.proto.Resprate.context:type_name -> google.fhir.stu3.proto.Reference
	150,  // 643: google.fhir.stu3.proto.Resprate.effective:type_name -> google.fhir.stu3.proto.Resprate.Effective
	199,  // 644: google.fhir.stu3.proto.Resprate.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 645: google.fhir.stu3.proto.Resprate.performer:type_name -> google.fhir.stu3.proto.Reference
	151,  // 646: google.fhir.stu3.proto.Resprate.value:type_name -> google.fhir.stu3.proto.Resprate.Value
	198,  // 647: google.fhir.stu3.proto.Resprate.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 648: google.fhir.stu3.proto.Resprate.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 649: google.fhir.stu3.proto.Resprate.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 650: google.fhir.stu3.proto.Resprate.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 651: google.fhir.stu3.proto.Resprate.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 652: google.fhir.stu3.proto.Resprate.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 653: google.fhir.stu3.proto.Resprate.device:type_name -> google.fhir.stu3.proto.Reference
	152,  // 654: google.fhir.stu3.proto.Resprate.reference_range:type_name -> google.fhir.stu3.proto.Resprate.ReferenceRange
	153,  // 655: google.fhir.stu3.proto.Resprate.related:type_name -> google.fhir.stu3.proto.Resprate.Related
	154,  // 656: google.fhir.stu3.proto.Resprate.component:type_name -> google.fhir.stu3.proto.Resprate.Component
	188,  // 657: google.fhir.stu3.proto.Shareablecodesystem.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 658: google.fhir.stu3.proto.Shareablecodesystem.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 659: google.fhir.stu3.proto.Shareablecodesystem.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 660: google.fhir.stu3.proto.Shareablecodesystem.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 661: google.fhir.stu3.proto.Shareablecodesystem.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 662: google.fhir.stu3.proto.Shareablecodesystem.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 663: google.fhir.stu3.proto.Shareablecodesystem.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 664: google.fhir.stu3.proto.Shareablecodesystem.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	190,  // 665: google.fhir.stu3.proto.Shareablecodesystem.url:type_name -> google.fhir.stu3.proto.Uri
	195,  // 666: google.fhir.stu3.proto.Shareablecodesystem.identifier:type_name -> google.fhir.stu3.proto.Identifier
	200,  // 667: google.fhir.stu3.proto.Shareablecodesystem.version:type_name -> google.fhir.stu3.proto.String
	200,  // 668: google.fhir.stu3.proto.Shareablecodesystem.name:type_name -> google.fhir.stu3.proto.String
	200,  // 669: google.fhir.stu3.proto.Shareablecodesystem.title:type_name -> google.fhir.stu3.proto.String
	220,  // 670: google.fhir.stu3.proto.Shareablecodesystem.status:type_name -> google.fhir.stu3.proto.PublicationStatusCode
	211,  // 671: google.fhir.stu3.proto.Shareablecodesystem.experimental:type_name -> google.fhir.stu3.proto.Boolean
	202,  // 672: google.fhir.stu3.proto.Shareablecodesystem.date:type_name -> google.fhir.stu3.proto.DateTime
	200,  // 673: google.fhir.stu3.proto.Shareablecodesystem.publisher:type_name -> google.fhir.stu3.proto.String
	221,  // 674: google.fhir.stu3.proto.Shareablecodesystem.contact:type_name -> google.fhir.stu3.proto.ContactDetail
	208,  // 675: google.fhir.stu3.proto.Shareablecodesystem.description:type_name -> google.fhir.stu3.proto.Markdown
	222,  // 676: google.fhir.stu3.proto.Shareablecodesystem.use_context:type_name -> google.fhir.stu3.proto.UsageContext
	198,  // 677: google.fhir.stu3.proto.Shareablecodesystem.jurisdiction:type_name -> google.fhir.stu3.proto.CodeableConcept
	208,  // 678: google.fhir.stu3.proto.Shareablecodesystem.purpose:type_name -> google.fhir.stu3.proto.Markdown
	208,  // 679: google.fhir.stu3.proto.Shareablecodesystem.copyright:type_name -> google.fhir.stu3.proto.Markdown
	211,  // 680: google.fhir.stu3.proto.Shareablecodesystem.case_sensitive:type_name -> google.fhir.stu3.proto.Boolean
	190,  // 681: google.fhir.stu3.proto.Shareablecodesystem.value_set:type_name -> google.fhir.stu3.proto.Uri
	228,  // 682: google.fhir.stu3.proto.Shareablecodesystem.hierarchy_meaning:type_name -> google.fhir.stu3.proto.CodeSystemHierarchyMeaningCode
	211,  // 683: google.fhir.stu3.proto.Shareablecodesystem.compositional:type_name -> google.fhir.stu3.proto.Boolean
	211,  // 684: google.fhir.stu3.proto.Shareablecodesystem.version_needed:type_name -> google.fhir.stu3.proto.Boolean
	229,  // 685: google.fhir.stu3.proto.Shareablecodesystem.content:type_name -> google.fhir.stu3.proto.CodeSystemContentModeCode
	209,  // 686: google.fhir.stu3.proto.Shareablecodesystem.count:type_name -> google.fhir.stu3.proto.UnsignedInt
	156,  // 687: google.fhir.stu3.proto.Shareablecodesystem.filter:type_name -> google.fhir.stu3.proto.Shareablecodesystem.Filter
	157,  // 688: google.fhir.stu3.proto.Shareablecodesystem.property:type_name -> google.fhir.stu3.proto.Shareablecodesystem.Property
	158,  // 689: google.fhir.stu3.proto.Shareablecodesystem.concept:type_name -> google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition
	188,  // 690: google.fhir.stu3.proto.Shareablevalueset.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 691: google.fhir.stu3.proto.Shareablevalueset.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 692: google.fhir.stu3.proto.Shareablevalueset.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 693: google.fhir.stu3.proto.Shareablevalueset.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 694: google.fhir.stu3.proto.Shareablevalueset.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 695: google.fhir.stu3.proto.Shareablevalueset.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 696: google.fhir.stu3.proto.Shareablevalueset.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 697: google.fhir.stu3.proto.Shareablevalueset.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	190,  // 698: google.fhir.stu3.proto.Shareablevalueset.url:type_name -> google.fhir.stu3.proto.Uri
	195,  // 699: google.fhir.stu3.proto.Shareablevalueset.identifier:type_name -> google.fhir.stu3.proto.Identifier
	200,  // 700: google.fhir.stu3.proto.Shareablevalueset.version:type_name -> google.fhir.stu3.proto.String
	200,  // 701: google.fhir.stu3.proto.Shareablevalueset.name:type_name -> google.fhir.stu3.proto.String
	200,  // 702: google.fhir.stu3.proto.Shareablevalueset.title:type_name -> google.fhir.stu3.proto.String
	220,  // 703: google.fhir.stu3.proto.Shareablevalueset.status:type_name -> google.fhir.stu3.proto.PublicationStatusCode
	211,  // 704: google.fhir.stu3.proto.Shareablevalueset.experimental:type_name -> google.fhir.stu3.proto.Boolean
	202,  // 705: google.fhir.stu3.proto.Shareablevalueset.date:type_name -> google.fhir.stu3.proto.DateTime
	200,  // 706: google.fhir.stu3.proto.Shareablevalueset.publisher:type_name -> google.fhir.stu3.proto.String
	221,  // 707: google.fhir.stu3.proto.Shareablevalueset.contact:type_name -> google.fhir.stu3.proto.ContactDetail
	208,  // 708: google.fhir.stu3.proto.Shareablevalueset.description:type_name -> google.fhir.stu3.proto.Markdown
	222,  // 709: google.fhir.stu3.proto.Shareablevalueset.use_context:type_name -> google.fhir.stu3.proto.UsageContext
	198,  // 710: google.fhir.stu3.proto.Shareablevalueset.jurisdiction:type_name -> google.fhir.stu3.proto.CodeableConcept
	211,  // 711: google.fhir.stu3.proto.Shareablevalueset.immutable:type_name -> google.fhir.stu3.proto.Boolean
	208,  // 712: google.fhir.stu3.proto.Shareablevalueset.purpose:type_name -> google.fhir.stu3.proto.Markdown
	208,  // 713: google.fhir.stu3.proto.Shareablevalueset.copyright:type_name -> google.fhir.stu3.proto.Markdown
	211,  // 714: google.fhir.stu3.proto.Shareablevalueset.extensible:type_name -> google.fhir.stu3.proto.Boolean
	162,  // 715: google.fhir.stu3.proto.Shareablevalueset.compose:type_name -> google.fhir.stu3.proto.Shareablevalueset.Compose
	163,  // 716: google.fhir.stu3.proto.Shareablevalueset.expansion:type_name -> google.fhir.stu3.proto.Shareablevalueset.Expansion
	188,  // 717: google.fhir.stu3.proto.Triglyceride.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 718: google.fhir.stu3.proto.Triglyceride.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 719: google.fhir.stu3.proto.Triglyceride.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 720: google.fhir.stu3.proto.Triglyceride.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 721: google.fhir.stu3.proto.Triglyceride.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 722: google.fhir.stu3.proto.Triglyceride.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 723: google.fhir.stu3.proto.Triglyceride.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 724: google.fhir.stu3.proto.Triglyceride.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 725: google.fhir.stu3.proto.Triglyceride.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 726: google.fhir.stu3.proto.Triglyceride.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 727: google.fhir.stu3.proto.Triglyceride.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 728: google.fhir.stu3.proto.Triglyceride.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 729: google.fhir.stu3.proto.Triglyceride.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 730: google.fhir.stu3.proto.Triglyceride.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 731: google.fhir.stu3.proto.Triglyceride.context:type_name -> google.fhir.stu3.proto.Reference
	171,  // 732: google.fhir.stu3.proto.Triglyceride.effective:type_name -> google.fhir.stu3.proto.Triglyceride.Effective
	199,  // 733: google.fhir.stu3.proto.Triglyceride.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 734: google.fhir.stu3.proto.Triglyceride.performer:type_name -> google.fhir.stu3.proto.Reference
	172,  // 735: google.fhir.stu3.proto.Triglyceride.value:type_name -> google.fhir.stu3.proto.Triglyceride.Value
	198,  // 736: google.fhir.stu3.proto.Triglyceride.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 737: google.fhir.stu3.proto.Triglyceride.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 738: google.fhir.stu3.proto.Triglyceride.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 739: google.fhir.stu3.proto.Triglyceride.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 740: google.fhir.stu3.proto.Triglyceride.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 741: google.fhir.stu3.proto.Triglyceride.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 742: google.fhir.stu3.proto.Triglyceride.device:type_name -> google.fhir.stu3.proto.Reference
	173,  // 743: google.fhir.stu3.proto.Triglyceride.reference_range:type_name -> google.fhir.stu3.proto.Triglyceride.ReferenceRange
	174,  // 744: google.fhir.stu3.proto.Triglyceride.component:type_name -> google.fhir.stu3.proto.Triglyceride.Component
	188,  // 745: google.fhir.stu3.proto.Vitalsigns.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 746: google.fhir.stu3.proto.Vitalsigns.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 747: google.fhir.stu3.proto.Vitalsigns.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 748: google.fhir.stu3.proto.Vitalsigns.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 749: google.fhir.stu3.proto.Vitalsigns.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 750: google.fhir.stu3.proto.Vitalsigns.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 751: google.fhir.stu3.proto.Vitalsigns.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 752: google.fhir.stu3.proto.Vitalsigns.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 753: google.fhir.stu3.proto.Vitalsigns.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 754: google.fhir.stu3.proto.Vitalsigns.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 755: google.fhir.stu3.proto.Vitalsigns.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 756: google.fhir.stu3.proto.Vitalsigns.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 757: google.fhir.stu3.proto.Vitalsigns.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 758: google.fhir.stu3.proto.Vitalsigns.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 759: google.fhir.stu3.proto.Vitalsigns.context:type_name -> google.fhir.stu3.proto.Reference
	176,  // 760: google.fhir.stu3.proto.Vitalsigns.effective:type_name -> google.fhir.stu3.proto.Vitalsigns.Effective
	199,  // 761: google.fhir.stu3.proto.Vitalsigns.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 762: google.fhir.stu3.proto.Vitalsigns.performer:type_name -> google.fhir.stu3.proto.Reference
	177,  // 763: google.fhir.stu3.proto.Vitalsigns.value:type_name -> google.fhir.stu3.proto.Vitalsigns.Value
	198,  // 764: google.fhir.stu3.proto.Vitalsigns.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 765: google.fhir.stu3.proto.Vitalsigns.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 766: google.fhir.stu3.proto.Vitalsigns.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 767: google.fhir.stu3.proto.Vitalsigns.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 768: google.fhir.stu3.proto.Vitalsigns.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 769: google.fhir.stu3.proto.Vitalsigns.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 770: google.fhir.stu3.proto.Vitalsigns.device:type_name -> google.fhir.stu3.proto.Reference
	178,  // 771: google.fhir.stu3.proto.Vitalsigns.reference_range:type_name -> google.fhir.stu3.proto.Vitalsigns.ReferenceRange
	179,  // 772: google.fhir.stu3.proto.Vitalsigns.related:type_name -> google.fhir.stu3.proto.Vitalsigns.Related
	180,  // 773: google.fhir.stu3.proto.Vitalsigns.component:type_name -> google.fhir.stu3.proto.Vitalsigns.Component
	188,  // 774: google.fhir.stu3.proto.Vitalspanel.id:type_name -> google.fhir.stu3.proto.Id
	189,  // 775: google.fhir.stu3.proto.Vitalspanel.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 776: google.fhir.stu3.proto.Vitalspanel.implicit_rules:type_name -> google.fhir.stu3.proto.Uri
	191,  // 777: google.fhir.stu3.proto.Vitalspanel.language:type_name -> google.fhir.stu3.proto.LanguageCode
	192,  // 778: google.fhir.stu3.proto.Vitalspanel.text:type_name -> google.fhir.stu3.proto.Narrative
	193,  // 779: google.fhir.stu3.proto.Vitalspanel.contained:type_name -> google.fhir.stu3.proto.ContainedResource
	194,  // 780: google.fhir.stu3.proto.Vitalspanel.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 781: google.fhir.stu3.proto.Vitalspanel.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	195,  // 782: google.fhir.stu3.proto.Vitalspanel.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 783: google.fhir.stu3.proto.Vitalspanel.based_on:type_name -> google.fhir.stu3.proto.Reference
	197,  // 784: google.fhir.stu3.proto.Vitalspanel.status:type_name -> google.fhir.stu3.proto.ObservationStatusCode
	198,  // 785: google.fhir.stu3.proto.Vitalspanel.category:type_name -> google.fhir.stu3.proto.CodeableConcept
	182,  // 786: google.fhir.stu3.proto.Vitalspanel.code:type_name -> google.fhir.stu3.proto.Vitalspanel.CodeableConceptForCode
	196,  // 787: google.fhir.stu3.proto.Vitalspanel.subject:type_name -> google.fhir.stu3.proto.Reference
	196,  // 788: google.fhir.stu3.proto.Vitalspanel.context:type_name -> google.fhir.stu3.proto.Reference
	183,  // 789: google.fhir.stu3.proto.Vitalspanel.effective:type_name -> google.fhir.stu3.proto.Vitalspanel.Effective
	199,  // 790: google.fhir.stu3.proto.Vitalspanel.issued:type_name -> google.fhir.stu3.proto.Instant
	196,  // 791: google.fhir.stu3.proto.Vitalspanel.performer:type_name -> google.fhir.stu3.proto.Reference
	198,  // 792: google.fhir.stu3.proto.Vitalspanel.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 793: google.fhir.stu3.proto.Vitalspanel.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 794: google.fhir.stu3.proto.Vitalspanel.comment:type_name -> google.fhir.stu3.proto.String
	198,  // 795: google.fhir.stu3.proto.Vitalspanel.body_site:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 796: google.fhir.stu3.proto.Vitalspanel.method:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 797: google.fhir.stu3.proto.Vitalspanel.specimen:type_name -> google.fhir.stu3.proto.Reference
	196,  // 798: google.fhir.stu3.proto.Vitalspanel.device:type_name -> google.fhir.stu3.proto.Reference
	184,  // 799: google.fhir.stu3.proto.Vitalspanel.reference_range:type_name -> google.fhir.stu3.proto.Vitalspanel.ReferenceRange
	185,  // 800: google.fhir.stu3.proto.Vitalspanel.related:type_name -> google.fhir.stu3.proto.Vitalspanel.Related
	186,  // 801: google.fhir.stu3.proto.Vitalspanel.component:type_name -> google.fhir.stu3.proto.Vitalspanel.Component
	200,  // 802: google.fhir.stu3.proto.Bmi.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 803: google.fhir.stu3.proto.Bmi.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 804: google.fhir.stu3.proto.Bmi.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 805: google.fhir.stu3.proto.Bmi.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 806: google.fhir.stu3.proto.Bmi.CodeableConceptForCode.bmi_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 807: google.fhir.stu3.proto.Bmi.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 808: google.fhir.stu3.proto.Bmi.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 809: google.fhir.stu3.proto.Bmi.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 810: google.fhir.stu3.proto.Bmi.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 811: google.fhir.stu3.proto.Bmi.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 812: google.fhir.stu3.proto.Bmi.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 813: google.fhir.stu3.proto.Bmi.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 814: google.fhir.stu3.proto.Bmi.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 815: google.fhir.stu3.proto.Bmi.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 816: google.fhir.stu3.proto.Bmi.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 817: google.fhir.stu3.proto.Bmi.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 818: google.fhir.stu3.proto.Bmi.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 819: google.fhir.stu3.proto.Bmi.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 820: google.fhir.stu3.proto.Bmi.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 821: google.fhir.stu3.proto.Bmi.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 822: google.fhir.stu3.proto.Bmi.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 823: google.fhir.stu3.proto.Bmi.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 824: google.fhir.stu3.proto.Bmi.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 825: google.fhir.stu3.proto.Bmi.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 826: google.fhir.stu3.proto.Bmi.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 827: google.fhir.stu3.proto.Bmi.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	34,   // 828: google.fhir.stu3.proto.Bmi.Component.value:type_name -> google.fhir.stu3.proto.Bmi.Component.Value
	198,  // 829: google.fhir.stu3.proto.Bmi.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 830: google.fhir.stu3.proto.Bmi.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	31,   // 831: google.fhir.stu3.proto.Bmi.Component.reference_range:type_name -> google.fhir.stu3.proto.Bmi.ReferenceRange
	232,  // 832: google.fhir.stu3.proto.Bmi.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 833: google.fhir.stu3.proto.Bodyheight.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 834: google.fhir.stu3.proto.Bodyheight.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 835: google.fhir.stu3.proto.Bodyheight.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 836: google.fhir.stu3.proto.Bodyheight.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 837: google.fhir.stu3.proto.Bodyheight.CodeableConceptForCode.body_height_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 838: google.fhir.stu3.proto.Bodyheight.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 839: google.fhir.stu3.proto.Bodyheight.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 840: google.fhir.stu3.proto.Bodyheight.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 841: google.fhir.stu3.proto.Bodyheight.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 842: google.fhir.stu3.proto.Bodyheight.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 843: google.fhir.stu3.proto.Bodyheight.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 844: google.fhir.stu3.proto.Bodyheight.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 845: google.fhir.stu3.proto.Bodyheight.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 846: google.fhir.stu3.proto.Bodyheight.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 847: google.fhir.stu3.proto.Bodyheight.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 848: google.fhir.stu3.proto.Bodyheight.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 849: google.fhir.stu3.proto.Bodyheight.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 850: google.fhir.stu3.proto.Bodyheight.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 851: google.fhir.stu3.proto.Bodyheight.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 852: google.fhir.stu3.proto.Bodyheight.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 853: google.fhir.stu3.proto.Bodyheight.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 854: google.fhir.stu3.proto.Bodyheight.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 855: google.fhir.stu3.proto.Bodyheight.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 856: google.fhir.stu3.proto.Bodyheight.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 857: google.fhir.stu3.proto.Bodyheight.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 858: google.fhir.stu3.proto.Bodyheight.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	41,   // 859: google.fhir.stu3.proto.Bodyheight.Component.value:type_name -> google.fhir.stu3.proto.Bodyheight.Component.Value
	198,  // 860: google.fhir.stu3.proto.Bodyheight.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 861: google.fhir.stu3.proto.Bodyheight.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	38,   // 862: google.fhir.stu3.proto.Bodyheight.Component.reference_range:type_name -> google.fhir.stu3.proto.Bodyheight.ReferenceRange
	232,  // 863: google.fhir.stu3.proto.Bodyheight.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 864: google.fhir.stu3.proto.Bodylength.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 865: google.fhir.stu3.proto.Bodylength.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 866: google.fhir.stu3.proto.Bodylength.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 867: google.fhir.stu3.proto.Bodylength.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 868: google.fhir.stu3.proto.Bodylength.CodeableConceptForCode.body_length_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 869: google.fhir.stu3.proto.Bodylength.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 870: google.fhir.stu3.proto.Bodylength.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 871: google.fhir.stu3.proto.Bodylength.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 872: google.fhir.stu3.proto.Bodylength.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 873: google.fhir.stu3.proto.Bodylength.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 874: google.fhir.stu3.proto.Bodylength.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 875: google.fhir.stu3.proto.Bodylength.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 876: google.fhir.stu3.proto.Bodylength.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 877: google.fhir.stu3.proto.Bodylength.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 878: google.fhir.stu3.proto.Bodylength.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 879: google.fhir.stu3.proto.Bodylength.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 880: google.fhir.stu3.proto.Bodylength.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 881: google.fhir.stu3.proto.Bodylength.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 882: google.fhir.stu3.proto.Bodylength.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 883: google.fhir.stu3.proto.Bodylength.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 884: google.fhir.stu3.proto.Bodylength.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 885: google.fhir.stu3.proto.Bodylength.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 886: google.fhir.stu3.proto.Bodylength.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 887: google.fhir.stu3.proto.Bodylength.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 888: google.fhir.stu3.proto.Bodylength.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 889: google.fhir.stu3.proto.Bodylength.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	48,   // 890: google.fhir.stu3.proto.Bodylength.Component.value:type_name -> google.fhir.stu3.proto.Bodylength.Component.Value
	198,  // 891: google.fhir.stu3.proto.Bodylength.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 892: google.fhir.stu3.proto.Bodylength.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	45,   // 893: google.fhir.stu3.proto.Bodylength.Component.reference_range:type_name -> google.fhir.stu3.proto.Bodylength.ReferenceRange
	232,  // 894: google.fhir.stu3.proto.Bodylength.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 895: google.fhir.stu3.proto.Bodytemp.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 896: google.fhir.stu3.proto.Bodytemp.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 897: google.fhir.stu3.proto.Bodytemp.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 898: google.fhir.stu3.proto.Bodytemp.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 899: google.fhir.stu3.proto.Bodytemp.CodeableConceptForCode.body_temp_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 900: google.fhir.stu3.proto.Bodytemp.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 901: google.fhir.stu3.proto.Bodytemp.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 902: google.fhir.stu3.proto.Bodytemp.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 903: google.fhir.stu3.proto.Bodytemp.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 904: google.fhir.stu3.proto.Bodytemp.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 905: google.fhir.stu3.proto.Bodytemp.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 906: google.fhir.stu3.proto.Bodytemp.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 907: google.fhir.stu3.proto.Bodytemp.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 908: google.fhir.stu3.proto.Bodytemp.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 909: google.fhir.stu3.proto.Bodytemp.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 910: google.fhir.stu3.proto.Bodytemp.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 911: google.fhir.stu3.proto.Bodytemp.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 912: google.fhir.stu3.proto.Bodytemp.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 913: google.fhir.stu3.proto.Bodytemp.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 914: google.fhir.stu3.proto.Bodytemp.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 915: google.fhir.stu3.proto.Bodytemp.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 916: google.fhir.stu3.proto.Bodytemp.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 917: google.fhir.stu3.proto.Bodytemp.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 918: google.fhir.stu3.proto.Bodytemp.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 919: google.fhir.stu3.proto.Bodytemp.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 920: google.fhir.stu3.proto.Bodytemp.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	55,   // 921: google.fhir.stu3.proto.Bodytemp.Component.value:type_name -> google.fhir.stu3.proto.Bodytemp.Component.Value
	198,  // 922: google.fhir.stu3.proto.Bodytemp.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 923: google.fhir.stu3.proto.Bodytemp.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	52,   // 924: google.fhir.stu3.proto.Bodytemp.Component.reference_range:type_name -> google.fhir.stu3.proto.Bodytemp.ReferenceRange
	232,  // 925: google.fhir.stu3.proto.Bodytemp.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 926: google.fhir.stu3.proto.Bodyweight.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 927: google.fhir.stu3.proto.Bodyweight.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 928: google.fhir.stu3.proto.Bodyweight.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 929: google.fhir.stu3.proto.Bodyweight.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 930: google.fhir.stu3.proto.Bodyweight.CodeableConceptForCode.body_weight_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 931: google.fhir.stu3.proto.Bodyweight.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 932: google.fhir.stu3.proto.Bodyweight.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 933: google.fhir.stu3.proto.Bodyweight.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 934: google.fhir.stu3.proto.Bodyweight.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 935: google.fhir.stu3.proto.Bodyweight.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 936: google.fhir.stu3.proto.Bodyweight.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 937: google.fhir.stu3.proto.Bodyweight.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 938: google.fhir.stu3.proto.Bodyweight.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 939: google.fhir.stu3.proto.Bodyweight.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 940: google.fhir.stu3.proto.Bodyweight.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 941: google.fhir.stu3.proto.Bodyweight.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 942: google.fhir.stu3.proto.Bodyweight.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 943: google.fhir.stu3.proto.Bodyweight.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 944: google.fhir.stu3.proto.Bodyweight.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 945: google.fhir.stu3.proto.Bodyweight.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 946: google.fhir.stu3.proto.Bodyweight.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 947: google.fhir.stu3.proto.Bodyweight.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 948: google.fhir.stu3.proto.Bodyweight.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 949: google.fhir.stu3.proto.Bodyweight.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 950: google.fhir.stu3.proto.Bodyweight.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 951: google.fhir.stu3.proto.Bodyweight.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	62,   // 952: google.fhir.stu3.proto.Bodyweight.Component.value:type_name -> google.fhir.stu3.proto.Bodyweight.Component.Value
	198,  // 953: google.fhir.stu3.proto.Bodyweight.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 954: google.fhir.stu3.proto.Bodyweight.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	59,   // 955: google.fhir.stu3.proto.Bodyweight.Component.reference_range:type_name -> google.fhir.stu3.proto.Bodyweight.ReferenceRange
	232,  // 956: google.fhir.stu3.proto.Bodyweight.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 957: google.fhir.stu3.proto.Bp.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 958: google.fhir.stu3.proto.Bp.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 959: google.fhir.stu3.proto.Bp.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 960: google.fhir.stu3.proto.Bp.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 961: google.fhir.stu3.proto.Bp.CodeableConceptForCode.bp_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 962: google.fhir.stu3.proto.Bp.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 963: google.fhir.stu3.proto.Bp.Effective.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 964: google.fhir.stu3.proto.Bp.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 965: google.fhir.stu3.proto.Bp.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 966: google.fhir.stu3.proto.Bp.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 967: google.fhir.stu3.proto.Bp.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 968: google.fhir.stu3.proto.Bp.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 969: google.fhir.stu3.proto.Bp.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 970: google.fhir.stu3.proto.Bp.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 971: google.fhir.stu3.proto.Bp.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 972: google.fhir.stu3.proto.Bp.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 973: google.fhir.stu3.proto.Bp.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 974: google.fhir.stu3.proto.Bp.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 975: google.fhir.stu3.proto.Bp.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 976: google.fhir.stu3.proto.Bp.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 977: google.fhir.stu3.proto.Bp.Related.target:type_name -> google.fhir.stu3.proto.Reference
	202,  // 978: google.fhir.stu3.proto.Cholesterol.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 979: google.fhir.stu3.proto.Cholesterol.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 980: google.fhir.stu3.proto.Cholesterol.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 981: google.fhir.stu3.proto.Cholesterol.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 982: google.fhir.stu3.proto.Cholesterol.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 983: google.fhir.stu3.proto.Cholesterol.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 984: google.fhir.stu3.proto.Cholesterol.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	200,  // 985: google.fhir.stu3.proto.Cholesterol.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 986: google.fhir.stu3.proto.Cholesterol.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 987: google.fhir.stu3.proto.Cholesterol.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 988: google.fhir.stu3.proto.Cholesterol.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 989: google.fhir.stu3.proto.Cholesterol.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	72,   // 990: google.fhir.stu3.proto.Cholesterol.Component.value:type_name -> google.fhir.stu3.proto.Cholesterol.Component.Value
	198,  // 991: google.fhir.stu3.proto.Cholesterol.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 992: google.fhir.stu3.proto.Cholesterol.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	70,   // 993: google.fhir.stu3.proto.Cholesterol.Component.reference_range:type_name -> google.fhir.stu3.proto.Cholesterol.ReferenceRange
	232,  // 994: google.fhir.stu3.proto.Cholesterol.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	198,  // 995: google.fhir.stu3.proto.Cholesterol.Component.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 996: google.fhir.stu3.proto.Cholesterol.Component.Value.string_value:type_name -> google.fhir.stu3.proto.String
	234,  // 997: google.fhir.stu3.proto.Cholesterol.Component.Value.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 998: google.fhir.stu3.proto.Cholesterol.Component.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	237,  // 999: google.fhir.stu3.proto.Cholesterol.Component.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	205,  // 1000: google.fhir.stu3.proto.Cholesterol.Component.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	238,  // 1001: google.fhir.stu3.proto.Cholesterol.Component.Value.time:type_name -> google.fhir.stu3.proto.Time
	202,  // 1002: google.fhir.stu3.proto.Cholesterol.Component.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1003: google.fhir.stu3.proto.Cholesterol.Component.Value.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1004: google.fhir.stu3.proto.Clinicaldocument.Attester.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1005: google.fhir.stu3.proto.Clinicaldocument.Attester.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1006: google.fhir.stu3.proto.Clinicaldocument.Attester.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	239,  // 1007: google.fhir.stu3.proto.Clinicaldocument.Attester.mode:type_name -> google.fhir.stu3.proto.CompositionAttestationModeCode
	202,  // 1008: google.fhir.stu3.proto.Clinicaldocument.Attester.time:type_name -> google.fhir.stu3.proto.DateTime
	196,  // 1009: google.fhir.stu3.proto.Clinicaldocument.Attester.party:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1010: google.fhir.stu3.proto.Clinicaldocument.RelatesTo.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1011: google.fhir.stu3.proto.Clinicaldocument.RelatesTo.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1012: google.fhir.stu3.proto.Clinicaldocument.RelatesTo.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	240,  // 1013: google.fhir.stu3.proto.Clinicaldocument.RelatesTo.code:type_name -> google.fhir.stu3.proto.DocumentRelationshipTypeCode
	77,   // 1014: google.fhir.stu3.proto.Clinicaldocument.RelatesTo.target:type_name -> google.fhir.stu3.proto.Clinicaldocument.RelatesTo.Target
	200,  // 1015: google.fhir.stu3.proto.Clinicaldocument.Event.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1016: google.fhir.stu3.proto.Clinicaldocument.Event.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1017: google.fhir.stu3.proto.Clinicaldocument.Event.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1018: google.fhir.stu3.proto.Clinicaldocument.Event.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	231,  // 1019: google.fhir.stu3.proto.Clinicaldocument.Event.period:type_name -> google.fhir.stu3.proto.Period
	196,  // 1020: google.fhir.stu3.proto.Clinicaldocument.Event.detail:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1021: google.fhir.stu3.proto.Clinicaldocument.Section.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1022: google.fhir.stu3.proto.Clinicaldocument.Section.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1023: google.fhir.stu3.proto.Clinicaldocument.Section.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	200,  // 1024: google.fhir.stu3.proto.Clinicaldocument.Section.title:type_name -> google.fhir.stu3.proto.String
	198,  // 1025: google.fhir.stu3.proto.Clinicaldocument.Section.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	192,  // 1026: google.fhir.stu3.proto.Clinicaldocument.Section.text:type_name -> google.fhir.stu3.proto.Narrative
	241,  // 1027: google.fhir.stu3.proto.Clinicaldocument.Section.mode:type_name -> google.fhir.stu3.proto.ListModeCode
	198,  // 1028: google.fhir.stu3.proto.Clinicaldocument.Section.ordered_by:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 1029: google.fhir.stu3.proto.Clinicaldocument.Section.entry:type_name -> google.fhir.stu3.proto.Reference
	198,  // 1030: google.fhir.stu3.proto.Clinicaldocument.Section.empty_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	76,   // 1031: google.fhir.stu3.proto.Clinicaldocument.Section.section:type_name -> google.fhir.stu3.proto.Clinicaldocument.Section
	195,  // 1032: google.fhir.stu3.proto.Clinicaldocument.RelatesTo.Target.identifier:type_name -> google.fhir.stu3.proto.Identifier
	196,  // 1033: google.fhir.stu3.proto.Clinicaldocument.RelatesTo.Target.reference:type_name -> google.fhir.stu3.proto.Reference
	202,  // 1034: google.fhir.stu3.proto.Devicemetricobservation.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	232,  // 1035: google.fhir.stu3.proto.Devicemetricobservation.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	198,  // 1036: google.fhir.stu3.proto.Devicemetricobservation.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 1037: google.fhir.stu3.proto.Devicemetricobservation.Value.string_value:type_name -> google.fhir.stu3.proto.String
	234,  // 1038: google.fhir.stu3.proto.Devicemetricobservation.Value.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 1039: google.fhir.stu3.proto.Devicemetricobservation.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	237,  // 1040: google.fhir.stu3.proto.Devicemetricobservation.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	205,  // 1041: google.fhir.stu3.proto.Devicemetricobservation.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	238,  // 1042: google.fhir.stu3.proto.Devicemetricobservation.Value.time:type_name -> google.fhir.stu3.proto.Time
	202,  // 1043: google.fhir.stu3.proto.Devicemetricobservation.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1044: google.fhir.stu3.proto.Devicemetricobservation.Value.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1045: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1046: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1047: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1048: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 1049: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 1050: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1051: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 1052: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 1053: google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1054: google.fhir.stu3.proto.Devicemetricobservation.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1055: google.fhir.stu3.proto.Devicemetricobservation.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1056: google.fhir.stu3.proto.Devicemetricobservation.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 1057: google.fhir.stu3.proto.Devicemetricobservation.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 1058: google.fhir.stu3.proto.Devicemetricobservation.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1059: google.fhir.stu3.proto.Devicemetricobservation.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1060: google.fhir.stu3.proto.Devicemetricobservation.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1061: google.fhir.stu3.proto.Devicemetricobservation.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1062: google.fhir.stu3.proto.Devicemetricobservation.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	83,   // 1063: google.fhir.stu3.proto.Devicemetricobservation.Component.value:type_name -> google.fhir.stu3.proto.Devicemetricobservation.Component.Value
	198,  // 1064: google.fhir.stu3.proto.Devicemetricobservation.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1065: google.fhir.stu3.proto.Devicemetricobservation.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	80,   // 1066: google.fhir.stu3.proto.Devicemetricobservation.Component.reference_range:type_name -> google.fhir.stu3.proto.Devicemetricobservation.ReferenceRange
	232,  // 1067: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	198,  // 1068: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 1069: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.string_value:type_name -> google.fhir.stu3.proto.String
	234,  // 1070: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 1071: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	237,  // 1072: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	205,  // 1073: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	238,  // 1074: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.time:type_name -> google.fhir.stu3.proto.Time
	202,  // 1075: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1076: google.fhir.stu3.proto.Devicemetricobservation.Component.Value.period:type_name -> google.fhir.stu3.proto.Period
	202,  // 1077: google.fhir.stu3.proto.DiagnosticreportGenetics.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1078: google.fhir.stu3.proto.DiagnosticreportGenetics.Effective.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1079: google.fhir.stu3.proto.DiagnosticreportGenetics.Performer.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1080: google.fhir.stu3.proto.DiagnosticreportGenetics.Performer.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1081: google.fhir.stu3.proto.DiagnosticreportGenetics.Performer.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1082: google.fhir.stu3.proto.DiagnosticreportGenetics.Performer.role:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 1083: google.fhir.stu3.proto.DiagnosticreportGenetics.Performer.actor:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1084: google.fhir.stu3.proto.DiagnosticreportGenetics.Image.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1085: google.fhir.stu3.proto.DiagnosticreportGenetics.Image.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1086: google.fhir.stu3.proto.DiagnosticreportGenetics.Image.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	200,  // 1087: google.fhir.stu3.proto.DiagnosticreportGenetics.Image.comment:type_name -> google.fhir.stu3.proto.String
	196,  // 1088: google.fhir.stu3.proto.DiagnosticreportGenetics.Image.link:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1089: google.fhir.stu3.proto.ElementdefinitionDe.Base.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1090: google.fhir.stu3.proto.ElementdefinitionDe.Base.extension:type_name -> google.fhir.stu3.proto.Extension
	200,  // 1091: google.fhir.stu3.proto.ElementdefinitionDe.Base.path:type_name -> google.fhir.stu3.proto.String
	209,  // 1092: google.fhir.stu3.proto.ElementdefinitionDe.Base.min:type_name -> google.fhir.stu3.proto.UnsignedInt
	200,  // 1093: google.fhir.stu3.proto.ElementdefinitionDe.Base.max:type_name -> google.fhir.stu3.proto.String
	200,  // 1094: google.fhir.stu3.proto.ElementdefinitionDe.TypeRef.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1095: google.fhir.stu3.proto.ElementdefinitionDe.TypeRef.extension:type_name -> google.fhir.stu3.proto.Extension
	190,  // 1096: google.fhir.stu3.proto.ElementdefinitionDe.TypeRef.code:type_name -> google.fhir.stu3.proto.Uri
	190,  // 1097: google.fhir.stu3.proto.ElementdefinitionDe.TypeRef.target_profile:type_name -> google.fhir.stu3.proto.Uri
	242,  // 1098: google.fhir.stu3.proto.ElementdefinitionDe.TypeRef.versioning:type_name -> google.fhir.stu3.proto.ReferenceVersionRulesCode
	243,  // 1099: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.base64_binary:type_name -> google.fhir.stu3.proto.Base64Binary
	211,  // 1100: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.boolean:type_name -> google.fhir.stu3.proto.Boolean
	244,  // 1101: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.code:type_name -> google.fhir.stu3.proto.Code
	245,  // 1102: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.date:type_name -> google.fhir.stu3.proto.Date
	202,  // 1103: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.date_time:type_name -> google.fhir.stu3.proto.DateTime
	223,  // 1104: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.decimal:type_name -> google.fhir.stu3.proto.Decimal
	188,  // 1105: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.id:type_name -> google.fhir.stu3.proto.Id
	199,  // 1106: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.instant:type_name -> google.fhir.stu3.proto.Instant
	210,  // 1107: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.integer:type_name -> google.fhir.stu3.proto.Integer
	208,  // 1108: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.markdown:type_name -> google.fhir.stu3.proto.Markdown
	246,  // 1109: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.oid:type_name -> google.fhir.stu3.proto.Oid
	247,  // 1110: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	200,  // 1111: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.string_value:type_name -> google.fhir.stu3.proto.String
	238,  // 1112: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.time:type_name -> google.fhir.stu3.proto.Time
	209,  // 1113: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	190,  // 1114: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.uri:type_name -> google.fhir.stu3.proto.Uri
	248,  // 1115: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.address:type_name -> google.fhir.stu3.proto.Address
	249,  // 1116: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.age:type_name -> google.fhir.stu3.proto.Age
	215,  // 1117: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.annotation:type_name -> google.fhir.stu3.proto.Annotation
	205,  // 1118: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.attachment:type_name -> google.fhir.stu3.proto.Attachment
	198,  // 1119: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	207,  // 1120: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.coding:type_name -> google.fhir.stu3.proto.Coding
	250,  // 1121: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.contact_point:type_name -> google.fhir.stu3.proto.ContactPoint
	251,  // 1122: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.count:type_name -> google.fhir.stu3.proto.Count
	252,  // 1123: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.distance:type_name -> google.fhir.stu3.proto.Distance
	253,  // 1124: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.duration:type_name -> google.fhir.stu3.proto.Duration
	254,  // 1125: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.human_name:type_name -> google.fhir.stu3.proto.HumanName
	195,  // 1126: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.identifier:type_name -> google.fhir.stu3.proto.Identifier
	255,  // 1127: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.money:type_name -> google.fhir.stu3.proto.Money
	231,  // 1128: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1129: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.quantity:type_name -> google.fhir.stu3.proto.Quantity
	234,  // 1130: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 1131: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.ratio:type_name -> google.fhir.stu3.proto.Ratio
	196,  // 1132: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.reference:type_name -> google.fhir.stu3.proto.Reference
	237,  // 1133: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	256,  // 1134: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.signature:type_name -> google.fhir.stu3.proto.Signature
	257,  // 1135: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.timing:type_name -> google.fhir.stu3.proto.Timing
	189,  // 1136: google.fhir.stu3.proto.ElementdefinitionDe.DefaultValue.meta:type_name -> google.fhir.stu3.proto.Meta
	200,  // 1137: google.fhir.stu3.proto.ElementdefinitionDe.Example.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1138: google.fhir.stu3.proto.ElementdefinitionDe.Example.extension:type_name -> google.fhir.stu3.proto.Extension
	200,  // 1139: google.fhir.stu3.proto.ElementdefinitionDe.Example.label:type_name -> google.fhir.stu3.proto.String
	96,   // 1140: google.fhir.stu3.proto.ElementdefinitionDe.Example.value:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.Example.Value
	245,  // 1141: google.fhir.stu3.proto.ElementdefinitionDe.MinValue.date:type_name -> google.fhir.stu3.proto.Date
	202,  // 1142: google.fhir.stu3.proto.ElementdefinitionDe.MinValue.date_time:type_name -> google.fhir.stu3.proto.DateTime
	199,  // 1143: google.fhir.stu3.proto.ElementdefinitionDe.MinValue.instant:type_name -> google.fhir.stu3.proto.Instant
	238,  // 1144: google.fhir.stu3.proto.ElementdefinitionDe.MinValue.time:type_name -> google.fhir.stu3.proto.Time
	223,  // 1145: google.fhir.stu3.proto.ElementdefinitionDe.MinValue.decimal:type_name -> google.fhir.stu3.proto.Decimal
	210,  // 1146: google.fhir.stu3.proto.ElementdefinitionDe.MinValue.integer:type_name -> google.fhir.stu3.proto.Integer
	247,  // 1147: google.fhir.stu3.proto.ElementdefinitionDe.MinValue.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	209,  // 1148: google.fhir.stu3.proto.ElementdefinitionDe.MinValue.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	232,  // 1149: google.fhir.stu3.proto.ElementdefinitionDe.MinValue.quantity:type_name -> google.fhir.stu3.proto.Quantity
	245,  // 1150: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue.date:type_name -> google.fhir.stu3.proto.Date
	202,  // 1151: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue.date_time:type_name -> google.fhir.stu3.proto.DateTime
	199,  // 1152: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue.instant:type_name -> google.fhir.stu3.proto.Instant
	238,  // 1153: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue.time:type_name -> google.fhir.stu3.proto.Time
	223,  // 1154: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue.decimal:type_name -> google.fhir.stu3.proto.Decimal
	210,  // 1155: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue.integer:type_name -> google.fhir.stu3.proto.Integer
	247,  // 1156: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	209,  // 1157: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	232,  // 1158: google.fhir.stu3.proto.ElementdefinitionDe.MaxValue.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1159: google.fhir.stu3.proto.ElementdefinitionDe.Constraint.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1160: google.fhir.stu3.proto.ElementdefinitionDe.Constraint.extension:type_name -> google.fhir.stu3.proto.Extension
	188,  // 1161: google.fhir.stu3.proto.ElementdefinitionDe.Constraint.key:type_name -> google.fhir.stu3.proto.Id
	200,  // 1162: google.fhir.stu3.proto.ElementdefinitionDe.Constraint.requirements:type_name -> google.fhir.stu3.proto.String
	258,  // 1163: google.fhir.stu3.proto.ElementdefinitionDe.Constraint.severity:type_name -> google.fhir.stu3.proto.ConstraintSeverityCode
	200,  // 1164: google.fhir.stu3.proto.ElementdefinitionDe.Constraint.human:type_name -> google.fhir.stu3.proto.String
	200,  // 1165: google.fhir.stu3.proto.ElementdefinitionDe.Constraint.expression:type_name -> google.fhir.stu3.proto.String
	200,  // 1166: google.fhir.stu3.proto.ElementdefinitionDe.Constraint.xpath:type_name -> google.fhir.stu3.proto.String
	190,  // 1167: google.fhir.stu3.proto.ElementdefinitionDe.Constraint.source:type_name -> google.fhir.stu3.proto.Uri
	200,  // 1168: google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1169: google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding.extension:type_name -> google.fhir.stu3.proto.Extension
	259,  // 1170: google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding.strength:type_name -> google.fhir.stu3.proto.BindingStrengthCode
	200,  // 1171: google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding.description:type_name -> google.fhir.stu3.proto.String
	97,   // 1172: google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding.value_set:type_name -> google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding.ValueSet
	200,  // 1173: google.fhir.stu3.proto.ElementdefinitionDe.Mapping.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1174: google.fhir.stu3.proto.ElementdefinitionDe.Mapping.extension:type_name -> google.fhir.stu3.proto.Extension
	188,  // 1175: google.fhir.stu3.proto.ElementdefinitionDe.Mapping.identity:type_name -> google.fhir.stu3.proto.Id
	260,  // 1176: google.fhir.stu3.proto.ElementdefinitionDe.Mapping.language:type_name -> google.fhir.stu3.proto.MimeTypeCode
	200,  // 1177: google.fhir.stu3.proto.ElementdefinitionDe.Mapping.map:type_name -> google.fhir.stu3.proto.String
	200,  // 1178: google.fhir.stu3.proto.ElementdefinitionDe.Mapping.comment:type_name -> google.fhir.stu3.proto.String
	243,  // 1179: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.base64_binary:type_name -> google.fhir.stu3.proto.Base64Binary
	211,  // 1180: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.boolean:type_name -> google.fhir.stu3.proto.Boolean
	244,  // 1181: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.code:type_name -> google.fhir.stu3.proto.Code
	245,  // 1182: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.date:type_name -> google.fhir.stu3.proto.Date
	202,  // 1183: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	223,  // 1184: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.decimal:type_name -> google.fhir.stu3.proto.Decimal
	188,  // 1185: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.id:type_name -> google.fhir.stu3.proto.Id
	199,  // 1186: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.instant:type_name -> google.fhir.stu3.proto.Instant
	210,  // 1187: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.integer:type_name -> google.fhir.stu3.proto.Integer
	208,  // 1188: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.markdown:type_name -> google.fhir.stu3.proto.Markdown
	246,  // 1189: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.oid:type_name -> google.fhir.stu3.proto.Oid
	247,  // 1190: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.positive_int:type_name -> google.fhir.stu3.proto.PositiveInt
	200,  // 1191: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.string_value:type_name -> google.fhir.stu3.proto.String
	238,  // 1192: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.time:type_name -> google.fhir.stu3.proto.Time
	209,  // 1193: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.unsigned_int:type_name -> google.fhir.stu3.proto.UnsignedInt
	190,  // 1194: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.uri:type_name -> google.fhir.stu3.proto.Uri
	248,  // 1195: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.address:type_name -> google.fhir.stu3.proto.Address
	249,  // 1196: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.age:type_name -> google.fhir.stu3.proto.Age
	215,  // 1197: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.annotation:type_name -> google.fhir.stu3.proto.Annotation
	205,  // 1198: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	198,  // 1199: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	207,  // 1200: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.coding:type_name -> google.fhir.stu3.proto.Coding
	250,  // 1201: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.contact_point:type_name -> google.fhir.stu3.proto.ContactPoint
	251,  // 1202: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.count:type_name -> google.fhir.stu3.proto.Count
	252,  // 1203: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.distance:type_name -> google.fhir.stu3.proto.Distance
	253,  // 1204: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.duration:type_name -> google.fhir.stu3.proto.Duration
	254,  // 1205: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.human_name:type_name -> google.fhir.stu3.proto.HumanName
	195,  // 1206: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.identifier:type_name -> google.fhir.stu3.proto.Identifier
	255,  // 1207: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.money:type_name -> google.fhir.stu3.proto.Money
	231,  // 1208: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1209: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	234,  // 1210: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 1211: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	196,  // 1212: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.reference:type_name -> google.fhir.stu3.proto.Reference
	237,  // 1213: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	256,  // 1214: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.signature:type_name -> google.fhir.stu3.proto.Signature
	257,  // 1215: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.timing:type_name -> google.fhir.stu3.proto.Timing
	189,  // 1216: google.fhir.stu3.proto.ElementdefinitionDe.Example.Value.meta:type_name -> google.fhir.stu3.proto.Meta
	190,  // 1217: google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding.ValueSet.uri:type_name -> google.fhir.stu3.proto.Uri
	196,  // 1218: google.fhir.stu3.proto.ElementdefinitionDe.ElementDefinitionBinding.ValueSet.reference:type_name -> google.fhir.stu3.proto.Reference
	231,  // 1219: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Born.period:type_name -> google.fhir.stu3.proto.Period
	245,  // 1220: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Born.date:type_name -> google.fhir.stu3.proto.Date
	200,  // 1221: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Born.string_value:type_name -> google.fhir.stu3.proto.String
	249,  // 1222: google.fhir.stu3.proto.FamilymemberhistoryGenetic.AgeType.age_value:type_name -> google.fhir.stu3.proto.Age
	234,  // 1223: google.fhir.stu3.proto.FamilymemberhistoryGenetic.AgeType.range:type_name -> google.fhir.stu3.proto.Range
	200,  // 1224: google.fhir.stu3.proto.FamilymemberhistoryGenetic.AgeType.string_value:type_name -> google.fhir.stu3.proto.String
	211,  // 1225: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Deceased.boolean:type_name -> google.fhir.stu3.proto.Boolean
	249,  // 1226: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Deceased.age:type_name -> google.fhir.stu3.proto.Age
	234,  // 1227: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Deceased.range:type_name -> google.fhir.stu3.proto.Range
	245,  // 1228: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Deceased.date:type_name -> google.fhir.stu3.proto.Date
	200,  // 1229: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Deceased.string_value:type_name -> google.fhir.stu3.proto.String
	200,  // 1230: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1231: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1232: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1233: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1234: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.outcome:type_name -> google.fhir.stu3.proto.CodeableConcept
	102,  // 1235: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.onset:type_name -> google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.Onset
	215,  // 1236: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.note:type_name -> google.fhir.stu3.proto.Annotation
	249,  // 1237: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.Onset.age:type_name -> google.fhir.stu3.proto.Age
	234,  // 1238: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.Onset.range:type_name -> google.fhir.stu3.proto.Range
	231,  // 1239: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.Onset.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1240: google.fhir.stu3.proto.FamilymemberhistoryGenetic.Condition.Onset.string_value:type_name -> google.fhir.stu3.proto.String
	202,  // 1241: google.fhir.stu3.proto.HdlCholesterol.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1242: google.fhir.stu3.proto.HdlCholesterol.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1243: google.fhir.stu3.proto.HdlCholesterol.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1244: google.fhir.stu3.proto.HdlCholesterol.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1245: google.fhir.stu3.proto.HdlCholesterol.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1246: google.fhir.stu3.proto.HdlCholesterol.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1247: google.fhir.stu3.proto.HdlCholesterol.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	200,  // 1248: google.fhir.stu3.proto.HdlCholesterol.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1249: google.fhir.stu3.proto.HdlCholesterol.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1250: google.fhir.stu3.proto.HdlCholesterol.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1251: google.fhir.stu3.proto.HdlCholesterol.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1252: google.fhir.stu3.proto.HdlCholesterol.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	107,  // 1253: google.fhir.stu3.proto.HdlCholesterol.Component.value:type_name -> google.fhir.stu3.proto.HdlCholesterol.Component.Value
	198,  // 1254: google.fhir.stu3.proto.HdlCholesterol.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1255: google.fhir.stu3.proto.HdlCholesterol.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	105,  // 1256: google.fhir.stu3.proto.HdlCholesterol.Component.reference_range:type_name -> google.fhir.stu3.proto.HdlCholesterol.ReferenceRange
	232,  // 1257: google.fhir.stu3.proto.HdlCholesterol.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	198,  // 1258: google.fhir.stu3.proto.HdlCholesterol.Component.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 1259: google.fhir.stu3.proto.HdlCholesterol.Component.Value.string_value:type_name -> google.fhir.stu3.proto.String
	234,  // 1260: google.fhir.stu3.proto.HdlCholesterol.Component.Value.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 1261: google.fhir.stu3.proto.HdlCholesterol.Component.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	237,  // 1262: google.fhir.stu3.proto.HdlCholesterol.Component.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	205,  // 1263: google.fhir.stu3.proto.HdlCholesterol.Component.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	238,  // 1264: google.fhir.stu3.proto.HdlCholesterol.Component.Value.time:type_name -> google.fhir.stu3.proto.Time
	202,  // 1265: google.fhir.stu3.proto.HdlCholesterol.Component.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1266: google.fhir.stu3.proto.HdlCholesterol.Component.Value.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1267: google.fhir.stu3.proto.Headcircum.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1268: google.fhir.stu3.proto.Headcircum.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 1269: google.fhir.stu3.proto.Headcircum.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 1270: google.fhir.stu3.proto.Headcircum.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 1271: google.fhir.stu3.proto.Headcircum.CodeableConceptForCode.head_circum_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 1272: google.fhir.stu3.proto.Headcircum.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1273: google.fhir.stu3.proto.Headcircum.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1274: google.fhir.stu3.proto.Headcircum.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1275: google.fhir.stu3.proto.Headcircum.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1276: google.fhir.stu3.proto.Headcircum.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1277: google.fhir.stu3.proto.Headcircum.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1278: google.fhir.stu3.proto.Headcircum.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 1279: google.fhir.stu3.proto.Headcircum.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 1280: google.fhir.stu3.proto.Headcircum.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1281: google.fhir.stu3.proto.Headcircum.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 1282: google.fhir.stu3.proto.Headcircum.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 1283: google.fhir.stu3.proto.Headcircum.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1284: google.fhir.stu3.proto.Headcircum.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1285: google.fhir.stu3.proto.Headcircum.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1286: google.fhir.stu3.proto.Headcircum.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 1287: google.fhir.stu3.proto.Headcircum.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 1288: google.fhir.stu3.proto.Headcircum.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1289: google.fhir.stu3.proto.Headcircum.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1290: google.fhir.stu3.proto.Headcircum.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1291: google.fhir.stu3.proto.Headcircum.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1292: google.fhir.stu3.proto.Headcircum.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	114,  // 1293: google.fhir.stu3.proto.Headcircum.Component.value:type_name -> google.fhir.stu3.proto.Headcircum.Component.Value
	198,  // 1294: google.fhir.stu3.proto.Headcircum.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1295: google.fhir.stu3.proto.Headcircum.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	111,  // 1296: google.fhir.stu3.proto.Headcircum.Component.reference_range:type_name -> google.fhir.stu3.proto.Headcircum.ReferenceRange
	232,  // 1297: google.fhir.stu3.proto.Headcircum.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1298: google.fhir.stu3.proto.Heartrate.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1299: google.fhir.stu3.proto.Heartrate.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 1300: google.fhir.stu3.proto.Heartrate.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 1301: google.fhir.stu3.proto.Heartrate.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 1302: google.fhir.stu3.proto.Heartrate.CodeableConceptForCode.heart_rate_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 1303: google.fhir.stu3.proto.Heartrate.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1304: google.fhir.stu3.proto.Heartrate.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1305: google.fhir.stu3.proto.Heartrate.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1306: google.fhir.stu3.proto.Heartrate.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1307: google.fhir.stu3.proto.Heartrate.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1308: google.fhir.stu3.proto.Heartrate.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1309: google.fhir.stu3.proto.Heartrate.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 1310: google.fhir.stu3.proto.Heartrate.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 1311: google.fhir.stu3.proto.Heartrate.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1312: google.fhir.stu3.proto.Heartrate.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 1313: google.fhir.stu3.proto.Heartrate.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 1314: google.fhir.stu3.proto.Heartrate.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1315: google.fhir.stu3.proto.Heartrate.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1316: google.fhir.stu3.proto.Heartrate.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1317: google.fhir.stu3.proto.Heartrate.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 1318: google.fhir.stu3.proto.Heartrate.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 1319: google.fhir.stu3.proto.Heartrate.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1320: google.fhir.stu3.proto.Heartrate.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1321: google.fhir.stu3.proto.Heartrate.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1322: google.fhir.stu3.proto.Heartrate.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1323: google.fhir.stu3.proto.Heartrate.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	121,  // 1324: google.fhir.stu3.proto.Heartrate.Component.value:type_name -> google.fhir.stu3.proto.Heartrate.Component.Value
	198,  // 1325: google.fhir.stu3.proto.Heartrate.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1326: google.fhir.stu3.proto.Heartrate.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	118,  // 1327: google.fhir.stu3.proto.Heartrate.Component.reference_range:type_name -> google.fhir.stu3.proto.Heartrate.ReferenceRange
	232,  // 1328: google.fhir.stu3.proto.Heartrate.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	202,  // 1329: google.fhir.stu3.proto.Hlaresult.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1330: google.fhir.stu3.proto.Hlaresult.Effective.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1331: google.fhir.stu3.proto.Hlaresult.Performer.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1332: google.fhir.stu3.proto.Hlaresult.Performer.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1333: google.fhir.stu3.proto.Hlaresult.Performer.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1334: google.fhir.stu3.proto.Hlaresult.Performer.role:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 1335: google.fhir.stu3.proto.Hlaresult.Performer.actor:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1336: google.fhir.stu3.proto.Hlaresult.Image.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1337: google.fhir.stu3.proto.Hlaresult.Image.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1338: google.fhir.stu3.proto.Hlaresult.Image.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	200,  // 1339: google.fhir.stu3.proto.Hlaresult.Image.comment:type_name -> google.fhir.stu3.proto.String
	196,  // 1340: google.fhir.stu3.proto.Hlaresult.Image.link:type_name -> google.fhir.stu3.proto.Reference
	202,  // 1341: google.fhir.stu3.proto.LdlCholesterol.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1342: google.fhir.stu3.proto.LdlCholesterol.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1343: google.fhir.stu3.proto.LdlCholesterol.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1344: google.fhir.stu3.proto.LdlCholesterol.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1345: google.fhir.stu3.proto.LdlCholesterol.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1346: google.fhir.stu3.proto.LdlCholesterol.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1347: google.fhir.stu3.proto.LdlCholesterol.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	200,  // 1348: google.fhir.stu3.proto.LdlCholesterol.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1349: google.fhir.stu3.proto.LdlCholesterol.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1350: google.fhir.stu3.proto.LdlCholesterol.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1351: google.fhir.stu3.proto.LdlCholesterol.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1352: google.fhir.stu3.proto.LdlCholesterol.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	129,  // 1353: google.fhir.stu3.proto.LdlCholesterol.Component.value:type_name -> google.fhir.stu3.proto.LdlCholesterol.Component.Value
	198,  // 1354: google.fhir.stu3.proto.LdlCholesterol.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1355: google.fhir.stu3.proto.LdlCholesterol.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	127,  // 1356: google.fhir.stu3.proto.LdlCholesterol.Component.reference_range:type_name -> google.fhir.stu3.proto.LdlCholesterol.ReferenceRange
	232,  // 1357: google.fhir.stu3.proto.LdlCholesterol.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	198,  // 1358: google.fhir.stu3.proto.LdlCholesterol.Component.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 1359: google.fhir.stu3.proto.LdlCholesterol.Component.Value.string_value:type_name -> google.fhir.stu3.proto.String
	234,  // 1360: google.fhir.stu3.proto.LdlCholesterol.Component.Value.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 1361: google.fhir.stu3.proto.LdlCholesterol.Component.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	237,  // 1362: google.fhir.stu3.proto.LdlCholesterol.Component.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	205,  // 1363: google.fhir.stu3.proto.LdlCholesterol.Component.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	238,  // 1364: google.fhir.stu3.proto.LdlCholesterol.Component.Value.time:type_name -> google.fhir.stu3.proto.Time
	202,  // 1365: google.fhir.stu3.proto.LdlCholesterol.Component.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1366: google.fhir.stu3.proto.LdlCholesterol.Component.Value.period:type_name -> google.fhir.stu3.proto.Period
	202,  // 1367: google.fhir.stu3.proto.LipidProfile.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1368: google.fhir.stu3.proto.LipidProfile.Effective.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1369: google.fhir.stu3.proto.LipidProfile.Performer.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1370: google.fhir.stu3.proto.LipidProfile.Performer.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1371: google.fhir.stu3.proto.LipidProfile.Performer.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1372: google.fhir.stu3.proto.LipidProfile.Performer.role:type_name -> google.fhir.stu3.proto.CodeableConcept
	196,  // 1373: google.fhir.stu3.proto.LipidProfile.Performer.actor:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1374: google.fhir.stu3.proto.LipidProfile.Image.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1375: google.fhir.stu3.proto.LipidProfile.Image.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1376: google.fhir.stu3.proto.LipidProfile.Image.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	200,  // 1377: google.fhir.stu3.proto.LipidProfile.Image.comment:type_name -> google.fhir.stu3.proto.String
	196,  // 1378: google.fhir.stu3.proto.LipidProfile.Image.link:type_name -> google.fhir.stu3.proto.Reference
	202,  // 1379: google.fhir.stu3.proto.ObservationGenetics.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1380: google.fhir.stu3.proto.ObservationGenetics.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1381: google.fhir.stu3.proto.ObservationGenetics.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	198,  // 1382: google.fhir.stu3.proto.ObservationGenetics.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 1383: google.fhir.stu3.proto.ObservationGenetics.Value.string_value:type_name -> google.fhir.stu3.proto.String
	211,  // 1384: google.fhir.stu3.proto.ObservationGenetics.Value.boolean:type_name -> google.fhir.stu3.proto.Boolean
	234,  // 1385: google.fhir.stu3.proto.ObservationGenetics.Value.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 1386: google.fhir.stu3.proto.ObservationGenetics.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	237,  // 1387: google.fhir.stu3.proto.ObservationGenetics.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	205,  // 1388: google.fhir.stu3.proto.ObservationGenetics.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	238,  // 1389: google.fhir.stu3.proto.ObservationGenetics.Value.time:type_name -> google.fhir.stu3.proto.Time
	202,  // 1390: google.fhir.stu3.proto.ObservationGenetics.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1391: google.fhir.stu3.proto.ObservationGenetics.Value.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1392: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1393: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1394: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1395: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 1396: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 1397: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1398: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 1399: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 1400: google.fhir.stu3.proto.ObservationGenetics.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1401: google.fhir.stu3.proto.ObservationGenetics.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1402: google.fhir.stu3.proto.ObservationGenetics.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1403: google.fhir.stu3.proto.ObservationGenetics.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 1404: google.fhir.stu3.proto.ObservationGenetics.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 1405: google.fhir.stu3.proto.ObservationGenetics.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1406: google.fhir.stu3.proto.ObservationGenetics.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1407: google.fhir.stu3.proto.ObservationGenetics.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1408: google.fhir.stu3.proto.ObservationGenetics.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1409: google.fhir.stu3.proto.ObservationGenetics.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	138,  // 1410: google.fhir.stu3.proto.ObservationGenetics.Component.value:type_name -> google.fhir.stu3.proto.ObservationGenetics.Component.Value
	198,  // 1411: google.fhir.stu3.proto.ObservationGenetics.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1412: google.fhir.stu3.proto.ObservationGenetics.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	135,  // 1413: google.fhir.stu3.proto.ObservationGenetics.Component.reference_range:type_name -> google.fhir.stu3.proto.ObservationGenetics.ReferenceRange
	232,  // 1414: google.fhir.stu3.proto.ObservationGenetics.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	198,  // 1415: google.fhir.stu3.proto.ObservationGenetics.Component.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 1416: google.fhir.stu3.proto.ObservationGenetics.Component.Value.string_value:type_name -> google.fhir.stu3.proto.String
	234,  // 1417: google.fhir.stu3.proto.ObservationGenetics.Component.Value.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 1418: google.fhir.stu3.proto.ObservationGenetics.Component.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	237,  // 1419: google.fhir.stu3.proto.ObservationGenetics.Component.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	205,  // 1420: google.fhir.stu3.proto.ObservationGenetics.Component.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	238,  // 1421: google.fhir.stu3.proto.ObservationGenetics.Component.Value.time:type_name -> google.fhir.stu3.proto.Time
	202,  // 1422: google.fhir.stu3.proto.ObservationGenetics.Component.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1423: google.fhir.stu3.proto.ObservationGenetics.Component.Value.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1424: google.fhir.stu3.proto.Oxygensat.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1425: google.fhir.stu3.proto.Oxygensat.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 1426: google.fhir.stu3.proto.Oxygensat.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 1427: google.fhir.stu3.proto.Oxygensat.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 1428: google.fhir.stu3.proto.Oxygensat.CodeableConceptForCode.oxygen_sat_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 1429: google.fhir.stu3.proto.Oxygensat.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1430: google.fhir.stu3.proto.Oxygensat.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1431: google.fhir.stu3.proto.Oxygensat.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1432: google.fhir.stu3.proto.Oxygensat.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1433: google.fhir.stu3.proto.Oxygensat.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1434: google.fhir.stu3.proto.Oxygensat.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1435: google.fhir.stu3.proto.Oxygensat.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 1436: google.fhir.stu3.proto.Oxygensat.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 1437: google.fhir.stu3.proto.Oxygensat.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1438: google.fhir.stu3.proto.Oxygensat.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 1439: google.fhir.stu3.proto.Oxygensat.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 1440: google.fhir.stu3.proto.Oxygensat.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1441: google.fhir.stu3.proto.Oxygensat.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1442: google.fhir.stu3.proto.Oxygensat.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1443: google.fhir.stu3.proto.Oxygensat.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 1444: google.fhir.stu3.proto.Oxygensat.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 1445: google.fhir.stu3.proto.Oxygensat.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1446: google.fhir.stu3.proto.Oxygensat.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1447: google.fhir.stu3.proto.Oxygensat.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1448: google.fhir.stu3.proto.Oxygensat.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1449: google.fhir.stu3.proto.Oxygensat.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	145,  // 1450: google.fhir.stu3.proto.Oxygensat.Component.value:type_name -> google.fhir.stu3.proto.Oxygensat.Component.Value
	198,  // 1451: google.fhir.stu3.proto.Oxygensat.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1452: google.fhir.stu3.proto.Oxygensat.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	142,  // 1453: google.fhir.stu3.proto.Oxygensat.Component.reference_range:type_name -> google.fhir.stu3.proto.Oxygensat.ReferenceRange
	232,  // 1454: google.fhir.stu3.proto.Oxygensat.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	202,  // 1455: google.fhir.stu3.proto.ProcedurerequestGenetics.Occurrence.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1456: google.fhir.stu3.proto.ProcedurerequestGenetics.Occurrence.period:type_name -> google.fhir.stu3.proto.Period
	257,  // 1457: google.fhir.stu3.proto.ProcedurerequestGenetics.Occurrence.timing:type_name -> google.fhir.stu3.proto.Timing
	211,  // 1458: google.fhir.stu3.proto.ProcedurerequestGenetics.AsNeeded.boolean:type_name -> google.fhir.stu3.proto.Boolean
	198,  // 1459: google.fhir.stu3.proto.ProcedurerequestGenetics.AsNeeded.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 1460: google.fhir.stu3.proto.ProcedurerequestGenetics.Requester.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1461: google.fhir.stu3.proto.ProcedurerequestGenetics.Requester.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1462: google.fhir.stu3.proto.ProcedurerequestGenetics.Requester.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	196,  // 1463: google.fhir.stu3.proto.ProcedurerequestGenetics.Requester.agent:type_name -> google.fhir.stu3.proto.Reference
	196,  // 1464: google.fhir.stu3.proto.ProcedurerequestGenetics.Requester.on_behalf_of:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1465: google.fhir.stu3.proto.Resprate.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1466: google.fhir.stu3.proto.Resprate.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 1467: google.fhir.stu3.proto.Resprate.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 1468: google.fhir.stu3.proto.Resprate.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 1469: google.fhir.stu3.proto.Resprate.CodeableConceptForCode.resp_rate_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 1470: google.fhir.stu3.proto.Resprate.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1471: google.fhir.stu3.proto.Resprate.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1472: google.fhir.stu3.proto.Resprate.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1473: google.fhir.stu3.proto.Resprate.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1474: google.fhir.stu3.proto.Resprate.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1475: google.fhir.stu3.proto.Resprate.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1476: google.fhir.stu3.proto.Resprate.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 1477: google.fhir.stu3.proto.Resprate.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 1478: google.fhir.stu3.proto.Resprate.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1479: google.fhir.stu3.proto.Resprate.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 1480: google.fhir.stu3.proto.Resprate.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 1481: google.fhir.stu3.proto.Resprate.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1482: google.fhir.stu3.proto.Resprate.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1483: google.fhir.stu3.proto.Resprate.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1484: google.fhir.stu3.proto.Resprate.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 1485: google.fhir.stu3.proto.Resprate.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 1486: google.fhir.stu3.proto.Resprate.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1487: google.fhir.stu3.proto.Resprate.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1488: google.fhir.stu3.proto.Resprate.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1489: google.fhir.stu3.proto.Resprate.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1490: google.fhir.stu3.proto.Resprate.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	155,  // 1491: google.fhir.stu3.proto.Resprate.Component.value:type_name -> google.fhir.stu3.proto.Resprate.Component.Value
	198,  // 1492: google.fhir.stu3.proto.Resprate.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1493: google.fhir.stu3.proto.Resprate.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	152,  // 1494: google.fhir.stu3.proto.Resprate.Component.reference_range:type_name -> google.fhir.stu3.proto.Resprate.ReferenceRange
	232,  // 1495: google.fhir.stu3.proto.Resprate.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1496: google.fhir.stu3.proto.Shareablecodesystem.Filter.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1497: google.fhir.stu3.proto.Shareablecodesystem.Filter.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1498: google.fhir.stu3.proto.Shareablecodesystem.Filter.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	244,  // 1499: google.fhir.stu3.proto.Shareablecodesystem.Filter.code:type_name -> google.fhir.stu3.proto.Code
	200,  // 1500: google.fhir.stu3.proto.Shareablecodesystem.Filter.description:type_name -> google.fhir.stu3.proto.String
	261,  // 1501: google.fhir.stu3.proto.Shareablecodesystem.Filter.operator:type_name -> google.fhir.stu3.proto.FilterOperatorCode
	200,  // 1502: google.fhir.stu3.proto.Shareablecodesystem.Filter.value:type_name -> google.fhir.stu3.proto.String
	200,  // 1503: google.fhir.stu3.proto.Shareablecodesystem.Property.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1504: google.fhir.stu3.proto.Shareablecodesystem.Property.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1505: google.fhir.stu3.proto.Shareablecodesystem.Property.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	244,  // 1506: google.fhir.stu3.proto.Shareablecodesystem.Property.code:type_name -> google.fhir.stu3.proto.Code
	190,  // 1507: google.fhir.stu3.proto.Shareablecodesystem.Property.uri:type_name -> google.fhir.stu3.proto.Uri
	200,  // 1508: google.fhir.stu3.proto.Shareablecodesystem.Property.description:type_name -> google.fhir.stu3.proto.String
	262,  // 1509: google.fhir.stu3.proto.Shareablecodesystem.Property.type:type_name -> google.fhir.stu3.proto.PropertyTypeCode
	200,  // 1510: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1511: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1512: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	244,  // 1513: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.code:type_name -> google.fhir.stu3.proto.Code
	200,  // 1514: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.display:type_name -> google.fhir.stu3.proto.String
	200,  // 1515: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.definition:type_name -> google.fhir.stu3.proto.String
	159,  // 1516: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.designation:type_name -> google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.Designation
	160,  // 1517: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.property:type_name -> google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty
	158,  // 1518: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.concept:type_name -> google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition
	200,  // 1519: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.Designation.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1520: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.Designation.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1521: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.Designation.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	191,  // 1522: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.Designation.language:type_name -> google.fhir.stu3.proto.LanguageCode
	207,  // 1523: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.Designation.use:type_name -> google.fhir.stu3.proto.Coding
	200,  // 1524: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.Designation.value:type_name -> google.fhir.stu3.proto.String
	200,  // 1525: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1526: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1527: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	244,  // 1528: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.code:type_name -> google.fhir.stu3.proto.Code
	161,  // 1529: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.value:type_name -> google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.Value
	244,  // 1530: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.Value.code:type_name -> google.fhir.stu3.proto.Code
	207,  // 1531: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.Value.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 1532: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.Value.string_value:type_name -> google.fhir.stu3.proto.String
	210,  // 1533: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.Value.integer:type_name -> google.fhir.stu3.proto.Integer
	211,  // 1534: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.Value.boolean:type_name -> google.fhir.stu3.proto.Boolean
	202,  // 1535: google.fhir.stu3.proto.Shareablecodesystem.ConceptDefinition.ConceptProperty.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	200,  // 1536: google.fhir.stu3.proto.Shareablevalueset.Compose.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1537: google.fhir.stu3.proto.Shareablevalueset.Compose.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1538: google.fhir.stu3.proto.Shareablevalueset.Compose.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	245,  // 1539: google.fhir.stu3.proto.Shareablevalueset.Compose.locked_date:type_name -> google.fhir.stu3.proto.Date
	211,  // 1540: google.fhir.stu3.proto.Shareablevalueset.Compose.inactive:type_name -> google.fhir.stu3.proto.Boolean
	164,  // 1541: google.fhir.stu3.proto.Shareablevalueset.Compose.include:type_name -> google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet
	164,  // 1542: google.fhir.stu3.proto.Shareablevalueset.Compose.exclude:type_name -> google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet
	200,  // 1543: google.fhir.stu3.proto.Shareablevalueset.Expansion.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1544: google.fhir.stu3.proto.Shareablevalueset.Expansion.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1545: google.fhir.stu3.proto.Shareablevalueset.Expansion.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	190,  // 1546: google.fhir.stu3.proto.Shareablevalueset.Expansion.identifier:type_name -> google.fhir.stu3.proto.Uri
	202,  // 1547: google.fhir.stu3.proto.Shareablevalueset.Expansion.timestamp:type_name -> google.fhir.stu3.proto.DateTime
	210,  // 1548: google.fhir.stu3.proto.Shareablevalueset.Expansion.total:type_name -> google.fhir.stu3.proto.Integer
	210,  // 1549: google.fhir.stu3.proto.Shareablevalueset.Expansion.offset:type_name -> google.fhir.stu3.proto.Integer
	168,  // 1550: google.fhir.stu3.proto.Shareablevalueset.Expansion.parameter:type_name -> google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter
	169,  // 1551: google.fhir.stu3.proto.Shareablevalueset.Expansion.contains:type_name -> google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains
	200,  // 1552: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1553: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1554: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	190,  // 1555: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.system:type_name -> google.fhir.stu3.proto.Uri
	200,  // 1556: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.version:type_name -> google.fhir.stu3.proto.String
	165,  // 1557: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.concept:type_name -> google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference
	166,  // 1558: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.filter:type_name -> google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.Filter
	190,  // 1559: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.value_set:type_name -> google.fhir.stu3.proto.Uri
	200,  // 1560: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1561: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1562: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	244,  // 1563: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.code:type_name -> google.fhir.stu3.proto.Code
	200,  // 1564: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.display:type_name -> google.fhir.stu3.proto.String
	167,  // 1565: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.designation:type_name -> google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.Designation
	200,  // 1566: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.Filter.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1567: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.Filter.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1568: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.Filter.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	244,  // 1569: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.Filter.property:type_name -> google.fhir.stu3.proto.Code
	261,  // 1570: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.Filter.op:type_name -> google.fhir.stu3.proto.FilterOperatorCode
	244,  // 1571: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.Filter.value:type_name -> google.fhir.stu3.proto.Code
	200,  // 1572: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.Designation.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1573: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.Designation.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1574: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.Designation.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	191,  // 1575: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.Designation.language:type_name -> google.fhir.stu3.proto.LanguageCode
	207,  // 1576: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.Designation.use:type_name -> google.fhir.stu3.proto.Coding
	200,  // 1577: google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.Designation.value:type_name -> google.fhir.stu3.proto.String
	200,  // 1578: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1579: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1580: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	200,  // 1581: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.name:type_name -> google.fhir.stu3.proto.String
	170,  // 1582: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.value:type_name -> google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.Value
	200,  // 1583: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1584: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1585: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	190,  // 1586: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.system:type_name -> google.fhir.stu3.proto.Uri
	211,  // 1587: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.abstract:type_name -> google.fhir.stu3.proto.Boolean
	211,  // 1588: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.inactive:type_name -> google.fhir.stu3.proto.Boolean
	200,  // 1589: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.version:type_name -> google.fhir.stu3.proto.String
	244,  // 1590: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.code:type_name -> google.fhir.stu3.proto.Code
	200,  // 1591: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.display:type_name -> google.fhir.stu3.proto.String
	167,  // 1592: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.designation:type_name -> google.fhir.stu3.proto.Shareablevalueset.Compose.ConceptSet.ConceptReference.Designation
	169,  // 1593: google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains.contains:type_name -> google.fhir.stu3.proto.Shareablevalueset.Expansion.Contains
	200,  // 1594: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.Value.string_value:type_name -> google.fhir.stu3.proto.String
	211,  // 1595: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.Value.boolean:type_name -> google.fhir.stu3.proto.Boolean
	210,  // 1596: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.Value.integer:type_name -> google.fhir.stu3.proto.Integer
	223,  // 1597: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.Value.decimal:type_name -> google.fhir.stu3.proto.Decimal
	190,  // 1598: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.Value.uri:type_name -> google.fhir.stu3.proto.Uri
	244,  // 1599: google.fhir.stu3.proto.Shareablevalueset.Expansion.Parameter.Value.code:type_name -> google.fhir.stu3.proto.Code
	202,  // 1600: google.fhir.stu3.proto.Triglyceride.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1601: google.fhir.stu3.proto.Triglyceride.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1602: google.fhir.stu3.proto.Triglyceride.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1603: google.fhir.stu3.proto.Triglyceride.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1604: google.fhir.stu3.proto.Triglyceride.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1605: google.fhir.stu3.proto.Triglyceride.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1606: google.fhir.stu3.proto.Triglyceride.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	200,  // 1607: google.fhir.stu3.proto.Triglyceride.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1608: google.fhir.stu3.proto.Triglyceride.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1609: google.fhir.stu3.proto.Triglyceride.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1610: google.fhir.stu3.proto.Triglyceride.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1611: google.fhir.stu3.proto.Triglyceride.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	175,  // 1612: google.fhir.stu3.proto.Triglyceride.Component.value:type_name -> google.fhir.stu3.proto.Triglyceride.Component.Value
	198,  // 1613: google.fhir.stu3.proto.Triglyceride.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1614: google.fhir.stu3.proto.Triglyceride.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	173,  // 1615: google.fhir.stu3.proto.Triglyceride.Component.reference_range:type_name -> google.fhir.stu3.proto.Triglyceride.ReferenceRange
	232,  // 1616: google.fhir.stu3.proto.Triglyceride.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	198,  // 1617: google.fhir.stu3.proto.Triglyceride.Component.Value.codeable_concept:type_name -> google.fhir.stu3.proto.CodeableConcept
	200,  // 1618: google.fhir.stu3.proto.Triglyceride.Component.Value.string_value:type_name -> google.fhir.stu3.proto.String
	234,  // 1619: google.fhir.stu3.proto.Triglyceride.Component.Value.range:type_name -> google.fhir.stu3.proto.Range
	236,  // 1620: google.fhir.stu3.proto.Triglyceride.Component.Value.ratio:type_name -> google.fhir.stu3.proto.Ratio
	237,  // 1621: google.fhir.stu3.proto.Triglyceride.Component.Value.sampled_data:type_name -> google.fhir.stu3.proto.SampledData
	205,  // 1622: google.fhir.stu3.proto.Triglyceride.Component.Value.attachment:type_name -> google.fhir.stu3.proto.Attachment
	238,  // 1623: google.fhir.stu3.proto.Triglyceride.Component.Value.time:type_name -> google.fhir.stu3.proto.Time
	202,  // 1624: google.fhir.stu3.proto.Triglyceride.Component.Value.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1625: google.fhir.stu3.proto.Triglyceride.Component.Value.period:type_name -> google.fhir.stu3.proto.Period
	202,  // 1626: google.fhir.stu3.proto.Vitalsigns.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1627: google.fhir.stu3.proto.Vitalsigns.Effective.period:type_name -> google.fhir.stu3.proto.Period
	232,  // 1628: google.fhir.stu3.proto.Vitalsigns.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1629: google.fhir.stu3.proto.Vitalsigns.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1630: google.fhir.stu3.proto.Vitalsigns.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1631: google.fhir.stu3.proto.Vitalsigns.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1632: google.fhir.stu3.proto.Vitalsigns.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 1633: google.fhir.stu3.proto.Vitalsigns.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 1634: google.fhir.stu3.proto.Vitalsigns.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1635: google.fhir.stu3.proto.Vitalsigns.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 1636: google.fhir.stu3.proto.Vitalsigns.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 1637: google.fhir.stu3.proto.Vitalsigns.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1638: google.fhir.stu3.proto.Vitalsigns.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1639: google.fhir.stu3.proto.Vitalsigns.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1640: google.fhir.stu3.proto.Vitalsigns.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 1641: google.fhir.stu3.proto.Vitalsigns.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 1642: google.fhir.stu3.proto.Vitalsigns.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1643: google.fhir.stu3.proto.Vitalsigns.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1644: google.fhir.stu3.proto.Vitalsigns.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1645: google.fhir.stu3.proto.Vitalsigns.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1646: google.fhir.stu3.proto.Vitalsigns.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	181,  // 1647: google.fhir.stu3.proto.Vitalsigns.Component.value:type_name -> google.fhir.stu3.proto.Vitalsigns.Component.Value
	198,  // 1648: google.fhir.stu3.proto.Vitalsigns.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1649: google.fhir.stu3.proto.Vitalsigns.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	178,  // 1650: google.fhir.stu3.proto.Vitalsigns.Component.reference_range:type_name -> google.fhir.stu3.proto.Vitalsigns.ReferenceRange
	232,  // 1651: google.fhir.stu3.proto.Vitalsigns.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	200,  // 1652: google.fhir.stu3.proto.Vitalspanel.CodeableConceptForCode.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1653: google.fhir.stu3.proto.Vitalspanel.CodeableConceptForCode.extension:type_name -> google.fhir.stu3.proto.Extension
	207,  // 1654: google.fhir.stu3.proto.Vitalspanel.CodeableConceptForCode.coding:type_name -> google.fhir.stu3.proto.Coding
	200,  // 1655: google.fhir.stu3.proto.Vitalspanel.CodeableConceptForCode.text:type_name -> google.fhir.stu3.proto.String
	230,  // 1656: google.fhir.stu3.proto.Vitalspanel.CodeableConceptForCode.body_weight_code:type_name -> google.fhir.stu3.proto.CodingWithFixedCode
	202,  // 1657: google.fhir.stu3.proto.Vitalspanel.Effective.date_time:type_name -> google.fhir.stu3.proto.DateTime
	231,  // 1658: google.fhir.stu3.proto.Vitalspanel.Effective.period:type_name -> google.fhir.stu3.proto.Period
	200,  // 1659: google.fhir.stu3.proto.Vitalspanel.ReferenceRange.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1660: google.fhir.stu3.proto.Vitalspanel.ReferenceRange.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1661: google.fhir.stu3.proto.Vitalspanel.ReferenceRange.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	233,  // 1662: google.fhir.stu3.proto.Vitalspanel.ReferenceRange.low:type_name -> google.fhir.stu3.proto.SimpleQuantity
	233,  // 1663: google.fhir.stu3.proto.Vitalspanel.ReferenceRange.high:type_name -> google.fhir.stu3.proto.SimpleQuantity
	198,  // 1664: google.fhir.stu3.proto.Vitalspanel.ReferenceRange.type:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1665: google.fhir.stu3.proto.Vitalspanel.ReferenceRange.applies_to:type_name -> google.fhir.stu3.proto.CodeableConcept
	234,  // 1666: google.fhir.stu3.proto.Vitalspanel.ReferenceRange.age:type_name -> google.fhir.stu3.proto.Range
	200,  // 1667: google.fhir.stu3.proto.Vitalspanel.ReferenceRange.text:type_name -> google.fhir.stu3.proto.String
	200,  // 1668: google.fhir.stu3.proto.Vitalspanel.Related.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1669: google.fhir.stu3.proto.Vitalspanel.Related.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1670: google.fhir.stu3.proto.Vitalspanel.Related.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	235,  // 1671: google.fhir.stu3.proto.Vitalspanel.Related.type:type_name -> google.fhir.stu3.proto.ObservationRelationshipTypeCode
	196,  // 1672: google.fhir.stu3.proto.Vitalspanel.Related.target:type_name -> google.fhir.stu3.proto.Reference
	200,  // 1673: google.fhir.stu3.proto.Vitalspanel.Component.id:type_name -> google.fhir.stu3.proto.String
	194,  // 1674: google.fhir.stu3.proto.Vitalspanel.Component.extension:type_name -> google.fhir.stu3.proto.Extension
	194,  // 1675: google.fhir.stu3.proto.Vitalspanel.Component.modifier_extension:type_name -> google.fhir.stu3.proto.Extension
	198,  // 1676: google.fhir.stu3.proto.Vitalspanel.Component.code:type_name -> google.fhir.stu3.proto.CodeableConcept
	187,  // 1677: google.fhir.stu3.proto.Vitalspanel.Component.value:type_name -> google.fhir.stu3.proto.Vitalspanel.Component.Value
	198,  // 1678: google.fhir.stu3.proto.Vitalspanel.Component.data_absent_reason:type_name -> google.fhir.stu3.proto.CodeableConcept
	198,  // 1679: google.fhir.stu3.proto.Vitalspanel.Component.interpretation:type_name -> google.fhir.stu3.proto.CodeableConcept
	184,  // 1680: google.fhir.stu3.proto.Vitalspanel.Component.reference_range:type_name -> google.fhir.stu3.proto.Vitalspanel.ReferenceRange
	232,  // 1681: google.fhir.stu3.proto.Vitalspanel.Component.Value.quantity:type_name -> google.fhir.stu3.proto.Quantity
	1682, // [1682:1682] is the sub-list for method output_type
	1682, // [1682:1682] is the sub-list for method input_type
	1682, // [1682:1682] is the sub-list for extension type_name
	1682, // [1682:1682] is the sub-list for extension extendee
	0,    // [0:1682] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_stu3_profiles_proto_init() }
func file_proto_google_fhir_proto_stu3_profiles_proto_init() {
	if File_proto_google_fhir_proto_stu3_profiles_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bmi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyheight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodylength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodytemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyweight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cholesterol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clinicaldocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devicemetricobservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticreportGenetics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilymemberhistoryGenetic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdlCholesterol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headcircum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartrate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hlaresult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LdlCholesterol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LipidProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationGenetics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oxygensat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedurerequestGenetics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resprate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablecodesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triglyceride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalsigns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalspanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bmi_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bmi_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bmi_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bmi_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bmi_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bmi_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bmi_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyheight_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyheight_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyheight_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyheight_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyheight_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyheight_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyheight_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodylength_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodylength_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodylength_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodylength_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodylength_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodylength_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodylength_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodytemp_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodytemp_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodytemp_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodytemp_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodytemp_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodytemp_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodytemp_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyweight_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyweight_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyweight_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyweight_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyweight_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyweight_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bodyweight_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bp_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bp_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bp_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bp_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bp_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cholesterol_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cholesterol_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cholesterol_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cholesterol_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cholesterol_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clinicaldocument_Attester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clinicaldocument_RelatesTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clinicaldocument_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clinicaldocument_Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clinicaldocument_RelatesTo_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devicemetricobservation_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devicemetricobservation_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devicemetricobservation_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devicemetricobservation_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devicemetricobservation_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devicemetricobservation_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticreportGenetics_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticreportGenetics_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticreportGenetics_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_Base); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_TypeRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_DefaultValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_MinValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_MaxValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_ElementDefinitionBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_Example_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementdefinitionDe_ElementDefinitionBinding_ValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilymemberhistoryGenetic_Born); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilymemberhistoryGenetic_AgeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilymemberhistoryGenetic_Deceased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilymemberhistoryGenetic_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilymemberhistoryGenetic_Condition_Onset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdlCholesterol_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdlCholesterol_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdlCholesterol_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdlCholesterol_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HdlCholesterol_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headcircum_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headcircum_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headcircum_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headcircum_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headcircum_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headcircum_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Headcircum_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartrate_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartrate_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartrate_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartrate_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartrate_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartrate_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartrate_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hlaresult_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hlaresult_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hlaresult_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LdlCholesterol_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LdlCholesterol_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LdlCholesterol_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LdlCholesterol_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LdlCholesterol_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LipidProfile_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LipidProfile_Performer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LipidProfile_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationGenetics_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationGenetics_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationGenetics_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationGenetics_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationGenetics_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationGenetics_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oxygensat_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oxygensat_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oxygensat_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oxygensat_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oxygensat_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oxygensat_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oxygensat_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedurerequestGenetics_Occurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedurerequestGenetics_AsNeeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcedurerequestGenetics_Requester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resprate_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resprate_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resprate_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resprate_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resprate_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resprate_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resprate_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablecodesystem_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablecodesystem_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablecodesystem_ConceptDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablecodesystem_ConceptDefinition_Designation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablecodesystem_ConceptDefinition_ConceptProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset_Compose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset_Expansion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset_Compose_ConceptSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset_Compose_ConceptSet_ConceptReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset_Compose_ConceptSet_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset_Compose_ConceptSet_ConceptReference_Designation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset_Expansion_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset_Expansion_Contains); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shareablevalueset_Expansion_Parameter_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triglyceride_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triglyceride_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triglyceride_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triglyceride_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triglyceride_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalsigns_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalsigns_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalsigns_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalsigns_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalsigns_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalsigns_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalspanel_CodeableConceptForCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalspanel_Effective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalspanel_ReferenceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalspanel_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalspanel_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitalspanel_Component_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Bmi_Effective_DateTime)(nil),
		(*Bmi_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*Bmi_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*Bmi_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*Bodyheight_Effective_DateTime)(nil),
		(*Bodyheight_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*Bodyheight_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*Bodyheight_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*Bodylength_Effective_DateTime)(nil),
		(*Bodylength_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*Bodylength_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*Bodylength_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*Bodytemp_Effective_DateTime)(nil),
		(*Bodytemp_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*Bodytemp_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*Bodytemp_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*Bodyweight_Effective_DateTime)(nil),
		(*Bodyweight_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*Bodyweight_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*Bodyweight_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*Bp_Effective_DateTime)(nil),
		(*Bp_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[68].OneofWrappers = []interface{}{
		(*Cholesterol_Effective_DateTime)(nil),
		(*Cholesterol_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[69].OneofWrappers = []interface{}{
		(*Cholesterol_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*Cholesterol_Component_Value_Quantity)(nil),
		(*Cholesterol_Component_Value_CodeableConcept)(nil),
		(*Cholesterol_Component_Value_StringValue)(nil),
		(*Cholesterol_Component_Value_Range)(nil),
		(*Cholesterol_Component_Value_Ratio)(nil),
		(*Cholesterol_Component_Value_SampledData)(nil),
		(*Cholesterol_Component_Value_Attachment)(nil),
		(*Cholesterol_Component_Value_Time)(nil),
		(*Cholesterol_Component_Value_DateTime)(nil),
		(*Cholesterol_Component_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*Clinicaldocument_RelatesTo_Target_Identifier)(nil),
		(*Clinicaldocument_RelatesTo_Target_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[78].OneofWrappers = []interface{}{
		(*Devicemetricobservation_Effective_DateTime)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[79].OneofWrappers = []interface{}{
		(*Devicemetricobservation_Value_Quantity)(nil),
		(*Devicemetricobservation_Value_CodeableConcept)(nil),
		(*Devicemetricobservation_Value_StringValue)(nil),
		(*Devicemetricobservation_Value_Range)(nil),
		(*Devicemetricobservation_Value_Ratio)(nil),
		(*Devicemetricobservation_Value_SampledData)(nil),
		(*Devicemetricobservation_Value_Attachment)(nil),
		(*Devicemetricobservation_Value_Time)(nil),
		(*Devicemetricobservation_Value_DateTime)(nil),
		(*Devicemetricobservation_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[83].OneofWrappers = []interface{}{
		(*Devicemetricobservation_Component_Value_Quantity)(nil),
		(*Devicemetricobservation_Component_Value_CodeableConcept)(nil),
		(*Devicemetricobservation_Component_Value_StringValue)(nil),
		(*Devicemetricobservation_Component_Value_Range)(nil),
		(*Devicemetricobservation_Component_Value_Ratio)(nil),
		(*Devicemetricobservation_Component_Value_SampledData)(nil),
		(*Devicemetricobservation_Component_Value_Attachment)(nil),
		(*Devicemetricobservation_Component_Value_Time)(nil),
		(*Devicemetricobservation_Component_Value_DateTime)(nil),
		(*Devicemetricobservation_Component_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[84].OneofWrappers = []interface{}{
		(*DiagnosticreportGenetics_Effective_DateTime)(nil),
		(*DiagnosticreportGenetics_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[89].OneofWrappers = []interface{}{
		(*ElementdefinitionDe_DefaultValue_Base64Binary)(nil),
		(*ElementdefinitionDe_DefaultValue_Boolean)(nil),
		(*ElementdefinitionDe_DefaultValue_Code)(nil),
		(*ElementdefinitionDe_DefaultValue_Date)(nil),
		(*ElementdefinitionDe_DefaultValue_DateTime)(nil),
		(*ElementdefinitionDe_DefaultValue_Decimal)(nil),
		(*ElementdefinitionDe_DefaultValue_Id)(nil),
		(*ElementdefinitionDe_DefaultValue_Instant)(nil),
		(*ElementdefinitionDe_DefaultValue_Integer)(nil),
		(*ElementdefinitionDe_DefaultValue_Markdown)(nil),
		(*ElementdefinitionDe_DefaultValue_Oid)(nil),
		(*ElementdefinitionDe_DefaultValue_PositiveInt)(nil),
		(*ElementdefinitionDe_DefaultValue_StringValue)(nil),
		(*ElementdefinitionDe_DefaultValue_Time)(nil),
		(*ElementdefinitionDe_DefaultValue_UnsignedInt)(nil),
		(*ElementdefinitionDe_DefaultValue_Uri)(nil),
		(*ElementdefinitionDe_DefaultValue_Address)(nil),
		(*ElementdefinitionDe_DefaultValue_Age)(nil),
		(*ElementdefinitionDe_DefaultValue_Annotation)(nil),
		(*ElementdefinitionDe_DefaultValue_Attachment)(nil),
		(*ElementdefinitionDe_DefaultValue_CodeableConcept)(nil),
		(*ElementdefinitionDe_DefaultValue_Coding)(nil),
		(*ElementdefinitionDe_DefaultValue_ContactPoint)(nil),
		(*ElementdefinitionDe_DefaultValue_Count)(nil),
		(*ElementdefinitionDe_DefaultValue_Distance)(nil),
		(*ElementdefinitionDe_DefaultValue_Duration)(nil),
		(*ElementdefinitionDe_DefaultValue_HumanName)(nil),
		(*ElementdefinitionDe_DefaultValue_Identifier)(nil),
		(*ElementdefinitionDe_DefaultValue_Money)(nil),
		(*ElementdefinitionDe_DefaultValue_Period)(nil),
		(*ElementdefinitionDe_DefaultValue_Quantity)(nil),
		(*ElementdefinitionDe_DefaultValue_Range)(nil),
		(*ElementdefinitionDe_DefaultValue_Ratio)(nil),
		(*ElementdefinitionDe_DefaultValue_Reference)(nil),
		(*ElementdefinitionDe_DefaultValue_SampledData)(nil),
		(*ElementdefinitionDe_DefaultValue_Signature)(nil),
		(*ElementdefinitionDe_DefaultValue_Timing)(nil),
		(*ElementdefinitionDe_DefaultValue_Meta)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[91].OneofWrappers = []interface{}{
		(*ElementdefinitionDe_MinValue_Date)(nil),
		(*ElementdefinitionDe_MinValue_DateTime)(nil),
		(*ElementdefinitionDe_MinValue_Instant)(nil),
		(*ElementdefinitionDe_MinValue_Time)(nil),
		(*ElementdefinitionDe_MinValue_Decimal)(nil),
		(*ElementdefinitionDe_MinValue_Integer)(nil),
		(*ElementdefinitionDe_MinValue_PositiveInt)(nil),
		(*ElementdefinitionDe_MinValue_UnsignedInt)(nil),
		(*ElementdefinitionDe_MinValue_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*ElementdefinitionDe_MaxValue_Date)(nil),
		(*ElementdefinitionDe_MaxValue_DateTime)(nil),
		(*ElementdefinitionDe_MaxValue_Instant)(nil),
		(*ElementdefinitionDe_MaxValue_Time)(nil),
		(*ElementdefinitionDe_MaxValue_Decimal)(nil),
		(*ElementdefinitionDe_MaxValue_Integer)(nil),
		(*ElementdefinitionDe_MaxValue_PositiveInt)(nil),
		(*ElementdefinitionDe_MaxValue_UnsignedInt)(nil),
		(*ElementdefinitionDe_MaxValue_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[96].OneofWrappers = []interface{}{
		(*ElementdefinitionDe_Example_Value_Base64Binary)(nil),
		(*ElementdefinitionDe_Example_Value_Boolean)(nil),
		(*ElementdefinitionDe_Example_Value_Code)(nil),
		(*ElementdefinitionDe_Example_Value_Date)(nil),
		(*ElementdefinitionDe_Example_Value_DateTime)(nil),
		(*ElementdefinitionDe_Example_Value_Decimal)(nil),
		(*ElementdefinitionDe_Example_Value_Id)(nil),
		(*ElementdefinitionDe_Example_Value_Instant)(nil),
		(*ElementdefinitionDe_Example_Value_Integer)(nil),
		(*ElementdefinitionDe_Example_Value_Markdown)(nil),
		(*ElementdefinitionDe_Example_Value_Oid)(nil),
		(*ElementdefinitionDe_Example_Value_PositiveInt)(nil),
		(*ElementdefinitionDe_Example_Value_StringValue)(nil),
		(*ElementdefinitionDe_Example_Value_Time)(nil),
		(*ElementdefinitionDe_Example_Value_UnsignedInt)(nil),
		(*ElementdefinitionDe_Example_Value_Uri)(nil),
		(*ElementdefinitionDe_Example_Value_Address)(nil),
		(*ElementdefinitionDe_Example_Value_Age)(nil),
		(*ElementdefinitionDe_Example_Value_Annotation)(nil),
		(*ElementdefinitionDe_Example_Value_Attachment)(nil),
		(*ElementdefinitionDe_Example_Value_CodeableConcept)(nil),
		(*ElementdefinitionDe_Example_Value_Coding)(nil),
		(*ElementdefinitionDe_Example_Value_ContactPoint)(nil),
		(*ElementdefinitionDe_Example_Value_Count)(nil),
		(*ElementdefinitionDe_Example_Value_Distance)(nil),
		(*ElementdefinitionDe_Example_Value_Duration)(nil),
		(*ElementdefinitionDe_Example_Value_HumanName)(nil),
		(*ElementdefinitionDe_Example_Value_Identifier)(nil),
		(*ElementdefinitionDe_Example_Value_Money)(nil),
		(*ElementdefinitionDe_Example_Value_Period)(nil),
		(*ElementdefinitionDe_Example_Value_Quantity)(nil),
		(*ElementdefinitionDe_Example_Value_Range)(nil),
		(*ElementdefinitionDe_Example_Value_Ratio)(nil),
		(*ElementdefinitionDe_Example_Value_Reference)(nil),
		(*ElementdefinitionDe_Example_Value_SampledData)(nil),
		(*ElementdefinitionDe_Example_Value_Signature)(nil),
		(*ElementdefinitionDe_Example_Value_Timing)(nil),
		(*ElementdefinitionDe_Example_Value_Meta)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[97].OneofWrappers = []interface{}{
		(*ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Uri)(nil),
		(*ElementdefinitionDe_ElementDefinitionBinding_ValueSet_Reference)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[98].OneofWrappers = []interface{}{
		(*FamilymemberhistoryGenetic_Born_Period)(nil),
		(*FamilymemberhistoryGenetic_Born_Date)(nil),
		(*FamilymemberhistoryGenetic_Born_StringValue)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[99].OneofWrappers = []interface{}{
		(*FamilymemberhistoryGenetic_AgeType_AgeValue)(nil),
		(*FamilymemberhistoryGenetic_AgeType_Range)(nil),
		(*FamilymemberhistoryGenetic_AgeType_StringValue)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[100].OneofWrappers = []interface{}{
		(*FamilymemberhistoryGenetic_Deceased_Boolean)(nil),
		(*FamilymemberhistoryGenetic_Deceased_Age)(nil),
		(*FamilymemberhistoryGenetic_Deceased_Range)(nil),
		(*FamilymemberhistoryGenetic_Deceased_Date)(nil),
		(*FamilymemberhistoryGenetic_Deceased_StringValue)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[102].OneofWrappers = []interface{}{
		(*FamilymemberhistoryGenetic_Condition_Onset_Age)(nil),
		(*FamilymemberhistoryGenetic_Condition_Onset_Range)(nil),
		(*FamilymemberhistoryGenetic_Condition_Onset_Period)(nil),
		(*FamilymemberhistoryGenetic_Condition_Onset_StringValue)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[103].OneofWrappers = []interface{}{
		(*HdlCholesterol_Effective_DateTime)(nil),
		(*HdlCholesterol_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[104].OneofWrappers = []interface{}{
		(*HdlCholesterol_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[107].OneofWrappers = []interface{}{
		(*HdlCholesterol_Component_Value_Quantity)(nil),
		(*HdlCholesterol_Component_Value_CodeableConcept)(nil),
		(*HdlCholesterol_Component_Value_StringValue)(nil),
		(*HdlCholesterol_Component_Value_Range)(nil),
		(*HdlCholesterol_Component_Value_Ratio)(nil),
		(*HdlCholesterol_Component_Value_SampledData)(nil),
		(*HdlCholesterol_Component_Value_Attachment)(nil),
		(*HdlCholesterol_Component_Value_Time)(nil),
		(*HdlCholesterol_Component_Value_DateTime)(nil),
		(*HdlCholesterol_Component_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[109].OneofWrappers = []interface{}{
		(*Headcircum_Effective_DateTime)(nil),
		(*Headcircum_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[110].OneofWrappers = []interface{}{
		(*Headcircum_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[114].OneofWrappers = []interface{}{
		(*Headcircum_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[116].OneofWrappers = []interface{}{
		(*Heartrate_Effective_DateTime)(nil),
		(*Heartrate_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[117].OneofWrappers = []interface{}{
		(*Heartrate_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[121].OneofWrappers = []interface{}{
		(*Heartrate_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[122].OneofWrappers = []interface{}{
		(*Hlaresult_Effective_DateTime)(nil),
		(*Hlaresult_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[125].OneofWrappers = []interface{}{
		(*LdlCholesterol_Effective_DateTime)(nil),
		(*LdlCholesterol_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[126].OneofWrappers = []interface{}{
		(*LdlCholesterol_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[129].OneofWrappers = []interface{}{
		(*LdlCholesterol_Component_Value_Quantity)(nil),
		(*LdlCholesterol_Component_Value_CodeableConcept)(nil),
		(*LdlCholesterol_Component_Value_StringValue)(nil),
		(*LdlCholesterol_Component_Value_Range)(nil),
		(*LdlCholesterol_Component_Value_Ratio)(nil),
		(*LdlCholesterol_Component_Value_SampledData)(nil),
		(*LdlCholesterol_Component_Value_Attachment)(nil),
		(*LdlCholesterol_Component_Value_Time)(nil),
		(*LdlCholesterol_Component_Value_DateTime)(nil),
		(*LdlCholesterol_Component_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[130].OneofWrappers = []interface{}{
		(*LipidProfile_Effective_DateTime)(nil),
		(*LipidProfile_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[133].OneofWrappers = []interface{}{
		(*ObservationGenetics_Effective_DateTime)(nil),
		(*ObservationGenetics_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[134].OneofWrappers = []interface{}{
		(*ObservationGenetics_Value_Quantity)(nil),
		(*ObservationGenetics_Value_CodeableConcept)(nil),
		(*ObservationGenetics_Value_StringValue)(nil),
		(*ObservationGenetics_Value_Boolean)(nil),
		(*ObservationGenetics_Value_Range)(nil),
		(*ObservationGenetics_Value_Ratio)(nil),
		(*ObservationGenetics_Value_SampledData)(nil),
		(*ObservationGenetics_Value_Attachment)(nil),
		(*ObservationGenetics_Value_Time)(nil),
		(*ObservationGenetics_Value_DateTime)(nil),
		(*ObservationGenetics_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[138].OneofWrappers = []interface{}{
		(*ObservationGenetics_Component_Value_Quantity)(nil),
		(*ObservationGenetics_Component_Value_CodeableConcept)(nil),
		(*ObservationGenetics_Component_Value_StringValue)(nil),
		(*ObservationGenetics_Component_Value_Range)(nil),
		(*ObservationGenetics_Component_Value_Ratio)(nil),
		(*ObservationGenetics_Component_Value_SampledData)(nil),
		(*ObservationGenetics_Component_Value_Attachment)(nil),
		(*ObservationGenetics_Component_Value_Time)(nil),
		(*ObservationGenetics_Component_Value_DateTime)(nil),
		(*ObservationGenetics_Component_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[140].OneofWrappers = []interface{}{
		(*Oxygensat_Effective_DateTime)(nil),
		(*Oxygensat_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[141].OneofWrappers = []interface{}{
		(*Oxygensat_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[145].OneofWrappers = []interface{}{
		(*Oxygensat_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[146].OneofWrappers = []interface{}{
		(*ProcedurerequestGenetics_Occurrence_DateTime)(nil),
		(*ProcedurerequestGenetics_Occurrence_Period)(nil),
		(*ProcedurerequestGenetics_Occurrence_Timing)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[147].OneofWrappers = []interface{}{
		(*ProcedurerequestGenetics_AsNeeded_Boolean)(nil),
		(*ProcedurerequestGenetics_AsNeeded_CodeableConcept)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[150].OneofWrappers = []interface{}{
		(*Resprate_Effective_DateTime)(nil),
		(*Resprate_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[151].OneofWrappers = []interface{}{
		(*Resprate_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[155].OneofWrappers = []interface{}{
		(*Resprate_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[161].OneofWrappers = []interface{}{
		(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Code)(nil),
		(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Coding)(nil),
		(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_StringValue)(nil),
		(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Integer)(nil),
		(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_Boolean)(nil),
		(*Shareablecodesystem_ConceptDefinition_ConceptProperty_Value_DateTime)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[170].OneofWrappers = []interface{}{
		(*Shareablevalueset_Expansion_Parameter_Value_StringValue)(nil),
		(*Shareablevalueset_Expansion_Parameter_Value_Boolean)(nil),
		(*Shareablevalueset_Expansion_Parameter_Value_Integer)(nil),
		(*Shareablevalueset_Expansion_Parameter_Value_Decimal)(nil),
		(*Shareablevalueset_Expansion_Parameter_Value_Uri)(nil),
		(*Shareablevalueset_Expansion_Parameter_Value_Code)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[171].OneofWrappers = []interface{}{
		(*Triglyceride_Effective_DateTime)(nil),
		(*Triglyceride_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[172].OneofWrappers = []interface{}{
		(*Triglyceride_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[175].OneofWrappers = []interface{}{
		(*Triglyceride_Component_Value_Quantity)(nil),
		(*Triglyceride_Component_Value_CodeableConcept)(nil),
		(*Triglyceride_Component_Value_StringValue)(nil),
		(*Triglyceride_Component_Value_Range)(nil),
		(*Triglyceride_Component_Value_Ratio)(nil),
		(*Triglyceride_Component_Value_SampledData)(nil),
		(*Triglyceride_Component_Value_Attachment)(nil),
		(*Triglyceride_Component_Value_Time)(nil),
		(*Triglyceride_Component_Value_DateTime)(nil),
		(*Triglyceride_Component_Value_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[176].OneofWrappers = []interface{}{
		(*Vitalsigns_Effective_DateTime)(nil),
		(*Vitalsigns_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[177].OneofWrappers = []interface{}{
		(*Vitalsigns_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[181].OneofWrappers = []interface{}{
		(*Vitalsigns_Component_Value_Quantity)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[183].OneofWrappers = []interface{}{
		(*Vitalspanel_Effective_DateTime)(nil),
		(*Vitalspanel_Effective_Period)(nil),
	}
	file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes[187].OneofWrappers = []interface{}{
		(*Vitalspanel_Component_Value_Quantity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_stu3_profiles_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   188,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_stu3_profiles_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_stu3_profiles_proto_depIdxs,
		MessageInfos:      file_proto_google_fhir_proto_stu3_profiles_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_stu3_profiles_proto = out.File
	file_proto_google_fhir_proto_stu3_profiles_proto_rawDesc = nil
	file_proto_google_fhir_proto_stu3_profiles_proto_goTypes = nil
	file_proto_google_fhir_proto_stu3_profiles_proto_depIdxs = nil
}
